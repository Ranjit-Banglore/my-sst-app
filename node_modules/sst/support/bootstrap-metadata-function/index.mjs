import { createRequire as topLevelCreateRequire } from 'module';const require = topLevelCreateRequire(import.meta.url);
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw Error('Dynamic require of "' + x + '" is not supported');
});
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require2() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// ../../node_modules/.pnpm/@smithy+types@3.7.2/node_modules/@smithy/types/dist-cjs/index.js
var require_dist_cjs = __commonJS({
  "../../node_modules/.pnpm/@smithy+types@3.7.2/node_modules/@smithy/types/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      AlgorithmId: () => AlgorithmId,
      EndpointURLScheme: () => EndpointURLScheme,
      FieldPosition: () => FieldPosition,
      HttpApiKeyAuthLocation: () => HttpApiKeyAuthLocation2,
      HttpAuthLocation: () => HttpAuthLocation,
      IniSectionType: () => IniSectionType,
      RequestHandlerProtocol: () => RequestHandlerProtocol,
      SMITHY_CONTEXT_KEY: () => SMITHY_CONTEXT_KEY4,
      getDefaultClientConfiguration: () => getDefaultClientConfiguration,
      resolveDefaultRuntimeConfig: () => resolveDefaultRuntimeConfig
    });
    module.exports = __toCommonJS2(src_exports);
    var HttpAuthLocation = /* @__PURE__ */ ((HttpAuthLocation2) => {
      HttpAuthLocation2["HEADER"] = "header";
      HttpAuthLocation2["QUERY"] = "query";
      return HttpAuthLocation2;
    })(HttpAuthLocation || {});
    var HttpApiKeyAuthLocation2 = /* @__PURE__ */ ((HttpApiKeyAuthLocation22) => {
      HttpApiKeyAuthLocation22["HEADER"] = "header";
      HttpApiKeyAuthLocation22["QUERY"] = "query";
      return HttpApiKeyAuthLocation22;
    })(HttpApiKeyAuthLocation2 || {});
    var EndpointURLScheme = /* @__PURE__ */ ((EndpointURLScheme2) => {
      EndpointURLScheme2["HTTP"] = "http";
      EndpointURLScheme2["HTTPS"] = "https";
      return EndpointURLScheme2;
    })(EndpointURLScheme || {});
    var AlgorithmId = /* @__PURE__ */ ((AlgorithmId2) => {
      AlgorithmId2["MD5"] = "md5";
      AlgorithmId2["CRC32"] = "crc32";
      AlgorithmId2["CRC32C"] = "crc32c";
      AlgorithmId2["SHA1"] = "sha1";
      AlgorithmId2["SHA256"] = "sha256";
      return AlgorithmId2;
    })(AlgorithmId || {});
    var getChecksumConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      const checksumAlgorithms = [];
      if (runtimeConfig.sha256 !== void 0) {
        checksumAlgorithms.push({
          algorithmId: () => "sha256",
          checksumConstructor: () => runtimeConfig.sha256
        });
      }
      if (runtimeConfig.md5 != void 0) {
        checksumAlgorithms.push({
          algorithmId: () => "md5",
          checksumConstructor: () => runtimeConfig.md5
        });
      }
      return {
        _checksumAlgorithms: checksumAlgorithms,
        addChecksumAlgorithm(algo) {
          this._checksumAlgorithms.push(algo);
        },
        checksumAlgorithms() {
          return this._checksumAlgorithms;
        }
      };
    }, "getChecksumConfiguration");
    var resolveChecksumRuntimeConfig = /* @__PURE__ */ __name((clientConfig) => {
      const runtimeConfig = {};
      clientConfig.checksumAlgorithms().forEach((checksumAlgorithm) => {
        runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();
      });
      return runtimeConfig;
    }, "resolveChecksumRuntimeConfig");
    var getDefaultClientConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      return {
        ...getChecksumConfiguration(runtimeConfig)
      };
    }, "getDefaultClientConfiguration");
    var resolveDefaultRuntimeConfig = /* @__PURE__ */ __name((config) => {
      return {
        ...resolveChecksumRuntimeConfig(config)
      };
    }, "resolveDefaultRuntimeConfig");
    var FieldPosition = /* @__PURE__ */ ((FieldPosition2) => {
      FieldPosition2[FieldPosition2["HEADER"] = 0] = "HEADER";
      FieldPosition2[FieldPosition2["TRAILER"] = 1] = "TRAILER";
      return FieldPosition2;
    })(FieldPosition || {});
    var SMITHY_CONTEXT_KEY4 = "__smithy_context";
    var IniSectionType = /* @__PURE__ */ ((IniSectionType2) => {
      IniSectionType2["PROFILE"] = "profile";
      IniSectionType2["SSO_SESSION"] = "sso-session";
      IniSectionType2["SERVICES"] = "services";
      return IniSectionType2;
    })(IniSectionType || {});
    var RequestHandlerProtocol = /* @__PURE__ */ ((RequestHandlerProtocol2) => {
      RequestHandlerProtocol2["HTTP_0_9"] = "http/0.9";
      RequestHandlerProtocol2["HTTP_1_0"] = "http/1.0";
      RequestHandlerProtocol2["TDS_8_0"] = "tds/8.0";
      return RequestHandlerProtocol2;
    })(RequestHandlerProtocol || {});
  }
});

// ../../node_modules/.pnpm/@smithy+protocol-http@4.1.8/node_modules/@smithy/protocol-http/dist-cjs/index.js
var require_dist_cjs2 = __commonJS({
  "../../node_modules/.pnpm/@smithy+protocol-http@4.1.8/node_modules/@smithy/protocol-http/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      Field: () => Field,
      Fields: () => Fields,
      HttpRequest: () => HttpRequest7,
      HttpResponse: () => HttpResponse2,
      IHttpRequest: () => import_types5.HttpRequest,
      getHttpHandlerExtensionConfiguration: () => getHttpHandlerExtensionConfiguration,
      isValidHostname: () => isValidHostname,
      resolveHttpHandlerRuntimeConfig: () => resolveHttpHandlerRuntimeConfig
    });
    module.exports = __toCommonJS2(src_exports);
    var getHttpHandlerExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      let httpHandler = runtimeConfig.httpHandler;
      return {
        setHttpHandler(handler2) {
          httpHandler = handler2;
        },
        httpHandler() {
          return httpHandler;
        },
        updateHttpClientConfig(key, value) {
          httpHandler.updateHttpClientConfig(key, value);
        },
        httpHandlerConfigs() {
          return httpHandler.httpHandlerConfigs();
        }
      };
    }, "getHttpHandlerExtensionConfiguration");
    var resolveHttpHandlerRuntimeConfig = /* @__PURE__ */ __name((httpHandlerExtensionConfiguration) => {
      return {
        httpHandler: httpHandlerExtensionConfiguration.httpHandler()
      };
    }, "resolveHttpHandlerRuntimeConfig");
    var import_types5 = require_dist_cjs();
    var _Field = class _Field {
      constructor({ name, kind = import_types5.FieldPosition.HEADER, values = [] }) {
        this.name = name;
        this.kind = kind;
        this.values = values;
      }
      /**
       * Appends a value to the field.
       *
       * @param value The value to append.
       */
      add(value) {
        this.values.push(value);
      }
      /**
       * Overwrite existing field values.
       *
       * @param values The new field values.
       */
      set(values) {
        this.values = values;
      }
      /**
       * Remove all matching entries from list.
       *
       * @param value Value to remove.
       */
      remove(value) {
        this.values = this.values.filter((v) => v !== value);
      }
      /**
       * Get comma-delimited string.
       *
       * @returns String representation of {@link Field}.
       */
      toString() {
        return this.values.map((v) => v.includes(",") || v.includes(" ") ? `"${v}"` : v).join(", ");
      }
      /**
       * Get string values as a list
       *
       * @returns Values in {@link Field} as a list.
       */
      get() {
        return this.values;
      }
    };
    __name(_Field, "Field");
    var Field = _Field;
    var _Fields = class _Fields {
      constructor({ fields = [], encoding = "utf-8" }) {
        this.entries = {};
        fields.forEach(this.setField.bind(this));
        this.encoding = encoding;
      }
      /**
       * Set entry for a {@link Field} name. The `name`
       * attribute will be used to key the collection.
       *
       * @param field The {@link Field} to set.
       */
      setField(field) {
        this.entries[field.name.toLowerCase()] = field;
      }
      /**
       *  Retrieve {@link Field} entry by name.
       *
       * @param name The name of the {@link Field} entry
       *  to retrieve
       * @returns The {@link Field} if it exists.
       */
      getField(name) {
        return this.entries[name.toLowerCase()];
      }
      /**
       * Delete entry from collection.
       *
       * @param name Name of the entry to delete.
       */
      removeField(name) {
        delete this.entries[name.toLowerCase()];
      }
      /**
       * Helper function for retrieving specific types of fields.
       * Used to grab all headers or all trailers.
       *
       * @param kind {@link FieldPosition} of entries to retrieve.
       * @returns The {@link Field} entries with the specified
       *  {@link FieldPosition}.
       */
      getByType(kind) {
        return Object.values(this.entries).filter((field) => field.kind === kind);
      }
    };
    __name(_Fields, "Fields");
    var Fields = _Fields;
    var _HttpRequest = class _HttpRequest2 {
      constructor(options) {
        this.method = options.method || "GET";
        this.hostname = options.hostname || "localhost";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol ? options.protocol.slice(-1) !== ":" ? `${options.protocol}:` : options.protocol : "https:";
        this.path = options.path ? options.path.charAt(0) !== "/" ? `/${options.path}` : options.path : "/";
        this.username = options.username;
        this.password = options.password;
        this.fragment = options.fragment;
      }
      /**
       * Note: this does not deep-clone the body.
       */
      static clone(request) {
        const cloned = new _HttpRequest2({
          ...request,
          headers: { ...request.headers }
        });
        if (cloned.query) {
          cloned.query = cloneQuery(cloned.query);
        }
        return cloned;
      }
      /**
       * This method only actually asserts that request is the interface {@link IHttpRequest},
       * and not necessarily this concrete class. Left in place for API stability.
       *
       * Do not call instance methods on the input of this function, and
       * do not assume it has the HttpRequest prototype.
       */
      static isInstance(request) {
        if (!request) {
          return false;
        }
        const req = request;
        return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
      }
      /**
       * @deprecated use static HttpRequest.clone(request) instead. It's not safe to call
       * this method because {@link HttpRequest.isInstance} incorrectly
       * asserts that IHttpRequest (interface) objects are of type HttpRequest (class).
       */
      clone() {
        return _HttpRequest2.clone(this);
      }
    };
    __name(_HttpRequest, "HttpRequest");
    var HttpRequest7 = _HttpRequest;
    function cloneQuery(query) {
      return Object.keys(query).reduce((carry, paramName) => {
        const param = query[paramName];
        return {
          ...carry,
          [paramName]: Array.isArray(param) ? [...param] : param
        };
      }, {});
    }
    __name(cloneQuery, "cloneQuery");
    var _HttpResponse = class _HttpResponse {
      constructor(options) {
        this.statusCode = options.statusCode;
        this.reason = options.reason;
        this.headers = options.headers || {};
        this.body = options.body;
      }
      static isInstance(response) {
        if (!response)
          return false;
        const resp = response;
        return typeof resp.statusCode === "number" && typeof resp.headers === "object";
      }
    };
    __name(_HttpResponse, "HttpResponse");
    var HttpResponse2 = _HttpResponse;
    function isValidHostname(hostname) {
      const hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
      return hostPattern.test(hostname);
    }
    __name(isValidHostname, "isValidHostname");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-expect-continue@3.696.0/node_modules/@aws-sdk/middleware-expect-continue/dist-cjs/index.js
var require_dist_cjs3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-expect-continue@3.696.0/node_modules/@aws-sdk/middleware-expect-continue/dist-cjs/index.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      addExpectContinueMiddleware: () => addExpectContinueMiddleware,
      addExpectContinueMiddlewareOptions: () => addExpectContinueMiddlewareOptions,
      getAddExpectContinuePlugin: () => getAddExpectContinuePlugin
    });
    module.exports = __toCommonJS2(src_exports);
    var import_protocol_http8 = require_dist_cjs2();
    function addExpectContinueMiddleware(options) {
      return (next) => async (args) => {
        var _a, _b;
        const { request } = args;
        if (import_protocol_http8.HttpRequest.isInstance(request) && request.body && options.runtime === "node") {
          if (((_b = (_a = options.requestHandler) == null ? void 0 : _a.constructor) == null ? void 0 : _b.name) !== "FetchHttpHandler") {
            request.headers = {
              ...request.headers,
              Expect: "100-continue"
            };
          }
        }
        return next({
          ...args,
          request
        });
      };
    }
    __name(addExpectContinueMiddleware, "addExpectContinueMiddleware");
    var addExpectContinueMiddlewareOptions = {
      step: "build",
      tags: ["SET_EXPECT_HEADER", "EXPECT_HEADER"],
      name: "addExpectContinueMiddleware",
      override: true
    };
    var getAddExpectContinuePlugin = /* @__PURE__ */ __name((options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(addExpectContinueMiddleware(options), addExpectContinueMiddlewareOptions);
      }
    }), "getAddExpectContinuePlugin");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/client/emitWarningIfUnsupportedVersion.js
var state, emitWarningIfUnsupportedVersion;
var init_emitWarningIfUnsupportedVersion = __esm({
  "../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/client/emitWarningIfUnsupportedVersion.js"() {
    state = {
      warningEmitted: false
    };
    emitWarningIfUnsupportedVersion = (version2) => {
      if (version2 && !state.warningEmitted && parseInt(version2.substring(1, version2.indexOf("."))) < 18) {
        state.warningEmitted = true;
        process.emitWarning(`NodeDeprecationWarning: The AWS SDK for JavaScript (v3) will
no longer support Node.js 16.x on January 6, 2025.

To continue receiving updates to AWS services, bug fixes, and security
updates please upgrade to a supported Node.js LTS version.

More information can be found at: https://a.co/74kJMmI`);
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/client/setCredentialFeature.js
function setCredentialFeature(credentials, feature, value) {
  if (!credentials.$source) {
    credentials.$source = {};
  }
  credentials.$source[feature] = value;
  return credentials;
}
var init_setCredentialFeature = __esm({
  "../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/client/setCredentialFeature.js"() {
  }
});

// ../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/client/setFeature.js
function setFeature(context, feature, value) {
  if (!context.__aws_sdk_context) {
    context.__aws_sdk_context = {
      features: {}
    };
  } else if (!context.__aws_sdk_context.features) {
    context.__aws_sdk_context.features = {};
  }
  context.__aws_sdk_context.features[feature] = value;
}
var init_setFeature = __esm({
  "../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/client/setFeature.js"() {
  }
});

// ../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/client/index.js
var client_exports = {};
__export(client_exports, {
  emitWarningIfUnsupportedVersion: () => emitWarningIfUnsupportedVersion,
  setCredentialFeature: () => setCredentialFeature,
  setFeature: () => setFeature,
  state: () => state
});
var init_client = __esm({
  "../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/client/index.js"() {
    init_emitWarningIfUnsupportedVersion();
    init_setCredentialFeature();
    init_setFeature();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getDateHeader.js
var import_protocol_http, getDateHeader;
var init_getDateHeader = __esm({
  "../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getDateHeader.js"() {
    import_protocol_http = __toESM(require_dist_cjs2());
    getDateHeader = (response) => import_protocol_http.HttpResponse.isInstance(response) ? response.headers?.date ?? response.headers?.Date : void 0;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getSkewCorrectedDate.js
var getSkewCorrectedDate;
var init_getSkewCorrectedDate = __esm({
  "../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getSkewCorrectedDate.js"() {
    getSkewCorrectedDate = (systemClockOffset) => new Date(Date.now() + systemClockOffset);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/isClockSkewed.js
var isClockSkewed;
var init_isClockSkewed = __esm({
  "../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/isClockSkewed.js"() {
    init_getSkewCorrectedDate();
    isClockSkewed = (clockTime, systemClockOffset) => Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - clockTime) >= 3e5;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getUpdatedSystemClockOffset.js
var getUpdatedSystemClockOffset;
var init_getUpdatedSystemClockOffset = __esm({
  "../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getUpdatedSystemClockOffset.js"() {
    init_isClockSkewed();
    getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset) => {
      const clockTimeInMs = Date.parse(clockTime);
      if (isClockSkewed(clockTimeInMs, currentSystemClockOffset)) {
        return clockTimeInMs - Date.now();
      }
      return currentSystemClockOffset;
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/index.js
var init_utils = __esm({
  "../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/index.js"() {
    init_getDateHeader();
    init_getSkewCorrectedDate();
    init_getUpdatedSystemClockOffset();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/AwsSdkSigV4Signer.js
var import_protocol_http2, throwSigningPropertyError, validateSigningProperties, AwsSdkSigV4Signer, AWSSDKSigV4Signer;
var init_AwsSdkSigV4Signer = __esm({
  "../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/AwsSdkSigV4Signer.js"() {
    import_protocol_http2 = __toESM(require_dist_cjs2());
    init_utils();
    throwSigningPropertyError = (name, property) => {
      if (!property) {
        throw new Error(`Property \`${name}\` is not resolved for AWS SDK SigV4Auth`);
      }
      return property;
    };
    validateSigningProperties = async (signingProperties) => {
      const context = throwSigningPropertyError("context", signingProperties.context);
      const config = throwSigningPropertyError("config", signingProperties.config);
      const authScheme = context.endpointV2?.properties?.authSchemes?.[0];
      const signerFunction = throwSigningPropertyError("signer", config.signer);
      const signer = await signerFunction(authScheme);
      const signingRegion = signingProperties?.signingRegion;
      const signingRegionSet = signingProperties?.signingRegionSet;
      const signingName = signingProperties?.signingName;
      return {
        config,
        signer,
        signingRegion,
        signingRegionSet,
        signingName
      };
    };
    AwsSdkSigV4Signer = class {
      async sign(httpRequest, identity, signingProperties) {
        if (!import_protocol_http2.HttpRequest.isInstance(httpRequest)) {
          throw new Error("The request is not an instance of `HttpRequest` and cannot be signed");
        }
        const validatedProps = await validateSigningProperties(signingProperties);
        const { config, signer } = validatedProps;
        let { signingRegion, signingName } = validatedProps;
        const handlerExecutionContext = signingProperties.context;
        if (handlerExecutionContext?.authSchemes?.length ?? 0 > 1) {
          const [first, second] = handlerExecutionContext.authSchemes;
          if (first?.name === "sigv4a" && second?.name === "sigv4") {
            signingRegion = second?.signingRegion ?? signingRegion;
            signingName = second?.signingName ?? signingName;
          }
        }
        const signedRequest = await signer.sign(httpRequest, {
          signingDate: getSkewCorrectedDate(config.systemClockOffset),
          signingRegion,
          signingService: signingName
        });
        return signedRequest;
      }
      errorHandler(signingProperties) {
        return (error) => {
          const serverTime = error.ServerTime ?? getDateHeader(error.$response);
          if (serverTime) {
            const config = throwSigningPropertyError("config", signingProperties.config);
            const initialSystemClockOffset = config.systemClockOffset;
            config.systemClockOffset = getUpdatedSystemClockOffset(serverTime, config.systemClockOffset);
            const clockSkewCorrected = config.systemClockOffset !== initialSystemClockOffset;
            if (clockSkewCorrected && error.$metadata) {
              error.$metadata.clockSkewCorrected = true;
            }
          }
          throw error;
        };
      }
      successHandler(httpResponse, signingProperties) {
        const dateHeader = getDateHeader(httpResponse);
        if (dateHeader) {
          const config = throwSigningPropertyError("config", signingProperties.config);
          config.systemClockOffset = getUpdatedSystemClockOffset(dateHeader, config.systemClockOffset);
        }
      }
    };
    AWSSDKSigV4Signer = AwsSdkSigV4Signer;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/AwsSdkSigV4ASigner.js
var import_protocol_http3, AwsSdkSigV4ASigner;
var init_AwsSdkSigV4ASigner = __esm({
  "../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/AwsSdkSigV4ASigner.js"() {
    import_protocol_http3 = __toESM(require_dist_cjs2());
    init_utils();
    init_AwsSdkSigV4Signer();
    AwsSdkSigV4ASigner = class extends AwsSdkSigV4Signer {
      async sign(httpRequest, identity, signingProperties) {
        if (!import_protocol_http3.HttpRequest.isInstance(httpRequest)) {
          throw new Error("The request is not an instance of `HttpRequest` and cannot be signed");
        }
        const { config, signer, signingRegion, signingRegionSet, signingName } = await validateSigningProperties(signingProperties);
        const configResolvedSigningRegionSet = await config.sigv4aSigningRegionSet?.();
        const multiRegionOverride = (configResolvedSigningRegionSet ?? signingRegionSet ?? [signingRegion]).join(",");
        const signedRequest = await signer.sign(httpRequest, {
          signingDate: getSkewCorrectedDate(config.systemClockOffset),
          signingRegion: multiRegionOverride,
          signingService: signingName
        });
        return signedRequest;
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/getSmithyContext.js
var import_types, getSmithyContext;
var init_getSmithyContext = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/getSmithyContext.js"() {
    import_types = __toESM(require_dist_cjs());
    getSmithyContext = (context) => context[import_types.SMITHY_CONTEXT_KEY] || (context[import_types.SMITHY_CONTEXT_KEY] = {});
  }
});

// ../../node_modules/.pnpm/@smithy+util-middleware@3.0.11/node_modules/@smithy/util-middleware/dist-cjs/index.js
var require_dist_cjs4 = __commonJS({
  "../../node_modules/.pnpm/@smithy+util-middleware@3.0.11/node_modules/@smithy/util-middleware/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      getSmithyContext: () => getSmithyContext4,
      normalizeProvider: () => normalizeProvider2
    });
    module.exports = __toCommonJS2(src_exports);
    var import_types5 = require_dist_cjs();
    var getSmithyContext4 = /* @__PURE__ */ __name((context) => context[import_types5.SMITHY_CONTEXT_KEY] || (context[import_types5.SMITHY_CONTEXT_KEY] = {}), "getSmithyContext");
    var normalizeProvider2 = /* @__PURE__ */ __name((input) => {
      if (typeof input === "function")
        return input;
      const promisified = Promise.resolve(input);
      return () => promisified;
    }, "normalizeProvider");
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/httpAuthSchemeMiddleware.js
function convertHttpAuthSchemesToMap(httpAuthSchemes) {
  const map = /* @__PURE__ */ new Map();
  for (const scheme of httpAuthSchemes) {
    map.set(scheme.schemeId, scheme);
  }
  return map;
}
var import_types2, import_util_middleware, httpAuthSchemeMiddleware;
var init_httpAuthSchemeMiddleware = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/httpAuthSchemeMiddleware.js"() {
    import_types2 = __toESM(require_dist_cjs());
    import_util_middleware = __toESM(require_dist_cjs4());
    httpAuthSchemeMiddleware = (config, mwOptions) => (next, context) => async (args) => {
      const options = config.httpAuthSchemeProvider(await mwOptions.httpAuthSchemeParametersProvider(config, context, args.input));
      const authSchemes = convertHttpAuthSchemesToMap(config.httpAuthSchemes);
      const smithyContext = (0, import_util_middleware.getSmithyContext)(context);
      const failureReasons = [];
      for (const option of options) {
        const scheme = authSchemes.get(option.schemeId);
        if (!scheme) {
          failureReasons.push(`HttpAuthScheme \`${option.schemeId}\` was not enabled for this service.`);
          continue;
        }
        const identityProvider = scheme.identityProvider(await mwOptions.identityProviderConfigProvider(config));
        if (!identityProvider) {
          failureReasons.push(`HttpAuthScheme \`${option.schemeId}\` did not have an IdentityProvider configured.`);
          continue;
        }
        const { identityProperties = {}, signingProperties = {} } = option.propertiesExtractor?.(config, context) || {};
        option.identityProperties = Object.assign(option.identityProperties || {}, identityProperties);
        option.signingProperties = Object.assign(option.signingProperties || {}, signingProperties);
        smithyContext.selectedHttpAuthScheme = {
          httpAuthOption: option,
          identity: await identityProvider(option.identityProperties),
          signer: scheme.signer
        };
        break;
      }
      if (!smithyContext.selectedHttpAuthScheme) {
        throw new Error(failureReasons.join("\n"));
      }
      return next(args);
    };
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemeEndpointRuleSetPlugin.js
var httpAuthSchemeEndpointRuleSetMiddlewareOptions, getHttpAuthSchemeEndpointRuleSetPlugin;
var init_getHttpAuthSchemeEndpointRuleSetPlugin = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemeEndpointRuleSetPlugin.js"() {
    init_httpAuthSchemeMiddleware();
    httpAuthSchemeEndpointRuleSetMiddlewareOptions = {
      step: "serialize",
      tags: ["HTTP_AUTH_SCHEME"],
      name: "httpAuthSchemeMiddleware",
      override: true,
      relation: "before",
      toMiddleware: "endpointV2Middleware"
    };
    getHttpAuthSchemeEndpointRuleSetPlugin = (config, { httpAuthSchemeParametersProvider, identityProviderConfigProvider }) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(httpAuthSchemeMiddleware(config, {
          httpAuthSchemeParametersProvider,
          identityProviderConfigProvider
        }), httpAuthSchemeEndpointRuleSetMiddlewareOptions);
      }
    });
  }
});

// ../../node_modules/.pnpm/@smithy+middleware-serde@3.0.11/node_modules/@smithy/middleware-serde/dist-cjs/index.js
var require_dist_cjs5 = __commonJS({
  "../../node_modules/.pnpm/@smithy+middleware-serde@3.0.11/node_modules/@smithy/middleware-serde/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      deserializerMiddleware: () => deserializerMiddleware,
      deserializerMiddlewareOption: () => deserializerMiddlewareOption,
      getSerdePlugin: () => getSerdePlugin,
      serializerMiddleware: () => serializerMiddleware,
      serializerMiddlewareOption: () => serializerMiddlewareOption2
    });
    module.exports = __toCommonJS2(src_exports);
    var deserializerMiddleware = /* @__PURE__ */ __name((options, deserializer) => (next) => async (args) => {
      const { response } = await next(args);
      try {
        const parsed = await deserializer(response, options);
        return {
          response,
          output: parsed
        };
      } catch (error) {
        Object.defineProperty(error, "$response", {
          value: response
        });
        if (!("$metadata" in error)) {
          const hint = `Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.`;
          error.message += "\n  " + hint;
          if (typeof error.$responseBodyText !== "undefined") {
            if (error.$response) {
              error.$response.body = error.$responseBodyText;
            }
          }
        }
        throw error;
      }
    }, "deserializerMiddleware");
    var serializerMiddleware = /* @__PURE__ */ __name((options, serializer) => (next, context) => async (args) => {
      var _a;
      const endpoint = ((_a = context.endpointV2) == null ? void 0 : _a.url) && options.urlParser ? async () => options.urlParser(context.endpointV2.url) : options.endpoint;
      if (!endpoint) {
        throw new Error("No valid endpoint provider available.");
      }
      const request = await serializer(args.input, { ...options, endpoint });
      return next({
        ...args,
        request
      });
    }, "serializerMiddleware");
    var deserializerMiddlewareOption = {
      name: "deserializerMiddleware",
      step: "deserialize",
      tags: ["DESERIALIZER"],
      override: true
    };
    var serializerMiddlewareOption2 = {
      name: "serializerMiddleware",
      step: "serialize",
      tags: ["SERIALIZER"],
      override: true
    };
    function getSerdePlugin(config, serializer, deserializer) {
      return {
        applyToStack: (commandStack) => {
          commandStack.add(deserializerMiddleware(config, deserializer), deserializerMiddlewareOption);
          commandStack.add(serializerMiddleware(config, serializer), serializerMiddlewareOption2);
        }
      };
    }
    __name(getSerdePlugin, "getSerdePlugin");
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemePlugin.js
var import_middleware_serde, httpAuthSchemeMiddlewareOptions, getHttpAuthSchemePlugin;
var init_getHttpAuthSchemePlugin = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemePlugin.js"() {
    import_middleware_serde = __toESM(require_dist_cjs5());
    init_httpAuthSchemeMiddleware();
    httpAuthSchemeMiddlewareOptions = {
      step: "serialize",
      tags: ["HTTP_AUTH_SCHEME"],
      name: "httpAuthSchemeMiddleware",
      override: true,
      relation: "before",
      toMiddleware: import_middleware_serde.serializerMiddlewareOption.name
    };
    getHttpAuthSchemePlugin = (config, { httpAuthSchemeParametersProvider, identityProviderConfigProvider }) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(httpAuthSchemeMiddleware(config, {
          httpAuthSchemeParametersProvider,
          identityProviderConfigProvider
        }), httpAuthSchemeMiddlewareOptions);
      }
    });
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/index.js
var init_middleware_http_auth_scheme = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/index.js"() {
    init_httpAuthSchemeMiddleware();
    init_getHttpAuthSchemeEndpointRuleSetPlugin();
    init_getHttpAuthSchemePlugin();
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/middleware-http-signing/httpSigningMiddleware.js
var import_protocol_http4, import_types3, import_util_middleware2, defaultErrorHandler, defaultSuccessHandler, httpSigningMiddleware;
var init_httpSigningMiddleware = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/middleware-http-signing/httpSigningMiddleware.js"() {
    import_protocol_http4 = __toESM(require_dist_cjs2());
    import_types3 = __toESM(require_dist_cjs());
    import_util_middleware2 = __toESM(require_dist_cjs4());
    defaultErrorHandler = (signingProperties) => (error) => {
      throw error;
    };
    defaultSuccessHandler = (httpResponse, signingProperties) => {
    };
    httpSigningMiddleware = (config) => (next, context) => async (args) => {
      if (!import_protocol_http4.HttpRequest.isInstance(args.request)) {
        return next(args);
      }
      const smithyContext = (0, import_util_middleware2.getSmithyContext)(context);
      const scheme = smithyContext.selectedHttpAuthScheme;
      if (!scheme) {
        throw new Error(`No HttpAuthScheme was selected: unable to sign request`);
      }
      const { httpAuthOption: { signingProperties = {} }, identity, signer } = scheme;
      const output = await next({
        ...args,
        request: await signer.sign(args.request, identity, signingProperties)
      }).catch((signer.errorHandler || defaultErrorHandler)(signingProperties));
      (signer.successHandler || defaultSuccessHandler)(output.response, signingProperties);
      return output;
    };
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/middleware-http-signing/getHttpSigningMiddleware.js
var httpSigningMiddlewareOptions, getHttpSigningPlugin;
var init_getHttpSigningMiddleware = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/middleware-http-signing/getHttpSigningMiddleware.js"() {
    init_httpSigningMiddleware();
    httpSigningMiddlewareOptions = {
      step: "finalizeRequest",
      tags: ["HTTP_SIGNING"],
      name: "httpSigningMiddleware",
      aliases: ["apiKeyMiddleware", "tokenMiddleware", "awsAuthMiddleware"],
      override: true,
      relation: "after",
      toMiddleware: "retryMiddleware"
    };
    getHttpSigningPlugin = (config) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(httpSigningMiddleware(config), httpSigningMiddlewareOptions);
      }
    });
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/middleware-http-signing/index.js
var init_middleware_http_signing = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/middleware-http-signing/index.js"() {
    init_httpSigningMiddleware();
    init_getHttpSigningMiddleware();
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/normalizeProvider.js
var normalizeProvider;
var init_normalizeProvider = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/normalizeProvider.js"() {
    normalizeProvider = (input) => {
      if (typeof input === "function")
        return input;
      const promisified = Promise.resolve(input);
      return () => promisified;
    };
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/pagination/createPaginator.js
function createPaginator(ClientCtor, CommandCtor, inputTokenName, outputTokenName, pageSizeTokenName) {
  return async function* paginateOperation(config, input, ...additionalArguments) {
    let token = config.startingToken || void 0;
    let hasNext = true;
    let page;
    while (hasNext) {
      input[inputTokenName] = token;
      if (pageSizeTokenName) {
        input[pageSizeTokenName] = input[pageSizeTokenName] ?? config.pageSize;
      }
      if (config.client instanceof ClientCtor) {
        page = await makePagedClientRequest(CommandCtor, config.client, input, ...additionalArguments);
      } else {
        throw new Error(`Invalid client, expected instance of ${ClientCtor.name}`);
      }
      yield page;
      const prevToken = token;
      token = get(page, outputTokenName);
      hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return void 0;
  };
}
var makePagedClientRequest, get;
var init_createPaginator = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/pagination/createPaginator.js"() {
    makePagedClientRequest = async (CommandCtor, client, input, ...args) => {
      return await client.send(new CommandCtor(input), ...args);
    };
    get = (fromObject, path) => {
      let cursor = fromObject;
      const pathComponents = path.split(".");
      for (const step of pathComponents) {
        if (!cursor || typeof cursor !== "object") {
          return void 0;
        }
        cursor = cursor[step];
      }
      return cursor;
    };
  }
});

// ../../node_modules/.pnpm/@smithy+is-array-buffer@3.0.0/node_modules/@smithy/is-array-buffer/dist-cjs/index.js
var require_dist_cjs6 = __commonJS({
  "../../node_modules/.pnpm/@smithy+is-array-buffer@3.0.0/node_modules/@smithy/is-array-buffer/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      isArrayBuffer: () => isArrayBuffer
    });
    module.exports = __toCommonJS2(src_exports);
    var isArrayBuffer = /* @__PURE__ */ __name((arg) => typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]", "isArrayBuffer");
  }
});

// ../../node_modules/.pnpm/@smithy+util-buffer-from@3.0.0/node_modules/@smithy/util-buffer-from/dist-cjs/index.js
var require_dist_cjs7 = __commonJS({
  "../../node_modules/.pnpm/@smithy+util-buffer-from@3.0.0/node_modules/@smithy/util-buffer-from/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      fromArrayBuffer: () => fromArrayBuffer,
      fromString: () => fromString
    });
    module.exports = __toCommonJS2(src_exports);
    var import_is_array_buffer = require_dist_cjs6();
    var import_buffer = __require("buffer");
    var fromArrayBuffer = /* @__PURE__ */ __name((input, offset = 0, length = input.byteLength - offset) => {
      if (!(0, import_is_array_buffer.isArrayBuffer)(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
      }
      return import_buffer.Buffer.from(input, offset, length);
    }, "fromArrayBuffer");
    var fromString = /* @__PURE__ */ __name((input, encoding) => {
      if (typeof input !== "string") {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
      }
      return encoding ? import_buffer.Buffer.from(input, encoding) : import_buffer.Buffer.from(input);
    }, "fromString");
  }
});

// ../../node_modules/.pnpm/@smithy+util-base64@3.0.0/node_modules/@smithy/util-base64/dist-cjs/fromBase64.js
var require_fromBase64 = __commonJS({
  "../../node_modules/.pnpm/@smithy+util-base64@3.0.0/node_modules/@smithy/util-base64/dist-cjs/fromBase64.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs7();
    var BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;
    var fromBase642 = (input) => {
      if (input.length * 3 % 4 !== 0) {
        throw new TypeError(`Incorrect padding on base64 string.`);
      }
      if (!BASE64_REGEX.exec(input)) {
        throw new TypeError(`Invalid base64 string.`);
      }
      const buffer = (0, util_buffer_from_1.fromString)(input, "base64");
      return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
    };
    exports.fromBase64 = fromBase642;
  }
});

// ../../node_modules/.pnpm/@smithy+util-utf8@3.0.0/node_modules/@smithy/util-utf8/dist-cjs/index.js
var require_dist_cjs8 = __commonJS({
  "../../node_modules/.pnpm/@smithy+util-utf8@3.0.0/node_modules/@smithy/util-utf8/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      fromUtf8: () => fromUtf8,
      toUint8Array: () => toUint8Array,
      toUtf8: () => toUtf8
    });
    module.exports = __toCommonJS2(src_exports);
    var import_util_buffer_from = require_dist_cjs7();
    var fromUtf8 = /* @__PURE__ */ __name((input) => {
      const buf = (0, import_util_buffer_from.fromString)(input, "utf8");
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    }, "fromUtf8");
    var toUint8Array = /* @__PURE__ */ __name((data) => {
      if (typeof data === "string") {
        return fromUtf8(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }, "toUint8Array");
    var toUtf8 = /* @__PURE__ */ __name((input) => {
      if (typeof input === "string") {
        return input;
      }
      if (typeof input !== "object" || typeof input.byteOffset !== "number" || typeof input.byteLength !== "number") {
        throw new Error("@smithy/util-utf8: toUtf8 encoder function only accepts string | Uint8Array.");
      }
      return (0, import_util_buffer_from.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("utf8");
    }, "toUtf8");
  }
});

// ../../node_modules/.pnpm/@smithy+util-base64@3.0.0/node_modules/@smithy/util-base64/dist-cjs/toBase64.js
var require_toBase64 = __commonJS({
  "../../node_modules/.pnpm/@smithy+util-base64@3.0.0/node_modules/@smithy/util-base64/dist-cjs/toBase64.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs7();
    var util_utf8_1 = require_dist_cjs8();
    var toBase642 = (_input) => {
      let input;
      if (typeof _input === "string") {
        input = (0, util_utf8_1.fromUtf8)(_input);
      } else {
        input = _input;
      }
      if (typeof input !== "object" || typeof input.byteOffset !== "number" || typeof input.byteLength !== "number") {
        throw new Error("@smithy/util-base64: toBase64 encoder function only accepts string | Uint8Array.");
      }
      return (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("base64");
    };
    exports.toBase64 = toBase642;
  }
});

// ../../node_modules/.pnpm/@smithy+util-base64@3.0.0/node_modules/@smithy/util-base64/dist-cjs/index.js
var require_dist_cjs9 = __commonJS({
  "../../node_modules/.pnpm/@smithy+util-base64@3.0.0/node_modules/@smithy/util-base64/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __reExport = (target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default"));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    module.exports = __toCommonJS2(src_exports);
    __reExport(src_exports, require_fromBase64(), module.exports);
    __reExport(src_exports, require_toBase64(), module.exports);
  }
});

// ../../node_modules/.pnpm/@smithy+util-stream@3.3.4/node_modules/@smithy/util-stream/dist-cjs/getAwsChunkedEncodingStream.js
var require_getAwsChunkedEncodingStream = __commonJS({
  "../../node_modules/.pnpm/@smithy+util-stream@3.3.4/node_modules/@smithy/util-stream/dist-cjs/getAwsChunkedEncodingStream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getAwsChunkedEncodingStream = void 0;
    var stream_1 = __require("stream");
    var getAwsChunkedEncodingStream2 = (readableStream, options) => {
      const { base64Encoder, bodyLengthChecker, checksumAlgorithmFn, checksumLocationName, streamHasher } = options;
      const checksumRequired = base64Encoder !== void 0 && checksumAlgorithmFn !== void 0 && checksumLocationName !== void 0 && streamHasher !== void 0;
      const digest = checksumRequired ? streamHasher(checksumAlgorithmFn, readableStream) : void 0;
      const awsChunkedEncodingStream = new stream_1.Readable({ read: () => {
      } });
      readableStream.on("data", (data) => {
        const length = bodyLengthChecker(data) || 0;
        awsChunkedEncodingStream.push(`${length.toString(16)}\r
`);
        awsChunkedEncodingStream.push(data);
        awsChunkedEncodingStream.push("\r\n");
      });
      readableStream.on("end", async () => {
        awsChunkedEncodingStream.push(`0\r
`);
        if (checksumRequired) {
          const checksum = base64Encoder(await digest);
          awsChunkedEncodingStream.push(`${checksumLocationName}:${checksum}\r
`);
          awsChunkedEncodingStream.push(`\r
`);
        }
        awsChunkedEncodingStream.push(null);
      });
      return awsChunkedEncodingStream;
    };
    exports.getAwsChunkedEncodingStream = getAwsChunkedEncodingStream2;
  }
});

// ../../node_modules/.pnpm/@smithy+util-uri-escape@3.0.0/node_modules/@smithy/util-uri-escape/dist-cjs/index.js
var require_dist_cjs10 = __commonJS({
  "../../node_modules/.pnpm/@smithy+util-uri-escape@3.0.0/node_modules/@smithy/util-uri-escape/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      escapeUri: () => escapeUri,
      escapeUriPath: () => escapeUriPath
    });
    module.exports = __toCommonJS2(src_exports);
    var escapeUri = /* @__PURE__ */ __name((uri) => (
      // AWS percent-encodes some extra non-standard characters in a URI
      encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode)
    ), "escapeUri");
    var hexEncode = /* @__PURE__ */ __name((c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`, "hexEncode");
    var escapeUriPath = /* @__PURE__ */ __name((uri) => uri.split("/").map(escapeUri).join("/"), "escapeUriPath");
  }
});

// ../../node_modules/.pnpm/@smithy+querystring-builder@3.0.11/node_modules/@smithy/querystring-builder/dist-cjs/index.js
var require_dist_cjs11 = __commonJS({
  "../../node_modules/.pnpm/@smithy+querystring-builder@3.0.11/node_modules/@smithy/querystring-builder/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      buildQueryString: () => buildQueryString
    });
    module.exports = __toCommonJS2(src_exports);
    var import_util_uri_escape = require_dist_cjs10();
    function buildQueryString(query) {
      const parts = [];
      for (let key of Object.keys(query).sort()) {
        const value = query[key];
        key = (0, import_util_uri_escape.escapeUri)(key);
        if (Array.isArray(value)) {
          for (let i = 0, iLen = value.length; i < iLen; i++) {
            parts.push(`${key}=${(0, import_util_uri_escape.escapeUri)(value[i])}`);
          }
        } else {
          let qsEntry = key;
          if (value || typeof value === "string") {
            qsEntry += `=${(0, import_util_uri_escape.escapeUri)(value)}`;
          }
          parts.push(qsEntry);
        }
      }
      return parts.join("&");
    }
    __name(buildQueryString, "buildQueryString");
  }
});

// ../../node_modules/.pnpm/@smithy+node-http-handler@3.3.3/node_modules/@smithy/node-http-handler/dist-cjs/index.js
var require_dist_cjs12 = __commonJS({
  "../../node_modules/.pnpm/@smithy+node-http-handler@3.3.3/node_modules/@smithy/node-http-handler/dist-cjs/index.js"(exports, module) {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      DEFAULT_REQUEST_TIMEOUT: () => DEFAULT_REQUEST_TIMEOUT,
      NodeHttp2Handler: () => NodeHttp2Handler,
      NodeHttpHandler: () => NodeHttpHandler,
      streamCollector: () => streamCollector
    });
    module.exports = __toCommonJS2(src_exports);
    var import_protocol_http8 = require_dist_cjs2();
    var import_querystring_builder = require_dist_cjs11();
    var import_http = __require("http");
    var import_https = __require("https");
    var NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "EPIPE", "ETIMEDOUT"];
    var getTransformedHeaders = /* @__PURE__ */ __name((headers) => {
      const transformedHeaders = {};
      for (const name of Object.keys(headers)) {
        const headerValues = headers[name];
        transformedHeaders[name] = Array.isArray(headerValues) ? headerValues.join(",") : headerValues;
      }
      return transformedHeaders;
    }, "getTransformedHeaders");
    var timing = {
      setTimeout: (cb, ms) => setTimeout(cb, ms),
      clearTimeout: (timeoutId) => clearTimeout(timeoutId)
    };
    var DEFER_EVENT_LISTENER_TIME = 1e3;
    var setConnectionTimeout = /* @__PURE__ */ __name((request, reject, timeoutInMs = 0) => {
      if (!timeoutInMs) {
        return -1;
      }
      const registerTimeout = /* @__PURE__ */ __name((offset) => {
        const timeoutId = timing.setTimeout(() => {
          request.destroy();
          reject(
            Object.assign(new Error(`Socket timed out without establishing a connection within ${timeoutInMs} ms`), {
              name: "TimeoutError"
            })
          );
        }, timeoutInMs - offset);
        const doWithSocket = /* @__PURE__ */ __name((socket) => {
          if (socket == null ? void 0 : socket.connecting) {
            socket.on("connect", () => {
              timing.clearTimeout(timeoutId);
            });
          } else {
            timing.clearTimeout(timeoutId);
          }
        }, "doWithSocket");
        if (request.socket) {
          doWithSocket(request.socket);
        } else {
          request.on("socket", doWithSocket);
        }
      }, "registerTimeout");
      if (timeoutInMs < 2e3) {
        registerTimeout(0);
        return 0;
      }
      return timing.setTimeout(registerTimeout.bind(null, DEFER_EVENT_LISTENER_TIME), DEFER_EVENT_LISTENER_TIME);
    }, "setConnectionTimeout");
    var DEFER_EVENT_LISTENER_TIME2 = 3e3;
    var setSocketKeepAlive = /* @__PURE__ */ __name((request, { keepAlive, keepAliveMsecs }, deferTimeMs = DEFER_EVENT_LISTENER_TIME2) => {
      if (keepAlive !== true) {
        return -1;
      }
      const registerListener = /* @__PURE__ */ __name(() => {
        if (request.socket) {
          request.socket.setKeepAlive(keepAlive, keepAliveMsecs || 0);
        } else {
          request.on("socket", (socket) => {
            socket.setKeepAlive(keepAlive, keepAliveMsecs || 0);
          });
        }
      }, "registerListener");
      if (deferTimeMs === 0) {
        registerListener();
        return 0;
      }
      return timing.setTimeout(registerListener, deferTimeMs);
    }, "setSocketKeepAlive");
    var DEFER_EVENT_LISTENER_TIME3 = 3e3;
    var setSocketTimeout = /* @__PURE__ */ __name((request, reject, timeoutInMs = 0) => {
      const registerTimeout = /* @__PURE__ */ __name((offset) => {
        const timeout = timeoutInMs - offset;
        const onTimeout = /* @__PURE__ */ __name(() => {
          request.destroy();
          reject(Object.assign(new Error(`Connection timed out after ${timeoutInMs} ms`), { name: "TimeoutError" }));
        }, "onTimeout");
        if (request.socket) {
          request.socket.setTimeout(timeout, onTimeout);
        } else {
          request.setTimeout(timeout, onTimeout);
        }
      }, "registerTimeout");
      if (0 < timeoutInMs && timeoutInMs < 6e3) {
        registerTimeout(0);
        return 0;
      }
      return timing.setTimeout(
        registerTimeout.bind(null, timeoutInMs === 0 ? 0 : DEFER_EVENT_LISTENER_TIME3),
        DEFER_EVENT_LISTENER_TIME3
      );
    }, "setSocketTimeout");
    var import_stream = __require("stream");
    var MIN_WAIT_TIME = 1e3;
    async function writeRequestBody(httpRequest, request, maxContinueTimeoutMs = MIN_WAIT_TIME) {
      const headers = request.headers ?? {};
      const expect = headers["Expect"] || headers["expect"];
      let timeoutId = -1;
      let sendBody = true;
      if (expect === "100-continue") {
        sendBody = await Promise.race([
          new Promise((resolve) => {
            timeoutId = Number(timing.setTimeout(resolve, Math.max(MIN_WAIT_TIME, maxContinueTimeoutMs)));
          }),
          new Promise((resolve) => {
            httpRequest.on("continue", () => {
              timing.clearTimeout(timeoutId);
              resolve(true);
            });
            httpRequest.on("response", () => {
              timing.clearTimeout(timeoutId);
              resolve(false);
            });
            httpRequest.on("error", () => {
              timing.clearTimeout(timeoutId);
              resolve(false);
            });
          })
        ]);
      }
      if (sendBody) {
        writeBody(httpRequest, request.body);
      }
    }
    __name(writeRequestBody, "writeRequestBody");
    function writeBody(httpRequest, body) {
      if (body instanceof import_stream.Readable) {
        body.pipe(httpRequest);
        return;
      }
      if (body) {
        if (Buffer.isBuffer(body) || typeof body === "string") {
          httpRequest.end(body);
          return;
        }
        const uint8 = body;
        if (typeof uint8 === "object" && uint8.buffer && typeof uint8.byteOffset === "number" && typeof uint8.byteLength === "number") {
          httpRequest.end(Buffer.from(uint8.buffer, uint8.byteOffset, uint8.byteLength));
          return;
        }
        httpRequest.end(Buffer.from(body));
        return;
      }
      httpRequest.end();
    }
    __name(writeBody, "writeBody");
    var DEFAULT_REQUEST_TIMEOUT = 0;
    var _NodeHttpHandler = class _NodeHttpHandler2 {
      constructor(options) {
        this.socketWarningTimestamp = 0;
        this.metadata = { handlerProtocol: "http/1.1" };
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === "function") {
            options().then((_options) => {
              resolve(this.resolveDefaultConfig(_options));
            }).catch(reject);
          } else {
            resolve(this.resolveDefaultConfig(options));
          }
        });
      }
      /**
       * @returns the input if it is an HttpHandler of any class,
       * or instantiates a new instance of this handler.
       */
      static create(instanceOrOptions) {
        if (typeof (instanceOrOptions == null ? void 0 : instanceOrOptions.handle) === "function") {
          return instanceOrOptions;
        }
        return new _NodeHttpHandler2(instanceOrOptions);
      }
      /**
       * @internal
       *
       * @param agent - http(s) agent in use by the NodeHttpHandler instance.
       * @param socketWarningTimestamp - last socket usage check timestamp.
       * @param logger - channel for the warning.
       * @returns timestamp of last emitted warning.
       */
      static checkSocketUsage(agent, socketWarningTimestamp, logger2 = console) {
        var _a, _b, _c;
        const { sockets, requests, maxSockets } = agent;
        if (typeof maxSockets !== "number" || maxSockets === Infinity) {
          return socketWarningTimestamp;
        }
        const interval = 15e3;
        if (Date.now() - interval < socketWarningTimestamp) {
          return socketWarningTimestamp;
        }
        if (sockets && requests) {
          for (const origin in sockets) {
            const socketsInUse = ((_a = sockets[origin]) == null ? void 0 : _a.length) ?? 0;
            const requestsEnqueued = ((_b = requests[origin]) == null ? void 0 : _b.length) ?? 0;
            if (socketsInUse >= maxSockets && requestsEnqueued >= 2 * maxSockets) {
              (_c = logger2 == null ? void 0 : logger2.warn) == null ? void 0 : _c.call(
                logger2,
                `@smithy/node-http-handler:WARN - socket usage at capacity=${socketsInUse} and ${requestsEnqueued} additional requests are enqueued.
See https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/node-configuring-maxsockets.html
or increase socketAcquisitionWarningTimeout=(millis) in the NodeHttpHandler config.`
              );
              return Date.now();
            }
          }
        }
        return socketWarningTimestamp;
      }
      resolveDefaultConfig(options) {
        const { requestTimeout, connectionTimeout, socketTimeout, httpAgent, httpsAgent } = options || {};
        const keepAlive = true;
        const maxSockets = 50;
        return {
          connectionTimeout,
          requestTimeout: requestTimeout ?? socketTimeout,
          httpAgent: (() => {
            if (httpAgent instanceof import_http.Agent || typeof (httpAgent == null ? void 0 : httpAgent.destroy) === "function") {
              return httpAgent;
            }
            return new import_http.Agent({ keepAlive, maxSockets, ...httpAgent });
          })(),
          httpsAgent: (() => {
            if (httpsAgent instanceof import_https.Agent || typeof (httpsAgent == null ? void 0 : httpsAgent.destroy) === "function") {
              return httpsAgent;
            }
            return new import_https.Agent({ keepAlive, maxSockets, ...httpsAgent });
          })(),
          logger: console
        };
      }
      destroy() {
        var _a, _b, _c, _d;
        (_b = (_a = this.config) == null ? void 0 : _a.httpAgent) == null ? void 0 : _b.destroy();
        (_d = (_c = this.config) == null ? void 0 : _c.httpsAgent) == null ? void 0 : _d.destroy();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        return new Promise((_resolve, _reject) => {
          let writeRequestBodyPromise = void 0;
          const timeouts = [];
          const resolve = /* @__PURE__ */ __name(async (arg) => {
            await writeRequestBodyPromise;
            timeouts.forEach(timing.clearTimeout);
            _resolve(arg);
          }, "resolve");
          const reject = /* @__PURE__ */ __name(async (arg) => {
            await writeRequestBodyPromise;
            timeouts.forEach(timing.clearTimeout);
            _reject(arg);
          }, "reject");
          if (!this.config) {
            throw new Error("Node HTTP request handler config is not resolved");
          }
          if (abortSignal == null ? void 0 : abortSignal.aborted) {
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            reject(abortError);
            return;
          }
          const isSSL = request.protocol === "https:";
          const agent = isSSL ? this.config.httpsAgent : this.config.httpAgent;
          timeouts.push(
            timing.setTimeout(
              () => {
                this.socketWarningTimestamp = _NodeHttpHandler2.checkSocketUsage(
                  agent,
                  this.socketWarningTimestamp,
                  this.config.logger
                );
              },
              this.config.socketAcquisitionWarningTimeout ?? (this.config.requestTimeout ?? 2e3) + (this.config.connectionTimeout ?? 1e3)
            )
          );
          const queryString = (0, import_querystring_builder.buildQueryString)(request.query || {});
          let auth = void 0;
          if (request.username != null || request.password != null) {
            const username = request.username ?? "";
            const password = request.password ?? "";
            auth = `${username}:${password}`;
          }
          let path = request.path;
          if (queryString) {
            path += `?${queryString}`;
          }
          if (request.fragment) {
            path += `#${request.fragment}`;
          }
          let hostname = request.hostname ?? "";
          if (hostname[0] === "[" && hostname.endsWith("]")) {
            hostname = request.hostname.slice(1, -1);
          } else {
            hostname = request.hostname;
          }
          const nodeHttpsOptions = {
            headers: request.headers,
            host: hostname,
            method: request.method,
            path,
            port: request.port,
            agent,
            auth
          };
          const requestFunc = isSSL ? import_https.request : import_http.request;
          const req = requestFunc(nodeHttpsOptions, (res) => {
            const httpResponse = new import_protocol_http8.HttpResponse({
              statusCode: res.statusCode || -1,
              reason: res.statusMessage,
              headers: getTransformedHeaders(res.headers),
              body: res
            });
            resolve({ response: httpResponse });
          });
          req.on("error", (err) => {
            if (NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) {
              reject(Object.assign(err, { name: "TimeoutError" }));
            } else {
              reject(err);
            }
          });
          if (abortSignal) {
            const onAbort = /* @__PURE__ */ __name(() => {
              req.destroy();
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              reject(abortError);
            }, "onAbort");
            if (typeof abortSignal.addEventListener === "function") {
              const signal = abortSignal;
              signal.addEventListener("abort", onAbort, { once: true });
              req.once("close", () => signal.removeEventListener("abort", onAbort));
            } else {
              abortSignal.onabort = onAbort;
            }
          }
          timeouts.push(setConnectionTimeout(req, reject, this.config.connectionTimeout));
          timeouts.push(setSocketTimeout(req, reject, this.config.requestTimeout));
          const httpAgent = nodeHttpsOptions.agent;
          if (typeof httpAgent === "object" && "keepAlive" in httpAgent) {
            timeouts.push(
              setSocketKeepAlive(req, {
                // @ts-expect-error keepAlive is not public on httpAgent.
                keepAlive: httpAgent.keepAlive,
                // @ts-expect-error keepAliveMsecs is not public on httpAgent.
                keepAliveMsecs: httpAgent.keepAliveMsecs
              })
            );
          }
          writeRequestBodyPromise = writeRequestBody(req, request, this.config.requestTimeout).catch((e) => {
            timeouts.forEach(timing.clearTimeout);
            return _reject(e);
          });
        });
      }
      updateHttpClientConfig(key, value) {
        this.config = void 0;
        this.configProvider = this.configProvider.then((config) => {
          return {
            ...config,
            [key]: value
          };
        });
      }
      httpHandlerConfigs() {
        return this.config ?? {};
      }
    };
    __name(_NodeHttpHandler, "NodeHttpHandler");
    var NodeHttpHandler = _NodeHttpHandler;
    var import_http22 = __require("http2");
    var import_http2 = __toESM2(__require("http2"));
    var _NodeHttp2ConnectionPool = class _NodeHttp2ConnectionPool {
      constructor(sessions) {
        this.sessions = [];
        this.sessions = sessions ?? [];
      }
      poll() {
        if (this.sessions.length > 0) {
          return this.sessions.shift();
        }
      }
      offerLast(session) {
        this.sessions.push(session);
      }
      contains(session) {
        return this.sessions.includes(session);
      }
      remove(session) {
        this.sessions = this.sessions.filter((s) => s !== session);
      }
      [Symbol.iterator]() {
        return this.sessions[Symbol.iterator]();
      }
      destroy(connection) {
        for (const session of this.sessions) {
          if (session === connection) {
            if (!session.destroyed) {
              session.destroy();
            }
          }
        }
      }
    };
    __name(_NodeHttp2ConnectionPool, "NodeHttp2ConnectionPool");
    var NodeHttp2ConnectionPool = _NodeHttp2ConnectionPool;
    var _NodeHttp2ConnectionManager = class _NodeHttp2ConnectionManager {
      constructor(config) {
        this.sessionCache = /* @__PURE__ */ new Map();
        this.config = config;
        if (this.config.maxConcurrency && this.config.maxConcurrency <= 0) {
          throw new RangeError("maxConcurrency must be greater than zero.");
        }
      }
      lease(requestContext, connectionConfiguration) {
        const url = this.getUrlString(requestContext);
        const existingPool = this.sessionCache.get(url);
        if (existingPool) {
          const existingSession = existingPool.poll();
          if (existingSession && !this.config.disableConcurrency) {
            return existingSession;
          }
        }
        const session = import_http2.default.connect(url);
        if (this.config.maxConcurrency) {
          session.settings({ maxConcurrentStreams: this.config.maxConcurrency }, (err) => {
            if (err) {
              throw new Error(
                "Fail to set maxConcurrentStreams to " + this.config.maxConcurrency + "when creating new session for " + requestContext.destination.toString()
              );
            }
          });
        }
        session.unref();
        const destroySessionCb = /* @__PURE__ */ __name(() => {
          session.destroy();
          this.deleteSession(url, session);
        }, "destroySessionCb");
        session.on("goaway", destroySessionCb);
        session.on("error", destroySessionCb);
        session.on("frameError", destroySessionCb);
        session.on("close", () => this.deleteSession(url, session));
        if (connectionConfiguration.requestTimeout) {
          session.setTimeout(connectionConfiguration.requestTimeout, destroySessionCb);
        }
        const connectionPool = this.sessionCache.get(url) || new NodeHttp2ConnectionPool();
        connectionPool.offerLast(session);
        this.sessionCache.set(url, connectionPool);
        return session;
      }
      /**
       * Delete a session from the connection pool.
       * @param authority The authority of the session to delete.
       * @param session The session to delete.
       */
      deleteSession(authority, session) {
        const existingConnectionPool = this.sessionCache.get(authority);
        if (!existingConnectionPool) {
          return;
        }
        if (!existingConnectionPool.contains(session)) {
          return;
        }
        existingConnectionPool.remove(session);
        this.sessionCache.set(authority, existingConnectionPool);
      }
      release(requestContext, session) {
        var _a;
        const cacheKey = this.getUrlString(requestContext);
        (_a = this.sessionCache.get(cacheKey)) == null ? void 0 : _a.offerLast(session);
      }
      destroy() {
        for (const [key, connectionPool] of this.sessionCache) {
          for (const session of connectionPool) {
            if (!session.destroyed) {
              session.destroy();
            }
            connectionPool.remove(session);
          }
          this.sessionCache.delete(key);
        }
      }
      setMaxConcurrentStreams(maxConcurrentStreams) {
        if (maxConcurrentStreams && maxConcurrentStreams <= 0) {
          throw new RangeError("maxConcurrentStreams must be greater than zero.");
        }
        this.config.maxConcurrency = maxConcurrentStreams;
      }
      setDisableConcurrentStreams(disableConcurrentStreams) {
        this.config.disableConcurrency = disableConcurrentStreams;
      }
      getUrlString(request) {
        return request.destination.toString();
      }
    };
    __name(_NodeHttp2ConnectionManager, "NodeHttp2ConnectionManager");
    var NodeHttp2ConnectionManager = _NodeHttp2ConnectionManager;
    var _NodeHttp2Handler = class _NodeHttp2Handler2 {
      constructor(options) {
        this.metadata = { handlerProtocol: "h2" };
        this.connectionManager = new NodeHttp2ConnectionManager({});
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === "function") {
            options().then((opts) => {
              resolve(opts || {});
            }).catch(reject);
          } else {
            resolve(options || {});
          }
        });
      }
      /**
       * @returns the input if it is an HttpHandler of any class,
       * or instantiates a new instance of this handler.
       */
      static create(instanceOrOptions) {
        if (typeof (instanceOrOptions == null ? void 0 : instanceOrOptions.handle) === "function") {
          return instanceOrOptions;
        }
        return new _NodeHttp2Handler2(instanceOrOptions);
      }
      destroy() {
        this.connectionManager.destroy();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
          this.connectionManager.setDisableConcurrentStreams(this.config.disableConcurrentStreams || false);
          if (this.config.maxConcurrentStreams) {
            this.connectionManager.setMaxConcurrentStreams(this.config.maxConcurrentStreams);
          }
        }
        const { requestTimeout, disableConcurrentStreams } = this.config;
        return new Promise((_resolve, _reject) => {
          var _a;
          let fulfilled = false;
          let writeRequestBodyPromise = void 0;
          const resolve = /* @__PURE__ */ __name(async (arg) => {
            await writeRequestBodyPromise;
            _resolve(arg);
          }, "resolve");
          const reject = /* @__PURE__ */ __name(async (arg) => {
            await writeRequestBodyPromise;
            _reject(arg);
          }, "reject");
          if (abortSignal == null ? void 0 : abortSignal.aborted) {
            fulfilled = true;
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            reject(abortError);
            return;
          }
          const { hostname, method, port, protocol, query } = request;
          let auth = "";
          if (request.username != null || request.password != null) {
            const username = request.username ?? "";
            const password = request.password ?? "";
            auth = `${username}:${password}@`;
          }
          const authority = `${protocol}//${auth}${hostname}${port ? `:${port}` : ""}`;
          const requestContext = { destination: new URL(authority) };
          const session = this.connectionManager.lease(requestContext, {
            requestTimeout: (_a = this.config) == null ? void 0 : _a.sessionTimeout,
            disableConcurrentStreams: disableConcurrentStreams || false
          });
          const rejectWithDestroy = /* @__PURE__ */ __name((err) => {
            if (disableConcurrentStreams) {
              this.destroySession(session);
            }
            fulfilled = true;
            reject(err);
          }, "rejectWithDestroy");
          const queryString = (0, import_querystring_builder.buildQueryString)(query || {});
          let path = request.path;
          if (queryString) {
            path += `?${queryString}`;
          }
          if (request.fragment) {
            path += `#${request.fragment}`;
          }
          const req = session.request({
            ...request.headers,
            [import_http22.constants.HTTP2_HEADER_PATH]: path,
            [import_http22.constants.HTTP2_HEADER_METHOD]: method
          });
          session.ref();
          req.on("response", (headers) => {
            const httpResponse = new import_protocol_http8.HttpResponse({
              statusCode: headers[":status"] || -1,
              headers: getTransformedHeaders(headers),
              body: req
            });
            fulfilled = true;
            resolve({ response: httpResponse });
            if (disableConcurrentStreams) {
              session.close();
              this.connectionManager.deleteSession(authority, session);
            }
          });
          if (requestTimeout) {
            req.setTimeout(requestTimeout, () => {
              req.close();
              const timeoutError = new Error(`Stream timed out because of no activity for ${requestTimeout} ms`);
              timeoutError.name = "TimeoutError";
              rejectWithDestroy(timeoutError);
            });
          }
          if (abortSignal) {
            const onAbort = /* @__PURE__ */ __name(() => {
              req.close();
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              rejectWithDestroy(abortError);
            }, "onAbort");
            if (typeof abortSignal.addEventListener === "function") {
              const signal = abortSignal;
              signal.addEventListener("abort", onAbort, { once: true });
              req.once("close", () => signal.removeEventListener("abort", onAbort));
            } else {
              abortSignal.onabort = onAbort;
            }
          }
          req.on("frameError", (type, code, id) => {
            rejectWithDestroy(new Error(`Frame type id ${type} in stream id ${id} has failed with code ${code}.`));
          });
          req.on("error", rejectWithDestroy);
          req.on("aborted", () => {
            rejectWithDestroy(
              new Error(`HTTP/2 stream is abnormally aborted in mid-communication with result code ${req.rstCode}.`)
            );
          });
          req.on("close", () => {
            session.unref();
            if (disableConcurrentStreams) {
              session.destroy();
            }
            if (!fulfilled) {
              rejectWithDestroy(new Error("Unexpected error: http2 request did not get a response"));
            }
          });
          writeRequestBodyPromise = writeRequestBody(req, request, requestTimeout);
        });
      }
      updateHttpClientConfig(key, value) {
        this.config = void 0;
        this.configProvider = this.configProvider.then((config) => {
          return {
            ...config,
            [key]: value
          };
        });
      }
      httpHandlerConfigs() {
        return this.config ?? {};
      }
      /**
       * Destroys a session.
       * @param session The session to destroy.
       */
      destroySession(session) {
        if (!session.destroyed) {
          session.destroy();
        }
      }
    };
    __name(_NodeHttp2Handler, "NodeHttp2Handler");
    var NodeHttp2Handler = _NodeHttp2Handler;
    var _Collector = class _Collector extends import_stream.Writable {
      constructor() {
        super(...arguments);
        this.bufferedBytes = [];
      }
      _write(chunk, encoding, callback) {
        this.bufferedBytes.push(chunk);
        callback();
      }
    };
    __name(_Collector, "Collector");
    var Collector = _Collector;
    var streamCollector = /* @__PURE__ */ __name((stream) => {
      if (isReadableStreamInstance(stream)) {
        return collectReadableStream(stream);
      }
      return new Promise((resolve, reject) => {
        const collector = new Collector();
        stream.pipe(collector);
        stream.on("error", (err) => {
          collector.end();
          reject(err);
        });
        collector.on("error", reject);
        collector.on("finish", function() {
          const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));
          resolve(bytes);
        });
      });
    }, "streamCollector");
    var isReadableStreamInstance = /* @__PURE__ */ __name((stream) => typeof ReadableStream === "function" && stream instanceof ReadableStream, "isReadableStreamInstance");
    async function collectReadableStream(stream) {
      const chunks = [];
      const reader = stream.getReader();
      let isDone = false;
      let length = 0;
      while (!isDone) {
        const { done, value } = await reader.read();
        if (value) {
          chunks.push(value);
          length += value.length;
        }
        isDone = done;
      }
      const collected = new Uint8Array(length);
      let offset = 0;
      for (const chunk of chunks) {
        collected.set(chunk, offset);
        offset += chunk.length;
      }
      return collected;
    }
    __name(collectReadableStream, "collectReadableStream");
  }
});

// ../../node_modules/.pnpm/@smithy+fetch-http-handler@4.1.3/node_modules/@smithy/fetch-http-handler/dist-cjs/index.js
var require_dist_cjs13 = __commonJS({
  "../../node_modules/.pnpm/@smithy+fetch-http-handler@4.1.3/node_modules/@smithy/fetch-http-handler/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      FetchHttpHandler: () => FetchHttpHandler,
      keepAliveSupport: () => keepAliveSupport,
      streamCollector: () => streamCollector
    });
    module.exports = __toCommonJS2(src_exports);
    var import_protocol_http8 = require_dist_cjs2();
    var import_querystring_builder = require_dist_cjs11();
    function createRequest(url, requestOptions) {
      return new Request(url, requestOptions);
    }
    __name(createRequest, "createRequest");
    function requestTimeout(timeoutInMs = 0) {
      return new Promise((resolve, reject) => {
        if (timeoutInMs) {
          setTimeout(() => {
            const timeoutError = new Error(`Request did not complete within ${timeoutInMs} ms`);
            timeoutError.name = "TimeoutError";
            reject(timeoutError);
          }, timeoutInMs);
        }
      });
    }
    __name(requestTimeout, "requestTimeout");
    var keepAliveSupport = {
      supported: void 0
    };
    var _FetchHttpHandler = class _FetchHttpHandler2 {
      /**
       * @returns the input if it is an HttpHandler of any class,
       * or instantiates a new instance of this handler.
       */
      static create(instanceOrOptions) {
        if (typeof (instanceOrOptions == null ? void 0 : instanceOrOptions.handle) === "function") {
          return instanceOrOptions;
        }
        return new _FetchHttpHandler2(instanceOrOptions);
      }
      constructor(options) {
        if (typeof options === "function") {
          this.configProvider = options().then((opts) => opts || {});
        } else {
          this.config = options ?? {};
          this.configProvider = Promise.resolve(this.config);
        }
        if (keepAliveSupport.supported === void 0) {
          keepAliveSupport.supported = Boolean(
            typeof Request !== "undefined" && "keepalive" in createRequest("https://[::1]")
          );
        }
      }
      destroy() {
      }
      async handle(request, { abortSignal } = {}) {
        var _a;
        if (!this.config) {
          this.config = await this.configProvider;
        }
        const requestTimeoutInMs = this.config.requestTimeout;
        const keepAlive = this.config.keepAlive === true;
        const credentials = this.config.credentials;
        if (abortSignal == null ? void 0 : abortSignal.aborted) {
          const abortError = new Error("Request aborted");
          abortError.name = "AbortError";
          return Promise.reject(abortError);
        }
        let path = request.path;
        const queryString = (0, import_querystring_builder.buildQueryString)(request.query || {});
        if (queryString) {
          path += `?${queryString}`;
        }
        if (request.fragment) {
          path += `#${request.fragment}`;
        }
        let auth = "";
        if (request.username != null || request.password != null) {
          const username = request.username ?? "";
          const password = request.password ?? "";
          auth = `${username}:${password}@`;
        }
        const { port, method } = request;
        const url = `${request.protocol}//${auth}${request.hostname}${port ? `:${port}` : ""}${path}`;
        const body = method === "GET" || method === "HEAD" ? void 0 : request.body;
        const requestOptions = {
          body,
          headers: new Headers(request.headers),
          method,
          credentials
        };
        if ((_a = this.config) == null ? void 0 : _a.cache) {
          requestOptions.cache = this.config.cache;
        }
        if (body) {
          requestOptions.duplex = "half";
        }
        if (typeof AbortController !== "undefined") {
          requestOptions.signal = abortSignal;
        }
        if (keepAliveSupport.supported) {
          requestOptions.keepalive = keepAlive;
        }
        if (typeof this.config.requestInit === "function") {
          Object.assign(requestOptions, this.config.requestInit(request));
        }
        let removeSignalEventListener = /* @__PURE__ */ __name(() => {
        }, "removeSignalEventListener");
        const fetchRequest = createRequest(url, requestOptions);
        const raceOfPromises = [
          fetch(fetchRequest).then((response) => {
            const fetchHeaders = response.headers;
            const transformedHeaders = {};
            for (const pair of fetchHeaders.entries()) {
              transformedHeaders[pair[0]] = pair[1];
            }
            const hasReadableStream = response.body != void 0;
            if (!hasReadableStream) {
              return response.blob().then((body2) => ({
                response: new import_protocol_http8.HttpResponse({
                  headers: transformedHeaders,
                  reason: response.statusText,
                  statusCode: response.status,
                  body: body2
                })
              }));
            }
            return {
              response: new import_protocol_http8.HttpResponse({
                headers: transformedHeaders,
                reason: response.statusText,
                statusCode: response.status,
                body: response.body
              })
            };
          }),
          requestTimeout(requestTimeoutInMs)
        ];
        if (abortSignal) {
          raceOfPromises.push(
            new Promise((resolve, reject) => {
              const onAbort = /* @__PURE__ */ __name(() => {
                const abortError = new Error("Request aborted");
                abortError.name = "AbortError";
                reject(abortError);
              }, "onAbort");
              if (typeof abortSignal.addEventListener === "function") {
                const signal = abortSignal;
                signal.addEventListener("abort", onAbort, { once: true });
                removeSignalEventListener = /* @__PURE__ */ __name(() => signal.removeEventListener("abort", onAbort), "removeSignalEventListener");
              } else {
                abortSignal.onabort = onAbort;
              }
            })
          );
        }
        return Promise.race(raceOfPromises).finally(removeSignalEventListener);
      }
      updateHttpClientConfig(key, value) {
        this.config = void 0;
        this.configProvider = this.configProvider.then((config) => {
          config[key] = value;
          return config;
        });
      }
      httpHandlerConfigs() {
        return this.config ?? {};
      }
    };
    __name(_FetchHttpHandler, "FetchHttpHandler");
    var FetchHttpHandler = _FetchHttpHandler;
    var import_util_base64 = require_dist_cjs9();
    var streamCollector = /* @__PURE__ */ __name(async (stream) => {
      var _a;
      if (typeof Blob === "function" && stream instanceof Blob || ((_a = stream.constructor) == null ? void 0 : _a.name) === "Blob") {
        if (Blob.prototype.arrayBuffer !== void 0) {
          return new Uint8Array(await stream.arrayBuffer());
        }
        return collectBlob(stream);
      }
      return collectStream(stream);
    }, "streamCollector");
    async function collectBlob(blob) {
      const base64 = await readToBase64(blob);
      const arrayBuffer = (0, import_util_base64.fromBase64)(base64);
      return new Uint8Array(arrayBuffer);
    }
    __name(collectBlob, "collectBlob");
    async function collectStream(stream) {
      const chunks = [];
      const reader = stream.getReader();
      let isDone = false;
      let length = 0;
      while (!isDone) {
        const { done, value } = await reader.read();
        if (value) {
          chunks.push(value);
          length += value.length;
        }
        isDone = done;
      }
      const collected = new Uint8Array(length);
      let offset = 0;
      for (const chunk of chunks) {
        collected.set(chunk, offset);
        offset += chunk.length;
      }
      return collected;
    }
    __name(collectStream, "collectStream");
    function readToBase64(blob) {
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onloadend = () => {
          if (reader.readyState !== 2) {
            return reject(new Error("Reader aborted too early"));
          }
          const result = reader.result ?? "";
          const commaIndex = result.indexOf(",");
          const dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;
          resolve(result.substring(dataOffset));
        };
        reader.onabort = () => reject(new Error("Read aborted"));
        reader.onerror = () => reject(reader.error);
        reader.readAsDataURL(blob);
      });
    }
    __name(readToBase64, "readToBase64");
  }
});

// ../../node_modules/.pnpm/@smithy+util-hex-encoding@3.0.0/node_modules/@smithy/util-hex-encoding/dist-cjs/index.js
var require_dist_cjs14 = __commonJS({
  "../../node_modules/.pnpm/@smithy+util-hex-encoding@3.0.0/node_modules/@smithy/util-hex-encoding/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      fromHex: () => fromHex,
      toHex: () => toHex
    });
    module.exports = __toCommonJS2(src_exports);
    var SHORT_TO_HEX = {};
    var HEX_TO_SHORT = {};
    for (let i = 0; i < 256; i++) {
      let encodedByte = i.toString(16).toLowerCase();
      if (encodedByte.length === 1) {
        encodedByte = `0${encodedByte}`;
      }
      SHORT_TO_HEX[i] = encodedByte;
      HEX_TO_SHORT[encodedByte] = i;
    }
    function fromHex(encoded) {
      if (encoded.length % 2 !== 0) {
        throw new Error("Hex encoded strings must have an even number length");
      }
      const out = new Uint8Array(encoded.length / 2);
      for (let i = 0; i < encoded.length; i += 2) {
        const encodedByte = encoded.slice(i, i + 2).toLowerCase();
        if (encodedByte in HEX_TO_SHORT) {
          out[i / 2] = HEX_TO_SHORT[encodedByte];
        } else {
          throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
        }
      }
      return out;
    }
    __name(fromHex, "fromHex");
    function toHex(bytes) {
      let out = "";
      for (let i = 0; i < bytes.byteLength; i++) {
        out += SHORT_TO_HEX[bytes[i]];
      }
      return out;
    }
    __name(toHex, "toHex");
  }
});

// ../../node_modules/.pnpm/@smithy+util-stream@3.3.4/node_modules/@smithy/util-stream/dist-cjs/stream-type-check.js
var require_stream_type_check = __commonJS({
  "../../node_modules/.pnpm/@smithy+util-stream@3.3.4/node_modules/@smithy/util-stream/dist-cjs/stream-type-check.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isBlob = exports.isReadableStream = void 0;
    var isReadableStream2 = (stream) => {
      var _a;
      return typeof ReadableStream === "function" && (((_a = stream === null || stream === void 0 ? void 0 : stream.constructor) === null || _a === void 0 ? void 0 : _a.name) === ReadableStream.name || stream instanceof ReadableStream);
    };
    exports.isReadableStream = isReadableStream2;
    var isBlob2 = (blob) => {
      var _a;
      return typeof Blob === "function" && (((_a = blob === null || blob === void 0 ? void 0 : blob.constructor) === null || _a === void 0 ? void 0 : _a.name) === Blob.name || blob instanceof Blob);
    };
    exports.isBlob = isBlob2;
  }
});

// ../../node_modules/.pnpm/@smithy+util-stream@3.3.4/node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.browser.js
var require_sdk_stream_mixin_browser = __commonJS({
  "../../node_modules/.pnpm/@smithy+util-stream@3.3.4/node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.browser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sdkStreamMixin = void 0;
    var fetch_http_handler_1 = require_dist_cjs13();
    var util_base64_1 = require_dist_cjs9();
    var util_hex_encoding_1 = require_dist_cjs14();
    var util_utf8_1 = require_dist_cjs8();
    var stream_type_check_1 = require_stream_type_check();
    var ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = "The stream has already been transformed.";
    var sdkStreamMixin2 = (stream) => {
      var _a, _b;
      if (!isBlobInstance(stream) && !(0, stream_type_check_1.isReadableStream)(stream)) {
        const name = ((_b = (_a = stream === null || stream === void 0 ? void 0 : stream.__proto__) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.name) || stream;
        throw new Error(`Unexpected stream implementation, expect Blob or ReadableStream, got ${name}`);
      }
      let transformed = false;
      const transformToByteArray = async () => {
        if (transformed) {
          throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
        }
        transformed = true;
        return await (0, fetch_http_handler_1.streamCollector)(stream);
      };
      const blobToWebStream = (blob) => {
        if (typeof blob.stream !== "function") {
          throw new Error("Cannot transform payload Blob to web stream. Please make sure the Blob.stream() is polyfilled.\nIf you are using React Native, this API is not yet supported, see: https://react-native.canny.io/feature-requests/p/fetch-streaming-body");
        }
        return blob.stream();
      };
      return Object.assign(stream, {
        transformToByteArray,
        transformToString: async (encoding) => {
          const buf = await transformToByteArray();
          if (encoding === "base64") {
            return (0, util_base64_1.toBase64)(buf);
          } else if (encoding === "hex") {
            return (0, util_hex_encoding_1.toHex)(buf);
          } else if (encoding === void 0 || encoding === "utf8" || encoding === "utf-8") {
            return (0, util_utf8_1.toUtf8)(buf);
          } else if (typeof TextDecoder === "function") {
            return new TextDecoder(encoding).decode(buf);
          } else {
            throw new Error("TextDecoder is not available, please make sure polyfill is provided.");
          }
        },
        transformToWebStream: () => {
          if (transformed) {
            throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
          }
          transformed = true;
          if (isBlobInstance(stream)) {
            return blobToWebStream(stream);
          } else if ((0, stream_type_check_1.isReadableStream)(stream)) {
            return stream;
          } else {
            throw new Error(`Cannot transform payload to web stream, got ${stream}`);
          }
        }
      });
    };
    exports.sdkStreamMixin = sdkStreamMixin2;
    var isBlobInstance = (stream) => typeof Blob === "function" && stream instanceof Blob;
  }
});

// ../../node_modules/.pnpm/@smithy+util-stream@3.3.4/node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.js
var require_sdk_stream_mixin = __commonJS({
  "../../node_modules/.pnpm/@smithy+util-stream@3.3.4/node_modules/@smithy/util-stream/dist-cjs/sdk-stream-mixin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sdkStreamMixin = void 0;
    var node_http_handler_1 = require_dist_cjs12();
    var util_buffer_from_1 = require_dist_cjs7();
    var stream_1 = __require("stream");
    var sdk_stream_mixin_browser_1 = require_sdk_stream_mixin_browser();
    var ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = "The stream has already been transformed.";
    var sdkStreamMixin2 = (stream) => {
      var _a, _b;
      if (!(stream instanceof stream_1.Readable)) {
        try {
          return (0, sdk_stream_mixin_browser_1.sdkStreamMixin)(stream);
        } catch (e) {
          const name = ((_b = (_a = stream === null || stream === void 0 ? void 0 : stream.__proto__) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.name) || stream;
          throw new Error(`Unexpected stream implementation, expect Stream.Readable instance, got ${name}`);
        }
      }
      let transformed = false;
      const transformToByteArray = async () => {
        if (transformed) {
          throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
        }
        transformed = true;
        return await (0, node_http_handler_1.streamCollector)(stream);
      };
      return Object.assign(stream, {
        transformToByteArray,
        transformToString: async (encoding) => {
          const buf = await transformToByteArray();
          if (encoding === void 0 || Buffer.isEncoding(encoding)) {
            return (0, util_buffer_from_1.fromArrayBuffer)(buf.buffer, buf.byteOffset, buf.byteLength).toString(encoding);
          } else {
            const decoder = new TextDecoder(encoding);
            return decoder.decode(buf);
          }
        },
        transformToWebStream: () => {
          if (transformed) {
            throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
          }
          if (stream.readableFlowing !== null) {
            throw new Error("The stream has been consumed by other callbacks.");
          }
          if (typeof stream_1.Readable.toWeb !== "function") {
            throw new Error("Readable.toWeb() is not supported. Please make sure you are using Node.js >= 17.0.0, or polyfill is available.");
          }
          transformed = true;
          return stream_1.Readable.toWeb(stream);
        }
      });
    };
    exports.sdkStreamMixin = sdkStreamMixin2;
  }
});

// ../../node_modules/.pnpm/@smithy+util-stream@3.3.4/node_modules/@smithy/util-stream/dist-cjs/splitStream.browser.js
var require_splitStream_browser = __commonJS({
  "../../node_modules/.pnpm/@smithy+util-stream@3.3.4/node_modules/@smithy/util-stream/dist-cjs/splitStream.browser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.splitStream = void 0;
    async function splitStream2(stream) {
      if (typeof stream.stream === "function") {
        stream = stream.stream();
      }
      const readableStream = stream;
      return readableStream.tee();
    }
    exports.splitStream = splitStream2;
  }
});

// ../../node_modules/.pnpm/@smithy+util-stream@3.3.4/node_modules/@smithy/util-stream/dist-cjs/splitStream.js
var require_splitStream = __commonJS({
  "../../node_modules/.pnpm/@smithy+util-stream@3.3.4/node_modules/@smithy/util-stream/dist-cjs/splitStream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.splitStream = void 0;
    var stream_1 = __require("stream");
    var splitStream_browser_1 = require_splitStream_browser();
    var stream_type_check_1 = require_stream_type_check();
    async function splitStream2(stream) {
      if ((0, stream_type_check_1.isReadableStream)(stream) || (0, stream_type_check_1.isBlob)(stream)) {
        return (0, splitStream_browser_1.splitStream)(stream);
      }
      const stream1 = new stream_1.PassThrough();
      const stream2 = new stream_1.PassThrough();
      stream.pipe(stream1);
      stream.pipe(stream2);
      return [stream1, stream2];
    }
    exports.splitStream = splitStream2;
  }
});

// ../../node_modules/.pnpm/@smithy+util-stream@3.3.4/node_modules/@smithy/util-stream/dist-cjs/headStream.browser.js
var require_headStream_browser = __commonJS({
  "../../node_modules/.pnpm/@smithy+util-stream@3.3.4/node_modules/@smithy/util-stream/dist-cjs/headStream.browser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.headStream = void 0;
    async function headStream2(stream, bytes) {
      var _a;
      let byteLengthCounter = 0;
      const chunks = [];
      const reader = stream.getReader();
      let isDone = false;
      while (!isDone) {
        const { done, value } = await reader.read();
        if (value) {
          chunks.push(value);
          byteLengthCounter += (_a = value === null || value === void 0 ? void 0 : value.byteLength) !== null && _a !== void 0 ? _a : 0;
        }
        if (byteLengthCounter >= bytes) {
          break;
        }
        isDone = done;
      }
      reader.releaseLock();
      const collected = new Uint8Array(Math.min(bytes, byteLengthCounter));
      let offset = 0;
      for (const chunk of chunks) {
        if (chunk.byteLength > collected.byteLength - offset) {
          collected.set(chunk.subarray(0, collected.byteLength - offset), offset);
          break;
        } else {
          collected.set(chunk, offset);
        }
        offset += chunk.length;
      }
      return collected;
    }
    exports.headStream = headStream2;
  }
});

// ../../node_modules/.pnpm/@smithy+util-stream@3.3.4/node_modules/@smithy/util-stream/dist-cjs/headStream.js
var require_headStream = __commonJS({
  "../../node_modules/.pnpm/@smithy+util-stream@3.3.4/node_modules/@smithy/util-stream/dist-cjs/headStream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.headStream = void 0;
    var stream_1 = __require("stream");
    var headStream_browser_1 = require_headStream_browser();
    var stream_type_check_1 = require_stream_type_check();
    var headStream2 = (stream, bytes) => {
      if ((0, stream_type_check_1.isReadableStream)(stream)) {
        return (0, headStream_browser_1.headStream)(stream, bytes);
      }
      return new Promise((resolve, reject) => {
        const collector = new Collector();
        collector.limit = bytes;
        stream.pipe(collector);
        stream.on("error", (err) => {
          collector.end();
          reject(err);
        });
        collector.on("error", reject);
        collector.on("finish", function() {
          const bytes2 = new Uint8Array(Buffer.concat(this.buffers));
          resolve(bytes2);
        });
      });
    };
    exports.headStream = headStream2;
    var Collector = class extends stream_1.Writable {
      constructor() {
        super(...arguments);
        this.buffers = [];
        this.limit = Infinity;
        this.bytesBuffered = 0;
      }
      _write(chunk, encoding, callback) {
        var _a;
        this.buffers.push(chunk);
        this.bytesBuffered += (_a = chunk.byteLength) !== null && _a !== void 0 ? _a : 0;
        if (this.bytesBuffered >= this.limit) {
          const excess = this.bytesBuffered - this.limit;
          const tailBuffer = this.buffers[this.buffers.length - 1];
          this.buffers[this.buffers.length - 1] = tailBuffer.subarray(0, tailBuffer.byteLength - excess);
          this.emit("finish");
        }
        callback();
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-stream@3.3.4/node_modules/@smithy/util-stream/dist-cjs/checksum/ChecksumStream.js
var require_ChecksumStream = __commonJS({
  "../../node_modules/.pnpm/@smithy+util-stream@3.3.4/node_modules/@smithy/util-stream/dist-cjs/checksum/ChecksumStream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ChecksumStream = void 0;
    var util_base64_1 = require_dist_cjs9();
    var stream_1 = __require("stream");
    var ChecksumStream2 = class extends stream_1.Duplex {
      constructor({ expectedChecksum, checksum, source, checksumSourceLocation, base64Encoder }) {
        var _a, _b;
        super();
        if (typeof source.pipe === "function") {
          this.source = source;
        } else {
          throw new Error(`@smithy/util-stream: unsupported source type ${(_b = (_a = source === null || source === void 0 ? void 0 : source.constructor) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : source} in ChecksumStream.`);
        }
        this.base64Encoder = base64Encoder !== null && base64Encoder !== void 0 ? base64Encoder : util_base64_1.toBase64;
        this.expectedChecksum = expectedChecksum;
        this.checksum = checksum;
        this.checksumSourceLocation = checksumSourceLocation;
        this.source.pipe(this);
      }
      _read(size) {
      }
      _write(chunk, encoding, callback) {
        try {
          this.checksum.update(chunk);
          this.push(chunk);
        } catch (e) {
          return callback(e);
        }
        return callback();
      }
      async _final(callback) {
        try {
          const digest = await this.checksum.digest();
          const received = this.base64Encoder(digest);
          if (this.expectedChecksum !== received) {
            return callback(new Error(`Checksum mismatch: expected "${this.expectedChecksum}" but received "${received}" in response header "${this.checksumSourceLocation}".`));
          }
        } catch (e) {
          return callback(e);
        }
        this.push(null);
        return callback();
      }
    };
    exports.ChecksumStream = ChecksumStream2;
  }
});

// ../../node_modules/.pnpm/@smithy+util-stream@3.3.4/node_modules/@smithy/util-stream/dist-cjs/checksum/ChecksumStream.browser.js
var require_ChecksumStream_browser = __commonJS({
  "../../node_modules/.pnpm/@smithy+util-stream@3.3.4/node_modules/@smithy/util-stream/dist-cjs/checksum/ChecksumStream.browser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ChecksumStream = void 0;
    var ReadableStreamRef = typeof ReadableStream === "function" ? ReadableStream : function() {
    };
    var ChecksumStream2 = class extends ReadableStreamRef {
    };
    exports.ChecksumStream = ChecksumStream2;
  }
});

// ../../node_modules/.pnpm/@smithy+util-stream@3.3.4/node_modules/@smithy/util-stream/dist-cjs/checksum/createChecksumStream.browser.js
var require_createChecksumStream_browser = __commonJS({
  "../../node_modules/.pnpm/@smithy+util-stream@3.3.4/node_modules/@smithy/util-stream/dist-cjs/checksum/createChecksumStream.browser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createChecksumStream = void 0;
    var util_base64_1 = require_dist_cjs9();
    var stream_type_check_1 = require_stream_type_check();
    var ChecksumStream_browser_1 = require_ChecksumStream_browser();
    var createChecksumStream2 = ({ expectedChecksum, checksum, source, checksumSourceLocation, base64Encoder }) => {
      var _a, _b;
      if (!(0, stream_type_check_1.isReadableStream)(source)) {
        throw new Error(`@smithy/util-stream: unsupported source type ${(_b = (_a = source === null || source === void 0 ? void 0 : source.constructor) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : source} in ChecksumStream.`);
      }
      const encoder = base64Encoder !== null && base64Encoder !== void 0 ? base64Encoder : util_base64_1.toBase64;
      if (typeof TransformStream !== "function") {
        throw new Error("@smithy/util-stream: unable to instantiate ChecksumStream because API unavailable: ReadableStream/TransformStream.");
      }
      const transform = new TransformStream({
        start() {
        },
        async transform(chunk, controller) {
          checksum.update(chunk);
          controller.enqueue(chunk);
        },
        async flush(controller) {
          const digest = await checksum.digest();
          const received = encoder(digest);
          if (expectedChecksum !== received) {
            const error = new Error(`Checksum mismatch: expected "${expectedChecksum}" but received "${received}" in response header "${checksumSourceLocation}".`);
            controller.error(error);
          } else {
            controller.terminate();
          }
        }
      });
      source.pipeThrough(transform);
      const readable = transform.readable;
      Object.setPrototypeOf(readable, ChecksumStream_browser_1.ChecksumStream.prototype);
      return readable;
    };
    exports.createChecksumStream = createChecksumStream2;
  }
});

// ../../node_modules/.pnpm/@smithy+util-stream@3.3.4/node_modules/@smithy/util-stream/dist-cjs/checksum/createChecksumStream.js
var require_createChecksumStream = __commonJS({
  "../../node_modules/.pnpm/@smithy+util-stream@3.3.4/node_modules/@smithy/util-stream/dist-cjs/checksum/createChecksumStream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createChecksumStream = void 0;
    var stream_type_check_1 = require_stream_type_check();
    var ChecksumStream_1 = require_ChecksumStream();
    var createChecksumStream_browser_1 = require_createChecksumStream_browser();
    function createChecksumStream2(init) {
      if (typeof ReadableStream === "function" && (0, stream_type_check_1.isReadableStream)(init.source)) {
        return (0, createChecksumStream_browser_1.createChecksumStream)(init);
      }
      return new ChecksumStream_1.ChecksumStream(init);
    }
    exports.createChecksumStream = createChecksumStream2;
  }
});

// ../../node_modules/.pnpm/@smithy+util-stream@3.3.4/node_modules/@smithy/util-stream/dist-cjs/index.js
var require_dist_cjs15 = __commonJS({
  "../../node_modules/.pnpm/@smithy+util-stream@3.3.4/node_modules/@smithy/util-stream/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __reExport = (target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default"));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      Uint8ArrayBlobAdapter: () => Uint8ArrayBlobAdapter2
    });
    module.exports = __toCommonJS2(src_exports);
    var import_util_base64 = require_dist_cjs9();
    var import_util_utf8 = require_dist_cjs8();
    function transformToString(payload, encoding = "utf-8") {
      if (encoding === "base64") {
        return (0, import_util_base64.toBase64)(payload);
      }
      return (0, import_util_utf8.toUtf8)(payload);
    }
    __name(transformToString, "transformToString");
    function transformFromString(str, encoding) {
      if (encoding === "base64") {
        return Uint8ArrayBlobAdapter2.mutate((0, import_util_base64.fromBase64)(str));
      }
      return Uint8ArrayBlobAdapter2.mutate((0, import_util_utf8.fromUtf8)(str));
    }
    __name(transformFromString, "transformFromString");
    var _Uint8ArrayBlobAdapter = class _Uint8ArrayBlobAdapter2 extends Uint8Array {
      /**
       * @param source - such as a string or Stream.
       * @returns a new Uint8ArrayBlobAdapter extending Uint8Array.
       */
      static fromString(source, encoding = "utf-8") {
        switch (typeof source) {
          case "string":
            return transformFromString(source, encoding);
          default:
            throw new Error(`Unsupported conversion from ${typeof source} to Uint8ArrayBlobAdapter.`);
        }
      }
      /**
       * @param source - Uint8Array to be mutated.
       * @returns the same Uint8Array but with prototype switched to Uint8ArrayBlobAdapter.
       */
      static mutate(source) {
        Object.setPrototypeOf(source, _Uint8ArrayBlobAdapter2.prototype);
        return source;
      }
      /**
       * @param encoding - default 'utf-8'.
       * @returns the blob as string.
       */
      transformToString(encoding = "utf-8") {
        return transformToString(this, encoding);
      }
    };
    __name(_Uint8ArrayBlobAdapter, "Uint8ArrayBlobAdapter");
    var Uint8ArrayBlobAdapter2 = _Uint8ArrayBlobAdapter;
    __reExport(src_exports, require_getAwsChunkedEncodingStream(), module.exports);
    __reExport(src_exports, require_sdk_stream_mixin(), module.exports);
    __reExport(src_exports, require_splitStream(), module.exports);
    __reExport(src_exports, require_headStream(), module.exports);
    __reExport(src_exports, require_stream_type_check(), module.exports);
    __reExport(src_exports, require_createChecksumStream(), module.exports);
    __reExport(src_exports, require_ChecksumStream(), module.exports);
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/submodules/protocols/collect-stream-body.js
var import_util_stream, collectBody2;
var init_collect_stream_body = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/submodules/protocols/collect-stream-body.js"() {
    import_util_stream = __toESM(require_dist_cjs15());
    collectBody2 = async (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return import_util_stream.Uint8ArrayBlobAdapter.mutate(streamBody);
      }
      if (!streamBody) {
        return import_util_stream.Uint8ArrayBlobAdapter.mutate(new Uint8Array());
      }
      const fromContext = context.streamCollector(streamBody);
      return import_util_stream.Uint8ArrayBlobAdapter.mutate(await fromContext);
    };
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/submodules/protocols/extended-encode-uri-component.js
function extendedEncodeURIComponent2(str) {
  return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
    return "%" + c.charCodeAt(0).toString(16).toUpperCase();
  });
}
var init_extended_encode_uri_component = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/submodules/protocols/extended-encode-uri-component.js"() {
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/submodules/protocols/resolve-path.js
var resolvedPath2;
var init_resolve_path = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/submodules/protocols/resolve-path.js"() {
    init_extended_encode_uri_component();
    resolvedPath2 = (resolvedPath3, input, memberName, labelValueProvider, uriLabel, isGreedyLabel) => {
      if (input != null && input[memberName] !== void 0) {
        const labelValue = labelValueProvider();
        if (labelValue.length <= 0) {
          throw new Error("Empty value provided for input HTTP label: " + memberName + ".");
        }
        resolvedPath3 = resolvedPath3.replace(uriLabel, isGreedyLabel ? labelValue.split("/").map((segment) => extendedEncodeURIComponent2(segment)).join("/") : extendedEncodeURIComponent2(labelValue));
      } else {
        throw new Error("No value provided for input HTTP label: " + memberName + ".");
      }
      return resolvedPath3;
    };
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/submodules/protocols/requestBuilder.js
function requestBuilder(input, context) {
  return new RequestBuilder(input, context);
}
var import_protocol_http5, RequestBuilder;
var init_requestBuilder = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/submodules/protocols/requestBuilder.js"() {
    import_protocol_http5 = __toESM(require_dist_cjs2());
    init_resolve_path();
    RequestBuilder = class {
      constructor(input, context) {
        this.input = input;
        this.context = context;
        this.query = {};
        this.method = "";
        this.headers = {};
        this.path = "";
        this.body = null;
        this.hostname = "";
        this.resolvePathStack = [];
      }
      async build() {
        const { hostname, protocol = "https", port, path: basePath } = await this.context.endpoint();
        this.path = basePath;
        for (const resolvePath of this.resolvePathStack) {
          resolvePath(this.path);
        }
        return new import_protocol_http5.HttpRequest({
          protocol,
          hostname: this.hostname || hostname,
          port,
          method: this.method,
          path: this.path,
          query: this.query,
          body: this.body,
          headers: this.headers
        });
      }
      hn(hostname) {
        this.hostname = hostname;
        return this;
      }
      bp(uriLabel) {
        this.resolvePathStack.push((basePath) => {
          this.path = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + uriLabel;
        });
        return this;
      }
      p(memberName, labelValueProvider, uriLabel, isGreedyLabel) {
        this.resolvePathStack.push((path) => {
          this.path = resolvedPath2(path, this.input, memberName, labelValueProvider, uriLabel, isGreedyLabel);
        });
        return this;
      }
      h(headers) {
        this.headers = headers;
        return this;
      }
      q(query) {
        this.query = query;
        return this;
      }
      b(body) {
        this.body = body;
        return this;
      }
      m(method) {
        this.method = method;
        return this;
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/submodules/protocols/index.js
var protocols_exports = {};
__export(protocols_exports, {
  RequestBuilder: () => RequestBuilder,
  collectBody: () => collectBody2,
  extendedEncodeURIComponent: () => extendedEncodeURIComponent2,
  requestBuilder: () => requestBuilder,
  resolvedPath: () => resolvedPath2
});
var init_protocols = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/submodules/protocols/index.js"() {
    init_collect_stream_body();
    init_extended_encode_uri_component();
    init_requestBuilder();
    init_resolve_path();
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/protocols/requestBuilder.js
var init_requestBuilder2 = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/protocols/requestBuilder.js"() {
    init_protocols();
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/setFeature.js
function setFeature2(context, feature, value) {
  if (!context.__smithy_context) {
    context.__smithy_context = {
      features: {}
    };
  } else if (!context.__smithy_context.features) {
    context.__smithy_context.features = {};
  }
  context.__smithy_context.features[feature] = value;
}
var init_setFeature2 = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/setFeature.js"() {
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/util-identity-and-auth/DefaultIdentityProviderConfig.js
var DefaultIdentityProviderConfig;
var init_DefaultIdentityProviderConfig = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/util-identity-and-auth/DefaultIdentityProviderConfig.js"() {
    DefaultIdentityProviderConfig = class {
      constructor(config) {
        this.authSchemes = /* @__PURE__ */ new Map();
        for (const [key, value] of Object.entries(config)) {
          if (value !== void 0) {
            this.authSchemes.set(key, value);
          }
        }
      }
      getIdentityProvider(schemeId) {
        return this.authSchemes.get(schemeId);
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/httpApiKeyAuth.js
var import_protocol_http6, import_types4, HttpApiKeyAuthSigner;
var init_httpApiKeyAuth = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/httpApiKeyAuth.js"() {
    import_protocol_http6 = __toESM(require_dist_cjs2());
    import_types4 = __toESM(require_dist_cjs());
    HttpApiKeyAuthSigner = class {
      async sign(httpRequest, identity, signingProperties) {
        if (!signingProperties) {
          throw new Error("request could not be signed with `apiKey` since the `name` and `in` signer properties are missing");
        }
        if (!signingProperties.name) {
          throw new Error("request could not be signed with `apiKey` since the `name` signer property is missing");
        }
        if (!signingProperties.in) {
          throw new Error("request could not be signed with `apiKey` since the `in` signer property is missing");
        }
        if (!identity.apiKey) {
          throw new Error("request could not be signed with `apiKey` since the `apiKey` is not defined");
        }
        const clonedRequest = import_protocol_http6.HttpRequest.clone(httpRequest);
        if (signingProperties.in === import_types4.HttpApiKeyAuthLocation.QUERY) {
          clonedRequest.query[signingProperties.name] = identity.apiKey;
        } else if (signingProperties.in === import_types4.HttpApiKeyAuthLocation.HEADER) {
          clonedRequest.headers[signingProperties.name] = signingProperties.scheme ? `${signingProperties.scheme} ${identity.apiKey}` : identity.apiKey;
        } else {
          throw new Error("request can only be signed with `apiKey` locations `query` or `header`, but found: `" + signingProperties.in + "`");
        }
        return clonedRequest;
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/httpBearerAuth.js
var import_protocol_http7, HttpBearerAuthSigner;
var init_httpBearerAuth = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/httpBearerAuth.js"() {
    import_protocol_http7 = __toESM(require_dist_cjs2());
    HttpBearerAuthSigner = class {
      async sign(httpRequest, identity, signingProperties) {
        const clonedRequest = import_protocol_http7.HttpRequest.clone(httpRequest);
        if (!identity.token) {
          throw new Error("request could not be signed with `token` since the `token` is not defined");
        }
        clonedRequest.headers["Authorization"] = `Bearer ${identity.token}`;
        return clonedRequest;
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/noAuth.js
var NoAuthSigner;
var init_noAuth = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/noAuth.js"() {
    NoAuthSigner = class {
      async sign(httpRequest, identity, signingProperties) {
        return httpRequest;
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/index.js
var init_httpAuthSchemes = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/index.js"() {
    init_httpApiKeyAuth();
    init_httpBearerAuth();
    init_noAuth();
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/util-identity-and-auth/memoizeIdentityProvider.js
var createIsIdentityExpiredFunction, EXPIRATION_MS, isIdentityExpired, doesIdentityRequireRefresh, memoizeIdentityProvider;
var init_memoizeIdentityProvider = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/util-identity-and-auth/memoizeIdentityProvider.js"() {
    createIsIdentityExpiredFunction = (expirationMs) => (identity) => doesIdentityRequireRefresh(identity) && identity.expiration.getTime() - Date.now() < expirationMs;
    EXPIRATION_MS = 3e5;
    isIdentityExpired = createIsIdentityExpiredFunction(EXPIRATION_MS);
    doesIdentityRequireRefresh = (identity) => identity.expiration !== void 0;
    memoizeIdentityProvider = (provider, isExpired, requiresRefresh) => {
      if (provider === void 0) {
        return void 0;
      }
      const normalizedProvider = typeof provider !== "function" ? async () => Promise.resolve(provider) : provider;
      let resolved;
      let pending;
      let hasResult;
      let isConstant = false;
      const coalesceProvider = async (options) => {
        if (!pending) {
          pending = normalizedProvider(options);
        }
        try {
          resolved = await pending;
          hasResult = true;
          isConstant = false;
        } finally {
          pending = void 0;
        }
        return resolved;
      };
      if (isExpired === void 0) {
        return async (options) => {
          if (!hasResult || options?.forceRefresh) {
            resolved = await coalesceProvider(options);
          }
          return resolved;
        };
      }
      return async (options) => {
        if (!hasResult || options?.forceRefresh) {
          resolved = await coalesceProvider(options);
        }
        if (isConstant) {
          return resolved;
        }
        if (!requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          await coalesceProvider(options);
          return resolved;
        }
        return resolved;
      };
    };
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/util-identity-and-auth/index.js
var init_util_identity_and_auth = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/util-identity-and-auth/index.js"() {
    init_DefaultIdentityProviderConfig();
    init_httpAuthSchemes();
    init_memoizeIdentityProvider();
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/index.js
var dist_es_exports = {};
__export(dist_es_exports, {
  DefaultIdentityProviderConfig: () => DefaultIdentityProviderConfig,
  EXPIRATION_MS: () => EXPIRATION_MS,
  HttpApiKeyAuthSigner: () => HttpApiKeyAuthSigner,
  HttpBearerAuthSigner: () => HttpBearerAuthSigner,
  NoAuthSigner: () => NoAuthSigner,
  createIsIdentityExpiredFunction: () => createIsIdentityExpiredFunction,
  createPaginator: () => createPaginator,
  doesIdentityRequireRefresh: () => doesIdentityRequireRefresh,
  getHttpAuthSchemeEndpointRuleSetPlugin: () => getHttpAuthSchemeEndpointRuleSetPlugin,
  getHttpAuthSchemePlugin: () => getHttpAuthSchemePlugin,
  getHttpSigningPlugin: () => getHttpSigningPlugin,
  getSmithyContext: () => getSmithyContext,
  httpAuthSchemeEndpointRuleSetMiddlewareOptions: () => httpAuthSchemeEndpointRuleSetMiddlewareOptions,
  httpAuthSchemeMiddleware: () => httpAuthSchemeMiddleware,
  httpAuthSchemeMiddlewareOptions: () => httpAuthSchemeMiddlewareOptions,
  httpSigningMiddleware: () => httpSigningMiddleware,
  httpSigningMiddlewareOptions: () => httpSigningMiddlewareOptions,
  isIdentityExpired: () => isIdentityExpired,
  memoizeIdentityProvider: () => memoizeIdentityProvider,
  normalizeProvider: () => normalizeProvider,
  requestBuilder: () => requestBuilder,
  setFeature: () => setFeature2
});
var init_dist_es = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.5.7/node_modules/@smithy/core/dist-es/index.js"() {
    init_getSmithyContext();
    init_middleware_http_auth_scheme();
    init_middleware_http_signing();
    init_normalizeProvider();
    init_createPaginator();
    init_requestBuilder2();
    init_setFeature2();
    init_util_identity_and_auth();
  }
});

// ../../node_modules/.pnpm/@smithy+property-provider@3.1.11/node_modules/@smithy/property-provider/dist-cjs/index.js
var require_dist_cjs16 = __commonJS({
  "../../node_modules/.pnpm/@smithy+property-provider@3.1.11/node_modules/@smithy/property-provider/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      CredentialsProviderError: () => CredentialsProviderError,
      ProviderError: () => ProviderError2,
      TokenProviderError: () => TokenProviderError,
      chain: () => chain,
      fromStatic: () => fromStatic,
      memoize: () => memoize
    });
    module.exports = __toCommonJS2(src_exports);
    var _ProviderError = class _ProviderError2 extends Error {
      constructor(message, options = true) {
        var _a;
        let logger2;
        let tryNextLink = true;
        if (typeof options === "boolean") {
          logger2 = void 0;
          tryNextLink = options;
        } else if (options != null && typeof options === "object") {
          logger2 = options.logger;
          tryNextLink = options.tryNextLink ?? true;
        }
        super(message);
        this.name = "ProviderError";
        this.tryNextLink = tryNextLink;
        Object.setPrototypeOf(this, _ProviderError2.prototype);
        (_a = logger2 == null ? void 0 : logger2.debug) == null ? void 0 : _a.call(logger2, `@smithy/property-provider ${tryNextLink ? "->" : "(!)"} ${message}`);
      }
      /**
       * @deprecated use new operator.
       */
      static from(error, options = true) {
        return Object.assign(new this(error.message, options), error);
      }
    };
    __name(_ProviderError, "ProviderError");
    var ProviderError2 = _ProviderError;
    var _CredentialsProviderError = class _CredentialsProviderError2 extends ProviderError2 {
      /**
       * @override
       */
      constructor(message, options = true) {
        super(message, options);
        this.name = "CredentialsProviderError";
        Object.setPrototypeOf(this, _CredentialsProviderError2.prototype);
      }
    };
    __name(_CredentialsProviderError, "CredentialsProviderError");
    var CredentialsProviderError = _CredentialsProviderError;
    var _TokenProviderError = class _TokenProviderError2 extends ProviderError2 {
      /**
       * @override
       */
      constructor(message, options = true) {
        super(message, options);
        this.name = "TokenProviderError";
        Object.setPrototypeOf(this, _TokenProviderError2.prototype);
      }
    };
    __name(_TokenProviderError, "TokenProviderError");
    var TokenProviderError = _TokenProviderError;
    var chain = /* @__PURE__ */ __name((...providers) => async () => {
      if (providers.length === 0) {
        throw new ProviderError2("No providers in chain");
      }
      let lastProviderError;
      for (const provider of providers) {
        try {
          const credentials = await provider();
          return credentials;
        } catch (err) {
          lastProviderError = err;
          if (err == null ? void 0 : err.tryNextLink) {
            continue;
          }
          throw err;
        }
      }
      throw lastProviderError;
    }, "chain");
    var fromStatic = /* @__PURE__ */ __name((staticValue) => () => Promise.resolve(staticValue), "fromStatic");
    var memoize = /* @__PURE__ */ __name((provider, isExpired, requiresRefresh) => {
      let resolved;
      let pending;
      let hasResult;
      let isConstant = false;
      const coalesceProvider = /* @__PURE__ */ __name(async () => {
        if (!pending) {
          pending = provider();
        }
        try {
          resolved = await pending;
          hasResult = true;
          isConstant = false;
        } finally {
          pending = void 0;
        }
        return resolved;
      }, "coalesceProvider");
      if (isExpired === void 0) {
        return async (options) => {
          if (!hasResult || (options == null ? void 0 : options.forceRefresh)) {
            resolved = await coalesceProvider();
          }
          return resolved;
        };
      }
      return async (options) => {
        if (!hasResult || (options == null ? void 0 : options.forceRefresh)) {
          resolved = await coalesceProvider();
        }
        if (isConstant) {
          return resolved;
        }
        if (requiresRefresh && !requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          await coalesceProvider();
          return resolved;
        }
        return resolved;
      };
    }, "memoize");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/resolveAwsSdkSigV4AConfig.js
var import_property_provider, resolveAwsSdkSigV4AConfig, NODE_SIGV4A_CONFIG_OPTIONS;
var init_resolveAwsSdkSigV4AConfig = __esm({
  "../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/resolveAwsSdkSigV4AConfig.js"() {
    init_dist_es();
    import_property_provider = __toESM(require_dist_cjs16());
    resolveAwsSdkSigV4AConfig = (config) => {
      config.sigv4aSigningRegionSet = normalizeProvider(config.sigv4aSigningRegionSet);
      return config;
    };
    NODE_SIGV4A_CONFIG_OPTIONS = {
      environmentVariableSelector(env) {
        if (env.AWS_SIGV4A_SIGNING_REGION_SET) {
          return env.AWS_SIGV4A_SIGNING_REGION_SET.split(",").map((_) => _.trim());
        }
        throw new import_property_provider.ProviderError("AWS_SIGV4A_SIGNING_REGION_SET not set in env.", {
          tryNextLink: true
        });
      },
      configFileSelector(profile) {
        if (profile.sigv4a_signing_region_set) {
          return (profile.sigv4a_signing_region_set ?? "").split(",").map((_) => _.trim());
        }
        throw new import_property_provider.ProviderError("sigv4a_signing_region_set not set in profile.", {
          tryNextLink: true
        });
      },
      default: void 0
    };
  }
});

// ../../node_modules/.pnpm/@smithy+signature-v4@4.2.4/node_modules/@smithy/signature-v4/dist-cjs/index.js
var require_dist_cjs17 = __commonJS({
  "../../node_modules/.pnpm/@smithy+signature-v4@4.2.4/node_modules/@smithy/signature-v4/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      SignatureV4: () => SignatureV42,
      clearCredentialCache: () => clearCredentialCache,
      createScope: () => createScope,
      getCanonicalHeaders: () => getCanonicalHeaders,
      getCanonicalQuery: () => getCanonicalQuery,
      getPayloadHash: () => getPayloadHash,
      getSigningKey: () => getSigningKey,
      moveHeadersToQuery: () => moveHeadersToQuery,
      prepareRequest: () => prepareRequest
    });
    module.exports = __toCommonJS2(src_exports);
    var import_util_middleware3 = require_dist_cjs4();
    var import_util_utf84 = require_dist_cjs8();
    var ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
    var CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
    var AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
    var SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
    var EXPIRES_QUERY_PARAM = "X-Amz-Expires";
    var SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
    var TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
    var AUTH_HEADER = "authorization";
    var AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase();
    var DATE_HEADER = "date";
    var GENERATED_HEADERS = [AUTH_HEADER, AMZ_DATE_HEADER, DATE_HEADER];
    var SIGNATURE_HEADER = SIGNATURE_QUERY_PARAM.toLowerCase();
    var SHA256_HEADER = "x-amz-content-sha256";
    var TOKEN_HEADER = TOKEN_QUERY_PARAM.toLowerCase();
    var ALWAYS_UNSIGNABLE_HEADERS = {
      authorization: true,
      "cache-control": true,
      connection: true,
      expect: true,
      from: true,
      "keep-alive": true,
      "max-forwards": true,
      pragma: true,
      referer: true,
      te: true,
      trailer: true,
      "transfer-encoding": true,
      upgrade: true,
      "user-agent": true,
      "x-amzn-trace-id": true
    };
    var PROXY_HEADER_PATTERN = /^proxy-/;
    var SEC_HEADER_PATTERN = /^sec-/;
    var ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
    var EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
    var UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
    var MAX_CACHE_SIZE = 50;
    var KEY_TYPE_IDENTIFIER = "aws4_request";
    var MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;
    var import_util_hex_encoding = require_dist_cjs14();
    var import_util_utf8 = require_dist_cjs8();
    var signingKeyCache = {};
    var cacheQueue = [];
    var createScope = /* @__PURE__ */ __name((shortDate, region, service) => `${shortDate}/${region}/${service}/${KEY_TYPE_IDENTIFIER}`, "createScope");
    var getSigningKey = /* @__PURE__ */ __name(async (sha256Constructor, credentials, shortDate, region, service) => {
      const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);
      const cacheKey = `${shortDate}:${region}:${service}:${(0, import_util_hex_encoding.toHex)(credsHash)}:${credentials.sessionToken}`;
      if (cacheKey in signingKeyCache) {
        return signingKeyCache[cacheKey];
      }
      cacheQueue.push(cacheKey);
      while (cacheQueue.length > MAX_CACHE_SIZE) {
        delete signingKeyCache[cacheQueue.shift()];
      }
      let key = `AWS4${credentials.secretAccessKey}`;
      for (const signable of [shortDate, region, service, KEY_TYPE_IDENTIFIER]) {
        key = await hmac(sha256Constructor, key, signable);
      }
      return signingKeyCache[cacheKey] = key;
    }, "getSigningKey");
    var clearCredentialCache = /* @__PURE__ */ __name(() => {
      cacheQueue.length = 0;
      Object.keys(signingKeyCache).forEach((cacheKey) => {
        delete signingKeyCache[cacheKey];
      });
    }, "clearCredentialCache");
    var hmac = /* @__PURE__ */ __name((ctor, secret, data) => {
      const hash = new ctor(secret);
      hash.update((0, import_util_utf8.toUint8Array)(data));
      return hash.digest();
    }, "hmac");
    var getCanonicalHeaders = /* @__PURE__ */ __name(({ headers }, unsignableHeaders, signableHeaders) => {
      const canonical = {};
      for (const headerName of Object.keys(headers).sort()) {
        if (headers[headerName] == void 0) {
          continue;
        }
        const canonicalHeaderName = headerName.toLowerCase();
        if (canonicalHeaderName in ALWAYS_UNSIGNABLE_HEADERS || (unsignableHeaders == null ? void 0 : unsignableHeaders.has(canonicalHeaderName)) || PROXY_HEADER_PATTERN.test(canonicalHeaderName) || SEC_HEADER_PATTERN.test(canonicalHeaderName)) {
          if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {
            continue;
          }
        }
        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
      }
      return canonical;
    }, "getCanonicalHeaders");
    var import_util_uri_escape = require_dist_cjs10();
    var getCanonicalQuery = /* @__PURE__ */ __name(({ query = {} }) => {
      const keys = [];
      const serialized = {};
      for (const key of Object.keys(query)) {
        if (key.toLowerCase() === SIGNATURE_HEADER) {
          continue;
        }
        const encodedKey = (0, import_util_uri_escape.escapeUri)(key);
        keys.push(encodedKey);
        const value = query[key];
        if (typeof value === "string") {
          serialized[encodedKey] = `${encodedKey}=${(0, import_util_uri_escape.escapeUri)(value)}`;
        } else if (Array.isArray(value)) {
          serialized[encodedKey] = value.slice(0).reduce((encoded, value2) => encoded.concat([`${encodedKey}=${(0, import_util_uri_escape.escapeUri)(value2)}`]), []).sort().join("&");
        }
      }
      return keys.sort().map((key) => serialized[key]).filter((serialized2) => serialized2).join("&");
    }, "getCanonicalQuery");
    var import_is_array_buffer = require_dist_cjs6();
    var import_util_utf82 = require_dist_cjs8();
    var getPayloadHash = /* @__PURE__ */ __name(async ({ headers, body }, hashConstructor) => {
      for (const headerName of Object.keys(headers)) {
        if (headerName.toLowerCase() === SHA256_HEADER) {
          return headers[headerName];
        }
      }
      if (body == void 0) {
        return "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
      } else if (typeof body === "string" || ArrayBuffer.isView(body) || (0, import_is_array_buffer.isArrayBuffer)(body)) {
        const hashCtor = new hashConstructor();
        hashCtor.update((0, import_util_utf82.toUint8Array)(body));
        return (0, import_util_hex_encoding.toHex)(await hashCtor.digest());
      }
      return UNSIGNED_PAYLOAD;
    }, "getPayloadHash");
    var import_util_utf83 = require_dist_cjs8();
    var _HeaderFormatter = class _HeaderFormatter {
      format(headers) {
        const chunks = [];
        for (const headerName of Object.keys(headers)) {
          const bytes = (0, import_util_utf83.fromUtf8)(headerName);
          chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));
        }
        const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));
        let position = 0;
        for (const chunk of chunks) {
          out.set(chunk, position);
          position += chunk.byteLength;
        }
        return out;
      }
      formatHeaderValue(header) {
        switch (header.type) {
          case "boolean":
            return Uint8Array.from([
              header.value ? 0 : 1
              /* boolFalse */
            ]);
          case "byte":
            return Uint8Array.from([2, header.value]);
          case "short":
            const shortView = new DataView(new ArrayBuffer(3));
            shortView.setUint8(
              0,
              3
              /* short */
            );
            shortView.setInt16(1, header.value, false);
            return new Uint8Array(shortView.buffer);
          case "integer":
            const intView = new DataView(new ArrayBuffer(5));
            intView.setUint8(
              0,
              4
              /* integer */
            );
            intView.setInt32(1, header.value, false);
            return new Uint8Array(intView.buffer);
          case "long":
            const longBytes = new Uint8Array(9);
            longBytes[0] = 5;
            longBytes.set(header.value.bytes, 1);
            return longBytes;
          case "binary":
            const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));
            binView.setUint8(
              0,
              6
              /* byteArray */
            );
            binView.setUint16(1, header.value.byteLength, false);
            const binBytes = new Uint8Array(binView.buffer);
            binBytes.set(header.value, 3);
            return binBytes;
          case "string":
            const utf8Bytes = (0, import_util_utf83.fromUtf8)(header.value);
            const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));
            strView.setUint8(
              0,
              7
              /* string */
            );
            strView.setUint16(1, utf8Bytes.byteLength, false);
            const strBytes = new Uint8Array(strView.buffer);
            strBytes.set(utf8Bytes, 3);
            return strBytes;
          case "timestamp":
            const tsBytes = new Uint8Array(9);
            tsBytes[0] = 8;
            tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);
            return tsBytes;
          case "uuid":
            if (!UUID_PATTERN.test(header.value)) {
              throw new Error(`Invalid UUID received: ${header.value}`);
            }
            const uuidBytes = new Uint8Array(17);
            uuidBytes[0] = 9;
            uuidBytes.set((0, import_util_hex_encoding.fromHex)(header.value.replace(/\-/g, "")), 1);
            return uuidBytes;
        }
      }
    };
    __name(_HeaderFormatter, "HeaderFormatter");
    var HeaderFormatter = _HeaderFormatter;
    var UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
    var _Int64 = class _Int642 {
      constructor(bytes) {
        this.bytes = bytes;
        if (bytes.byteLength !== 8) {
          throw new Error("Int64 buffers must be exactly 8 bytes");
        }
      }
      static fromNumber(number) {
        if (number > 9223372036854776e3 || number < -9223372036854776e3) {
          throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);
        }
        const bytes = new Uint8Array(8);
        for (let i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {
          bytes[i] = remaining;
        }
        if (number < 0) {
          negate(bytes);
        }
        return new _Int642(bytes);
      }
      /**
       * Called implicitly by infix arithmetic operators.
       */
      valueOf() {
        const bytes = this.bytes.slice(0);
        const negative = bytes[0] & 128;
        if (negative) {
          negate(bytes);
        }
        return parseInt((0, import_util_hex_encoding.toHex)(bytes), 16) * (negative ? -1 : 1);
      }
      toString() {
        return String(this.valueOf());
      }
    };
    __name(_Int64, "Int64");
    var Int64 = _Int64;
    function negate(bytes) {
      for (let i = 0; i < 8; i++) {
        bytes[i] ^= 255;
      }
      for (let i = 7; i > -1; i--) {
        bytes[i]++;
        if (bytes[i] !== 0)
          break;
      }
    }
    __name(negate, "negate");
    var hasHeader = /* @__PURE__ */ __name((soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return true;
        }
      }
      return false;
    }, "hasHeader");
    var import_protocol_http8 = require_dist_cjs2();
    var moveHeadersToQuery = /* @__PURE__ */ __name((request, options = {}) => {
      var _a, _b;
      const { headers, query = {} } = import_protocol_http8.HttpRequest.clone(request);
      for (const name of Object.keys(headers)) {
        const lname = name.toLowerCase();
        if (lname.slice(0, 6) === "x-amz-" && !((_a = options.unhoistableHeaders) == null ? void 0 : _a.has(lname)) || ((_b = options.hoistableHeaders) == null ? void 0 : _b.has(lname))) {
          query[name] = headers[name];
          delete headers[name];
        }
      }
      return {
        ...request,
        headers,
        query
      };
    }, "moveHeadersToQuery");
    var prepareRequest = /* @__PURE__ */ __name((request) => {
      request = import_protocol_http8.HttpRequest.clone(request);
      for (const headerName of Object.keys(request.headers)) {
        if (GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
          delete request.headers[headerName];
        }
      }
      return request;
    }, "prepareRequest");
    var iso8601 = /* @__PURE__ */ __name((time) => toDate(time).toISOString().replace(/\.\d{3}Z$/, "Z"), "iso8601");
    var toDate = /* @__PURE__ */ __name((time) => {
      if (typeof time === "number") {
        return new Date(time * 1e3);
      }
      if (typeof time === "string") {
        if (Number(time)) {
          return new Date(Number(time) * 1e3);
        }
        return new Date(time);
      }
      return time;
    }, "toDate");
    var _SignatureV4 = class _SignatureV4 {
      constructor({
        applyChecksum,
        credentials,
        region,
        service,
        sha256,
        uriEscapePath = true
      }) {
        this.headerFormatter = new HeaderFormatter();
        this.service = service;
        this.sha256 = sha256;
        this.uriEscapePath = uriEscapePath;
        this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
        this.regionProvider = (0, import_util_middleware3.normalizeProvider)(region);
        this.credentialProvider = (0, import_util_middleware3.normalizeProvider)(credentials);
      }
      async presign(originalRequest, options = {}) {
        const {
          signingDate = /* @__PURE__ */ new Date(),
          expiresIn = 3600,
          unsignableHeaders,
          unhoistableHeaders,
          signableHeaders,
          hoistableHeaders,
          signingRegion,
          signingService
        } = options;
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? await this.regionProvider();
        const { longDate, shortDate } = formatDate(signingDate);
        if (expiresIn > MAX_PRESIGNED_TTL) {
          return Promise.reject(
            "Signature version 4 presigned URLs must have an expiration date less than one week in the future"
          );
        }
        const scope = createScope(shortDate, region, signingService ?? this.service);
        const request = moveHeadersToQuery(prepareRequest(originalRequest), { unhoistableHeaders, hoistableHeaders });
        if (credentials.sessionToken) {
          request.query[TOKEN_QUERY_PARAM] = credentials.sessionToken;
        }
        request.query[ALGORITHM_QUERY_PARAM] = ALGORITHM_IDENTIFIER;
        request.query[CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;
        request.query[AMZ_DATE_QUERY_PARAM] = longDate;
        request.query[EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
        const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);
        request.query[SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);
        request.query[SIGNATURE_QUERY_PARAM] = await this.getSignature(
          longDate,
          scope,
          this.getSigningKey(credentials, region, shortDate, signingService),
          this.createCanonicalRequest(request, canonicalHeaders, await getPayloadHash(originalRequest, this.sha256))
        );
        return request;
      }
      async sign(toSign, options) {
        if (typeof toSign === "string") {
          return this.signString(toSign, options);
        } else if (toSign.headers && toSign.payload) {
          return this.signEvent(toSign, options);
        } else if (toSign.message) {
          return this.signMessage(toSign, options);
        } else {
          return this.signRequest(toSign, options);
        }
      }
      async signEvent({ headers, payload }, { signingDate = /* @__PURE__ */ new Date(), priorSignature, signingRegion, signingService }) {
        const region = signingRegion ?? await this.regionProvider();
        const { shortDate, longDate } = formatDate(signingDate);
        const scope = createScope(shortDate, region, signingService ?? this.service);
        const hashedPayload = await getPayloadHash({ headers: {}, body: payload }, this.sha256);
        const hash = new this.sha256();
        hash.update(headers);
        const hashedHeaders = (0, import_util_hex_encoding.toHex)(await hash.digest());
        const stringToSign = [
          EVENT_ALGORITHM_IDENTIFIER,
          longDate,
          scope,
          priorSignature,
          hashedHeaders,
          hashedPayload
        ].join("\n");
        return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });
      }
      async signMessage(signableMessage, { signingDate = /* @__PURE__ */ new Date(), signingRegion, signingService }) {
        const promise = this.signEvent(
          {
            headers: this.headerFormatter.format(signableMessage.message.headers),
            payload: signableMessage.message.body
          },
          {
            signingDate,
            signingRegion,
            signingService,
            priorSignature: signableMessage.priorSignature
          }
        );
        return promise.then((signature) => {
          return { message: signableMessage.message, signature };
        });
      }
      async signString(stringToSign, { signingDate = /* @__PURE__ */ new Date(), signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? await this.regionProvider();
        const { shortDate } = formatDate(signingDate);
        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));
        hash.update((0, import_util_utf84.toUint8Array)(stringToSign));
        return (0, import_util_hex_encoding.toHex)(await hash.digest());
      }
      async signRequest(requestToSign, {
        signingDate = /* @__PURE__ */ new Date(),
        signableHeaders,
        unsignableHeaders,
        signingRegion,
        signingService
      } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? await this.regionProvider();
        const request = prepareRequest(requestToSign);
        const { longDate, shortDate } = formatDate(signingDate);
        const scope = createScope(shortDate, region, signingService ?? this.service);
        request.headers[AMZ_DATE_HEADER] = longDate;
        if (credentials.sessionToken) {
          request.headers[TOKEN_HEADER] = credentials.sessionToken;
        }
        const payloadHash = await getPayloadHash(request, this.sha256);
        if (!hasHeader(SHA256_HEADER, request.headers) && this.applyChecksum) {
          request.headers[SHA256_HEADER] = payloadHash;
        }
        const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);
        const signature = await this.getSignature(
          longDate,
          scope,
          this.getSigningKey(credentials, region, shortDate, signingService),
          this.createCanonicalRequest(request, canonicalHeaders, payloadHash)
        );
        request.headers[AUTH_HEADER] = `${ALGORITHM_IDENTIFIER} Credential=${credentials.accessKeyId}/${scope}, SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, Signature=${signature}`;
        return request;
      }
      createCanonicalRequest(request, canonicalHeaders, payloadHash) {
        const sortedHeaders = Object.keys(canonicalHeaders).sort();
        return `${request.method}
${this.getCanonicalPath(request)}
${getCanonicalQuery(request)}
${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join("\n")}

${sortedHeaders.join(";")}
${payloadHash}`;
      }
      async createStringToSign(longDate, credentialScope, canonicalRequest) {
        const hash = new this.sha256();
        hash.update((0, import_util_utf84.toUint8Array)(canonicalRequest));
        const hashedRequest = await hash.digest();
        return `${ALGORITHM_IDENTIFIER}
${longDate}
${credentialScope}
${(0, import_util_hex_encoding.toHex)(hashedRequest)}`;
      }
      getCanonicalPath({ path }) {
        if (this.uriEscapePath) {
          const normalizedPathSegments = [];
          for (const pathSegment of path.split("/")) {
            if ((pathSegment == null ? void 0 : pathSegment.length) === 0)
              continue;
            if (pathSegment === ".")
              continue;
            if (pathSegment === "..") {
              normalizedPathSegments.pop();
            } else {
              normalizedPathSegments.push(pathSegment);
            }
          }
          const normalizedPath = `${(path == null ? void 0 : path.startsWith("/")) ? "/" : ""}${normalizedPathSegments.join("/")}${normalizedPathSegments.length > 0 && (path == null ? void 0 : path.endsWith("/")) ? "/" : ""}`;
          const doubleEncoded = (0, import_util_uri_escape.escapeUri)(normalizedPath);
          return doubleEncoded.replace(/%2F/g, "/");
        }
        return path;
      }
      async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {
        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);
        const hash = new this.sha256(await keyPromise);
        hash.update((0, import_util_utf84.toUint8Array)(stringToSign));
        return (0, import_util_hex_encoding.toHex)(await hash.digest());
      }
      getSigningKey(credentials, region, shortDate, service) {
        return getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);
      }
      validateResolvedCredentials(credentials) {
        if (typeof credentials !== "object" || // @ts-expect-error: Property 'accessKeyId' does not exist on type 'object'.ts(2339)
        typeof credentials.accessKeyId !== "string" || // @ts-expect-error: Property 'secretAccessKey' does not exist on type 'object'.ts(2339)
        typeof credentials.secretAccessKey !== "string") {
          throw new Error("Resolved credential object is not valid");
        }
      }
    };
    __name(_SignatureV4, "SignatureV4");
    var SignatureV42 = _SignatureV4;
    var formatDate = /* @__PURE__ */ __name((now) => {
      const longDate = iso8601(now).replace(/[\-:]/g, "");
      return {
        longDate,
        shortDate: longDate.slice(0, 8)
      };
    }, "formatDate");
    var getCanonicalHeaderList = /* @__PURE__ */ __name((headers) => Object.keys(headers).sort().join(";"), "getCanonicalHeaderList");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/resolveAwsSdkSigV4Config.js
var import_signature_v4, resolveAwsSdkSigV4Config, resolveAWSSDKSigV4Config;
var init_resolveAwsSdkSigV4Config = __esm({
  "../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/resolveAwsSdkSigV4Config.js"() {
    init_client();
    init_dist_es();
    import_signature_v4 = __toESM(require_dist_cjs17());
    resolveAwsSdkSigV4Config = (config) => {
      let isUserSupplied = false;
      let normalizedCreds;
      if (config.credentials) {
        isUserSupplied = true;
        normalizedCreds = memoizeIdentityProvider(config.credentials, isIdentityExpired, doesIdentityRequireRefresh);
      }
      if (!normalizedCreds) {
        if (config.credentialDefaultProvider) {
          normalizedCreds = normalizeProvider(config.credentialDefaultProvider(Object.assign({}, config, {
            parentClientConfig: config
          })));
        } else {
          normalizedCreds = async () => {
            throw new Error("`credentials` is missing");
          };
        }
      }
      const { signingEscapePath = true, systemClockOffset = config.systemClockOffset || 0, sha256 } = config;
      let signer;
      if (config.signer) {
        signer = normalizeProvider(config.signer);
      } else if (config.regionInfoProvider) {
        signer = () => normalizeProvider(config.region)().then(async (region) => [
          await config.regionInfoProvider(region, {
            useFipsEndpoint: await config.useFipsEndpoint(),
            useDualstackEndpoint: await config.useDualstackEndpoint()
          }) || {},
          region
        ]).then(([regionInfo, region]) => {
          const { signingRegion, signingService } = regionInfo;
          config.signingRegion = config.signingRegion || signingRegion || region;
          config.signingName = config.signingName || signingService || config.serviceId;
          const params = {
            ...config,
            credentials: normalizedCreds,
            region: config.signingRegion,
            service: config.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          };
          const SignerCtor = config.signerConstructor || import_signature_v4.SignatureV4;
          return new SignerCtor(params);
        });
      } else {
        signer = async (authScheme) => {
          authScheme = Object.assign({}, {
            name: "sigv4",
            signingName: config.signingName || config.defaultSigningName,
            signingRegion: await normalizeProvider(config.region)(),
            properties: {}
          }, authScheme);
          const signingRegion = authScheme.signingRegion;
          const signingService = authScheme.signingName;
          config.signingRegion = config.signingRegion || signingRegion;
          config.signingName = config.signingName || signingService || config.serviceId;
          const params = {
            ...config,
            credentials: normalizedCreds,
            region: config.signingRegion,
            service: config.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          };
          const SignerCtor = config.signerConstructor || import_signature_v4.SignatureV4;
          return new SignerCtor(params);
        };
      }
      return {
        ...config,
        systemClockOffset,
        signingEscapePath,
        credentials: isUserSupplied ? async () => normalizedCreds().then((creds) => setCredentialFeature(creds, "CREDENTIALS_CODE", "e")) : normalizedCreds,
        signer
      };
    };
    resolveAWSSDKSigV4Config = resolveAwsSdkSigV4Config;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/index.js
var init_aws_sdk = __esm({
  "../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/index.js"() {
    init_AwsSdkSigV4Signer();
    init_AwsSdkSigV4ASigner();
    init_resolveAwsSdkSigV4AConfig();
    init_resolveAwsSdkSigV4Config();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/index.js
var init_httpAuthSchemes2 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/index.js"() {
    init_aws_sdk();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/protocols/coercing-serializers.js
var _toStr, _toBool, _toNum;
var init_coercing_serializers = __esm({
  "../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/protocols/coercing-serializers.js"() {
    _toStr = (val2) => {
      if (val2 == null) {
        return val2;
      }
      if (typeof val2 === "number" || typeof val2 === "bigint") {
        const warning = new Error(`Received number ${val2} where a string was expected.`);
        warning.name = "Warning";
        console.warn(warning);
        return String(val2);
      }
      if (typeof val2 === "boolean") {
        const warning = new Error(`Received boolean ${val2} where a string was expected.`);
        warning.name = "Warning";
        console.warn(warning);
        return String(val2);
      }
      return val2;
    };
    _toBool = (val2) => {
      if (val2 == null) {
        return val2;
      }
      if (typeof val2 === "number") {
      }
      if (typeof val2 === "string") {
        const lowercase = val2.toLowerCase();
        if (val2 !== "" && lowercase !== "false" && lowercase !== "true") {
          const warning = new Error(`Received string "${val2}" where a boolean was expected.`);
          warning.name = "Warning";
          console.warn(warning);
        }
        return val2 !== "" && lowercase !== "false";
      }
      return val2;
    };
    _toNum = (val2) => {
      if (val2 == null) {
        return val2;
      }
      if (typeof val2 === "boolean") {
      }
      if (typeof val2 === "string") {
        const num = Number(val2);
        if (num.toString() !== val2) {
          const warning = new Error(`Received string "${val2}" where a number was expected.`);
          warning.name = "Warning";
          console.warn(warning);
          return val2;
        }
        return num;
      }
      return val2;
    };
  }
});

// ../../node_modules/.pnpm/@smithy+middleware-stack@3.0.11/node_modules/@smithy/middleware-stack/dist-cjs/index.js
var require_dist_cjs18 = __commonJS({
  "../../node_modules/.pnpm/@smithy+middleware-stack@3.0.11/node_modules/@smithy/middleware-stack/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      constructStack: () => constructStack
    });
    module.exports = __toCommonJS2(src_exports);
    var getAllAliases = /* @__PURE__ */ __name((name, aliases) => {
      const _aliases = [];
      if (name) {
        _aliases.push(name);
      }
      if (aliases) {
        for (const alias of aliases) {
          _aliases.push(alias);
        }
      }
      return _aliases;
    }, "getAllAliases");
    var getMiddlewareNameWithAliases = /* @__PURE__ */ __name((name, aliases) => {
      return `${name || "anonymous"}${aliases && aliases.length > 0 ? ` (a.k.a. ${aliases.join(",")})` : ""}`;
    }, "getMiddlewareNameWithAliases");
    var constructStack = /* @__PURE__ */ __name(() => {
      let absoluteEntries = [];
      let relativeEntries = [];
      let identifyOnResolve = false;
      const entriesNameSet = /* @__PURE__ */ new Set();
      const sort = /* @__PURE__ */ __name((entries) => entries.sort(
        (a, b) => stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || "normal"] - priorityWeights[a.priority || "normal"]
      ), "sort");
      const removeByName = /* @__PURE__ */ __name((toRemove) => {
        let isRemoved = false;
        const filterCb = /* @__PURE__ */ __name((entry) => {
          const aliases = getAllAliases(entry.name, entry.aliases);
          if (aliases.includes(toRemove)) {
            isRemoved = true;
            for (const alias of aliases) {
              entriesNameSet.delete(alias);
            }
            return false;
          }
          return true;
        }, "filterCb");
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      }, "removeByName");
      const removeByReference = /* @__PURE__ */ __name((toRemove) => {
        let isRemoved = false;
        const filterCb = /* @__PURE__ */ __name((entry) => {
          if (entry.middleware === toRemove) {
            isRemoved = true;
            for (const alias of getAllAliases(entry.name, entry.aliases)) {
              entriesNameSet.delete(alias);
            }
            return false;
          }
          return true;
        }, "filterCb");
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      }, "removeByReference");
      const cloneTo = /* @__PURE__ */ __name((toStack) => {
        var _a;
        absoluteEntries.forEach((entry) => {
          toStack.add(entry.middleware, { ...entry });
        });
        relativeEntries.forEach((entry) => {
          toStack.addRelativeTo(entry.middleware, { ...entry });
        });
        (_a = toStack.identifyOnResolve) == null ? void 0 : _a.call(toStack, stack.identifyOnResolve());
        return toStack;
      }, "cloneTo");
      const expandRelativeMiddlewareList = /* @__PURE__ */ __name((from) => {
        const expandedMiddlewareList = [];
        from.before.forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        expandedMiddlewareList.push(from);
        from.after.reverse().forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        return expandedMiddlewareList;
      }, "expandRelativeMiddlewareList");
      const getMiddlewareList = /* @__PURE__ */ __name((debug = false) => {
        const normalizedAbsoluteEntries = [];
        const normalizedRelativeEntries = [];
        const normalizedEntriesNameMap = {};
        absoluteEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: []
          };
          for (const alias of getAllAliases(normalizedEntry.name, normalizedEntry.aliases)) {
            normalizedEntriesNameMap[alias] = normalizedEntry;
          }
          normalizedAbsoluteEntries.push(normalizedEntry);
        });
        relativeEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: []
          };
          for (const alias of getAllAliases(normalizedEntry.name, normalizedEntry.aliases)) {
            normalizedEntriesNameMap[alias] = normalizedEntry;
          }
          normalizedRelativeEntries.push(normalizedEntry);
        });
        normalizedRelativeEntries.forEach((entry) => {
          if (entry.toMiddleware) {
            const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
            if (toMiddleware === void 0) {
              if (debug) {
                return;
              }
              throw new Error(
                `${entry.toMiddleware} is not found when adding ${getMiddlewareNameWithAliases(entry.name, entry.aliases)} middleware ${entry.relation} ${entry.toMiddleware}`
              );
            }
            if (entry.relation === "after") {
              toMiddleware.after.push(entry);
            }
            if (entry.relation === "before") {
              toMiddleware.before.push(entry);
            }
          }
        });
        const mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce(
          (wholeList, expandedMiddlewareList) => {
            wholeList.push(...expandedMiddlewareList);
            return wholeList;
          },
          []
        );
        return mainChain;
      }, "getMiddlewareList");
      const stack = {
        add: (middleware, options = {}) => {
          const { name, override, aliases: _aliases } = options;
          const entry = {
            step: "initialize",
            priority: "normal",
            middleware,
            ...options
          };
          const aliases = getAllAliases(name, _aliases);
          if (aliases.length > 0) {
            if (aliases.some((alias) => entriesNameSet.has(alias))) {
              if (!override)
                throw new Error(`Duplicate middleware name '${getMiddlewareNameWithAliases(name, _aliases)}'`);
              for (const alias of aliases) {
                const toOverrideIndex = absoluteEntries.findIndex(
                  (entry2) => {
                    var _a;
                    return entry2.name === alias || ((_a = entry2.aliases) == null ? void 0 : _a.some((a) => a === alias));
                  }
                );
                if (toOverrideIndex === -1) {
                  continue;
                }
                const toOverride = absoluteEntries[toOverrideIndex];
                if (toOverride.step !== entry.step || entry.priority !== toOverride.priority) {
                  throw new Error(
                    `"${getMiddlewareNameWithAliases(toOverride.name, toOverride.aliases)}" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be overridden by "${getMiddlewareNameWithAliases(name, _aliases)}" middleware with ${entry.priority} priority in ${entry.step} step.`
                  );
                }
                absoluteEntries.splice(toOverrideIndex, 1);
              }
            }
            for (const alias of aliases) {
              entriesNameSet.add(alias);
            }
          }
          absoluteEntries.push(entry);
        },
        addRelativeTo: (middleware, options) => {
          const { name, override, aliases: _aliases } = options;
          const entry = {
            middleware,
            ...options
          };
          const aliases = getAllAliases(name, _aliases);
          if (aliases.length > 0) {
            if (aliases.some((alias) => entriesNameSet.has(alias))) {
              if (!override)
                throw new Error(`Duplicate middleware name '${getMiddlewareNameWithAliases(name, _aliases)}'`);
              for (const alias of aliases) {
                const toOverrideIndex = relativeEntries.findIndex(
                  (entry2) => {
                    var _a;
                    return entry2.name === alias || ((_a = entry2.aliases) == null ? void 0 : _a.some((a) => a === alias));
                  }
                );
                if (toOverrideIndex === -1) {
                  continue;
                }
                const toOverride = relativeEntries[toOverrideIndex];
                if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {
                  throw new Error(
                    `"${getMiddlewareNameWithAliases(toOverride.name, toOverride.aliases)}" middleware ${toOverride.relation} "${toOverride.toMiddleware}" middleware cannot be overridden by "${getMiddlewareNameWithAliases(name, _aliases)}" middleware ${entry.relation} "${entry.toMiddleware}" middleware.`
                  );
                }
                relativeEntries.splice(toOverrideIndex, 1);
              }
            }
            for (const alias of aliases) {
              entriesNameSet.add(alias);
            }
          }
          relativeEntries.push(entry);
        },
        clone: () => cloneTo(constructStack()),
        use: (plugin) => {
          plugin.applyToStack(stack);
        },
        remove: (toRemove) => {
          if (typeof toRemove === "string")
            return removeByName(toRemove);
          else
            return removeByReference(toRemove);
        },
        removeByTag: (toRemove) => {
          let isRemoved = false;
          const filterCb = /* @__PURE__ */ __name((entry) => {
            const { tags, name, aliases: _aliases } = entry;
            if (tags && tags.includes(toRemove)) {
              const aliases = getAllAliases(name, _aliases);
              for (const alias of aliases) {
                entriesNameSet.delete(alias);
              }
              isRemoved = true;
              return false;
            }
            return true;
          }, "filterCb");
          absoluteEntries = absoluteEntries.filter(filterCb);
          relativeEntries = relativeEntries.filter(filterCb);
          return isRemoved;
        },
        concat: (from) => {
          var _a;
          const cloned = cloneTo(constructStack());
          cloned.use(from);
          cloned.identifyOnResolve(
            identifyOnResolve || cloned.identifyOnResolve() || (((_a = from.identifyOnResolve) == null ? void 0 : _a.call(from)) ?? false)
          );
          return cloned;
        },
        applyToStack: cloneTo,
        identify: () => {
          return getMiddlewareList(true).map((mw) => {
            const step = mw.step ?? mw.relation + " " + mw.toMiddleware;
            return getMiddlewareNameWithAliases(mw.name, mw.aliases) + " - " + step;
          });
        },
        identifyOnResolve(toggle) {
          if (typeof toggle === "boolean")
            identifyOnResolve = toggle;
          return identifyOnResolve;
        },
        resolve: (handler2, context) => {
          for (const middleware of getMiddlewareList().map((entry) => entry.middleware).reverse()) {
            handler2 = middleware(handler2, context);
          }
          if (identifyOnResolve) {
            console.log(stack.identify());
          }
          return handler2;
        }
      };
      return stack;
    }, "constructStack");
    var stepWeights = {
      initialize: 5,
      serialize: 4,
      build: 3,
      finalizeRequest: 2,
      deserialize: 1
    };
    var priorityWeights = {
      high: 3,
      normal: 2,
      low: 1
    };
  }
});

// ../../node_modules/.pnpm/@smithy+smithy-client@3.7.0/node_modules/@smithy/smithy-client/dist-cjs/index.js
var require_dist_cjs19 = __commonJS({
  "../../node_modules/.pnpm/@smithy+smithy-client@3.7.0/node_modules/@smithy/smithy-client/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      Client: () => Client,
      Command: () => Command,
      LazyJsonString: () => LazyJsonString,
      NoOpLogger: () => NoOpLogger,
      SENSITIVE_STRING: () => SENSITIVE_STRING,
      ServiceException: () => ServiceException,
      _json: () => _json,
      collectBody: () => import_protocols2.collectBody,
      convertMap: () => convertMap,
      createAggregatedClient: () => createAggregatedClient,
      dateToUtcString: () => dateToUtcString,
      decorateServiceException: () => decorateServiceException,
      emitWarningIfUnsupportedVersion: () => emitWarningIfUnsupportedVersion2,
      expectBoolean: () => expectBoolean,
      expectByte: () => expectByte,
      expectFloat32: () => expectFloat32,
      expectInt: () => expectInt,
      expectInt32: () => expectInt32,
      expectLong: () => expectLong,
      expectNonNull: () => expectNonNull,
      expectNumber: () => expectNumber,
      expectObject: () => expectObject,
      expectShort: () => expectShort,
      expectString: () => expectString,
      expectUnion: () => expectUnion2,
      extendedEncodeURIComponent: () => import_protocols2.extendedEncodeURIComponent,
      getArrayIfSingleItem: () => getArrayIfSingleItem,
      getDefaultClientConfiguration: () => getDefaultClientConfiguration,
      getDefaultExtensionConfiguration: () => getDefaultExtensionConfiguration,
      getValueFromTextNode: () => getValueFromTextNode2,
      handleFloat: () => handleFloat,
      isSerializableHeaderValue: () => isSerializableHeaderValue,
      limitedParseDouble: () => limitedParseDouble,
      limitedParseFloat: () => limitedParseFloat,
      limitedParseFloat32: () => limitedParseFloat32,
      loadConfigsForDefaultMode: () => loadConfigsForDefaultMode,
      logger: () => logger2,
      map: () => map,
      parseBoolean: () => parseBoolean,
      parseEpochTimestamp: () => parseEpochTimestamp,
      parseRfc3339DateTime: () => parseRfc3339DateTime,
      parseRfc3339DateTimeWithOffset: () => parseRfc3339DateTimeWithOffset,
      parseRfc7231DateTime: () => parseRfc7231DateTime,
      quoteHeader: () => quoteHeader,
      resolveDefaultRuntimeConfig: () => resolveDefaultRuntimeConfig,
      resolvedPath: () => import_protocols2.resolvedPath,
      serializeDateTime: () => serializeDateTime,
      serializeFloat: () => serializeFloat,
      splitEvery: () => splitEvery,
      splitHeader: () => splitHeader,
      strictParseByte: () => strictParseByte,
      strictParseDouble: () => strictParseDouble,
      strictParseFloat: () => strictParseFloat,
      strictParseFloat32: () => strictParseFloat32,
      strictParseInt: () => strictParseInt,
      strictParseInt32: () => strictParseInt32,
      strictParseLong: () => strictParseLong,
      strictParseShort: () => strictParseShort,
      take: () => take,
      throwDefaultError: () => throwDefaultError,
      withBaseException: () => withBaseException
    });
    module.exports = __toCommonJS2(src_exports);
    var import_middleware_stack = require_dist_cjs18();
    var _Client = class _Client {
      constructor(config) {
        this.config = config;
        this.middlewareStack = (0, import_middleware_stack.constructStack)();
      }
      send(command, optionsOrCb, cb) {
        const options = typeof optionsOrCb !== "function" ? optionsOrCb : void 0;
        const callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
        const useHandlerCache = options === void 0 && this.config.cacheMiddleware === true;
        let handler2;
        if (useHandlerCache) {
          if (!this.handlers) {
            this.handlers = /* @__PURE__ */ new WeakMap();
          }
          const handlers = this.handlers;
          if (handlers.has(command.constructor)) {
            handler2 = handlers.get(command.constructor);
          } else {
            handler2 = command.resolveMiddleware(this.middlewareStack, this.config, options);
            handlers.set(command.constructor, handler2);
          }
        } else {
          delete this.handlers;
          handler2 = command.resolveMiddleware(this.middlewareStack, this.config, options);
        }
        if (callback) {
          handler2(command).then(
            (result) => callback(null, result.output),
            (err) => callback(err)
          ).catch(
            // prevent any errors thrown in the callback from triggering an
            // unhandled promise rejection
            () => {
            }
          );
        } else {
          return handler2(command).then((result) => result.output);
        }
      }
      destroy() {
        var _a, _b, _c;
        (_c = (_b = (_a = this.config) == null ? void 0 : _a.requestHandler) == null ? void 0 : _b.destroy) == null ? void 0 : _c.call(_b);
        delete this.handlers;
      }
    };
    __name(_Client, "Client");
    var Client = _Client;
    var import_protocols2 = (init_protocols(), __toCommonJS(protocols_exports));
    var import_types5 = require_dist_cjs();
    var _Command = class _Command {
      constructor() {
        this.middlewareStack = (0, import_middleware_stack.constructStack)();
      }
      /**
       * Factory for Command ClassBuilder.
       * @internal
       */
      static classBuilder() {
        return new ClassBuilder();
      }
      /**
       * @internal
       */
      resolveMiddlewareWithContext(clientStack, configuration, options, {
        middlewareFn,
        clientName,
        commandName,
        inputFilterSensitiveLog,
        outputFilterSensitiveLog,
        smithyContext,
        additionalContext,
        CommandCtor
      }) {
        for (const mw of middlewareFn.bind(this)(CommandCtor, clientStack, configuration, options)) {
          this.middlewareStack.use(mw);
        }
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger22 } = configuration;
        const handlerExecutionContext = {
          logger: logger22,
          clientName,
          commandName,
          inputFilterSensitiveLog,
          outputFilterSensitiveLog,
          [import_types5.SMITHY_CONTEXT_KEY]: {
            commandInstance: this,
            ...smithyContext
          },
          ...additionalContext
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
    };
    __name(_Command, "Command");
    var Command = _Command;
    var _ClassBuilder = class _ClassBuilder {
      constructor() {
        this._init = () => {
        };
        this._ep = {};
        this._middlewareFn = () => [];
        this._commandName = "";
        this._clientName = "";
        this._additionalContext = {};
        this._smithyContext = {};
        this._inputFilterSensitiveLog = (_) => _;
        this._outputFilterSensitiveLog = (_) => _;
        this._serializer = null;
        this._deserializer = null;
      }
      /**
       * Optional init callback.
       */
      init(cb) {
        this._init = cb;
      }
      /**
       * Set the endpoint parameter instructions.
       */
      ep(endpointParameterInstructions) {
        this._ep = endpointParameterInstructions;
        return this;
      }
      /**
       * Add any number of middleware.
       */
      m(middlewareSupplier) {
        this._middlewareFn = middlewareSupplier;
        return this;
      }
      /**
       * Set the initial handler execution context Smithy field.
       */
      s(service, operation, smithyContext = {}) {
        this._smithyContext = {
          service,
          operation,
          ...smithyContext
        };
        return this;
      }
      /**
       * Set the initial handler execution context.
       */
      c(additionalContext = {}) {
        this._additionalContext = additionalContext;
        return this;
      }
      /**
       * Set constant string identifiers for the operation.
       */
      n(clientName, commandName) {
        this._clientName = clientName;
        this._commandName = commandName;
        return this;
      }
      /**
       * Set the input and output sensistive log filters.
       */
      f(inputFilter = (_) => _, outputFilter = (_) => _) {
        this._inputFilterSensitiveLog = inputFilter;
        this._outputFilterSensitiveLog = outputFilter;
        return this;
      }
      /**
       * Sets the serializer.
       */
      ser(serializer) {
        this._serializer = serializer;
        return this;
      }
      /**
       * Sets the deserializer.
       */
      de(deserializer) {
        this._deserializer = deserializer;
        return this;
      }
      /**
       * @returns a Command class with the classBuilder properties.
       */
      build() {
        var _a;
        const closure = this;
        let CommandRef;
        return CommandRef = (_a = class extends Command {
          /**
           * @public
           */
          constructor(...[input]) {
            super();
            this.serialize = closure._serializer;
            this.deserialize = closure._deserializer;
            this.input = input ?? {};
            closure._init(this);
          }
          /**
           * @public
           */
          static getEndpointParameterInstructions() {
            return closure._ep;
          }
          /**
           * @internal
           */
          resolveMiddleware(stack, configuration, options) {
            return this.resolveMiddlewareWithContext(stack, configuration, options, {
              CommandCtor: CommandRef,
              middlewareFn: closure._middlewareFn,
              clientName: closure._clientName,
              commandName: closure._commandName,
              inputFilterSensitiveLog: closure._inputFilterSensitiveLog,
              outputFilterSensitiveLog: closure._outputFilterSensitiveLog,
              smithyContext: closure._smithyContext,
              additionalContext: closure._additionalContext
            });
          }
        }, __name(_a, "CommandRef"), _a);
      }
    };
    __name(_ClassBuilder, "ClassBuilder");
    var ClassBuilder = _ClassBuilder;
    var SENSITIVE_STRING = "***SensitiveInformation***";
    var createAggregatedClient = /* @__PURE__ */ __name((commands, Client2) => {
      for (const command of Object.keys(commands)) {
        const CommandCtor = commands[command];
        const methodImpl = /* @__PURE__ */ __name(async function(args, optionsOrCb, cb) {
          const command2 = new CommandCtor(args);
          if (typeof optionsOrCb === "function") {
            this.send(command2, optionsOrCb);
          } else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
              throw new Error(`Expected http options but got ${typeof optionsOrCb}`);
            this.send(command2, optionsOrCb || {}, cb);
          } else {
            return this.send(command2, optionsOrCb);
          }
        }, "methodImpl");
        const methodName = (command[0].toLowerCase() + command.slice(1)).replace(/Command$/, "");
        Client2.prototype[methodName] = methodImpl;
      }
    }, "createAggregatedClient");
    var parseBoolean = /* @__PURE__ */ __name((value) => {
      switch (value) {
        case "true":
          return true;
        case "false":
          return false;
        default:
          throw new Error(`Unable to parse boolean value "${value}"`);
      }
    }, "parseBoolean");
    var expectBoolean = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "number") {
        if (value === 0 || value === 1) {
          logger2.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        }
        if (value === 0) {
          return false;
        }
        if (value === 1) {
          return true;
        }
      }
      if (typeof value === "string") {
        const lower = value.toLowerCase();
        if (lower === "false" || lower === "true") {
          logger2.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        }
        if (lower === "false") {
          return false;
        }
        if (lower === "true") {
          return true;
        }
      }
      if (typeof value === "boolean") {
        return value;
      }
      throw new TypeError(`Expected boolean, got ${typeof value}: ${value}`);
    }, "expectBoolean");
    var expectNumber = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "string") {
        const parsed = parseFloat(value);
        if (!Number.isNaN(parsed)) {
          if (String(parsed) !== String(value)) {
            logger2.warn(stackTraceWarning(`Expected number but observed string: ${value}`));
          }
          return parsed;
        }
      }
      if (typeof value === "number") {
        return value;
      }
      throw new TypeError(`Expected number, got ${typeof value}: ${value}`);
    }, "expectNumber");
    var MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));
    var expectFloat32 = /* @__PURE__ */ __name((value) => {
      const expected = expectNumber(value);
      if (expected !== void 0 && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {
        if (Math.abs(expected) > MAX_FLOAT) {
          throw new TypeError(`Expected 32-bit float, got ${value}`);
        }
      }
      return expected;
    }, "expectFloat32");
    var expectLong = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (Number.isInteger(value) && !Number.isNaN(value)) {
        return value;
      }
      throw new TypeError(`Expected integer, got ${typeof value}: ${value}`);
    }, "expectLong");
    var expectInt = expectLong;
    var expectInt32 = /* @__PURE__ */ __name((value) => expectSizedInt(value, 32), "expectInt32");
    var expectShort = /* @__PURE__ */ __name((value) => expectSizedInt(value, 16), "expectShort");
    var expectByte = /* @__PURE__ */ __name((value) => expectSizedInt(value, 8), "expectByte");
    var expectSizedInt = /* @__PURE__ */ __name((value, size) => {
      const expected = expectLong(value);
      if (expected !== void 0 && castInt(expected, size) !== expected) {
        throw new TypeError(`Expected ${size}-bit integer, got ${value}`);
      }
      return expected;
    }, "expectSizedInt");
    var castInt = /* @__PURE__ */ __name((value, size) => {
      switch (size) {
        case 32:
          return Int32Array.of(value)[0];
        case 16:
          return Int16Array.of(value)[0];
        case 8:
          return Int8Array.of(value)[0];
      }
    }, "castInt");
    var expectNonNull = /* @__PURE__ */ __name((value, location) => {
      if (value === null || value === void 0) {
        if (location) {
          throw new TypeError(`Expected a non-null value for ${location}`);
        }
        throw new TypeError("Expected a non-null value");
      }
      return value;
    }, "expectNonNull");
    var expectObject = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "object" && !Array.isArray(value)) {
        return value;
      }
      const receivedType = Array.isArray(value) ? "array" : typeof value;
      throw new TypeError(`Expected object, got ${receivedType}: ${value}`);
    }, "expectObject");
    var expectString = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "string") {
        return value;
      }
      if (["boolean", "number", "bigint"].includes(typeof value)) {
        logger2.warn(stackTraceWarning(`Expected string, got ${typeof value}: ${value}`));
        return String(value);
      }
      throw new TypeError(`Expected string, got ${typeof value}: ${value}`);
    }, "expectString");
    var expectUnion2 = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      const asObject = expectObject(value);
      const setKeys = Object.entries(asObject).filter(([, v]) => v != null).map(([k]) => k);
      if (setKeys.length === 0) {
        throw new TypeError(`Unions must have exactly one non-null member. None were found.`);
      }
      if (setKeys.length > 1) {
        throw new TypeError(`Unions must have exactly one non-null member. Keys ${setKeys} were not null.`);
      }
      return asObject;
    }, "expectUnion");
    var strictParseDouble = /* @__PURE__ */ __name((value) => {
      if (typeof value == "string") {
        return expectNumber(parseNumber(value));
      }
      return expectNumber(value);
    }, "strictParseDouble");
    var strictParseFloat = strictParseDouble;
    var strictParseFloat32 = /* @__PURE__ */ __name((value) => {
      if (typeof value == "string") {
        return expectFloat32(parseNumber(value));
      }
      return expectFloat32(value);
    }, "strictParseFloat32");
    var NUMBER_REGEX = /(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g;
    var parseNumber = /* @__PURE__ */ __name((value) => {
      const matches = value.match(NUMBER_REGEX);
      if (matches === null || matches[0].length !== value.length) {
        throw new TypeError(`Expected real number, got implicit NaN`);
      }
      return parseFloat(value);
    }, "parseNumber");
    var limitedParseDouble = /* @__PURE__ */ __name((value) => {
      if (typeof value == "string") {
        return parseFloatString(value);
      }
      return expectNumber(value);
    }, "limitedParseDouble");
    var handleFloat = limitedParseDouble;
    var limitedParseFloat = limitedParseDouble;
    var limitedParseFloat32 = /* @__PURE__ */ __name((value) => {
      if (typeof value == "string") {
        return parseFloatString(value);
      }
      return expectFloat32(value);
    }, "limitedParseFloat32");
    var parseFloatString = /* @__PURE__ */ __name((value) => {
      switch (value) {
        case "NaN":
          return NaN;
        case "Infinity":
          return Infinity;
        case "-Infinity":
          return -Infinity;
        default:
          throw new Error(`Unable to parse float value: ${value}`);
      }
    }, "parseFloatString");
    var strictParseLong = /* @__PURE__ */ __name((value) => {
      if (typeof value === "string") {
        return expectLong(parseNumber(value));
      }
      return expectLong(value);
    }, "strictParseLong");
    var strictParseInt = strictParseLong;
    var strictParseInt32 = /* @__PURE__ */ __name((value) => {
      if (typeof value === "string") {
        return expectInt32(parseNumber(value));
      }
      return expectInt32(value);
    }, "strictParseInt32");
    var strictParseShort = /* @__PURE__ */ __name((value) => {
      if (typeof value === "string") {
        return expectShort(parseNumber(value));
      }
      return expectShort(value);
    }, "strictParseShort");
    var strictParseByte = /* @__PURE__ */ __name((value) => {
      if (typeof value === "string") {
        return expectByte(parseNumber(value));
      }
      return expectByte(value);
    }, "strictParseByte");
    var stackTraceWarning = /* @__PURE__ */ __name((message) => {
      return String(new TypeError(message).stack || message).split("\n").slice(0, 5).filter((s) => !s.includes("stackTraceWarning")).join("\n");
    }, "stackTraceWarning");
    var logger2 = {
      warn: console.warn
    };
    var DAYS = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    var MONTHS = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    function dateToUtcString(date) {
      const year = date.getUTCFullYear();
      const month = date.getUTCMonth();
      const dayOfWeek = date.getUTCDay();
      const dayOfMonthInt = date.getUTCDate();
      const hoursInt = date.getUTCHours();
      const minutesInt = date.getUTCMinutes();
      const secondsInt = date.getUTCSeconds();
      const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;
      const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;
      const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;
      const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;
      return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;
    }
    __name(dateToUtcString, "dateToUtcString");
    var RFC3339 = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/);
    var parseRfc3339DateTime = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
      }
      const match = RFC3339.exec(value);
      if (!match) {
        throw new TypeError("Invalid RFC-3339 date-time value");
      }
      const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds] = match;
      const year = strictParseShort(stripLeadingZeroes(yearStr));
      const month = parseDateValue(monthStr, "month", 1, 12);
      const day = parseDateValue(dayStr, "day", 1, 31);
      return buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
    }, "parseRfc3339DateTime");
    var RFC3339_WITH_OFFSET = new RegExp(
      /^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?(([-+]\d{2}\:\d{2})|[zZ])$/
    );
    var parseRfc3339DateTimeWithOffset = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
      }
      const match = RFC3339_WITH_OFFSET.exec(value);
      if (!match) {
        throw new TypeError("Invalid RFC-3339 date-time value");
      }
      const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, offsetStr] = match;
      const year = strictParseShort(stripLeadingZeroes(yearStr));
      const month = parseDateValue(monthStr, "month", 1, 12);
      const day = parseDateValue(dayStr, "day", 1, 31);
      const date = buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
      if (offsetStr.toUpperCase() != "Z") {
        date.setTime(date.getTime() - parseOffsetToMilliseconds(offsetStr));
      }
      return date;
    }, "parseRfc3339DateTimeWithOffset");
    var IMF_FIXDATE = new RegExp(
      /^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/
    );
    var RFC_850_DATE = new RegExp(
      /^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/
    );
    var ASC_TIME = new RegExp(
      /^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? (\d{4})$/
    );
    var parseRfc7231DateTime = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-7231 date-times must be expressed as strings");
      }
      let match = IMF_FIXDATE.exec(value);
      if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return buildDate(
          strictParseShort(stripLeadingZeroes(yearStr)),
          parseMonthByShortName(monthStr),
          parseDateValue(dayStr, "day", 1, 31),
          { hours, minutes, seconds, fractionalMilliseconds }
        );
      }
      match = RFC_850_DATE.exec(value);
      if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return adjustRfc850Year(
          buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), {
            hours,
            minutes,
            seconds,
            fractionalMilliseconds
          })
        );
      }
      match = ASC_TIME.exec(value);
      if (match) {
        const [_, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] = match;
        return buildDate(
          strictParseShort(stripLeadingZeroes(yearStr)),
          parseMonthByShortName(monthStr),
          parseDateValue(dayStr.trimLeft(), "day", 1, 31),
          { hours, minutes, seconds, fractionalMilliseconds }
        );
      }
      throw new TypeError("Invalid RFC-7231 date-time value");
    }, "parseRfc7231DateTime");
    var parseEpochTimestamp = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      let valueAsDouble;
      if (typeof value === "number") {
        valueAsDouble = value;
      } else if (typeof value === "string") {
        valueAsDouble = strictParseDouble(value);
      } else if (typeof value === "object" && value.tag === 1) {
        valueAsDouble = value.value;
      } else {
        throw new TypeError("Epoch timestamps must be expressed as floating point numbers or their string representation");
      }
      if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {
        throw new TypeError("Epoch timestamps must be valid, non-Infinite, non-NaN numerics");
      }
      return new Date(Math.round(valueAsDouble * 1e3));
    }, "parseEpochTimestamp");
    var buildDate = /* @__PURE__ */ __name((year, month, day, time) => {
      const adjustedMonth = month - 1;
      validateDayOfMonth(year, adjustedMonth, day);
      return new Date(
        Date.UTC(
          year,
          adjustedMonth,
          day,
          parseDateValue(time.hours, "hour", 0, 23),
          parseDateValue(time.minutes, "minute", 0, 59),
          // seconds can go up to 60 for leap seconds
          parseDateValue(time.seconds, "seconds", 0, 60),
          parseMilliseconds(time.fractionalMilliseconds)
        )
      );
    }, "buildDate");
    var parseTwoDigitYear = /* @__PURE__ */ __name((value) => {
      const thisYear = (/* @__PURE__ */ new Date()).getUTCFullYear();
      const valueInThisCentury = Math.floor(thisYear / 100) * 100 + strictParseShort(stripLeadingZeroes(value));
      if (valueInThisCentury < thisYear) {
        return valueInThisCentury + 100;
      }
      return valueInThisCentury;
    }, "parseTwoDigitYear");
    var FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1e3;
    var adjustRfc850Year = /* @__PURE__ */ __name((input) => {
      if (input.getTime() - (/* @__PURE__ */ new Date()).getTime() > FIFTY_YEARS_IN_MILLIS) {
        return new Date(
          Date.UTC(
            input.getUTCFullYear() - 100,
            input.getUTCMonth(),
            input.getUTCDate(),
            input.getUTCHours(),
            input.getUTCMinutes(),
            input.getUTCSeconds(),
            input.getUTCMilliseconds()
          )
        );
      }
      return input;
    }, "adjustRfc850Year");
    var parseMonthByShortName = /* @__PURE__ */ __name((value) => {
      const monthIdx = MONTHS.indexOf(value);
      if (monthIdx < 0) {
        throw new TypeError(`Invalid month: ${value}`);
      }
      return monthIdx + 1;
    }, "parseMonthByShortName");
    var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    var validateDayOfMonth = /* @__PURE__ */ __name((year, month, day) => {
      let maxDays = DAYS_IN_MONTH[month];
      if (month === 1 && isLeapYear(year)) {
        maxDays = 29;
      }
      if (day > maxDays) {
        throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);
      }
    }, "validateDayOfMonth");
    var isLeapYear = /* @__PURE__ */ __name((year) => {
      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    }, "isLeapYear");
    var parseDateValue = /* @__PURE__ */ __name((value, type, lower, upper) => {
      const dateVal = strictParseByte(stripLeadingZeroes(value));
      if (dateVal < lower || dateVal > upper) {
        throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);
      }
      return dateVal;
    }, "parseDateValue");
    var parseMilliseconds = /* @__PURE__ */ __name((value) => {
      if (value === null || value === void 0) {
        return 0;
      }
      return strictParseFloat32("0." + value) * 1e3;
    }, "parseMilliseconds");
    var parseOffsetToMilliseconds = /* @__PURE__ */ __name((value) => {
      const directionStr = value[0];
      let direction = 1;
      if (directionStr == "+") {
        direction = 1;
      } else if (directionStr == "-") {
        direction = -1;
      } else {
        throw new TypeError(`Offset direction, ${directionStr}, must be "+" or "-"`);
      }
      const hour = Number(value.substring(1, 3));
      const minute = Number(value.substring(4, 6));
      return direction * (hour * 60 + minute) * 60 * 1e3;
    }, "parseOffsetToMilliseconds");
    var stripLeadingZeroes = /* @__PURE__ */ __name((value) => {
      let idx = 0;
      while (idx < value.length - 1 && value.charAt(idx) === "0") {
        idx++;
      }
      if (idx === 0) {
        return value;
      }
      return value.slice(idx);
    }, "stripLeadingZeroes");
    var _ServiceException = class _ServiceException2 extends Error {
      constructor(options) {
        super(options.message);
        Object.setPrototypeOf(this, _ServiceException2.prototype);
        this.name = options.name;
        this.$fault = options.$fault;
        this.$metadata = options.$metadata;
      }
      /**
       * Checks if a value is an instance of ServiceException (duck typed)
       */
      static isInstance(value) {
        if (!value)
          return false;
        const candidate = value;
        return Boolean(candidate.$fault) && Boolean(candidate.$metadata) && (candidate.$fault === "client" || candidate.$fault === "server");
      }
    };
    __name(_ServiceException, "ServiceException");
    var ServiceException = _ServiceException;
    var decorateServiceException = /* @__PURE__ */ __name((exception, additions = {}) => {
      Object.entries(additions).filter(([, v]) => v !== void 0).forEach(([k, v]) => {
        if (exception[k] == void 0 || exception[k] === "") {
          exception[k] = v;
        }
      });
      const message = exception.message || exception.Message || "UnknownError";
      exception.message = message;
      delete exception.Message;
      return exception;
    }, "decorateServiceException");
    var throwDefaultError = /* @__PURE__ */ __name(({ output, parsedBody, exceptionCtor, errorCode }) => {
      const $metadata = deserializeMetadata(output);
      const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
      const response = new exceptionCtor({
        name: (parsedBody == null ? void 0 : parsedBody.code) || (parsedBody == null ? void 0 : parsedBody.Code) || errorCode || statusCode || "UnknownError",
        $fault: "client",
        $metadata
      });
      throw decorateServiceException(response, parsedBody);
    }, "throwDefaultError");
    var withBaseException = /* @__PURE__ */ __name((ExceptionCtor) => {
      return ({ output, parsedBody, errorCode }) => {
        throwDefaultError({ output, parsedBody, exceptionCtor: ExceptionCtor, errorCode });
      };
    }, "withBaseException");
    var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    }), "deserializeMetadata");
    var loadConfigsForDefaultMode = /* @__PURE__ */ __name((mode) => {
      switch (mode) {
        case "standard":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "in-region":
          return {
            retryMode: "standard",
            connectionTimeout: 1100
          };
        case "cross-region":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "mobile":
          return {
            retryMode: "standard",
            connectionTimeout: 3e4
          };
        default:
          return {};
      }
    }, "loadConfigsForDefaultMode");
    var warningEmitted = false;
    var emitWarningIfUnsupportedVersion2 = /* @__PURE__ */ __name((version2) => {
      if (version2 && !warningEmitted && parseInt(version2.substring(1, version2.indexOf("."))) < 16) {
        warningEmitted = true;
      }
    }, "emitWarningIfUnsupportedVersion");
    var getChecksumConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      const checksumAlgorithms = [];
      for (const id in import_types5.AlgorithmId) {
        const algorithmId = import_types5.AlgorithmId[id];
        if (runtimeConfig[algorithmId] === void 0) {
          continue;
        }
        checksumAlgorithms.push({
          algorithmId: () => algorithmId,
          checksumConstructor: () => runtimeConfig[algorithmId]
        });
      }
      return {
        _checksumAlgorithms: checksumAlgorithms,
        addChecksumAlgorithm(algo) {
          this._checksumAlgorithms.push(algo);
        },
        checksumAlgorithms() {
          return this._checksumAlgorithms;
        }
      };
    }, "getChecksumConfiguration");
    var resolveChecksumRuntimeConfig = /* @__PURE__ */ __name((clientConfig) => {
      const runtimeConfig = {};
      clientConfig.checksumAlgorithms().forEach((checksumAlgorithm) => {
        runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();
      });
      return runtimeConfig;
    }, "resolveChecksumRuntimeConfig");
    var getRetryConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      let _retryStrategy = runtimeConfig.retryStrategy;
      return {
        setRetryStrategy(retryStrategy) {
          _retryStrategy = retryStrategy;
        },
        retryStrategy() {
          return _retryStrategy;
        }
      };
    }, "getRetryConfiguration");
    var resolveRetryRuntimeConfig = /* @__PURE__ */ __name((retryStrategyConfiguration) => {
      const runtimeConfig = {};
      runtimeConfig.retryStrategy = retryStrategyConfiguration.retryStrategy();
      return runtimeConfig;
    }, "resolveRetryRuntimeConfig");
    var getDefaultExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      return {
        ...getChecksumConfiguration(runtimeConfig),
        ...getRetryConfiguration(runtimeConfig)
      };
    }, "getDefaultExtensionConfiguration");
    var getDefaultClientConfiguration = getDefaultExtensionConfiguration;
    var resolveDefaultRuntimeConfig = /* @__PURE__ */ __name((config) => {
      return {
        ...resolveChecksumRuntimeConfig(config),
        ...resolveRetryRuntimeConfig(config)
      };
    }, "resolveDefaultRuntimeConfig");
    var getArrayIfSingleItem = /* @__PURE__ */ __name((mayBeArray) => Array.isArray(mayBeArray) ? mayBeArray : [mayBeArray], "getArrayIfSingleItem");
    var getValueFromTextNode2 = /* @__PURE__ */ __name((obj) => {
      const textNodeName = "#text";
      for (const key in obj) {
        if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== void 0) {
          obj[key] = obj[key][textNodeName];
        } else if (typeof obj[key] === "object" && obj[key] !== null) {
          obj[key] = getValueFromTextNode2(obj[key]);
        }
      }
      return obj;
    }, "getValueFromTextNode");
    var isSerializableHeaderValue = /* @__PURE__ */ __name((value) => {
      return value != null;
    }, "isSerializableHeaderValue");
    var LazyJsonString = /* @__PURE__ */ __name(function LazyJsonString2(val2) {
      const str = Object.assign(new String(val2), {
        deserializeJSON() {
          return JSON.parse(String(val2));
        },
        toString() {
          return String(val2);
        },
        toJSON() {
          return String(val2);
        }
      });
      return str;
    }, "LazyJsonString");
    LazyJsonString.from = (object) => {
      if (object && typeof object === "object" && (object instanceof LazyJsonString || "deserializeJSON" in object)) {
        return object;
      } else if (typeof object === "string" || Object.getPrototypeOf(object) === String.prototype) {
        return LazyJsonString(String(object));
      }
      return LazyJsonString(JSON.stringify(object));
    };
    LazyJsonString.fromObject = LazyJsonString.from;
    var _NoOpLogger = class _NoOpLogger {
      trace() {
      }
      debug() {
      }
      info() {
      }
      warn() {
      }
      error() {
      }
    };
    __name(_NoOpLogger, "NoOpLogger");
    var NoOpLogger = _NoOpLogger;
    function map(arg0, arg1, arg2) {
      let target;
      let filter;
      let instructions;
      if (typeof arg1 === "undefined" && typeof arg2 === "undefined") {
        target = {};
        instructions = arg0;
      } else {
        target = arg0;
        if (typeof arg1 === "function") {
          filter = arg1;
          instructions = arg2;
          return mapWithFilter(target, filter, instructions);
        } else {
          instructions = arg1;
        }
      }
      for (const key of Object.keys(instructions)) {
        if (!Array.isArray(instructions[key])) {
          target[key] = instructions[key];
          continue;
        }
        applyInstruction(target, null, instructions, key);
      }
      return target;
    }
    __name(map, "map");
    var convertMap = /* @__PURE__ */ __name((target) => {
      const output = {};
      for (const [k, v] of Object.entries(target || {})) {
        output[k] = [, v];
      }
      return output;
    }, "convertMap");
    var take = /* @__PURE__ */ __name((source, instructions) => {
      const out = {};
      for (const key in instructions) {
        applyInstruction(out, source, instructions, key);
      }
      return out;
    }, "take");
    var mapWithFilter = /* @__PURE__ */ __name((target, filter, instructions) => {
      return map(
        target,
        Object.entries(instructions).reduce(
          (_instructions, [key, value]) => {
            if (Array.isArray(value)) {
              _instructions[key] = value;
            } else {
              if (typeof value === "function") {
                _instructions[key] = [filter, value()];
              } else {
                _instructions[key] = [filter, value];
              }
            }
            return _instructions;
          },
          {}
        )
      );
    }, "mapWithFilter");
    var applyInstruction = /* @__PURE__ */ __name((target, source, instructions, targetKey) => {
      if (source !== null) {
        let instruction = instructions[targetKey];
        if (typeof instruction === "function") {
          instruction = [, instruction];
        }
        const [filter2 = nonNullish, valueFn = pass, sourceKey = targetKey] = instruction;
        if (typeof filter2 === "function" && filter2(source[sourceKey]) || typeof filter2 !== "function" && !!filter2) {
          target[targetKey] = valueFn(source[sourceKey]);
        }
        return;
      }
      let [filter, value] = instructions[targetKey];
      if (typeof value === "function") {
        let _value;
        const defaultFilterPassed = filter === void 0 && (_value = value()) != null;
        const customFilterPassed = typeof filter === "function" && !!filter(void 0) || typeof filter !== "function" && !!filter;
        if (defaultFilterPassed) {
          target[targetKey] = _value;
        } else if (customFilterPassed) {
          target[targetKey] = value();
        }
      } else {
        const defaultFilterPassed = filter === void 0 && value != null;
        const customFilterPassed = typeof filter === "function" && !!filter(value) || typeof filter !== "function" && !!filter;
        if (defaultFilterPassed || customFilterPassed) {
          target[targetKey] = value;
        }
      }
    }, "applyInstruction");
    var nonNullish = /* @__PURE__ */ __name((_) => _ != null, "nonNullish");
    var pass = /* @__PURE__ */ __name((_) => _, "pass");
    function quoteHeader(part) {
      if (part.includes(",") || part.includes('"')) {
        part = `"${part.replace(/"/g, '\\"')}"`;
      }
      return part;
    }
    __name(quoteHeader, "quoteHeader");
    var serializeFloat = /* @__PURE__ */ __name((value) => {
      if (value !== value) {
        return "NaN";
      }
      switch (value) {
        case Infinity:
          return "Infinity";
        case -Infinity:
          return "-Infinity";
        default:
          return value;
      }
    }, "serializeFloat");
    var serializeDateTime = /* @__PURE__ */ __name((date) => date.toISOString().replace(".000Z", "Z"), "serializeDateTime");
    var _json = /* @__PURE__ */ __name((obj) => {
      if (obj == null) {
        return {};
      }
      if (Array.isArray(obj)) {
        return obj.filter((_) => _ != null).map(_json);
      }
      if (typeof obj === "object") {
        const target = {};
        for (const key of Object.keys(obj)) {
          if (obj[key] == null) {
            continue;
          }
          target[key] = _json(obj[key]);
        }
        return target;
      }
      return obj;
    }, "_json");
    function splitEvery(value, delimiter, numDelimiters) {
      if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {
        throw new Error("Invalid number of delimiters (" + numDelimiters + ") for splitEvery.");
      }
      const segments = value.split(delimiter);
      if (numDelimiters === 1) {
        return segments;
      }
      const compoundSegments = [];
      let currentSegment = "";
      for (let i = 0; i < segments.length; i++) {
        if (currentSegment === "") {
          currentSegment = segments[i];
        } else {
          currentSegment += delimiter + segments[i];
        }
        if ((i + 1) % numDelimiters === 0) {
          compoundSegments.push(currentSegment);
          currentSegment = "";
        }
      }
      if (currentSegment !== "") {
        compoundSegments.push(currentSegment);
      }
      return compoundSegments;
    }
    __name(splitEvery, "splitEvery");
    var splitHeader = /* @__PURE__ */ __name((value) => {
      const z = value.length;
      const values = [];
      let withinQuotes = false;
      let prevChar = void 0;
      let anchor = 0;
      for (let i = 0; i < z; ++i) {
        const char = value[i];
        switch (char) {
          case `"`:
            if (prevChar !== "\\") {
              withinQuotes = !withinQuotes;
            }
            break;
          case ",":
            if (!withinQuotes) {
              values.push(value.slice(anchor, i));
              anchor = i + 1;
            }
            break;
          default:
        }
        prevChar = char;
      }
      values.push(value.slice(anchor));
      return values.map((v) => {
        v = v.trim();
        const z2 = v.length;
        if (z2 < 2) {
          return v;
        }
        if (v[0] === `"` && v[z2 - 1] === `"`) {
          v = v.slice(1, z2 - 1);
        }
        return v.replace(/\\"/g, '"');
      });
    }, "splitHeader");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/awsExpectUnion.js
var import_smithy_client, awsExpectUnion;
var init_awsExpectUnion = __esm({
  "../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/awsExpectUnion.js"() {
    import_smithy_client = __toESM(require_dist_cjs19());
    awsExpectUnion = (value) => {
      if (value == null) {
        return void 0;
      }
      if (typeof value === "object" && "__type" in value) {
        delete value.__type;
      }
      return (0, import_smithy_client.expectUnion)(value);
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/protocols/common.js
var import_smithy_client2, collectBodyString;
var init_common = __esm({
  "../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/protocols/common.js"() {
    import_smithy_client2 = __toESM(require_dist_cjs19());
    collectBodyString = (streamBody, context) => (0, import_smithy_client2.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
  }
});

// ../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/parseJsonBody.js
var parseJsonBody, parseJsonErrorBody, loadRestJsonErrorCode;
var init_parseJsonBody = __esm({
  "../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/parseJsonBody.js"() {
    init_common();
    parseJsonBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        try {
          return JSON.parse(encoded);
        } catch (e) {
          if (e?.name === "SyntaxError") {
            Object.defineProperty(e, "$responseBodyText", {
              value: encoded
            });
          }
          throw e;
        }
      }
      return {};
    });
    parseJsonErrorBody = async (errorBody, context) => {
      const value = await parseJsonBody(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    };
    loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
          cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    };
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.4.1/node_modules/fast-xml-parser/src/util.js
var require_util = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.4.1/node_modules/fast-xml-parser/src/util.js"(exports) {
    "use strict";
    var nameStartChar = ":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    var nameChar = nameStartChar + "\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var nameRegexp = "[" + nameStartChar + "][" + nameChar + "]*";
    var regexName = new RegExp("^" + nameRegexp + "$");
    var getAllMatches = function(string, regex) {
      const matches = [];
      let match = regex.exec(string);
      while (match) {
        const allmatches = [];
        allmatches.startIndex = regex.lastIndex - match[0].length;
        const len = match.length;
        for (let index = 0; index < len; index++) {
          allmatches.push(match[index]);
        }
        matches.push(allmatches);
        match = regex.exec(string);
      }
      return matches;
    };
    var isName = function(string) {
      const match = regexName.exec(string);
      return !(match === null || typeof match === "undefined");
    };
    exports.isExist = function(v) {
      return typeof v !== "undefined";
    };
    exports.isEmptyObject = function(obj) {
      return Object.keys(obj).length === 0;
    };
    exports.merge = function(target, a, arrayMode) {
      if (a) {
        const keys = Object.keys(a);
        const len = keys.length;
        for (let i = 0; i < len; i++) {
          if (arrayMode === "strict") {
            target[keys[i]] = [a[keys[i]]];
          } else {
            target[keys[i]] = a[keys[i]];
          }
        }
      }
    };
    exports.getValue = function(v) {
      if (exports.isExist(v)) {
        return v;
      } else {
        return "";
      }
    };
    exports.isName = isName;
    exports.getAllMatches = getAllMatches;
    exports.nameRegexp = nameRegexp;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.4.1/node_modules/fast-xml-parser/src/validator.js
var require_validator = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.4.1/node_modules/fast-xml-parser/src/validator.js"(exports) {
    "use strict";
    var util = require_util();
    var defaultOptions = {
      allowBooleanAttributes: false,
      //A tag can have attributes without any value
      unpairedTags: []
    };
    exports.validate = function(xmlData, options) {
      options = Object.assign({}, defaultOptions, options);
      const tags = [];
      let tagFound = false;
      let reachedRoot = false;
      if (xmlData[0] === "\uFEFF") {
        xmlData = xmlData.substr(1);
      }
      for (let i = 0; i < xmlData.length; i++) {
        if (xmlData[i] === "<" && xmlData[i + 1] === "?") {
          i += 2;
          i = readPI(xmlData, i);
          if (i.err)
            return i;
        } else if (xmlData[i] === "<") {
          let tagStartPos = i;
          i++;
          if (xmlData[i] === "!") {
            i = readCommentAndCDATA(xmlData, i);
            continue;
          } else {
            let closingTag = false;
            if (xmlData[i] === "/") {
              closingTag = true;
              i++;
            }
            let tagName = "";
            for (; i < xmlData.length && xmlData[i] !== ">" && xmlData[i] !== " " && xmlData[i] !== "	" && xmlData[i] !== "\n" && xmlData[i] !== "\r"; i++) {
              tagName += xmlData[i];
            }
            tagName = tagName.trim();
            if (tagName[tagName.length - 1] === "/") {
              tagName = tagName.substring(0, tagName.length - 1);
              i--;
            }
            if (!validateTagName(tagName)) {
              let msg;
              if (tagName.trim().length === 0) {
                msg = "Invalid space after '<'.";
              } else {
                msg = "Tag '" + tagName + "' is an invalid name.";
              }
              return getErrorObject("InvalidTag", msg, getLineNumberForPosition(xmlData, i));
            }
            const result = readAttributeStr(xmlData, i);
            if (result === false) {
              return getErrorObject("InvalidAttr", "Attributes for '" + tagName + "' have open quote.", getLineNumberForPosition(xmlData, i));
            }
            let attrStr = result.value;
            i = result.index;
            if (attrStr[attrStr.length - 1] === "/") {
              const attrStrStart = i - attrStr.length;
              attrStr = attrStr.substring(0, attrStr.length - 1);
              const isValid = validateAttributeString(attrStr, options);
              if (isValid === true) {
                tagFound = true;
              } else {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));
              }
            } else if (closingTag) {
              if (!result.tagClosed) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' doesn't have proper closing.", getLineNumberForPosition(xmlData, i));
              } else if (attrStr.trim().length > 0) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' can't have attributes or invalid starting.", getLineNumberForPosition(xmlData, tagStartPos));
              } else if (tags.length === 0) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' has not been opened.", getLineNumberForPosition(xmlData, tagStartPos));
              } else {
                const otg = tags.pop();
                if (tagName !== otg.tagName) {
                  let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);
                  return getErrorObject(
                    "InvalidTag",
                    "Expected closing tag '" + otg.tagName + "' (opened in line " + openPos.line + ", col " + openPos.col + ") instead of closing tag '" + tagName + "'.",
                    getLineNumberForPosition(xmlData, tagStartPos)
                  );
                }
                if (tags.length == 0) {
                  reachedRoot = true;
                }
              }
            } else {
              const isValid = validateAttributeString(attrStr, options);
              if (isValid !== true) {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));
              }
              if (reachedRoot === true) {
                return getErrorObject("InvalidXml", "Multiple possible root nodes found.", getLineNumberForPosition(xmlData, i));
              } else if (options.unpairedTags.indexOf(tagName) !== -1) {
              } else {
                tags.push({ tagName, tagStartPos });
              }
              tagFound = true;
            }
            for (i++; i < xmlData.length; i++) {
              if (xmlData[i] === "<") {
                if (xmlData[i + 1] === "!") {
                  i++;
                  i = readCommentAndCDATA(xmlData, i);
                  continue;
                } else if (xmlData[i + 1] === "?") {
                  i = readPI(xmlData, ++i);
                  if (i.err)
                    return i;
                } else {
                  break;
                }
              } else if (xmlData[i] === "&") {
                const afterAmp = validateAmpersand(xmlData, i);
                if (afterAmp == -1)
                  return getErrorObject("InvalidChar", "char '&' is not expected.", getLineNumberForPosition(xmlData, i));
                i = afterAmp;
              } else {
                if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {
                  return getErrorObject("InvalidXml", "Extra text at the end", getLineNumberForPosition(xmlData, i));
                }
              }
            }
            if (xmlData[i] === "<") {
              i--;
            }
          }
        } else {
          if (isWhiteSpace(xmlData[i])) {
            continue;
          }
          return getErrorObject("InvalidChar", "char '" + xmlData[i] + "' is not expected.", getLineNumberForPosition(xmlData, i));
        }
      }
      if (!tagFound) {
        return getErrorObject("InvalidXml", "Start tag expected.", 1);
      } else if (tags.length == 1) {
        return getErrorObject("InvalidTag", "Unclosed tag '" + tags[0].tagName + "'.", getLineNumberForPosition(xmlData, tags[0].tagStartPos));
      } else if (tags.length > 0) {
        return getErrorObject("InvalidXml", "Invalid '" + JSON.stringify(tags.map((t) => t.tagName), null, 4).replace(/\r?\n/g, "") + "' found.", { line: 1, col: 1 });
      }
      return true;
    };
    function isWhiteSpace(char) {
      return char === " " || char === "	" || char === "\n" || char === "\r";
    }
    function readPI(xmlData, i) {
      const start = i;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] == "?" || xmlData[i] == " ") {
          const tagname = xmlData.substr(start, i - start);
          if (i > 5 && tagname === "xml") {
            return getErrorObject("InvalidXml", "XML declaration allowed only at the start of the document.", getLineNumberForPosition(xmlData, i));
          } else if (xmlData[i] == "?" && xmlData[i + 1] == ">") {
            i++;
            break;
          } else {
            continue;
          }
        }
      }
      return i;
    }
    function readCommentAndCDATA(xmlData, i) {
      if (xmlData.length > i + 5 && xmlData[i + 1] === "-" && xmlData[i + 2] === "-") {
        for (i += 3; i < xmlData.length; i++) {
          if (xmlData[i] === "-" && xmlData[i + 1] === "-" && xmlData[i + 2] === ">") {
            i += 2;
            break;
          }
        }
      } else if (xmlData.length > i + 8 && xmlData[i + 1] === "D" && xmlData[i + 2] === "O" && xmlData[i + 3] === "C" && xmlData[i + 4] === "T" && xmlData[i + 5] === "Y" && xmlData[i + 6] === "P" && xmlData[i + 7] === "E") {
        let angleBracketsCount = 1;
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === "<") {
            angleBracketsCount++;
          } else if (xmlData[i] === ">") {
            angleBracketsCount--;
            if (angleBracketsCount === 0) {
              break;
            }
          }
        }
      } else if (xmlData.length > i + 9 && xmlData[i + 1] === "[" && xmlData[i + 2] === "C" && xmlData[i + 3] === "D" && xmlData[i + 4] === "A" && xmlData[i + 5] === "T" && xmlData[i + 6] === "A" && xmlData[i + 7] === "[") {
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === "]" && xmlData[i + 1] === "]" && xmlData[i + 2] === ">") {
            i += 2;
            break;
          }
        }
      }
      return i;
    }
    var doubleQuote = '"';
    var singleQuote = "'";
    function readAttributeStr(xmlData, i) {
      let attrStr = "";
      let startChar = "";
      let tagClosed = false;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {
          if (startChar === "") {
            startChar = xmlData[i];
          } else if (startChar !== xmlData[i]) {
          } else {
            startChar = "";
          }
        } else if (xmlData[i] === ">") {
          if (startChar === "") {
            tagClosed = true;
            break;
          }
        }
        attrStr += xmlData[i];
      }
      if (startChar !== "") {
        return false;
      }
      return {
        value: attrStr,
        index: i,
        tagClosed
      };
    }
    var validAttrStrRegxp = new RegExp(`(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['"])(([\\s\\S])*?)\\5)?`, "g");
    function validateAttributeString(attrStr, options) {
      const matches = util.getAllMatches(attrStr, validAttrStrRegxp);
      const attrNames = {};
      for (let i = 0; i < matches.length; i++) {
        if (matches[i][1].length === 0) {
          return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' has no space in starting.", getPositionFromMatch(matches[i]));
        } else if (matches[i][3] !== void 0 && matches[i][4] === void 0) {
          return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' is without value.", getPositionFromMatch(matches[i]));
        } else if (matches[i][3] === void 0 && !options.allowBooleanAttributes) {
          return getErrorObject("InvalidAttr", "boolean attribute '" + matches[i][2] + "' is not allowed.", getPositionFromMatch(matches[i]));
        }
        const attrName = matches[i][2];
        if (!validateAttrName(attrName)) {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is an invalid name.", getPositionFromMatch(matches[i]));
        }
        if (!attrNames.hasOwnProperty(attrName)) {
          attrNames[attrName] = 1;
        } else {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is repeated.", getPositionFromMatch(matches[i]));
        }
      }
      return true;
    }
    function validateNumberAmpersand(xmlData, i) {
      let re = /\d/;
      if (xmlData[i] === "x") {
        i++;
        re = /[\da-fA-F]/;
      }
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === ";")
          return i;
        if (!xmlData[i].match(re))
          break;
      }
      return -1;
    }
    function validateAmpersand(xmlData, i) {
      i++;
      if (xmlData[i] === ";")
        return -1;
      if (xmlData[i] === "#") {
        i++;
        return validateNumberAmpersand(xmlData, i);
      }
      let count = 0;
      for (; i < xmlData.length; i++, count++) {
        if (xmlData[i].match(/\w/) && count < 20)
          continue;
        if (xmlData[i] === ";")
          break;
        return -1;
      }
      return i;
    }
    function getErrorObject(code, message, lineNumber) {
      return {
        err: {
          code,
          msg: message,
          line: lineNumber.line || lineNumber,
          col: lineNumber.col
        }
      };
    }
    function validateAttrName(attrName) {
      return util.isName(attrName);
    }
    function validateTagName(tagname) {
      return util.isName(tagname);
    }
    function getLineNumberForPosition(xmlData, index) {
      const lines = xmlData.substring(0, index).split(/\r?\n/);
      return {
        line: lines.length,
        // column number is last line's length + 1, because column numbering starts at 1:
        col: lines[lines.length - 1].length + 1
      };
    }
    function getPositionFromMatch(match) {
      return match.startIndex + match[1].length;
    }
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.4.1/node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js
var require_OptionsBuilder = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.4.1/node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js"(exports) {
    var defaultOptions = {
      preserveOrder: false,
      attributeNamePrefix: "@_",
      attributesGroupName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      removeNSPrefix: false,
      // remove NS from tag name or attribute name if true
      allowBooleanAttributes: false,
      //a tag can have attributes without any value
      //ignoreRootElement : false,
      parseTagValue: true,
      parseAttributeValue: false,
      trimValues: true,
      //Trim string values of tag and attributes
      cdataPropName: false,
      numberParseOptions: {
        hex: true,
        leadingZeros: true,
        eNotation: true
      },
      tagValueProcessor: function(tagName, val2) {
        return val2;
      },
      attributeValueProcessor: function(attrName, val2) {
        return val2;
      },
      stopNodes: [],
      //nested tags will not be parsed even for errors
      alwaysCreateTextNode: false,
      isArray: () => false,
      commentPropName: false,
      unpairedTags: [],
      processEntities: true,
      htmlEntities: false,
      ignoreDeclaration: false,
      ignorePiTags: false,
      transformTagName: false,
      transformAttributeName: false,
      updateTag: function(tagName, jPath, attrs) {
        return tagName;
      }
      // skipEmptyListItem: false
    };
    var buildOptions = function(options) {
      return Object.assign({}, defaultOptions, options);
    };
    exports.buildOptions = buildOptions;
    exports.defaultOptions = defaultOptions;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.4.1/node_modules/fast-xml-parser/src/xmlparser/xmlNode.js
var require_xmlNode = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.4.1/node_modules/fast-xml-parser/src/xmlparser/xmlNode.js"(exports, module) {
    "use strict";
    var XmlNode = class {
      constructor(tagname) {
        this.tagname = tagname;
        this.child = [];
        this[":@"] = {};
      }
      add(key, val2) {
        if (key === "__proto__")
          key = "#__proto__";
        this.child.push({ [key]: val2 });
      }
      addChild(node) {
        if (node.tagname === "__proto__")
          node.tagname = "#__proto__";
        if (node[":@"] && Object.keys(node[":@"]).length > 0) {
          this.child.push({ [node.tagname]: node.child, [":@"]: node[":@"] });
        } else {
          this.child.push({ [node.tagname]: node.child });
        }
      }
    };
    module.exports = XmlNode;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.4.1/node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js
var require_DocTypeReader = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.4.1/node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js"(exports, module) {
    var util = require_util();
    function readDocType(xmlData, i) {
      const entities = {};
      if (xmlData[i + 3] === "O" && xmlData[i + 4] === "C" && xmlData[i + 5] === "T" && xmlData[i + 6] === "Y" && xmlData[i + 7] === "P" && xmlData[i + 8] === "E") {
        i = i + 9;
        let angleBracketsCount = 1;
        let hasBody = false, comment = false;
        let exp = "";
        for (; i < xmlData.length; i++) {
          if (xmlData[i] === "<" && !comment) {
            if (hasBody && isEntity(xmlData, i)) {
              i += 7;
              [entityName, val, i] = readEntityExp(xmlData, i + 1);
              if (val.indexOf("&") === -1)
                entities[validateEntityName(entityName)] = {
                  regx: RegExp(`&${entityName};`, "g"),
                  val
                };
            } else if (hasBody && isElement(xmlData, i))
              i += 8;
            else if (hasBody && isAttlist(xmlData, i))
              i += 8;
            else if (hasBody && isNotation(xmlData, i))
              i += 9;
            else if (isComment)
              comment = true;
            else
              throw new Error("Invalid DOCTYPE");
            angleBracketsCount++;
            exp = "";
          } else if (xmlData[i] === ">") {
            if (comment) {
              if (xmlData[i - 1] === "-" && xmlData[i - 2] === "-") {
                comment = false;
                angleBracketsCount--;
              }
            } else {
              angleBracketsCount--;
            }
            if (angleBracketsCount === 0) {
              break;
            }
          } else if (xmlData[i] === "[") {
            hasBody = true;
          } else {
            exp += xmlData[i];
          }
        }
        if (angleBracketsCount !== 0) {
          throw new Error(`Unclosed DOCTYPE`);
        }
      } else {
        throw new Error(`Invalid Tag instead of DOCTYPE`);
      }
      return { entities, i };
    }
    function readEntityExp(xmlData, i) {
      let entityName2 = "";
      for (; i < xmlData.length && (xmlData[i] !== "'" && xmlData[i] !== '"'); i++) {
        entityName2 += xmlData[i];
      }
      entityName2 = entityName2.trim();
      if (entityName2.indexOf(" ") !== -1)
        throw new Error("External entites are not supported");
      const startChar = xmlData[i++];
      let val2 = "";
      for (; i < xmlData.length && xmlData[i] !== startChar; i++) {
        val2 += xmlData[i];
      }
      return [entityName2, val2, i];
    }
    function isComment(xmlData, i) {
      if (xmlData[i + 1] === "!" && xmlData[i + 2] === "-" && xmlData[i + 3] === "-")
        return true;
      return false;
    }
    function isEntity(xmlData, i) {
      if (xmlData[i + 1] === "!" && xmlData[i + 2] === "E" && xmlData[i + 3] === "N" && xmlData[i + 4] === "T" && xmlData[i + 5] === "I" && xmlData[i + 6] === "T" && xmlData[i + 7] === "Y")
        return true;
      return false;
    }
    function isElement(xmlData, i) {
      if (xmlData[i + 1] === "!" && xmlData[i + 2] === "E" && xmlData[i + 3] === "L" && xmlData[i + 4] === "E" && xmlData[i + 5] === "M" && xmlData[i + 6] === "E" && xmlData[i + 7] === "N" && xmlData[i + 8] === "T")
        return true;
      return false;
    }
    function isAttlist(xmlData, i) {
      if (xmlData[i + 1] === "!" && xmlData[i + 2] === "A" && xmlData[i + 3] === "T" && xmlData[i + 4] === "T" && xmlData[i + 5] === "L" && xmlData[i + 6] === "I" && xmlData[i + 7] === "S" && xmlData[i + 8] === "T")
        return true;
      return false;
    }
    function isNotation(xmlData, i) {
      if (xmlData[i + 1] === "!" && xmlData[i + 2] === "N" && xmlData[i + 3] === "O" && xmlData[i + 4] === "T" && xmlData[i + 5] === "A" && xmlData[i + 6] === "T" && xmlData[i + 7] === "I" && xmlData[i + 8] === "O" && xmlData[i + 9] === "N")
        return true;
      return false;
    }
    function validateEntityName(name) {
      if (util.isName(name))
        return name;
      else
        throw new Error(`Invalid entity name ${name}`);
    }
    module.exports = readDocType;
  }
});

// ../../node_modules/.pnpm/strnum@1.1.2/node_modules/strnum/strnum.js
var require_strnum = __commonJS({
  "../../node_modules/.pnpm/strnum@1.1.2/node_modules/strnum/strnum.js"(exports, module) {
    var hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;
    var numRegex = /^([\-\+])?(0*)([0-9]*(\.[0-9]*)?)$/;
    var consider = {
      hex: true,
      // oct: false,
      leadingZeros: true,
      decimalPoint: ".",
      eNotation: true
      //skipLike: /regex/
    };
    function toNumber(str, options = {}) {
      options = Object.assign({}, consider, options);
      if (!str || typeof str !== "string")
        return str;
      let trimmedStr = str.trim();
      if (options.skipLike !== void 0 && options.skipLike.test(trimmedStr))
        return str;
      else if (str === "0")
        return 0;
      else if (options.hex && hexRegex.test(trimmedStr)) {
        return parse_int(trimmedStr, 16);
      } else if (trimmedStr.search(/[eE]/) !== -1) {
        const notation = trimmedStr.match(/^([-\+])?(0*)([0-9]*(\.[0-9]*)?[eE][-\+]?[0-9]+)$/);
        if (notation) {
          if (options.leadingZeros) {
            trimmedStr = (notation[1] || "") + notation[3];
          } else {
            if (notation[2] === "0" && notation[3][0] === ".") {
            } else {
              return str;
            }
          }
          return options.eNotation ? Number(trimmedStr) : str;
        } else {
          return str;
        }
      } else {
        const match = numRegex.exec(trimmedStr);
        if (match) {
          const sign = match[1];
          const leadingZeros = match[2];
          let numTrimmedByZeros = trimZeros(match[3]);
          if (!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== ".")
            return str;
          else if (!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== ".")
            return str;
          else if (options.leadingZeros && leadingZeros === str)
            return 0;
          else {
            const num = Number(trimmedStr);
            const numStr = "" + num;
            if (numStr.search(/[eE]/) !== -1) {
              if (options.eNotation)
                return num;
              else
                return str;
            } else if (trimmedStr.indexOf(".") !== -1) {
              if (numStr === "0" && numTrimmedByZeros === "")
                return num;
              else if (numStr === numTrimmedByZeros)
                return num;
              else if (sign && numStr === "-" + numTrimmedByZeros)
                return num;
              else
                return str;
            }
            if (leadingZeros) {
              return numTrimmedByZeros === numStr || sign + numTrimmedByZeros === numStr ? num : str;
            } else {
              return trimmedStr === numStr || trimmedStr === sign + numStr ? num : str;
            }
          }
        } else {
          return str;
        }
      }
    }
    function trimZeros(numStr) {
      if (numStr && numStr.indexOf(".") !== -1) {
        numStr = numStr.replace(/0+$/, "");
        if (numStr === ".")
          numStr = "0";
        else if (numStr[0] === ".")
          numStr = "0" + numStr;
        else if (numStr[numStr.length - 1] === ".")
          numStr = numStr.substr(0, numStr.length - 1);
        return numStr;
      }
      return numStr;
    }
    function parse_int(numStr, base) {
      if (parseInt)
        return parseInt(numStr, base);
      else if (Number.parseInt)
        return Number.parseInt(numStr, base);
      else if (window && window.parseInt)
        return window.parseInt(numStr, base);
      else
        throw new Error("parseInt, Number.parseInt, window.parseInt are not supported");
    }
    module.exports = toNumber;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.4.1/node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js
var require_OrderedObjParser = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.4.1/node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js"(exports, module) {
    "use strict";
    var util = require_util();
    var xmlNode = require_xmlNode();
    var readDocType = require_DocTypeReader();
    var toNumber = require_strnum();
    var OrderedObjParser = class {
      constructor(options) {
        this.options = options;
        this.currentNode = null;
        this.tagsNodeStack = [];
        this.docTypeEntities = {};
        this.lastEntities = {
          "apos": { regex: /&(apos|#39|#x27);/g, val: "'" },
          "gt": { regex: /&(gt|#62|#x3E);/g, val: ">" },
          "lt": { regex: /&(lt|#60|#x3C);/g, val: "<" },
          "quot": { regex: /&(quot|#34|#x22);/g, val: '"' }
        };
        this.ampEntity = { regex: /&(amp|#38|#x26);/g, val: "&" };
        this.htmlEntities = {
          "space": { regex: /&(nbsp|#160);/g, val: " " },
          // "lt" : { regex: /&(lt|#60);/g, val: "<" },
          // "gt" : { regex: /&(gt|#62);/g, val: ">" },
          // "amp" : { regex: /&(amp|#38);/g, val: "&" },
          // "quot" : { regex: /&(quot|#34);/g, val: "\"" },
          // "apos" : { regex: /&(apos|#39);/g, val: "'" },
          "cent": { regex: /&(cent|#162);/g, val: "\xA2" },
          "pound": { regex: /&(pound|#163);/g, val: "\xA3" },
          "yen": { regex: /&(yen|#165);/g, val: "\xA5" },
          "euro": { regex: /&(euro|#8364);/g, val: "\u20AC" },
          "copyright": { regex: /&(copy|#169);/g, val: "\xA9" },
          "reg": { regex: /&(reg|#174);/g, val: "\xAE" },
          "inr": { regex: /&(inr|#8377);/g, val: "\u20B9" },
          "num_dec": { regex: /&#([0-9]{1,7});/g, val: (_, str) => String.fromCharCode(Number.parseInt(str, 10)) },
          "num_hex": { regex: /&#x([0-9a-fA-F]{1,6});/g, val: (_, str) => String.fromCharCode(Number.parseInt(str, 16)) }
        };
        this.addExternalEntities = addExternalEntities;
        this.parseXml = parseXml;
        this.parseTextData = parseTextData;
        this.resolveNameSpace = resolveNameSpace;
        this.buildAttributesMap = buildAttributesMap;
        this.isItStopNode = isItStopNode;
        this.replaceEntitiesValue = replaceEntitiesValue;
        this.readStopNodeData = readStopNodeData;
        this.saveTextToParentTag = saveTextToParentTag;
        this.addChild = addChild;
      }
    };
    function addExternalEntities(externalEntities) {
      const entKeys = Object.keys(externalEntities);
      for (let i = 0; i < entKeys.length; i++) {
        const ent = entKeys[i];
        this.lastEntities[ent] = {
          regex: new RegExp("&" + ent + ";", "g"),
          val: externalEntities[ent]
        };
      }
    }
    function parseTextData(val2, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {
      if (val2 !== void 0) {
        if (this.options.trimValues && !dontTrim) {
          val2 = val2.trim();
        }
        if (val2.length > 0) {
          if (!escapeEntities)
            val2 = this.replaceEntitiesValue(val2);
          const newval = this.options.tagValueProcessor(tagName, val2, jPath, hasAttributes, isLeafNode);
          if (newval === null || newval === void 0) {
            return val2;
          } else if (typeof newval !== typeof val2 || newval !== val2) {
            return newval;
          } else if (this.options.trimValues) {
            return parseValue(val2, this.options.parseTagValue, this.options.numberParseOptions);
          } else {
            const trimmedVal = val2.trim();
            if (trimmedVal === val2) {
              return parseValue(val2, this.options.parseTagValue, this.options.numberParseOptions);
            } else {
              return val2;
            }
          }
        }
      }
    }
    function resolveNameSpace(tagname) {
      if (this.options.removeNSPrefix) {
        const tags = tagname.split(":");
        const prefix = tagname.charAt(0) === "/" ? "/" : "";
        if (tags[0] === "xmlns") {
          return "";
        }
        if (tags.length === 2) {
          tagname = prefix + tags[1];
        }
      }
      return tagname;
    }
    var attrsRegx = new RegExp(`([^\\s=]+)\\s*(=\\s*(['"])([\\s\\S]*?)\\3)?`, "gm");
    function buildAttributesMap(attrStr, jPath, tagName) {
      if (!this.options.ignoreAttributes && typeof attrStr === "string") {
        const matches = util.getAllMatches(attrStr, attrsRegx);
        const len = matches.length;
        const attrs = {};
        for (let i = 0; i < len; i++) {
          const attrName = this.resolveNameSpace(matches[i][1]);
          let oldVal = matches[i][4];
          let aName = this.options.attributeNamePrefix + attrName;
          if (attrName.length) {
            if (this.options.transformAttributeName) {
              aName = this.options.transformAttributeName(aName);
            }
            if (aName === "__proto__")
              aName = "#__proto__";
            if (oldVal !== void 0) {
              if (this.options.trimValues) {
                oldVal = oldVal.trim();
              }
              oldVal = this.replaceEntitiesValue(oldVal);
              const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);
              if (newVal === null || newVal === void 0) {
                attrs[aName] = oldVal;
              } else if (typeof newVal !== typeof oldVal || newVal !== oldVal) {
                attrs[aName] = newVal;
              } else {
                attrs[aName] = parseValue(
                  oldVal,
                  this.options.parseAttributeValue,
                  this.options.numberParseOptions
                );
              }
            } else if (this.options.allowBooleanAttributes) {
              attrs[aName] = true;
            }
          }
        }
        if (!Object.keys(attrs).length) {
          return;
        }
        if (this.options.attributesGroupName) {
          const attrCollection = {};
          attrCollection[this.options.attributesGroupName] = attrs;
          return attrCollection;
        }
        return attrs;
      }
    }
    var parseXml = function(xmlData) {
      xmlData = xmlData.replace(/\r\n?/g, "\n");
      const xmlObj = new xmlNode("!xml");
      let currentNode = xmlObj;
      let textData = "";
      let jPath = "";
      for (let i = 0; i < xmlData.length; i++) {
        const ch = xmlData[i];
        if (ch === "<") {
          if (xmlData[i + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i, "Closing Tag is not closed.");
            let tagName = xmlData.substring(i + 2, closeIndex).trim();
            if (this.options.removeNSPrefix) {
              const colonIndex = tagName.indexOf(":");
              if (colonIndex !== -1) {
                tagName = tagName.substr(colonIndex + 1);
              }
            }
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode) {
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
            }
            const lastTagName = jPath.substring(jPath.lastIndexOf(".") + 1);
            if (tagName && this.options.unpairedTags.indexOf(tagName) !== -1) {
              throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);
            }
            let propIndex = 0;
            if (lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1) {
              propIndex = jPath.lastIndexOf(".", jPath.lastIndexOf(".") - 1);
              this.tagsNodeStack.pop();
            } else {
              propIndex = jPath.lastIndexOf(".");
            }
            jPath = jPath.substring(0, propIndex);
            currentNode = this.tagsNodeStack.pop();
            textData = "";
            i = closeIndex;
          } else if (xmlData[i + 1] === "?") {
            let tagData = readTagExp(xmlData, i, false, "?>");
            if (!tagData)
              throw new Error("Pi Tag is not closed.");
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            if (this.options.ignoreDeclaration && tagData.tagName === "?xml" || this.options.ignorePiTags) {
            } else {
              const childNode = new xmlNode(tagData.tagName);
              childNode.add(this.options.textNodeName, "");
              if (tagData.tagName !== tagData.tagExp && tagData.attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);
              }
              this.addChild(currentNode, childNode, jPath);
            }
            i = tagData.closeIndex + 1;
          } else if (xmlData.substr(i + 1, 3) === "!--") {
            const endIndex = findClosingIndex(xmlData, "-->", i + 4, "Comment is not closed.");
            if (this.options.commentPropName) {
              const comment = xmlData.substring(i + 4, endIndex - 2);
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
              currentNode.add(this.options.commentPropName, [{ [this.options.textNodeName]: comment }]);
            }
            i = endIndex;
          } else if (xmlData.substr(i + 1, 2) === "!D") {
            const result = readDocType(xmlData, i);
            this.docTypeEntities = result.entities;
            i = result.i;
          } else if (xmlData.substr(i + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i, "CDATA is not closed.") - 2;
            const tagExp = xmlData.substring(i + 9, closeIndex);
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            let val2 = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true, true);
            if (val2 == void 0)
              val2 = "";
            if (this.options.cdataPropName) {
              currentNode.add(this.options.cdataPropName, [{ [this.options.textNodeName]: tagExp }]);
            } else {
              currentNode.add(this.options.textNodeName, val2);
            }
            i = closeIndex + 2;
          } else {
            let result = readTagExp(xmlData, i, this.options.removeNSPrefix);
            let tagName = result.tagName;
            const rawTagName = result.rawTagName;
            let tagExp = result.tagExp;
            let attrExpPresent = result.attrExpPresent;
            let closeIndex = result.closeIndex;
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode && textData) {
              if (currentNode.tagname !== "!xml") {
                textData = this.saveTextToParentTag(textData, currentNode, jPath, false);
              }
            }
            const lastTag = currentNode;
            if (lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1) {
              currentNode = this.tagsNodeStack.pop();
              jPath = jPath.substring(0, jPath.lastIndexOf("."));
            }
            if (tagName !== xmlObj.tagname) {
              jPath += jPath ? "." + tagName : tagName;
            }
            if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {
              let tagContent = "";
              if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                if (tagName[tagName.length - 1] === "/") {
                  tagName = tagName.substr(0, tagName.length - 1);
                  jPath = jPath.substr(0, jPath.length - 1);
                  tagExp = tagName;
                } else {
                  tagExp = tagExp.substr(0, tagExp.length - 1);
                }
                i = result.closeIndex;
              } else if (this.options.unpairedTags.indexOf(tagName) !== -1) {
                i = result.closeIndex;
              } else {
                const result2 = this.readStopNodeData(xmlData, rawTagName, closeIndex + 1);
                if (!result2)
                  throw new Error(`Unexpected end of ${rawTagName}`);
                i = result2.i;
                tagContent = result2.tagContent;
              }
              const childNode = new xmlNode(tagName);
              if (tagName !== tagExp && attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
              }
              if (tagContent) {
                tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);
              }
              jPath = jPath.substr(0, jPath.lastIndexOf("."));
              childNode.add(this.options.textNodeName, tagContent);
              this.addChild(currentNode, childNode, jPath);
            } else {
              if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                if (tagName[tagName.length - 1] === "/") {
                  tagName = tagName.substr(0, tagName.length - 1);
                  jPath = jPath.substr(0, jPath.length - 1);
                  tagExp = tagName;
                } else {
                  tagExp = tagExp.substr(0, tagExp.length - 1);
                }
                if (this.options.transformTagName) {
                  tagName = this.options.transformTagName(tagName);
                }
                const childNode = new xmlNode(tagName);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
                }
                this.addChild(currentNode, childNode, jPath);
                jPath = jPath.substr(0, jPath.lastIndexOf("."));
              } else {
                const childNode = new xmlNode(tagName);
                this.tagsNodeStack.push(currentNode);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
                }
                this.addChild(currentNode, childNode, jPath);
                currentNode = childNode;
              }
              textData = "";
              i = closeIndex;
            }
          }
        } else {
          textData += xmlData[i];
        }
      }
      return xmlObj.child;
    };
    function addChild(currentNode, childNode, jPath) {
      const result = this.options.updateTag(childNode.tagname, jPath, childNode[":@"]);
      if (result === false) {
      } else if (typeof result === "string") {
        childNode.tagname = result;
        currentNode.addChild(childNode);
      } else {
        currentNode.addChild(childNode);
      }
    }
    var replaceEntitiesValue = function(val2) {
      if (this.options.processEntities) {
        for (let entityName2 in this.docTypeEntities) {
          const entity = this.docTypeEntities[entityName2];
          val2 = val2.replace(entity.regx, entity.val);
        }
        for (let entityName2 in this.lastEntities) {
          const entity = this.lastEntities[entityName2];
          val2 = val2.replace(entity.regex, entity.val);
        }
        if (this.options.htmlEntities) {
          for (let entityName2 in this.htmlEntities) {
            const entity = this.htmlEntities[entityName2];
            val2 = val2.replace(entity.regex, entity.val);
          }
        }
        val2 = val2.replace(this.ampEntity.regex, this.ampEntity.val);
      }
      return val2;
    };
    function saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {
      if (textData) {
        if (isLeafNode === void 0)
          isLeafNode = Object.keys(currentNode.child).length === 0;
        textData = this.parseTextData(
          textData,
          currentNode.tagname,
          jPath,
          false,
          currentNode[":@"] ? Object.keys(currentNode[":@"]).length !== 0 : false,
          isLeafNode
        );
        if (textData !== void 0 && textData !== "")
          currentNode.add(this.options.textNodeName, textData);
        textData = "";
      }
      return textData;
    }
    function isItStopNode(stopNodes, jPath, currentTagName) {
      const allNodesExp = "*." + currentTagName;
      for (const stopNodePath in stopNodes) {
        const stopNodeExp = stopNodes[stopNodePath];
        if (allNodesExp === stopNodeExp || jPath === stopNodeExp)
          return true;
      }
      return false;
    }
    function tagExpWithClosingIndex(xmlData, i, closingChar = ">") {
      let attrBoundary;
      let tagExp = "";
      for (let index = i; index < xmlData.length; index++) {
        let ch = xmlData[index];
        if (attrBoundary) {
          if (ch === attrBoundary)
            attrBoundary = "";
        } else if (ch === '"' || ch === "'") {
          attrBoundary = ch;
        } else if (ch === closingChar[0]) {
          if (closingChar[1]) {
            if (xmlData[index + 1] === closingChar[1]) {
              return {
                data: tagExp,
                index
              };
            }
          } else {
            return {
              data: tagExp,
              index
            };
          }
        } else if (ch === "	") {
          ch = " ";
        }
        tagExp += ch;
      }
    }
    function findClosingIndex(xmlData, str, i, errMsg) {
      const closingIndex = xmlData.indexOf(str, i);
      if (closingIndex === -1) {
        throw new Error(errMsg);
      } else {
        return closingIndex + str.length - 1;
      }
    }
    function readTagExp(xmlData, i, removeNSPrefix, closingChar = ">") {
      const result = tagExpWithClosingIndex(xmlData, i + 1, closingChar);
      if (!result)
        return;
      let tagExp = result.data;
      const closeIndex = result.index;
      const separatorIndex = tagExp.search(/\s/);
      let tagName = tagExp;
      let attrExpPresent = true;
      if (separatorIndex !== -1) {
        tagName = tagExp.substring(0, separatorIndex);
        tagExp = tagExp.substring(separatorIndex + 1).trimStart();
      }
      const rawTagName = tagName;
      if (removeNSPrefix) {
        const colonIndex = tagName.indexOf(":");
        if (colonIndex !== -1) {
          tagName = tagName.substr(colonIndex + 1);
          attrExpPresent = tagName !== result.data.substr(colonIndex + 1);
        }
      }
      return {
        tagName,
        tagExp,
        closeIndex,
        attrExpPresent,
        rawTagName
      };
    }
    function readStopNodeData(xmlData, tagName, i) {
      const startIndex = i;
      let openTagCount = 1;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === "<") {
          if (xmlData[i + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i, `${tagName} is not closed`);
            let closeTagName = xmlData.substring(i + 2, closeIndex).trim();
            if (closeTagName === tagName) {
              openTagCount--;
              if (openTagCount === 0) {
                return {
                  tagContent: xmlData.substring(startIndex, i),
                  i: closeIndex
                };
              }
            }
            i = closeIndex;
          } else if (xmlData[i + 1] === "?") {
            const closeIndex = findClosingIndex(xmlData, "?>", i + 1, "StopNode is not closed.");
            i = closeIndex;
          } else if (xmlData.substr(i + 1, 3) === "!--") {
            const closeIndex = findClosingIndex(xmlData, "-->", i + 3, "StopNode is not closed.");
            i = closeIndex;
          } else if (xmlData.substr(i + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i, "StopNode is not closed.") - 2;
            i = closeIndex;
          } else {
            const tagData = readTagExp(xmlData, i, ">");
            if (tagData) {
              const openTagName = tagData && tagData.tagName;
              if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length - 1] !== "/") {
                openTagCount++;
              }
              i = tagData.closeIndex;
            }
          }
        }
      }
    }
    function parseValue(val2, shouldParse, options) {
      if (shouldParse && typeof val2 === "string") {
        const newval = val2.trim();
        if (newval === "true")
          return true;
        else if (newval === "false")
          return false;
        else
          return toNumber(val2, options);
      } else {
        if (util.isExist(val2)) {
          return val2;
        } else {
          return "";
        }
      }
    }
    module.exports = OrderedObjParser;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.4.1/node_modules/fast-xml-parser/src/xmlparser/node2json.js
var require_node2json = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.4.1/node_modules/fast-xml-parser/src/xmlparser/node2json.js"(exports) {
    "use strict";
    function prettify(node, options) {
      return compress(node, options);
    }
    function compress(arr, options, jPath) {
      let text;
      const compressedObj = {};
      for (let i = 0; i < arr.length; i++) {
        const tagObj = arr[i];
        const property = propName(tagObj);
        let newJpath = "";
        if (jPath === void 0)
          newJpath = property;
        else
          newJpath = jPath + "." + property;
        if (property === options.textNodeName) {
          if (text === void 0)
            text = tagObj[property];
          else
            text += "" + tagObj[property];
        } else if (property === void 0) {
          continue;
        } else if (tagObj[property]) {
          let val2 = compress(tagObj[property], options, newJpath);
          const isLeaf = isLeafTag(val2, options);
          if (tagObj[":@"]) {
            assignAttributes(val2, tagObj[":@"], newJpath, options);
          } else if (Object.keys(val2).length === 1 && val2[options.textNodeName] !== void 0 && !options.alwaysCreateTextNode) {
            val2 = val2[options.textNodeName];
          } else if (Object.keys(val2).length === 0) {
            if (options.alwaysCreateTextNode)
              val2[options.textNodeName] = "";
            else
              val2 = "";
          }
          if (compressedObj[property] !== void 0 && compressedObj.hasOwnProperty(property)) {
            if (!Array.isArray(compressedObj[property])) {
              compressedObj[property] = [compressedObj[property]];
            }
            compressedObj[property].push(val2);
          } else {
            if (options.isArray(property, newJpath, isLeaf)) {
              compressedObj[property] = [val2];
            } else {
              compressedObj[property] = val2;
            }
          }
        }
      }
      if (typeof text === "string") {
        if (text.length > 0)
          compressedObj[options.textNodeName] = text;
      } else if (text !== void 0)
        compressedObj[options.textNodeName] = text;
      return compressedObj;
    }
    function propName(obj) {
      const keys = Object.keys(obj);
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        if (key !== ":@")
          return key;
      }
    }
    function assignAttributes(obj, attrMap, jpath, options) {
      if (attrMap) {
        const keys = Object.keys(attrMap);
        const len = keys.length;
        for (let i = 0; i < len; i++) {
          const atrrName = keys[i];
          if (options.isArray(atrrName, jpath + "." + atrrName, true, true)) {
            obj[atrrName] = [attrMap[atrrName]];
          } else {
            obj[atrrName] = attrMap[atrrName];
          }
        }
      }
    }
    function isLeafTag(obj, options) {
      const { textNodeName } = options;
      const propCount = Object.keys(obj).length;
      if (propCount === 0) {
        return true;
      }
      if (propCount === 1 && (obj[textNodeName] || typeof obj[textNodeName] === "boolean" || obj[textNodeName] === 0)) {
        return true;
      }
      return false;
    }
    exports.prettify = prettify;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.4.1/node_modules/fast-xml-parser/src/xmlparser/XMLParser.js
var require_XMLParser = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.4.1/node_modules/fast-xml-parser/src/xmlparser/XMLParser.js"(exports, module) {
    var { buildOptions } = require_OptionsBuilder();
    var OrderedObjParser = require_OrderedObjParser();
    var { prettify } = require_node2json();
    var validator = require_validator();
    var XMLParser2 = class {
      constructor(options) {
        this.externalEntities = {};
        this.options = buildOptions(options);
      }
      /**
       * Parse XML dats to JS object 
       * @param {string|Buffer} xmlData 
       * @param {boolean|Object} validationOption 
       */
      parse(xmlData, validationOption) {
        if (typeof xmlData === "string") {
        } else if (xmlData.toString) {
          xmlData = xmlData.toString();
        } else {
          throw new Error("XML data is accepted in String or Bytes[] form.");
        }
        if (validationOption) {
          if (validationOption === true)
            validationOption = {};
          const result = validator.validate(xmlData, validationOption);
          if (result !== true) {
            throw Error(`${result.err.msg}:${result.err.line}:${result.err.col}`);
          }
        }
        const orderedObjParser = new OrderedObjParser(this.options);
        orderedObjParser.addExternalEntities(this.externalEntities);
        const orderedResult = orderedObjParser.parseXml(xmlData);
        if (this.options.preserveOrder || orderedResult === void 0)
          return orderedResult;
        else
          return prettify(orderedResult, this.options);
      }
      /**
       * Add Entity which is not by default supported by this library
       * @param {string} key 
       * @param {string} value 
       */
      addEntity(key, value) {
        if (value.indexOf("&") !== -1) {
          throw new Error("Entity value can't have '&'");
        } else if (key.indexOf("&") !== -1 || key.indexOf(";") !== -1) {
          throw new Error("An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'");
        } else if (value === "&") {
          throw new Error("An entity with value '&' is not permitted");
        } else {
          this.externalEntities[key] = value;
        }
      }
    };
    module.exports = XMLParser2;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.4.1/node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js
var require_orderedJs2Xml = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.4.1/node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js"(exports, module) {
    var EOL = "\n";
    function toXml(jArray, options) {
      let indentation = "";
      if (options.format && options.indentBy.length > 0) {
        indentation = EOL;
      }
      return arrToStr(jArray, options, "", indentation);
    }
    function arrToStr(arr, options, jPath, indentation) {
      let xmlStr = "";
      let isPreviousElementTag = false;
      for (let i = 0; i < arr.length; i++) {
        const tagObj = arr[i];
        const tagName = propName(tagObj);
        if (tagName === void 0)
          continue;
        let newJPath = "";
        if (jPath.length === 0)
          newJPath = tagName;
        else
          newJPath = `${jPath}.${tagName}`;
        if (tagName === options.textNodeName) {
          let tagText = tagObj[tagName];
          if (!isStopNode(newJPath, options)) {
            tagText = options.tagValueProcessor(tagName, tagText);
            tagText = replaceEntitiesValue(tagText, options);
          }
          if (isPreviousElementTag) {
            xmlStr += indentation;
          }
          xmlStr += tagText;
          isPreviousElementTag = false;
          continue;
        } else if (tagName === options.cdataPropName) {
          if (isPreviousElementTag) {
            xmlStr += indentation;
          }
          xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;
          isPreviousElementTag = false;
          continue;
        } else if (tagName === options.commentPropName) {
          xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;
          isPreviousElementTag = true;
          continue;
        } else if (tagName[0] === "?") {
          const attStr2 = attr_to_str(tagObj[":@"], options);
          const tempInd = tagName === "?xml" ? "" : indentation;
          let piTextNodeName = tagObj[tagName][0][options.textNodeName];
          piTextNodeName = piTextNodeName.length !== 0 ? " " + piTextNodeName : "";
          xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr2}?>`;
          isPreviousElementTag = true;
          continue;
        }
        let newIdentation = indentation;
        if (newIdentation !== "") {
          newIdentation += options.indentBy;
        }
        const attStr = attr_to_str(tagObj[":@"], options);
        const tagStart = indentation + `<${tagName}${attStr}`;
        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);
        if (options.unpairedTags.indexOf(tagName) !== -1) {
          if (options.suppressUnpairedNode)
            xmlStr += tagStart + ">";
          else
            xmlStr += tagStart + "/>";
        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {
          xmlStr += tagStart + "/>";
        } else if (tagValue && tagValue.endsWith(">")) {
          xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;
        } else {
          xmlStr += tagStart + ">";
          if (tagValue && indentation !== "" && (tagValue.includes("/>") || tagValue.includes("</"))) {
            xmlStr += indentation + options.indentBy + tagValue + indentation;
          } else {
            xmlStr += tagValue;
          }
          xmlStr += `</${tagName}>`;
        }
        isPreviousElementTag = true;
      }
      return xmlStr;
    }
    function propName(obj) {
      const keys = Object.keys(obj);
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        if (!obj.hasOwnProperty(key))
          continue;
        if (key !== ":@")
          return key;
      }
    }
    function attr_to_str(attrMap, options) {
      let attrStr = "";
      if (attrMap && !options.ignoreAttributes) {
        for (let attr in attrMap) {
          if (!attrMap.hasOwnProperty(attr))
            continue;
          let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);
          attrVal = replaceEntitiesValue(attrVal, options);
          if (attrVal === true && options.suppressBooleanAttributes) {
            attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;
          } else {
            attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}="${attrVal}"`;
          }
        }
      }
      return attrStr;
    }
    function isStopNode(jPath, options) {
      jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);
      let tagName = jPath.substr(jPath.lastIndexOf(".") + 1);
      for (let index in options.stopNodes) {
        if (options.stopNodes[index] === jPath || options.stopNodes[index] === "*." + tagName)
          return true;
      }
      return false;
    }
    function replaceEntitiesValue(textValue, options) {
      if (textValue && textValue.length > 0 && options.processEntities) {
        for (let i = 0; i < options.entities.length; i++) {
          const entity = options.entities[i];
          textValue = textValue.replace(entity.regex, entity.val);
        }
      }
      return textValue;
    }
    module.exports = toXml;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.4.1/node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js
var require_json2xml = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.4.1/node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js"(exports, module) {
    "use strict";
    var buildFromOrderedJs = require_orderedJs2Xml();
    var defaultOptions = {
      attributeNamePrefix: "@_",
      attributesGroupName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      cdataPropName: false,
      format: false,
      indentBy: "  ",
      suppressEmptyNode: false,
      suppressUnpairedNode: true,
      suppressBooleanAttributes: true,
      tagValueProcessor: function(key, a) {
        return a;
      },
      attributeValueProcessor: function(attrName, a) {
        return a;
      },
      preserveOrder: false,
      commentPropName: false,
      unpairedTags: [],
      entities: [
        { regex: new RegExp("&", "g"), val: "&amp;" },
        //it must be on top
        { regex: new RegExp(">", "g"), val: "&gt;" },
        { regex: new RegExp("<", "g"), val: "&lt;" },
        { regex: new RegExp("'", "g"), val: "&apos;" },
        { regex: new RegExp('"', "g"), val: "&quot;" }
      ],
      processEntities: true,
      stopNodes: [],
      // transformTagName: false,
      // transformAttributeName: false,
      oneListGroup: false
    };
    function Builder(options) {
      this.options = Object.assign({}, defaultOptions, options);
      if (this.options.ignoreAttributes || this.options.attributesGroupName) {
        this.isAttribute = function() {
          return false;
        };
      } else {
        this.attrPrefixLen = this.options.attributeNamePrefix.length;
        this.isAttribute = isAttribute;
      }
      this.processTextOrObjNode = processTextOrObjNode;
      if (this.options.format) {
        this.indentate = indentate;
        this.tagEndChar = ">\n";
        this.newLine = "\n";
      } else {
        this.indentate = function() {
          return "";
        };
        this.tagEndChar = ">";
        this.newLine = "";
      }
    }
    Builder.prototype.build = function(jObj) {
      if (this.options.preserveOrder) {
        return buildFromOrderedJs(jObj, this.options);
      } else {
        if (Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1) {
          jObj = {
            [this.options.arrayNodeName]: jObj
          };
        }
        return this.j2x(jObj, 0).val;
      }
    };
    Builder.prototype.j2x = function(jObj, level) {
      let attrStr = "";
      let val2 = "";
      for (let key in jObj) {
        if (!Object.prototype.hasOwnProperty.call(jObj, key))
          continue;
        if (typeof jObj[key] === "undefined") {
          if (this.isAttribute(key)) {
            val2 += "";
          }
        } else if (jObj[key] === null) {
          if (this.isAttribute(key)) {
            val2 += "";
          } else if (key[0] === "?") {
            val2 += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
          } else {
            val2 += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
          }
        } else if (jObj[key] instanceof Date) {
          val2 += this.buildTextValNode(jObj[key], key, "", level);
        } else if (typeof jObj[key] !== "object") {
          const attr = this.isAttribute(key);
          if (attr) {
            attrStr += this.buildAttrPairStr(attr, "" + jObj[key]);
          } else {
            if (key === this.options.textNodeName) {
              let newval = this.options.tagValueProcessor(key, "" + jObj[key]);
              val2 += this.replaceEntitiesValue(newval);
            } else {
              val2 += this.buildTextValNode(jObj[key], key, "", level);
            }
          }
        } else if (Array.isArray(jObj[key])) {
          const arrLen = jObj[key].length;
          let listTagVal = "";
          let listTagAttr = "";
          for (let j = 0; j < arrLen; j++) {
            const item = jObj[key][j];
            if (typeof item === "undefined") {
            } else if (item === null) {
              if (key[0] === "?")
                val2 += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
              else
                val2 += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
            } else if (typeof item === "object") {
              if (this.options.oneListGroup) {
                const result = this.j2x(item, level + 1);
                listTagVal += result.val;
                if (this.options.attributesGroupName && item.hasOwnProperty(this.options.attributesGroupName)) {
                  listTagAttr += result.attrStr;
                }
              } else {
                listTagVal += this.processTextOrObjNode(item, key, level);
              }
            } else {
              if (this.options.oneListGroup) {
                let textValue = this.options.tagValueProcessor(key, item);
                textValue = this.replaceEntitiesValue(textValue);
                listTagVal += textValue;
              } else {
                listTagVal += this.buildTextValNode(item, key, "", level);
              }
            }
          }
          if (this.options.oneListGroup) {
            listTagVal = this.buildObjectNode(listTagVal, key, listTagAttr, level);
          }
          val2 += listTagVal;
        } else {
          if (this.options.attributesGroupName && key === this.options.attributesGroupName) {
            const Ks = Object.keys(jObj[key]);
            const L = Ks.length;
            for (let j = 0; j < L; j++) {
              attrStr += this.buildAttrPairStr(Ks[j], "" + jObj[key][Ks[j]]);
            }
          } else {
            val2 += this.processTextOrObjNode(jObj[key], key, level);
          }
        }
      }
      return { attrStr, val: val2 };
    };
    Builder.prototype.buildAttrPairStr = function(attrName, val2) {
      val2 = this.options.attributeValueProcessor(attrName, "" + val2);
      val2 = this.replaceEntitiesValue(val2);
      if (this.options.suppressBooleanAttributes && val2 === "true") {
        return " " + attrName;
      } else
        return " " + attrName + '="' + val2 + '"';
    };
    function processTextOrObjNode(object, key, level) {
      const result = this.j2x(object, level + 1);
      if (object[this.options.textNodeName] !== void 0 && Object.keys(object).length === 1) {
        return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);
      } else {
        return this.buildObjectNode(result.val, key, result.attrStr, level);
      }
    }
    Builder.prototype.buildObjectNode = function(val2, key, attrStr, level) {
      if (val2 === "") {
        if (key[0] === "?")
          return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
        else {
          return this.indentate(level) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
        }
      } else {
        let tagEndExp = "</" + key + this.tagEndChar;
        let piClosingChar = "";
        if (key[0] === "?") {
          piClosingChar = "?";
          tagEndExp = "";
        }
        if ((attrStr || attrStr === "") && val2.indexOf("<") === -1) {
          return this.indentate(level) + "<" + key + attrStr + piClosingChar + ">" + val2 + tagEndExp;
        } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {
          return this.indentate(level) + `<!--${val2}-->` + this.newLine;
        } else {
          return this.indentate(level) + "<" + key + attrStr + piClosingChar + this.tagEndChar + val2 + this.indentate(level) + tagEndExp;
        }
      }
    };
    Builder.prototype.closeTag = function(key) {
      let closeTag = "";
      if (this.options.unpairedTags.indexOf(key) !== -1) {
        if (!this.options.suppressUnpairedNode)
          closeTag = "/";
      } else if (this.options.suppressEmptyNode) {
        closeTag = "/";
      } else {
        closeTag = `></${key}`;
      }
      return closeTag;
    };
    Builder.prototype.buildTextValNode = function(val2, key, attrStr, level) {
      if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {
        return this.indentate(level) + `<![CDATA[${val2}]]>` + this.newLine;
      } else if (this.options.commentPropName !== false && key === this.options.commentPropName) {
        return this.indentate(level) + `<!--${val2}-->` + this.newLine;
      } else if (key[0] === "?") {
        return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
      } else {
        let textValue = this.options.tagValueProcessor(key, val2);
        textValue = this.replaceEntitiesValue(textValue);
        if (textValue === "") {
          return this.indentate(level) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
        } else {
          return this.indentate(level) + "<" + key + attrStr + ">" + textValue + "</" + key + this.tagEndChar;
        }
      }
    };
    Builder.prototype.replaceEntitiesValue = function(textValue) {
      if (textValue && textValue.length > 0 && this.options.processEntities) {
        for (let i = 0; i < this.options.entities.length; i++) {
          const entity = this.options.entities[i];
          textValue = textValue.replace(entity.regex, entity.val);
        }
      }
      return textValue;
    };
    function indentate(level) {
      return this.options.indentBy.repeat(level);
    }
    function isAttribute(name) {
      if (name.startsWith(this.options.attributeNamePrefix) && name !== this.options.textNodeName) {
        return name.substr(this.attrPrefixLen);
      } else {
        return false;
      }
    }
    module.exports = Builder;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.4.1/node_modules/fast-xml-parser/src/fxp.js
var require_fxp = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.4.1/node_modules/fast-xml-parser/src/fxp.js"(exports, module) {
    "use strict";
    var validator = require_validator();
    var XMLParser2 = require_XMLParser();
    var XMLBuilder = require_json2xml();
    module.exports = {
      XMLParser: XMLParser2,
      XMLValidator: validator,
      XMLBuilder
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/protocols/xml/parseXmlBody.js
var import_smithy_client3, import_fast_xml_parser, parseXmlBody, parseXmlErrorBody, loadRestXmlErrorCode;
var init_parseXmlBody = __esm({
  "../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/protocols/xml/parseXmlBody.js"() {
    import_smithy_client3 = __toESM(require_dist_cjs19());
    import_fast_xml_parser = __toESM(require_fxp());
    init_common();
    parseXmlBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        const parser = new import_fast_xml_parser.XMLParser({
          attributeNamePrefix: "",
          htmlEntities: true,
          ignoreAttributes: false,
          ignoreDeclaration: true,
          parseTagValue: false,
          trimValues: false,
          tagValueProcessor: (_, val2) => val2.trim() === "" && val2.includes("\n") ? "" : void 0
        });
        parser.addEntity("#xD", "\r");
        parser.addEntity("#10", "\n");
        let parsedObj;
        try {
          parsedObj = parser.parse(encoded, true);
        } catch (e) {
          if (e && typeof e === "object") {
            Object.defineProperty(e, "$responseBodyText", {
              value: encoded
            });
          }
          throw e;
        }
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
          parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
          delete parsedObjToReturn[textNodeName];
        }
        return (0, import_smithy_client3.getValueFromTextNode)(parsedObjToReturn);
      }
      return {};
    });
    parseXmlErrorBody = async (errorBody, context) => {
      const value = await parseXmlBody(errorBody, context);
      if (value.Error) {
        value.Error.message = value.Error.message ?? value.Error.Message;
      }
      return value;
    };
    loadRestXmlErrorCode = (output, data) => {
      if (data?.Error?.Code !== void 0) {
        return data.Error.Code;
      }
      if (data?.Code !== void 0) {
        return data.Code;
      }
      if (output.statusCode == 404) {
        return "NotFound";
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/protocols/index.js
var init_protocols2 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/submodules/protocols/index.js"() {
    init_coercing_serializers();
    init_awsExpectUnion();
    init_parseJsonBody();
    init_parseXmlBody();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/index.js
var dist_es_exports2 = {};
__export(dist_es_exports2, {
  AWSSDKSigV4Signer: () => AWSSDKSigV4Signer,
  AwsSdkSigV4ASigner: () => AwsSdkSigV4ASigner,
  AwsSdkSigV4Signer: () => AwsSdkSigV4Signer,
  NODE_SIGV4A_CONFIG_OPTIONS: () => NODE_SIGV4A_CONFIG_OPTIONS,
  _toBool: () => _toBool,
  _toNum: () => _toNum,
  _toStr: () => _toStr,
  awsExpectUnion: () => awsExpectUnion,
  emitWarningIfUnsupportedVersion: () => emitWarningIfUnsupportedVersion,
  loadRestJsonErrorCode: () => loadRestJsonErrorCode,
  loadRestXmlErrorCode: () => loadRestXmlErrorCode,
  parseJsonBody: () => parseJsonBody,
  parseJsonErrorBody: () => parseJsonErrorBody,
  parseXmlBody: () => parseXmlBody,
  parseXmlErrorBody: () => parseXmlErrorBody,
  resolveAWSSDKSigV4Config: () => resolveAWSSDKSigV4Config,
  resolveAwsSdkSigV4AConfig: () => resolveAwsSdkSigV4AConfig,
  resolveAwsSdkSigV4Config: () => resolveAwsSdkSigV4Config,
  setCredentialFeature: () => setCredentialFeature,
  setFeature: () => setFeature,
  state: () => state,
  validateSigningProperties: () => validateSigningProperties
});
var init_dist_es2 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+core@3.696.0/node_modules/@aws-sdk/core/dist-es/index.js"() {
    init_client();
    init_httpAuthSchemes2();
    init_protocols2();
  }
});

// ../../node_modules/.pnpm/tslib@2.8.1/node_modules/tslib/tslib.es6.mjs
var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __addDisposableResource: () => __addDisposableResource,
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldIn: () => __classPrivateFieldIn,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __disposeResources: () => __disposeResources,
  __esDecorate: () => __esDecorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __propKey: () => __propKey,
  __read: () => __read,
  __rest: () => __rest,
  __rewriteRelativeImportExtension: () => __rewriteRelativeImportExtension,
  __runInitializers: () => __runInitializers,
  __setFunctionName: () => __setFunctionName,
  __spread: () => __spread,
  __spreadArray: () => __spreadArray,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values,
  default: () => tslib_es6_default
});
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) {
    if (f !== void 0 && typeof f !== "function")
      throw new TypeError("Function expected");
    return f;
  }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
    var context = {};
    for (var p in contextIn)
      context[p] = p === "access" ? {} : contextIn[p];
    for (var p in contextIn.access)
      context.access[p] = contextIn.access[p];
    context.addInitializer = function(f) {
      if (done)
        throw new TypeError("Cannot add initializers after decoration has completed");
      extraInitializers.push(accept(f || null));
    };
    var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
    if (kind === "accessor") {
      if (result === void 0)
        continue;
      if (result === null || typeof result !== "object")
        throw new TypeError("Object expected");
      if (_ = accept(result.get))
        descriptor.get = _;
      if (_ = accept(result.set))
        descriptor.set = _;
      if (_ = accept(result.init))
        initializers.unshift(_);
    } else if (_ = accept(result)) {
      if (kind === "field")
        initializers.unshift(_);
      else
        descriptor[key] = _;
    }
  }
  if (target)
    Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
}
function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
}
function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
}
function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol")
    name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
  return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __exportStar(m, o) {
  for (var p in m)
    if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
      __createBinding(o, m, p);
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read(arguments[i]));
  return ar;
}
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function awaitReturn(f) {
    return function(v) {
      return Promise.resolve(v).then(f, reject);
    };
  }
  function verb(n, f) {
    if (g[n]) {
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
      if (f)
        i[n] = f(i[n]);
    }
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length)
      resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function(e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function() {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function(v) {
      return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k = ownKeys(mod), i = 0; i < k.length; i++)
      if (k[i] !== "default")
        __createBinding(result, mod, k[i]);
  }
  __setModuleDefault(result, mod);
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet(receiver, state2, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state2 === "function" ? receiver !== state2 || !f : !state2.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state2.get(receiver);
}
function __classPrivateFieldSet(receiver, state2, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state2 === "function" ? receiver !== state2 || !f : !state2.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state2.set(receiver, value), value;
}
function __classPrivateFieldIn(state2, receiver) {
  if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
    throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state2 === "function" ? receiver === state2 : state2.has(receiver);
}
function __addDisposableResource(env, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object" && typeof value !== "function")
      throw new TypeError("Object expected.");
    var dispose, inner;
    if (async) {
      if (!Symbol.asyncDispose)
        throw new TypeError("Symbol.asyncDispose is not defined.");
      dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
      if (!Symbol.dispose)
        throw new TypeError("Symbol.dispose is not defined.");
      dispose = value[Symbol.dispose];
      if (async)
        inner = dispose;
    }
    if (typeof dispose !== "function")
      throw new TypeError("Object not disposable.");
    if (inner)
      dispose = function() {
        try {
          inner.call(this);
        } catch (e) {
          return Promise.reject(e);
        }
      };
    env.stack.push({ value, dispose, async });
  } else if (async) {
    env.stack.push({ async: true });
  }
  return value;
}
function __disposeResources(env) {
  function fail(e) {
    env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
    env.hasError = true;
  }
  var r, s = 0;
  function next() {
    while (r = env.stack.pop()) {
      try {
        if (!r.async && s === 1)
          return s = 0, env.stack.push(r), Promise.resolve().then(next);
        if (r.dispose) {
          var result = r.dispose.call(r.value);
          if (r.async)
            return s |= 2, Promise.resolve(result).then(next, function(e) {
              fail(e);
              return next();
            });
        } else
          s |= 1;
      } catch (e) {
        fail(e);
      }
    }
    if (s === 1)
      return env.hasError ? Promise.reject(env.error) : Promise.resolve();
    if (env.hasError)
      throw env.error;
  }
  return next();
}
function __rewriteRelativeImportExtension(path, preserveJsx) {
  if (typeof path === "string" && /^\.\.?\//.test(path)) {
    return path.replace(/\.(tsx)$|((?:\.d)?)((?:\.[^./]+?)?)\.([cm]?)ts$/i, function(m, tsx, d, ext, cm) {
      return tsx ? preserveJsx ? ".jsx" : ".js" : d && (!ext || !cm) ? m : d + ext + "." + cm.toLowerCase() + "js";
    });
  }
  return path;
}
var extendStatics, __assign, __createBinding, __setModuleDefault, ownKeys, _SuppressedError, tslib_es6_default;
var init_tslib_es6 = __esm({
  "../../node_modules/.pnpm/tslib@2.8.1/node_modules/tslib/tslib.es6.mjs"() {
    extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (Object.prototype.hasOwnProperty.call(b2, p))
            d2[p] = b2[p];
      };
      return extendStatics(d, b);
    };
    __assign = function() {
      __assign = Object.assign || function __assign2(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    __createBinding = Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __setModuleDefault = Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    };
    ownKeys = function(o) {
      ownKeys = Object.getOwnPropertyNames || function(o2) {
        var ar = [];
        for (var k in o2)
          if (Object.prototype.hasOwnProperty.call(o2, k))
            ar[ar.length] = k;
        return ar;
      };
      return ownKeys(o);
    };
    _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
      var e = new Error(message);
      return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };
    tslib_es6_default = {
      __extends,
      __assign,
      __rest,
      __decorate,
      __param,
      __esDecorate,
      __runInitializers,
      __propKey,
      __setFunctionName,
      __metadata,
      __awaiter,
      __generator,
      __createBinding,
      __exportStar,
      __values,
      __read,
      __spread,
      __spreadArrays,
      __spreadArray,
      __await,
      __asyncGenerator,
      __asyncDelegator,
      __asyncValues,
      __makeTemplateObject,
      __importStar,
      __importDefault,
      __classPrivateFieldGet,
      __classPrivateFieldSet,
      __classPrivateFieldIn,
      __addDisposableResource,
      __disposeResources,
      __rewriteRelativeImportExtension
    };
  }
});

// ../../node_modules/.pnpm/@smithy+is-array-buffer@2.2.0/node_modules/@smithy/is-array-buffer/dist-cjs/index.js
var require_dist_cjs20 = __commonJS({
  "../../node_modules/.pnpm/@smithy+is-array-buffer@2.2.0/node_modules/@smithy/is-array-buffer/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      isArrayBuffer: () => isArrayBuffer
    });
    module.exports = __toCommonJS2(src_exports);
    var isArrayBuffer = /* @__PURE__ */ __name((arg) => typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]", "isArrayBuffer");
  }
});

// ../../node_modules/.pnpm/@smithy+util-buffer-from@2.2.0/node_modules/@smithy/util-buffer-from/dist-cjs/index.js
var require_dist_cjs21 = __commonJS({
  "../../node_modules/.pnpm/@smithy+util-buffer-from@2.2.0/node_modules/@smithy/util-buffer-from/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      fromArrayBuffer: () => fromArrayBuffer,
      fromString: () => fromString
    });
    module.exports = __toCommonJS2(src_exports);
    var import_is_array_buffer = require_dist_cjs20();
    var import_buffer = __require("buffer");
    var fromArrayBuffer = /* @__PURE__ */ __name((input, offset = 0, length = input.byteLength - offset) => {
      if (!(0, import_is_array_buffer.isArrayBuffer)(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
      }
      return import_buffer.Buffer.from(input, offset, length);
    }, "fromArrayBuffer");
    var fromString = /* @__PURE__ */ __name((input, encoding) => {
      if (typeof input !== "string") {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
      }
      return encoding ? import_buffer.Buffer.from(input, encoding) : import_buffer.Buffer.from(input);
    }, "fromString");
  }
});

// ../../node_modules/.pnpm/@smithy+util-utf8@2.3.0/node_modules/@smithy/util-utf8/dist-cjs/index.js
var require_dist_cjs22 = __commonJS({
  "../../node_modules/.pnpm/@smithy+util-utf8@2.3.0/node_modules/@smithy/util-utf8/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      fromUtf8: () => fromUtf8,
      toUint8Array: () => toUint8Array,
      toUtf8: () => toUtf8
    });
    module.exports = __toCommonJS2(src_exports);
    var import_util_buffer_from = require_dist_cjs21();
    var fromUtf8 = /* @__PURE__ */ __name((input) => {
      const buf = (0, import_util_buffer_from.fromString)(input, "utf8");
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    }, "fromUtf8");
    var toUint8Array = /* @__PURE__ */ __name((data) => {
      if (typeof data === "string") {
        return fromUtf8(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }, "toUint8Array");
    var toUtf8 = /* @__PURE__ */ __name((input) => {
      if (typeof input === "string") {
        return input;
      }
      if (typeof input !== "object" || typeof input.byteOffset !== "number" || typeof input.byteLength !== "number") {
        throw new Error("@smithy/util-utf8: toUtf8 encoder function only accepts string | Uint8Array.");
      }
      return (0, import_util_buffer_from.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("utf8");
    }, "toUtf8");
  }
});

// ../../node_modules/.pnpm/@aws-crypto+util@5.2.0/node_modules/@aws-crypto/util/build/main/convertToBuffer.js
var require_convertToBuffer = __commonJS({
  "../../node_modules/.pnpm/@aws-crypto+util@5.2.0/node_modules/@aws-crypto/util/build/main/convertToBuffer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.convertToBuffer = void 0;
    var util_utf8_1 = require_dist_cjs22();
    var fromUtf8 = typeof Buffer !== "undefined" && Buffer.from ? function(input) {
      return Buffer.from(input, "utf8");
    } : util_utf8_1.fromUtf8;
    function convertToBuffer(data) {
      if (data instanceof Uint8Array)
        return data;
      if (typeof data === "string") {
        return fromUtf8(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }
    exports.convertToBuffer = convertToBuffer;
  }
});

// ../../node_modules/.pnpm/@aws-crypto+util@5.2.0/node_modules/@aws-crypto/util/build/main/isEmptyData.js
var require_isEmptyData = __commonJS({
  "../../node_modules/.pnpm/@aws-crypto+util@5.2.0/node_modules/@aws-crypto/util/build/main/isEmptyData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isEmptyData = void 0;
    function isEmptyData(data) {
      if (typeof data === "string") {
        return data.length === 0;
      }
      return data.byteLength === 0;
    }
    exports.isEmptyData = isEmptyData;
  }
});

// ../../node_modules/.pnpm/@aws-crypto+util@5.2.0/node_modules/@aws-crypto/util/build/main/numToUint8.js
var require_numToUint8 = __commonJS({
  "../../node_modules/.pnpm/@aws-crypto+util@5.2.0/node_modules/@aws-crypto/util/build/main/numToUint8.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.numToUint8 = void 0;
    function numToUint8(num) {
      return new Uint8Array([
        (num & 4278190080) >> 24,
        (num & 16711680) >> 16,
        (num & 65280) >> 8,
        num & 255
      ]);
    }
    exports.numToUint8 = numToUint8;
  }
});

// ../../node_modules/.pnpm/@aws-crypto+util@5.2.0/node_modules/@aws-crypto/util/build/main/uint32ArrayFrom.js
var require_uint32ArrayFrom = __commonJS({
  "../../node_modules/.pnpm/@aws-crypto+util@5.2.0/node_modules/@aws-crypto/util/build/main/uint32ArrayFrom.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uint32ArrayFrom = void 0;
    function uint32ArrayFrom(a_lookUpTable) {
      if (!Uint32Array.from) {
        var return_array = new Uint32Array(a_lookUpTable.length);
        var a_index = 0;
        while (a_index < a_lookUpTable.length) {
          return_array[a_index] = a_lookUpTable[a_index];
          a_index += 1;
        }
        return return_array;
      }
      return Uint32Array.from(a_lookUpTable);
    }
    exports.uint32ArrayFrom = uint32ArrayFrom;
  }
});

// ../../node_modules/.pnpm/@aws-crypto+util@5.2.0/node_modules/@aws-crypto/util/build/main/index.js
var require_main = __commonJS({
  "../../node_modules/.pnpm/@aws-crypto+util@5.2.0/node_modules/@aws-crypto/util/build/main/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uint32ArrayFrom = exports.numToUint8 = exports.isEmptyData = exports.convertToBuffer = void 0;
    var convertToBuffer_1 = require_convertToBuffer();
    Object.defineProperty(exports, "convertToBuffer", { enumerable: true, get: function() {
      return convertToBuffer_1.convertToBuffer;
    } });
    var isEmptyData_1 = require_isEmptyData();
    Object.defineProperty(exports, "isEmptyData", { enumerable: true, get: function() {
      return isEmptyData_1.isEmptyData;
    } });
    var numToUint8_1 = require_numToUint8();
    Object.defineProperty(exports, "numToUint8", { enumerable: true, get: function() {
      return numToUint8_1.numToUint8;
    } });
    var uint32ArrayFrom_1 = require_uint32ArrayFrom();
    Object.defineProperty(exports, "uint32ArrayFrom", { enumerable: true, get: function() {
      return uint32ArrayFrom_1.uint32ArrayFrom;
    } });
  }
});

// ../../node_modules/.pnpm/@aws-crypto+crc32c@5.2.0/node_modules/@aws-crypto/crc32c/build/main/aws_crc32c.js
var require_aws_crc32c = __commonJS({
  "../../node_modules/.pnpm/@aws-crypto+crc32c@5.2.0/node_modules/@aws-crypto/crc32c/build/main/aws_crc32c.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AwsCrc32c = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var util_1 = require_main();
    var index_1 = require_main2();
    var AwsCrc32c = (
      /** @class */
      function() {
        function AwsCrc32c2() {
          this.crc32c = new index_1.Crc32c();
        }
        AwsCrc32c2.prototype.update = function(toHash) {
          if ((0, util_1.isEmptyData)(toHash))
            return;
          this.crc32c.update((0, util_1.convertToBuffer)(toHash));
        };
        AwsCrc32c2.prototype.digest = function() {
          return tslib_1.__awaiter(this, void 0, void 0, function() {
            return tslib_1.__generator(this, function(_a) {
              return [2, (0, util_1.numToUint8)(this.crc32c.digest())];
            });
          });
        };
        AwsCrc32c2.prototype.reset = function() {
          this.crc32c = new index_1.Crc32c();
        };
        return AwsCrc32c2;
      }()
    );
    exports.AwsCrc32c = AwsCrc32c;
  }
});

// ../../node_modules/.pnpm/@aws-crypto+crc32c@5.2.0/node_modules/@aws-crypto/crc32c/build/main/index.js
var require_main2 = __commonJS({
  "../../node_modules/.pnpm/@aws-crypto+crc32c@5.2.0/node_modules/@aws-crypto/crc32c/build/main/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AwsCrc32c = exports.Crc32c = exports.crc32c = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var util_1 = require_main();
    function crc32c(data) {
      return new Crc32c().update(data).digest();
    }
    exports.crc32c = crc32c;
    var Crc32c = (
      /** @class */
      function() {
        function Crc32c2() {
          this.checksum = 4294967295;
        }
        Crc32c2.prototype.update = function(data) {
          var e_1, _a;
          try {
            for (var data_1 = tslib_1.__values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
              var byte = data_1_1.value;
              this.checksum = this.checksum >>> 8 ^ lookupTable[(this.checksum ^ byte) & 255];
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (data_1_1 && !data_1_1.done && (_a = data_1.return))
                _a.call(data_1);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
          return this;
        };
        Crc32c2.prototype.digest = function() {
          return (this.checksum ^ 4294967295) >>> 0;
        };
        return Crc32c2;
      }()
    );
    exports.Crc32c = Crc32c;
    var a_lookupTable = [
      0,
      4067132163,
      3778769143,
      324072436,
      3348797215,
      904991772,
      648144872,
      3570033899,
      2329499855,
      2024987596,
      1809983544,
      2575936315,
      1296289744,
      3207089363,
      2893594407,
      1578318884,
      274646895,
      3795141740,
      4049975192,
      51262619,
      3619967088,
      632279923,
      922689671,
      3298075524,
      2592579488,
      1760304291,
      2075979607,
      2312596564,
      1562183871,
      2943781820,
      3156637768,
      1313733451,
      549293790,
      3537243613,
      3246849577,
      871202090,
      3878099393,
      357341890,
      102525238,
      4101499445,
      2858735121,
      1477399826,
      1264559846,
      3107202533,
      1845379342,
      2677391885,
      2361733625,
      2125378298,
      820201905,
      3263744690,
      3520608582,
      598981189,
      4151959214,
      85089709,
      373468761,
      3827903834,
      3124367742,
      1213305469,
      1526817161,
      2842354314,
      2107672161,
      2412447074,
      2627466902,
      1861252501,
      1098587580,
      3004210879,
      2688576843,
      1378610760,
      2262928035,
      1955203488,
      1742404180,
      2511436119,
      3416409459,
      969524848,
      714683780,
      3639785095,
      205050476,
      4266873199,
      3976438427,
      526918040,
      1361435347,
      2739821008,
      2954799652,
      1114974503,
      2529119692,
      1691668175,
      2005155131,
      2247081528,
      3690758684,
      697762079,
      986182379,
      3366744552,
      476452099,
      3993867776,
      4250756596,
      255256311,
      1640403810,
      2477592673,
      2164122517,
      1922457750,
      2791048317,
      1412925310,
      1197962378,
      3037525897,
      3944729517,
      427051182,
      170179418,
      4165941337,
      746937522,
      3740196785,
      3451792453,
      1070968646,
      1905808397,
      2213795598,
      2426610938,
      1657317369,
      3053634322,
      1147748369,
      1463399397,
      2773627110,
      4215344322,
      153784257,
      444234805,
      3893493558,
      1021025245,
      3467647198,
      3722505002,
      797665321,
      2197175160,
      1889384571,
      1674398607,
      2443626636,
      1164749927,
      3070701412,
      2757221520,
      1446797203,
      137323447,
      4198817972,
      3910406976,
      461344835,
      3484808360,
      1037989803,
      781091935,
      3705997148,
      2460548119,
      1623424788,
      1939049696,
      2180517859,
      1429367560,
      2807687179,
      3020495871,
      1180866812,
      410100952,
      3927582683,
      4182430767,
      186734380,
      3756733383,
      763408580,
      1053836080,
      3434856499,
      2722870694,
      1344288421,
      1131464017,
      2971354706,
      1708204729,
      2545590714,
      2229949006,
      1988219213,
      680717673,
      3673779818,
      3383336350,
      1002577565,
      4010310262,
      493091189,
      238226049,
      4233660802,
      2987750089,
      1082061258,
      1395524158,
      2705686845,
      1972364758,
      2279892693,
      2494862625,
      1725896226,
      952904198,
      3399985413,
      3656866545,
      731699698,
      4283874585,
      222117402,
      510512622,
      3959836397,
      3280807620,
      837199303,
      582374963,
      3504198960,
      68661723,
      4135334616,
      3844915500,
      390545967,
      1230274059,
      3141532936,
      2825850620,
      1510247935,
      2395924756,
      2091215383,
      1878366691,
      2644384480,
      3553878443,
      565732008,
      854102364,
      3229815391,
      340358836,
      3861050807,
      4117890627,
      119113024,
      1493875044,
      2875275879,
      3090270611,
      1247431312,
      2660249211,
      1828433272,
      2141937292,
      2378227087,
      3811616794,
      291187481,
      34330861,
      4032846830,
      615137029,
      3603020806,
      3314634738,
      939183345,
      1776939221,
      2609017814,
      2295496738,
      2058945313,
      2926798794,
      1545135305,
      1330124605,
      3173225534,
      4084100981,
      17165430,
      307568514,
      3762199681,
      888469610,
      3332340585,
      3587147933,
      665062302,
      2042050490,
      2346497209,
      2559330125,
      1793573966,
      3190661285,
      1279665062,
      1595330642,
      2910671697
    ];
    var lookupTable = (0, util_1.uint32ArrayFrom)(a_lookupTable);
    var aws_crc32c_1 = require_aws_crc32c();
    Object.defineProperty(exports, "AwsCrc32c", { enumerable: true, get: function() {
      return aws_crc32c_1.AwsCrc32c;
    } });
  }
});

// ../../node_modules/.pnpm/@aws-crypto+crc32@5.2.0/node_modules/@aws-crypto/crc32/build/main/aws_crc32.js
var require_aws_crc32 = __commonJS({
  "../../node_modules/.pnpm/@aws-crypto+crc32@5.2.0/node_modules/@aws-crypto/crc32/build/main/aws_crc32.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AwsCrc32 = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var util_1 = require_main();
    var index_1 = require_main3();
    var AwsCrc32 = (
      /** @class */
      function() {
        function AwsCrc322() {
          this.crc32 = new index_1.Crc32();
        }
        AwsCrc322.prototype.update = function(toHash) {
          if ((0, util_1.isEmptyData)(toHash))
            return;
          this.crc32.update((0, util_1.convertToBuffer)(toHash));
        };
        AwsCrc322.prototype.digest = function() {
          return tslib_1.__awaiter(this, void 0, void 0, function() {
            return tslib_1.__generator(this, function(_a) {
              return [2, (0, util_1.numToUint8)(this.crc32.digest())];
            });
          });
        };
        AwsCrc322.prototype.reset = function() {
          this.crc32 = new index_1.Crc32();
        };
        return AwsCrc322;
      }()
    );
    exports.AwsCrc32 = AwsCrc32;
  }
});

// ../../node_modules/.pnpm/@aws-crypto+crc32@5.2.0/node_modules/@aws-crypto/crc32/build/main/index.js
var require_main3 = __commonJS({
  "../../node_modules/.pnpm/@aws-crypto+crc32@5.2.0/node_modules/@aws-crypto/crc32/build/main/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AwsCrc32 = exports.Crc32 = exports.crc32 = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var util_1 = require_main();
    function crc32(data) {
      return new Crc32().update(data).digest();
    }
    exports.crc32 = crc32;
    var Crc32 = (
      /** @class */
      function() {
        function Crc322() {
          this.checksum = 4294967295;
        }
        Crc322.prototype.update = function(data) {
          var e_1, _a;
          try {
            for (var data_1 = tslib_1.__values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
              var byte = data_1_1.value;
              this.checksum = this.checksum >>> 8 ^ lookupTable[(this.checksum ^ byte) & 255];
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (data_1_1 && !data_1_1.done && (_a = data_1.return))
                _a.call(data_1);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
          return this;
        };
        Crc322.prototype.digest = function() {
          return (this.checksum ^ 4294967295) >>> 0;
        };
        return Crc322;
      }()
    );
    exports.Crc32 = Crc32;
    var a_lookUpTable = [
      0,
      1996959894,
      3993919788,
      2567524794,
      124634137,
      1886057615,
      3915621685,
      2657392035,
      249268274,
      2044508324,
      3772115230,
      2547177864,
      162941995,
      2125561021,
      3887607047,
      2428444049,
      498536548,
      1789927666,
      4089016648,
      2227061214,
      450548861,
      1843258603,
      4107580753,
      2211677639,
      325883990,
      1684777152,
      4251122042,
      2321926636,
      335633487,
      1661365465,
      4195302755,
      2366115317,
      997073096,
      1281953886,
      3579855332,
      2724688242,
      1006888145,
      1258607687,
      3524101629,
      2768942443,
      901097722,
      1119000684,
      3686517206,
      2898065728,
      853044451,
      1172266101,
      3705015759,
      2882616665,
      651767980,
      1373503546,
      3369554304,
      3218104598,
      565507253,
      1454621731,
      3485111705,
      3099436303,
      671266974,
      1594198024,
      3322730930,
      2970347812,
      795835527,
      1483230225,
      3244367275,
      3060149565,
      1994146192,
      31158534,
      2563907772,
      4023717930,
      1907459465,
      112637215,
      2680153253,
      3904427059,
      2013776290,
      251722036,
      2517215374,
      3775830040,
      2137656763,
      141376813,
      2439277719,
      3865271297,
      1802195444,
      476864866,
      2238001368,
      4066508878,
      1812370925,
      453092731,
      2181625025,
      4111451223,
      1706088902,
      314042704,
      2344532202,
      4240017532,
      1658658271,
      366619977,
      2362670323,
      4224994405,
      1303535960,
      984961486,
      2747007092,
      3569037538,
      1256170817,
      1037604311,
      2765210733,
      3554079995,
      1131014506,
      879679996,
      2909243462,
      3663771856,
      1141124467,
      855842277,
      2852801631,
      3708648649,
      1342533948,
      654459306,
      3188396048,
      3373015174,
      1466479909,
      544179635,
      3110523913,
      3462522015,
      1591671054,
      702138776,
      2966460450,
      3352799412,
      1504918807,
      783551873,
      3082640443,
      3233442989,
      3988292384,
      2596254646,
      62317068,
      1957810842,
      3939845945,
      2647816111,
      81470997,
      1943803523,
      3814918930,
      2489596804,
      225274430,
      2053790376,
      3826175755,
      2466906013,
      167816743,
      2097651377,
      4027552580,
      2265490386,
      503444072,
      1762050814,
      4150417245,
      2154129355,
      426522225,
      1852507879,
      4275313526,
      2312317920,
      282753626,
      1742555852,
      4189708143,
      2394877945,
      397917763,
      1622183637,
      3604390888,
      2714866558,
      953729732,
      1340076626,
      3518719985,
      2797360999,
      1068828381,
      1219638859,
      3624741850,
      2936675148,
      906185462,
      1090812512,
      3747672003,
      2825379669,
      829329135,
      1181335161,
      3412177804,
      3160834842,
      628085408,
      1382605366,
      3423369109,
      3138078467,
      570562233,
      1426400815,
      3317316542,
      2998733608,
      733239954,
      1555261956,
      3268935591,
      3050360625,
      752459403,
      1541320221,
      2607071920,
      3965973030,
      1969922972,
      40735498,
      2617837225,
      3943577151,
      1913087877,
      83908371,
      2512341634,
      3803740692,
      2075208622,
      213261112,
      2463272603,
      3855990285,
      2094854071,
      198958881,
      2262029012,
      4057260610,
      1759359992,
      534414190,
      2176718541,
      4139329115,
      1873836001,
      414664567,
      2282248934,
      4279200368,
      1711684554,
      285281116,
      2405801727,
      4167216745,
      1634467795,
      376229701,
      2685067896,
      3608007406,
      1308918612,
      956543938,
      2808555105,
      3495958263,
      1231636301,
      1047427035,
      2932959818,
      3654703836,
      1088359270,
      936918e3,
      2847714899,
      3736837829,
      1202900863,
      817233897,
      3183342108,
      3401237130,
      1404277552,
      615818150,
      3134207493,
      3453421203,
      1423857449,
      601450431,
      3009837614,
      3294710456,
      1567103746,
      711928724,
      3020668471,
      3272380065,
      1510334235,
      755167117
    ];
    var lookupTable = (0, util_1.uint32ArrayFrom)(a_lookUpTable);
    var aws_crc32_1 = require_aws_crc32();
    Object.defineProperty(exports, "AwsCrc32", { enumerable: true, get: function() {
      return aws_crc32_1.AwsCrc32;
    } });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-flexible-checksums@3.697.0/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/getCrc32ChecksumAlgorithmFunction.js
var require_getCrc32ChecksumAlgorithmFunction = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-flexible-checksums@3.697.0/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/getCrc32ChecksumAlgorithmFunction.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCrc32ChecksumAlgorithmFunction = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var crc32_1 = require_main3();
    var util_1 = require_main();
    var zlib = tslib_1.__importStar(__require("zlib"));
    var NodeCrc32 = class {
      constructor() {
        this.checksum = 0;
      }
      update(data) {
        this.checksum = zlib.crc32(data, this.checksum);
      }
      async digest() {
        return (0, util_1.numToUint8)(this.checksum);
      }
      reset() {
        this.checksum = 0;
      }
    };
    var getCrc32ChecksumAlgorithmFunction = () => {
      if (typeof zlib.crc32 === "undefined") {
        return crc32_1.AwsCrc32;
      }
      return NodeCrc32;
    };
    exports.getCrc32ChecksumAlgorithmFunction = getCrc32ChecksumAlgorithmFunction;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-flexible-checksums@3.697.0/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/streams/create-read-stream-on-buffer.js
var require_create_read_stream_on_buffer = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-flexible-checksums@3.697.0/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/streams/create-read-stream-on-buffer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createReadStreamOnBuffer = void 0;
    var stream_1 = __require("stream");
    function createReadStreamOnBuffer(buffer) {
      const stream = new stream_1.Transform();
      stream.push(buffer);
      stream.push(null);
      return stream;
    }
    exports.createReadStreamOnBuffer = createReadStreamOnBuffer;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-flexible-checksums@3.697.0/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/index.js
var require_dist_cjs23 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-flexible-checksums@3.697.0/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/index.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      CONFIG_REQUEST_CHECKSUM_CALCULATION: () => CONFIG_REQUEST_CHECKSUM_CALCULATION,
      CONFIG_RESPONSE_CHECKSUM_VALIDATION: () => CONFIG_RESPONSE_CHECKSUM_VALIDATION,
      ChecksumAlgorithm: () => ChecksumAlgorithm,
      ChecksumLocation: () => ChecksumLocation,
      DEFAULT_CHECKSUM_ALGORITHM: () => DEFAULT_CHECKSUM_ALGORITHM,
      DEFAULT_REQUEST_CHECKSUM_CALCULATION: () => DEFAULT_REQUEST_CHECKSUM_CALCULATION,
      DEFAULT_RESPONSE_CHECKSUM_VALIDATION: () => DEFAULT_RESPONSE_CHECKSUM_VALIDATION,
      ENV_REQUEST_CHECKSUM_CALCULATION: () => ENV_REQUEST_CHECKSUM_CALCULATION,
      ENV_RESPONSE_CHECKSUM_VALIDATION: () => ENV_RESPONSE_CHECKSUM_VALIDATION,
      NODE_REQUEST_CHECKSUM_CALCULATION_CONFIG_OPTIONS: () => NODE_REQUEST_CHECKSUM_CALCULATION_CONFIG_OPTIONS,
      NODE_RESPONSE_CHECKSUM_VALIDATION_CONFIG_OPTIONS: () => NODE_RESPONSE_CHECKSUM_VALIDATION_CONFIG_OPTIONS,
      RequestChecksumCalculation: () => RequestChecksumCalculation,
      ResponseChecksumValidation: () => ResponseChecksumValidation,
      S3_EXPRESS_DEFAULT_CHECKSUM_ALGORITHM: () => S3_EXPRESS_DEFAULT_CHECKSUM_ALGORITHM,
      flexibleChecksumsMiddleware: () => flexibleChecksumsMiddleware,
      flexibleChecksumsMiddlewareOptions: () => flexibleChecksumsMiddlewareOptions,
      getFlexibleChecksumsPlugin: () => getFlexibleChecksumsPlugin,
      resolveFlexibleChecksumsConfig: () => resolveFlexibleChecksumsConfig
    });
    module.exports = __toCommonJS2(src_exports);
    var RequestChecksumCalculation = {
      /**
       * When set, a checksum will be calculated for all request payloads of operations
       * modeled with the {@link httpChecksum} trait where `requestChecksumRequired` is `true`
       * AND/OR a `requestAlgorithmMember` is modeled.
       * {@link https://smithy.io/2.0/aws/aws-core.html#aws-protocols-httpchecksum-trait httpChecksum}
       */
      WHEN_SUPPORTED: "WHEN_SUPPORTED",
      /**
       * When set, a checksum will only be calculated for request payloads of operations
       * modeled with the {@link httpChecksum} trait where `requestChecksumRequired` is `true`
       * OR where a `requestAlgorithmMember` is modeled and the user sets it.
       * {@link https://smithy.io/2.0/aws/aws-core.html#aws-protocols-httpchecksum-trait httpChecksum}
       */
      WHEN_REQUIRED: "WHEN_REQUIRED"
    };
    var DEFAULT_REQUEST_CHECKSUM_CALCULATION = RequestChecksumCalculation.WHEN_SUPPORTED;
    var ResponseChecksumValidation = {
      /**
       * When set, checksum validation MUST be performed on all response payloads of operations
       * modeled with the {@link httpChecksum} trait where `responseAlgorithms` is modeled,
       * except when no modeled checksum algorithms are supported by an SDK.
       * {@link https://smithy.io/2.0/aws/aws-core.html#aws-protocols-httpchecksum-trait httpChecksum}
       */
      WHEN_SUPPORTED: "WHEN_SUPPORTED",
      /**
       * When set, checksum validation MUST NOT be performed on response payloads of operations UNLESS
       * the SDK supports the modeled checksum algorithms AND the user has set the `requestValidationModeMember` to `ENABLED`.
       * It is currently impossible to model an operation as requiring a response checksum,
       * but this setting leaves the door open for future updates.
       */
      WHEN_REQUIRED: "WHEN_REQUIRED"
    };
    var DEFAULT_RESPONSE_CHECKSUM_VALIDATION = RequestChecksumCalculation.WHEN_SUPPORTED;
    var ChecksumAlgorithm = /* @__PURE__ */ ((ChecksumAlgorithm3) => {
      ChecksumAlgorithm3["MD5"] = "MD5";
      ChecksumAlgorithm3["CRC32"] = "CRC32";
      ChecksumAlgorithm3["CRC32C"] = "CRC32C";
      ChecksumAlgorithm3["SHA1"] = "SHA1";
      ChecksumAlgorithm3["SHA256"] = "SHA256";
      return ChecksumAlgorithm3;
    })(ChecksumAlgorithm || {});
    var ChecksumLocation = /* @__PURE__ */ ((ChecksumLocation2) => {
      ChecksumLocation2["HEADER"] = "header";
      ChecksumLocation2["TRAILER"] = "trailer";
      return ChecksumLocation2;
    })(ChecksumLocation || {});
    var DEFAULT_CHECKSUM_ALGORITHM = "MD5";
    var S3_EXPRESS_DEFAULT_CHECKSUM_ALGORITHM = "CRC32";
    var stringUnionSelector = /* @__PURE__ */ __name((obj, key, union, type) => {
      if (!(key in obj))
        return void 0;
      const value = obj[key].toUpperCase();
      if (!Object.values(union).includes(value)) {
        throw new TypeError(`Cannot load ${type} '${key}'. Expected one of ${Object.values(union)}, got '${obj[key]}'.`);
      }
      return value;
    }, "stringUnionSelector");
    var ENV_REQUEST_CHECKSUM_CALCULATION = "AWS_REQUEST_CHECKSUM_CALCULATION";
    var CONFIG_REQUEST_CHECKSUM_CALCULATION = "request_checksum_calculation";
    var NODE_REQUEST_CHECKSUM_CALCULATION_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => stringUnionSelector(
        env,
        ENV_REQUEST_CHECKSUM_CALCULATION,
        RequestChecksumCalculation,
        "env"
        /* ENV */
      ),
      configFileSelector: (profile) => stringUnionSelector(
        profile,
        CONFIG_REQUEST_CHECKSUM_CALCULATION,
        RequestChecksumCalculation,
        "shared config entry"
        /* CONFIG */
      ),
      default: DEFAULT_REQUEST_CHECKSUM_CALCULATION
    };
    var ENV_RESPONSE_CHECKSUM_VALIDATION = "AWS_RESPONSE_CHECKSUM_VALIDATION";
    var CONFIG_RESPONSE_CHECKSUM_VALIDATION = "response_checksum_validation";
    var NODE_RESPONSE_CHECKSUM_VALIDATION_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => stringUnionSelector(
        env,
        ENV_RESPONSE_CHECKSUM_VALIDATION,
        ResponseChecksumValidation,
        "env"
        /* ENV */
      ),
      configFileSelector: (profile) => stringUnionSelector(
        profile,
        CONFIG_RESPONSE_CHECKSUM_VALIDATION,
        ResponseChecksumValidation,
        "shared config entry"
        /* CONFIG */
      ),
      default: DEFAULT_RESPONSE_CHECKSUM_VALIDATION
    };
    var import_core3 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var import_protocol_http8 = require_dist_cjs2();
    var CLIENT_SUPPORTED_ALGORITHMS = [
      "CRC32",
      "CRC32C",
      "SHA1",
      "SHA256"
      /* SHA256 */
    ];
    var PRIORITY_ORDER_ALGORITHMS = [
      "SHA256",
      "SHA1",
      "CRC32",
      "CRC32C"
      /* CRC32C */
    ];
    var getChecksumAlgorithmForRequest = /* @__PURE__ */ __name((input, { requestChecksumRequired, requestAlgorithmMember }, isS3Express) => {
      const defaultAlgorithm = isS3Express ? S3_EXPRESS_DEFAULT_CHECKSUM_ALGORITHM : DEFAULT_CHECKSUM_ALGORITHM;
      if (!requestAlgorithmMember || !input[requestAlgorithmMember]) {
        return requestChecksumRequired ? defaultAlgorithm : void 0;
      }
      const checksumAlgorithm = input[requestAlgorithmMember];
      if (!CLIENT_SUPPORTED_ALGORITHMS.includes(checksumAlgorithm)) {
        throw new Error(
          `The checksum algorithm "${checksumAlgorithm}" is not supported by the client. Select one of ${CLIENT_SUPPORTED_ALGORITHMS}.`
        );
      }
      return checksumAlgorithm;
    }, "getChecksumAlgorithmForRequest");
    var getChecksumLocationName = /* @__PURE__ */ __name((algorithm) => algorithm === "MD5" ? "content-md5" : `x-amz-checksum-${algorithm.toLowerCase()}`, "getChecksumLocationName");
    var hasHeader = /* @__PURE__ */ __name((header, headers) => {
      const soughtHeader = header.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return true;
        }
      }
      return false;
    }, "hasHeader");
    var import_is_array_buffer = require_dist_cjs6();
    var isStreaming = /* @__PURE__ */ __name((body) => body !== void 0 && typeof body !== "string" && !ArrayBuffer.isView(body) && !(0, import_is_array_buffer.isArrayBuffer)(body), "isStreaming");
    var import_crc32c = require_main2();
    var import_getCrc32ChecksumAlgorithmFunction = require_getCrc32ChecksumAlgorithmFunction();
    var selectChecksumAlgorithmFunction = /* @__PURE__ */ __name((checksumAlgorithm, config) => ({
      [
        "MD5"
        /* MD5 */
      ]: config.md5,
      [
        "CRC32"
        /* CRC32 */
      ]: (0, import_getCrc32ChecksumAlgorithmFunction.getCrc32ChecksumAlgorithmFunction)(),
      [
        "CRC32C"
        /* CRC32C */
      ]: import_crc32c.AwsCrc32c,
      [
        "SHA1"
        /* SHA1 */
      ]: config.sha1,
      [
        "SHA256"
        /* SHA256 */
      ]: config.sha256
    })[checksumAlgorithm], "selectChecksumAlgorithmFunction");
    var import_util_utf8 = require_dist_cjs8();
    var stringHasher = /* @__PURE__ */ __name((checksumAlgorithmFn, body) => {
      const hash = new checksumAlgorithmFn();
      hash.update((0, import_util_utf8.toUint8Array)(body || ""));
      return hash.digest();
    }, "stringHasher");
    var flexibleChecksumsMiddlewareOptions = {
      name: "flexibleChecksumsMiddleware",
      step: "build",
      tags: ["BODY_CHECKSUM"],
      override: true
    };
    var flexibleChecksumsMiddleware = /* @__PURE__ */ __name((config, middlewareConfig) => (next, context) => async (args) => {
      if (!import_protocol_http8.HttpRequest.isInstance(args.request)) {
        return next(args);
      }
      const { request, input } = args;
      const { body: requestBody, headers } = request;
      const { base64Encoder, streamHasher } = config;
      const { requestChecksumRequired, requestAlgorithmMember } = middlewareConfig;
      const checksumAlgorithm = getChecksumAlgorithmForRequest(
        input,
        {
          requestChecksumRequired,
          requestAlgorithmMember
        },
        !!context.isS3ExpressBucket
      );
      let updatedBody = requestBody;
      let updatedHeaders = headers;
      if (checksumAlgorithm) {
        switch (checksumAlgorithm) {
          case "CRC32":
            (0, import_core3.setFeature)(context, "FLEXIBLE_CHECKSUMS_REQ_CRC32", "U");
            break;
          case "CRC32C":
            (0, import_core3.setFeature)(context, "FLEXIBLE_CHECKSUMS_REQ_CRC32C", "V");
            break;
          case "SHA1":
            (0, import_core3.setFeature)(context, "FLEXIBLE_CHECKSUMS_REQ_SHA1", "X");
            break;
          case "SHA256":
            (0, import_core3.setFeature)(context, "FLEXIBLE_CHECKSUMS_REQ_SHA256", "Y");
            break;
        }
        const checksumLocationName = getChecksumLocationName(checksumAlgorithm);
        const checksumAlgorithmFn = selectChecksumAlgorithmFunction(checksumAlgorithm, config);
        if (isStreaming(requestBody)) {
          const { getAwsChunkedEncodingStream: getAwsChunkedEncodingStream2, bodyLengthChecker } = config;
          updatedBody = getAwsChunkedEncodingStream2(requestBody, {
            base64Encoder,
            bodyLengthChecker,
            checksumLocationName,
            checksumAlgorithmFn,
            streamHasher
          });
          updatedHeaders = {
            ...headers,
            "content-encoding": headers["content-encoding"] ? `${headers["content-encoding"]},aws-chunked` : "aws-chunked",
            "transfer-encoding": "chunked",
            "x-amz-decoded-content-length": headers["content-length"],
            "x-amz-content-sha256": "STREAMING-UNSIGNED-PAYLOAD-TRAILER",
            "x-amz-trailer": checksumLocationName
          };
          delete updatedHeaders["content-length"];
        } else if (!hasHeader(checksumLocationName, headers)) {
          const rawChecksum = await stringHasher(checksumAlgorithmFn, requestBody);
          updatedHeaders = {
            ...headers,
            [checksumLocationName]: base64Encoder(rawChecksum)
          };
        }
      }
      const result = await next({
        ...args,
        request: {
          ...request,
          headers: updatedHeaders,
          body: updatedBody
        }
      });
      return result;
    }, "flexibleChecksumsMiddleware");
    var getChecksumAlgorithmListForResponse = /* @__PURE__ */ __name((responseAlgorithms = []) => {
      const validChecksumAlgorithms = [];
      for (const algorithm of PRIORITY_ORDER_ALGORITHMS) {
        if (!responseAlgorithms.includes(algorithm) || !CLIENT_SUPPORTED_ALGORITHMS.includes(algorithm)) {
          continue;
        }
        validChecksumAlgorithms.push(algorithm);
      }
      return validChecksumAlgorithms;
    }, "getChecksumAlgorithmListForResponse");
    var isChecksumWithPartNumber = /* @__PURE__ */ __name((checksum) => {
      const lastHyphenIndex = checksum.lastIndexOf("-");
      if (lastHyphenIndex !== -1) {
        const numberPart = checksum.slice(lastHyphenIndex + 1);
        if (!numberPart.startsWith("0")) {
          const number = parseInt(numberPart, 10);
          if (!isNaN(number) && number >= 1 && number <= 1e4) {
            return true;
          }
        }
      }
      return false;
    }, "isChecksumWithPartNumber");
    var import_create_read_stream_on_buffer = require_create_read_stream_on_buffer();
    var import_util_stream2 = require_dist_cjs15();
    var getChecksum = /* @__PURE__ */ __name(async (body, { checksumAlgorithmFn, base64Encoder }) => base64Encoder(await stringHasher(checksumAlgorithmFn, body)), "getChecksum");
    var validateChecksumFromResponse = /* @__PURE__ */ __name(async (response, { config, responseAlgorithms }) => {
      const checksumAlgorithms = getChecksumAlgorithmListForResponse(responseAlgorithms);
      const { body: responseBody, headers: responseHeaders } = response;
      for (const algorithm of checksumAlgorithms) {
        const responseHeader = getChecksumLocationName(algorithm);
        const checksumFromResponse = responseHeaders[responseHeader];
        if (checksumFromResponse) {
          const checksumAlgorithmFn = selectChecksumAlgorithmFunction(algorithm, config);
          const { base64Encoder } = config;
          if (isStreaming(responseBody)) {
            response.body = (0, import_util_stream2.createChecksumStream)({
              expectedChecksum: checksumFromResponse,
              checksumSourceLocation: responseHeader,
              checksum: new checksumAlgorithmFn(),
              source: responseBody,
              base64Encoder
            });
            return;
          }
          const checksum = await getChecksum(responseBody, { checksumAlgorithmFn, base64Encoder });
          if (checksum === checksumFromResponse) {
            break;
          }
          throw new Error(
            `Checksum mismatch: expected "${checksum}" but received "${checksumFromResponse}" in response header "${responseHeader}".`
          );
        }
      }
    }, "validateChecksumFromResponse");
    var flexibleChecksumsResponseMiddlewareOptions = {
      name: "flexibleChecksumsResponseMiddleware",
      toMiddleware: "deserializerMiddleware",
      relation: "after",
      tags: ["BODY_CHECKSUM"],
      override: true
    };
    var flexibleChecksumsResponseMiddleware = /* @__PURE__ */ __name((config, middlewareConfig) => (next, context) => async (args) => {
      if (!import_protocol_http8.HttpRequest.isInstance(args.request)) {
        return next(args);
      }
      const input = args.input;
      const result = await next(args);
      const response = result.response;
      let collectedStream = void 0;
      const { requestValidationModeMember, responseAlgorithms } = middlewareConfig;
      if (requestValidationModeMember && input[requestValidationModeMember] === "ENABLED") {
        const { clientName, commandName } = context;
        const isS3WholeObjectMultipartGetResponseChecksum = clientName === "S3Client" && commandName === "GetObjectCommand" && getChecksumAlgorithmListForResponse(responseAlgorithms).every((algorithm) => {
          const responseHeader = getChecksumLocationName(algorithm);
          const checksumFromResponse = response.headers[responseHeader];
          return !checksumFromResponse || isChecksumWithPartNumber(checksumFromResponse);
        });
        if (isS3WholeObjectMultipartGetResponseChecksum) {
          return result;
        }
        const isStreamingBody = isStreaming(response.body);
        if (isStreamingBody) {
          collectedStream = await config.streamCollector(response.body);
          response.body = (0, import_create_read_stream_on_buffer.createReadStreamOnBuffer)(collectedStream);
        }
        await validateChecksumFromResponse(result.response, {
          config,
          responseAlgorithms
        });
        if (isStreamingBody && collectedStream) {
          response.body = (0, import_create_read_stream_on_buffer.createReadStreamOnBuffer)(collectedStream);
        }
      }
      return result;
    }, "flexibleChecksumsResponseMiddleware");
    var getFlexibleChecksumsPlugin = /* @__PURE__ */ __name((config, middlewareConfig) => ({
      applyToStack: (clientStack) => {
        clientStack.add(flexibleChecksumsMiddleware(config, middlewareConfig), flexibleChecksumsMiddlewareOptions);
        clientStack.addRelativeTo(
          flexibleChecksumsResponseMiddleware(config, middlewareConfig),
          flexibleChecksumsResponseMiddlewareOptions
        );
      }
    }), "getFlexibleChecksumsPlugin");
    var import_util_middleware3 = require_dist_cjs4();
    var resolveFlexibleChecksumsConfig = /* @__PURE__ */ __name((input) => ({
      ...input,
      requestChecksumCalculation: (0, import_util_middleware3.normalizeProvider)(
        input.requestChecksumCalculation ?? DEFAULT_REQUEST_CHECKSUM_CALCULATION
      ),
      responseChecksumValidation: (0, import_util_middleware3.normalizeProvider)(
        input.responseChecksumValidation ?? DEFAULT_RESPONSE_CHECKSUM_VALIDATION
      )
    }), "resolveFlexibleChecksumsConfig");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-host-header@3.696.0/node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js
var require_dist_cjs24 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-host-header@3.696.0/node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      getHostHeaderPlugin: () => getHostHeaderPlugin,
      hostHeaderMiddleware: () => hostHeaderMiddleware,
      hostHeaderMiddlewareOptions: () => hostHeaderMiddlewareOptions,
      resolveHostHeaderConfig: () => resolveHostHeaderConfig
    });
    module.exports = __toCommonJS2(src_exports);
    var import_protocol_http8 = require_dist_cjs2();
    function resolveHostHeaderConfig(input) {
      return input;
    }
    __name(resolveHostHeaderConfig, "resolveHostHeaderConfig");
    var hostHeaderMiddleware = /* @__PURE__ */ __name((options) => (next) => async (args) => {
      if (!import_protocol_http8.HttpRequest.isInstance(args.request))
        return next(args);
      const { request } = args;
      const { handlerProtocol = "" } = options.requestHandler.metadata || {};
      if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
        delete request.headers["host"];
        request.headers[":authority"] = request.hostname + (request.port ? ":" + request.port : "");
      } else if (!request.headers["host"]) {
        let host = request.hostname;
        if (request.port != null)
          host += `:${request.port}`;
        request.headers["host"] = host;
      }
      return next(args);
    }, "hostHeaderMiddleware");
    var hostHeaderMiddlewareOptions = {
      name: "hostHeaderMiddleware",
      step: "build",
      priority: "low",
      tags: ["HOST"],
      override: true
    };
    var getHostHeaderPlugin = /* @__PURE__ */ __name((options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);
      }
    }), "getHostHeaderPlugin");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-logger@3.696.0/node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js
var require_dist_cjs25 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-logger@3.696.0/node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      getLoggerPlugin: () => getLoggerPlugin,
      loggerMiddleware: () => loggerMiddleware,
      loggerMiddlewareOptions: () => loggerMiddlewareOptions
    });
    module.exports = __toCommonJS2(src_exports);
    var loggerMiddleware = /* @__PURE__ */ __name(() => (next, context) => async (args) => {
      var _a, _b;
      try {
        const response = await next(args);
        const { clientName, commandName, logger: logger2, dynamoDbDocumentClientOptions = {} } = context;
        const { overrideInputFilterSensitiveLog, overrideOutputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;
        const outputFilterSensitiveLog = overrideOutputFilterSensitiveLog ?? context.outputFilterSensitiveLog;
        const { $metadata, ...outputWithoutMetadata } = response.output;
        (_a = logger2 == null ? void 0 : logger2.info) == null ? void 0 : _a.call(logger2, {
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          output: outputFilterSensitiveLog(outputWithoutMetadata),
          metadata: $metadata
        });
        return response;
      } catch (error) {
        const { clientName, commandName, logger: logger2, dynamoDbDocumentClientOptions = {} } = context;
        const { overrideInputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;
        (_b = logger2 == null ? void 0 : logger2.error) == null ? void 0 : _b.call(logger2, {
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          error,
          metadata: error.$metadata
        });
        throw error;
      }
    }, "loggerMiddleware");
    var loggerMiddlewareOptions = {
      name: "loggerMiddleware",
      tags: ["LOGGER"],
      step: "initialize",
      override: true
    };
    var getLoggerPlugin = /* @__PURE__ */ __name((options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);
      }
    }), "getLoggerPlugin");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-recursion-detection@3.696.0/node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js
var require_dist_cjs26 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-recursion-detection@3.696.0/node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      addRecursionDetectionMiddlewareOptions: () => addRecursionDetectionMiddlewareOptions,
      getRecursionDetectionPlugin: () => getRecursionDetectionPlugin,
      recursionDetectionMiddleware: () => recursionDetectionMiddleware
    });
    module.exports = __toCommonJS2(src_exports);
    var import_protocol_http8 = require_dist_cjs2();
    var TRACE_ID_HEADER_NAME = "X-Amzn-Trace-Id";
    var ENV_LAMBDA_FUNCTION_NAME = "AWS_LAMBDA_FUNCTION_NAME";
    var ENV_TRACE_ID = "_X_AMZN_TRACE_ID";
    var recursionDetectionMiddleware = /* @__PURE__ */ __name((options) => (next) => async (args) => {
      const { request } = args;
      if (!import_protocol_http8.HttpRequest.isInstance(request) || options.runtime !== "node" || request.headers.hasOwnProperty(TRACE_ID_HEADER_NAME)) {
        return next(args);
      }
      const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];
      const traceId = process.env[ENV_TRACE_ID];
      const nonEmptyString = /* @__PURE__ */ __name((str) => typeof str === "string" && str.length > 0, "nonEmptyString");
      if (nonEmptyString(functionName) && nonEmptyString(traceId)) {
        request.headers[TRACE_ID_HEADER_NAME] = traceId;
      }
      return next({
        ...args,
        request
      });
    }, "recursionDetectionMiddleware");
    var addRecursionDetectionMiddlewareOptions = {
      step: "build",
      tags: ["RECURSION_DETECTION"],
      name: "recursionDetectionMiddleware",
      override: true,
      priority: "low"
    };
    var getRecursionDetectionPlugin = /* @__PURE__ */ __name((options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(recursionDetectionMiddleware(options), addRecursionDetectionMiddlewareOptions);
      }
    }), "getRecursionDetectionPlugin");
  }
});

// ../../node_modules/.pnpm/@smithy+util-config-provider@3.0.0/node_modules/@smithy/util-config-provider/dist-cjs/index.js
var require_dist_cjs27 = __commonJS({
  "../../node_modules/.pnpm/@smithy+util-config-provider@3.0.0/node_modules/@smithy/util-config-provider/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      SelectorType: () => SelectorType,
      booleanSelector: () => booleanSelector,
      numberSelector: () => numberSelector
    });
    module.exports = __toCommonJS2(src_exports);
    var booleanSelector = /* @__PURE__ */ __name((obj, key, type) => {
      if (!(key in obj))
        return void 0;
      if (obj[key] === "true")
        return true;
      if (obj[key] === "false")
        return false;
      throw new Error(`Cannot load ${type} "${key}". Expected "true" or "false", got ${obj[key]}.`);
    }, "booleanSelector");
    var numberSelector = /* @__PURE__ */ __name((obj, key, type) => {
      if (!(key in obj))
        return void 0;
      const numberValue = parseInt(obj[key], 10);
      if (Number.isNaN(numberValue)) {
        throw new TypeError(`Cannot load ${type} '${key}'. Expected number, got '${obj[key]}'.`);
      }
      return numberValue;
    }, "numberSelector");
    var SelectorType = /* @__PURE__ */ ((SelectorType2) => {
      SelectorType2["ENV"] = "env";
      SelectorType2["CONFIG"] = "shared config entry";
      return SelectorType2;
    })(SelectorType || {});
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-arn-parser@3.693.0/node_modules/@aws-sdk/util-arn-parser/dist-cjs/index.js
var require_dist_cjs28 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-arn-parser@3.693.0/node_modules/@aws-sdk/util-arn-parser/dist-cjs/index.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      build: () => build,
      parse: () => parse2,
      validate: () => validate2
    });
    module.exports = __toCommonJS2(src_exports);
    var validate2 = /* @__PURE__ */ __name((str) => typeof str === "string" && str.indexOf("arn:") === 0 && str.split(":").length >= 6, "validate");
    var parse2 = /* @__PURE__ */ __name((arn) => {
      const segments = arn.split(":");
      if (segments.length < 6 || segments[0] !== "arn")
        throw new Error("Malformed ARN");
      const [
        ,
        //Skip "arn" literal
        partition,
        service,
        region,
        accountId,
        ...resource
      ] = segments;
      return {
        partition,
        service,
        region,
        accountId,
        resource: resource.join(":")
      };
    }, "parse");
    var build = /* @__PURE__ */ __name((arnObject) => {
      const { partition = "aws", service, region, accountId, resource } = arnObject;
      if ([service, region, accountId, resource].some((segment) => typeof segment !== "string")) {
        throw new Error("Input ARN object is invalid");
      }
      return `arn:${partition}:${service}:${region}:${accountId}:${resource}`;
    }, "build");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-sdk-s3@3.696.0/node_modules/@aws-sdk/middleware-sdk-s3/dist-cjs/index.js
var require_dist_cjs29 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-sdk-s3@3.696.0/node_modules/@aws-sdk/middleware-sdk-s3/dist-cjs/index.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_OPTIONS: () => NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_OPTIONS,
      S3ExpressIdentityCache: () => S3ExpressIdentityCache,
      S3ExpressIdentityCacheEntry: () => S3ExpressIdentityCacheEntry,
      S3ExpressIdentityProviderImpl: () => S3ExpressIdentityProviderImpl,
      SignatureV4S3Express: () => SignatureV4S3Express,
      checkContentLengthHeader: () => checkContentLengthHeader,
      checkContentLengthHeaderMiddlewareOptions: () => checkContentLengthHeaderMiddlewareOptions,
      getCheckContentLengthHeaderPlugin: () => getCheckContentLengthHeaderPlugin,
      getRegionRedirectMiddlewarePlugin: () => getRegionRedirectMiddlewarePlugin,
      getS3ExpiresMiddlewarePlugin: () => getS3ExpiresMiddlewarePlugin,
      getS3ExpressHttpSigningPlugin: () => getS3ExpressHttpSigningPlugin,
      getS3ExpressPlugin: () => getS3ExpressPlugin,
      getThrow200ExceptionsPlugin: () => getThrow200ExceptionsPlugin,
      getValidateBucketNamePlugin: () => getValidateBucketNamePlugin,
      regionRedirectEndpointMiddleware: () => regionRedirectEndpointMiddleware,
      regionRedirectEndpointMiddlewareOptions: () => regionRedirectEndpointMiddlewareOptions,
      regionRedirectMiddleware: () => regionRedirectMiddleware,
      regionRedirectMiddlewareOptions: () => regionRedirectMiddlewareOptions,
      resolveS3Config: () => resolveS3Config,
      s3ExpiresMiddleware: () => s3ExpiresMiddleware,
      s3ExpiresMiddlewareOptions: () => s3ExpiresMiddlewareOptions,
      s3ExpressHttpSigningMiddleware: () => s3ExpressHttpSigningMiddleware,
      s3ExpressHttpSigningMiddlewareOptions: () => s3ExpressHttpSigningMiddlewareOptions,
      s3ExpressMiddleware: () => s3ExpressMiddleware,
      s3ExpressMiddlewareOptions: () => s3ExpressMiddlewareOptions,
      throw200ExceptionsMiddleware: () => throw200ExceptionsMiddleware,
      throw200ExceptionsMiddlewareOptions: () => throw200ExceptionsMiddlewareOptions,
      validateBucketNameMiddleware: () => validateBucketNameMiddleware,
      validateBucketNameMiddlewareOptions: () => validateBucketNameMiddlewareOptions
    });
    module.exports = __toCommonJS2(src_exports);
    var import_protocol_http8 = require_dist_cjs2();
    var import_smithy_client4 = require_dist_cjs19();
    var CONTENT_LENGTH_HEADER = "content-length";
    function checkContentLengthHeader() {
      return (next, context) => async (args) => {
        var _a;
        const { request } = args;
        if (import_protocol_http8.HttpRequest.isInstance(request)) {
          if (!(CONTENT_LENGTH_HEADER in request.headers)) {
            const message = `Are you using a Stream of unknown length as the Body of a PutObject request? Consider using Upload instead from @aws-sdk/lib-storage.`;
            if (typeof ((_a = context == null ? void 0 : context.logger) == null ? void 0 : _a.warn) === "function" && !(context.logger instanceof import_smithy_client4.NoOpLogger)) {
              context.logger.warn(message);
            } else {
              console.warn(message);
            }
          }
        }
        return next({ ...args });
      };
    }
    __name(checkContentLengthHeader, "checkContentLengthHeader");
    var checkContentLengthHeaderMiddlewareOptions = {
      step: "finalizeRequest",
      tags: ["CHECK_CONTENT_LENGTH_HEADER"],
      name: "getCheckContentLengthHeaderPlugin",
      override: true
    };
    var getCheckContentLengthHeaderPlugin = /* @__PURE__ */ __name((unused) => ({
      applyToStack: (clientStack) => {
        clientStack.add(checkContentLengthHeader(), checkContentLengthHeaderMiddlewareOptions);
      }
    }), "getCheckContentLengthHeaderPlugin");
    var regionRedirectEndpointMiddleware = /* @__PURE__ */ __name((config) => {
      return (next, context) => async (args) => {
        const originalRegion = await config.region();
        const regionProviderRef = config.region;
        let unlock = /* @__PURE__ */ __name(() => {
        }, "unlock");
        if (context.__s3RegionRedirect) {
          Object.defineProperty(config, "region", {
            writable: false,
            value: async () => {
              return context.__s3RegionRedirect;
            }
          });
          unlock = /* @__PURE__ */ __name(() => Object.defineProperty(config, "region", {
            writable: true,
            value: regionProviderRef
          }), "unlock");
        }
        try {
          const result = await next(args);
          if (context.__s3RegionRedirect) {
            unlock();
            const region = await config.region();
            if (originalRegion !== region) {
              throw new Error("Region was not restored following S3 region redirect.");
            }
          }
          return result;
        } catch (e) {
          unlock();
          throw e;
        }
      };
    }, "regionRedirectEndpointMiddleware");
    var regionRedirectEndpointMiddlewareOptions = {
      tags: ["REGION_REDIRECT", "S3"],
      name: "regionRedirectEndpointMiddleware",
      override: true,
      relation: "before",
      toMiddleware: "endpointV2Middleware"
    };
    function regionRedirectMiddleware(clientConfig) {
      return (next, context) => async (args) => {
        var _a, _b, _c;
        try {
          return await next(args);
        } catch (err) {
          if (clientConfig.followRegionRedirects) {
            if (((_a = err == null ? void 0 : err.$metadata) == null ? void 0 : _a.httpStatusCode) === 301 || // err.name === "PermanentRedirect" && --> removing the error name check, as that allows for HEAD operations (which have the 301 status code, but not the same error name) to be covered for region redirection as well
            ((_b = err == null ? void 0 : err.$metadata) == null ? void 0 : _b.httpStatusCode) === 400 && (err == null ? void 0 : err.name) === "IllegalLocationConstraintException") {
              try {
                const actualRegion = err.$response.headers["x-amz-bucket-region"];
                (_c = context.logger) == null ? void 0 : _c.debug(`Redirecting from ${await clientConfig.region()} to ${actualRegion}`);
                context.__s3RegionRedirect = actualRegion;
              } catch (e) {
                throw new Error("Region redirect failed: " + e);
              }
              return next(args);
            }
          }
          throw err;
        }
      };
    }
    __name(regionRedirectMiddleware, "regionRedirectMiddleware");
    var regionRedirectMiddlewareOptions = {
      step: "initialize",
      tags: ["REGION_REDIRECT", "S3"],
      name: "regionRedirectMiddleware",
      override: true
    };
    var getRegionRedirectMiddlewarePlugin = /* @__PURE__ */ __name((clientConfig) => ({
      applyToStack: (clientStack) => {
        clientStack.add(regionRedirectMiddleware(clientConfig), regionRedirectMiddlewareOptions);
        clientStack.addRelativeTo(regionRedirectEndpointMiddleware(clientConfig), regionRedirectEndpointMiddlewareOptions);
      }
    }), "getRegionRedirectMiddlewarePlugin");
    var s3ExpiresMiddleware = /* @__PURE__ */ __name((config) => {
      return (next, context) => async (args) => {
        var _a;
        const result = await next(args);
        const { response } = result;
        if (import_protocol_http8.HttpResponse.isInstance(response)) {
          if (response.headers.expires) {
            response.headers.expiresstring = response.headers.expires;
            try {
              (0, import_smithy_client4.parseRfc7231DateTime)(response.headers.expires);
            } catch (e) {
              (_a = context.logger) == null ? void 0 : _a.warn(
                `AWS SDK Warning for ${context.clientName}::${context.commandName} response parsing (${response.headers.expires}): ${e}`
              );
              delete response.headers.expires;
            }
          }
        }
        return result;
      };
    }, "s3ExpiresMiddleware");
    var s3ExpiresMiddlewareOptions = {
      tags: ["S3"],
      name: "s3ExpiresMiddleware",
      override: true,
      relation: "after",
      toMiddleware: "deserializerMiddleware"
    };
    var getS3ExpiresMiddlewarePlugin = /* @__PURE__ */ __name((clientConfig) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(s3ExpiresMiddleware(clientConfig), s3ExpiresMiddlewareOptions);
      }
    }), "getS3ExpiresMiddlewarePlugin");
    var _S3ExpressIdentityCache = class _S3ExpressIdentityCache2 {
      constructor(data = {}) {
        this.data = data;
        this.lastPurgeTime = Date.now();
      }
      get(key) {
        const entry = this.data[key];
        if (!entry) {
          return;
        }
        return entry;
      }
      set(key, entry) {
        this.data[key] = entry;
        return entry;
      }
      delete(key) {
        delete this.data[key];
      }
      async purgeExpired() {
        const now = Date.now();
        if (this.lastPurgeTime + _S3ExpressIdentityCache2.EXPIRED_CREDENTIAL_PURGE_INTERVAL_MS > now) {
          return;
        }
        for (const key in this.data) {
          const entry = this.data[key];
          if (!entry.isRefreshing) {
            const credential = await entry.identity;
            if (credential.expiration) {
              if (credential.expiration.getTime() < now) {
                delete this.data[key];
              }
            }
          }
        }
      }
    };
    __name(_S3ExpressIdentityCache, "S3ExpressIdentityCache");
    _S3ExpressIdentityCache.EXPIRED_CREDENTIAL_PURGE_INTERVAL_MS = 3e4;
    var S3ExpressIdentityCache = _S3ExpressIdentityCache;
    var _S3ExpressIdentityCacheEntry = class _S3ExpressIdentityCacheEntry {
      /**
       * @param identity - stored identity.
       * @param accessed - timestamp of last access in epoch ms.
       * @param isRefreshing - this key is currently in the process of being refreshed (background).
       */
      constructor(_identity, isRefreshing = false, accessed = Date.now()) {
        this._identity = _identity;
        this.isRefreshing = isRefreshing;
        this.accessed = accessed;
      }
      get identity() {
        this.accessed = Date.now();
        return this._identity;
      }
    };
    __name(_S3ExpressIdentityCacheEntry, "S3ExpressIdentityCacheEntry");
    var S3ExpressIdentityCacheEntry = _S3ExpressIdentityCacheEntry;
    var _S3ExpressIdentityProviderImpl = class _S3ExpressIdentityProviderImpl2 {
      constructor(createSessionFn, cache = new S3ExpressIdentityCache()) {
        this.createSessionFn = createSessionFn;
        this.cache = cache;
      }
      async getS3ExpressIdentity(awsIdentity, identityProperties) {
        const key = identityProperties.Bucket;
        const { cache } = this;
        const entry = cache.get(key);
        if (entry) {
          return entry.identity.then((identity) => {
            var _a, _b;
            const isExpired = (((_a = identity.expiration) == null ? void 0 : _a.getTime()) ?? 0) < Date.now();
            if (isExpired) {
              return cache.set(key, new S3ExpressIdentityCacheEntry(this.getIdentity(key))).identity;
            }
            const isExpiringSoon = (((_b = identity.expiration) == null ? void 0 : _b.getTime()) ?? 0) < Date.now() + _S3ExpressIdentityProviderImpl2.REFRESH_WINDOW_MS;
            if (isExpiringSoon && !entry.isRefreshing) {
              entry.isRefreshing = true;
              this.getIdentity(key).then((id) => {
                cache.set(key, new S3ExpressIdentityCacheEntry(Promise.resolve(id)));
              });
            }
            return identity;
          });
        }
        return cache.set(key, new S3ExpressIdentityCacheEntry(this.getIdentity(key))).identity;
      }
      async getIdentity(key) {
        var _a, _b;
        await this.cache.purgeExpired().catch((error) => {
          console.warn("Error while clearing expired entries in S3ExpressIdentityCache: \n" + error);
        });
        const session = await this.createSessionFn(key);
        if (!((_a = session.Credentials) == null ? void 0 : _a.AccessKeyId) || !((_b = session.Credentials) == null ? void 0 : _b.SecretAccessKey)) {
          throw new Error("s3#createSession response credential missing AccessKeyId or SecretAccessKey.");
        }
        const identity = {
          accessKeyId: session.Credentials.AccessKeyId,
          secretAccessKey: session.Credentials.SecretAccessKey,
          sessionToken: session.Credentials.SessionToken,
          expiration: session.Credentials.Expiration ? new Date(session.Credentials.Expiration) : void 0
        };
        return identity;
      }
    };
    __name(_S3ExpressIdentityProviderImpl, "S3ExpressIdentityProviderImpl");
    _S3ExpressIdentityProviderImpl.REFRESH_WINDOW_MS = 6e4;
    var S3ExpressIdentityProviderImpl = _S3ExpressIdentityProviderImpl;
    var import_signature_v42 = require_dist_cjs17();
    var import_util_config_provider = require_dist_cjs27();
    var S3_EXPRESS_BUCKET_TYPE = "Directory";
    var S3_EXPRESS_BACKEND = "S3Express";
    var S3_EXPRESS_AUTH_SCHEME = "sigv4-s3express";
    var SESSION_TOKEN_QUERY_PARAM = "X-Amz-S3session-Token";
    var SESSION_TOKEN_HEADER = SESSION_TOKEN_QUERY_PARAM.toLowerCase();
    var NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_ENV_NAME = "AWS_S3_DISABLE_EXPRESS_SESSION_AUTH";
    var NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_INI_NAME = "s3_disable_express_session_auth";
    var NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_OPTIONS = {
      environmentVariableSelector: (env) => (0, import_util_config_provider.booleanSelector)(env, NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_ENV_NAME, import_util_config_provider.SelectorType.ENV),
      configFileSelector: (profile) => (0, import_util_config_provider.booleanSelector)(profile, NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_INI_NAME, import_util_config_provider.SelectorType.CONFIG),
      default: false
    };
    var _SignatureV4S3Express = class _SignatureV4S3Express extends import_signature_v42.SignatureV4 {
      /**
       * Signs with alternate provided credentials instead of those provided in the
       * constructor.
       *
       * Additionally omits the credential sessionToken and assigns it to the
       * alternate header field for S3 Express.
       */
      async signWithCredentials(requestToSign, credentials, options) {
        const credentialsWithoutSessionToken = getCredentialsWithoutSessionToken(credentials);
        requestToSign.headers[SESSION_TOKEN_HEADER] = credentials.sessionToken;
        const privateAccess = this;
        setSingleOverride(privateAccess, credentialsWithoutSessionToken);
        return privateAccess.signRequest(requestToSign, options ?? {});
      }
      /**
       * Similar to {@link SignatureV4S3Express#signWithCredentials} but for presigning.
       */
      async presignWithCredentials(requestToSign, credentials, options) {
        const credentialsWithoutSessionToken = getCredentialsWithoutSessionToken(credentials);
        delete requestToSign.headers[SESSION_TOKEN_HEADER];
        requestToSign.headers[SESSION_TOKEN_QUERY_PARAM] = credentials.sessionToken;
        requestToSign.query = requestToSign.query ?? {};
        requestToSign.query[SESSION_TOKEN_QUERY_PARAM] = credentials.sessionToken;
        const privateAccess = this;
        setSingleOverride(privateAccess, credentialsWithoutSessionToken);
        return this.presign(requestToSign, options);
      }
    };
    __name(_SignatureV4S3Express, "SignatureV4S3Express");
    var SignatureV4S3Express = _SignatureV4S3Express;
    function getCredentialsWithoutSessionToken(credentials) {
      const credentialsWithoutSessionToken = {
        accessKeyId: credentials.accessKeyId,
        secretAccessKey: credentials.secretAccessKey,
        expiration: credentials.expiration
      };
      return credentialsWithoutSessionToken;
    }
    __name(getCredentialsWithoutSessionToken, "getCredentialsWithoutSessionToken");
    function setSingleOverride(privateAccess, credentialsWithoutSessionToken) {
      const id = setTimeout(() => {
        throw new Error("SignatureV4S3Express credential override was created but not called.");
      }, 10);
      const currentCredentialProvider = privateAccess.credentialProvider;
      const overrideCredentialsProviderOnce = /* @__PURE__ */ __name(() => {
        clearTimeout(id);
        privateAccess.credentialProvider = currentCredentialProvider;
        return Promise.resolve(credentialsWithoutSessionToken);
      }, "overrideCredentialsProviderOnce");
      privateAccess.credentialProvider = overrideCredentialsProviderOnce;
    }
    __name(setSingleOverride, "setSingleOverride");
    var import_core3 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var s3ExpressMiddleware = /* @__PURE__ */ __name((options) => {
      return (next, context) => async (args) => {
        var _a, _b, _c, _d, _e;
        if (context.endpointV2) {
          const endpoint = context.endpointV2;
          const isS3ExpressAuth = ((_c = (_b = (_a = endpoint.properties) == null ? void 0 : _a.authSchemes) == null ? void 0 : _b[0]) == null ? void 0 : _c.name) === S3_EXPRESS_AUTH_SCHEME;
          const isS3ExpressBucket = ((_d = endpoint.properties) == null ? void 0 : _d.backend) === S3_EXPRESS_BACKEND || ((_e = endpoint.properties) == null ? void 0 : _e.bucketType) === S3_EXPRESS_BUCKET_TYPE;
          if (isS3ExpressBucket) {
            (0, import_core3.setFeature)(context, "S3_EXPRESS_BUCKET", "J");
            context.isS3ExpressBucket = true;
          }
          if (isS3ExpressAuth) {
            const requestBucket = args.input.Bucket;
            if (requestBucket) {
              const s3ExpressIdentity = await options.s3ExpressIdentityProvider.getS3ExpressIdentity(
                await options.credentials(),
                {
                  Bucket: requestBucket
                }
              );
              context.s3ExpressIdentity = s3ExpressIdentity;
              if (import_protocol_http8.HttpRequest.isInstance(args.request) && s3ExpressIdentity.sessionToken) {
                args.request.headers[SESSION_TOKEN_HEADER] = s3ExpressIdentity.sessionToken;
              }
            }
          }
        }
        return next(args);
      };
    }, "s3ExpressMiddleware");
    var s3ExpressMiddlewareOptions = {
      name: "s3ExpressMiddleware",
      step: "build",
      tags: ["S3", "S3_EXPRESS"],
      override: true
    };
    var getS3ExpressPlugin = /* @__PURE__ */ __name((options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(s3ExpressMiddleware(options), s3ExpressMiddlewareOptions);
      }
    }), "getS3ExpressPlugin");
    var import_core22 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var import_util_middleware3 = require_dist_cjs4();
    var signS3Express = /* @__PURE__ */ __name(async (s3ExpressIdentity, signingOptions, request, sigV4MultiRegionSigner) => {
      const signedRequest = await sigV4MultiRegionSigner.signWithCredentials(request, s3ExpressIdentity, {});
      if (signedRequest.headers["X-Amz-Security-Token"] || signedRequest.headers["x-amz-security-token"]) {
        throw new Error("X-Amz-Security-Token must not be set for s3-express requests.");
      }
      return signedRequest;
    }, "signS3Express");
    var defaultErrorHandler2 = /* @__PURE__ */ __name((signingProperties) => (error) => {
      throw error;
    }, "defaultErrorHandler");
    var defaultSuccessHandler2 = /* @__PURE__ */ __name((httpResponse, signingProperties) => {
    }, "defaultSuccessHandler");
    var s3ExpressHttpSigningMiddlewareOptions = import_core22.httpSigningMiddlewareOptions;
    var s3ExpressHttpSigningMiddleware = /* @__PURE__ */ __name((config) => (next, context) => async (args) => {
      if (!import_protocol_http8.HttpRequest.isInstance(args.request)) {
        return next(args);
      }
      const smithyContext = (0, import_util_middleware3.getSmithyContext)(context);
      const scheme = smithyContext.selectedHttpAuthScheme;
      if (!scheme) {
        throw new Error(`No HttpAuthScheme was selected: unable to sign request`);
      }
      const {
        httpAuthOption: { signingProperties = {} },
        identity,
        signer
      } = scheme;
      let request;
      if (context.s3ExpressIdentity) {
        request = await signS3Express(
          context.s3ExpressIdentity,
          signingProperties,
          args.request,
          await config.signer()
        );
      } else {
        request = await signer.sign(args.request, identity, signingProperties);
      }
      const output = await next({
        ...args,
        request
      }).catch((signer.errorHandler || defaultErrorHandler2)(signingProperties));
      (signer.successHandler || defaultSuccessHandler2)(output.response, signingProperties);
      return output;
    }, "s3ExpressHttpSigningMiddleware");
    var getS3ExpressHttpSigningPlugin = /* @__PURE__ */ __name((config) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(
          s3ExpressHttpSigningMiddleware(config),
          import_core22.httpSigningMiddlewareOptions
        );
      }
    }), "getS3ExpressHttpSigningPlugin");
    var resolveS3Config = /* @__PURE__ */ __name((input, {
      session
    }) => {
      const [s3ClientProvider, CreateSessionCommandCtor] = session;
      return {
        ...input,
        forcePathStyle: input.forcePathStyle ?? false,
        useAccelerateEndpoint: input.useAccelerateEndpoint ?? false,
        disableMultiregionAccessPoints: input.disableMultiregionAccessPoints ?? false,
        followRegionRedirects: input.followRegionRedirects ?? false,
        s3ExpressIdentityProvider: input.s3ExpressIdentityProvider ?? new S3ExpressIdentityProviderImpl(
          async (key) => s3ClientProvider().send(
            new CreateSessionCommandCtor({
              Bucket: key,
              SessionMode: "ReadWrite"
            })
          )
        ),
        bucketEndpoint: input.bucketEndpoint ?? false
      };
    }, "resolveS3Config");
    var import_util_stream2 = require_dist_cjs15();
    var THROW_IF_EMPTY_BODY = {
      CopyObjectCommand: true,
      UploadPartCopyCommand: true,
      CompleteMultipartUploadCommand: true
    };
    var MAX_BYTES_TO_INSPECT = 3e3;
    var throw200ExceptionsMiddleware = /* @__PURE__ */ __name((config) => (next, context) => async (args) => {
      const result = await next(args);
      const { response } = result;
      if (!import_protocol_http8.HttpResponse.isInstance(response)) {
        return result;
      }
      const { statusCode, body: sourceBody } = response;
      if (statusCode < 200 || statusCode >= 300) {
        return result;
      }
      const isSplittableStream = typeof (sourceBody == null ? void 0 : sourceBody.stream) === "function" || typeof (sourceBody == null ? void 0 : sourceBody.pipe) === "function" || typeof (sourceBody == null ? void 0 : sourceBody.tee) === "function";
      if (!isSplittableStream) {
        return result;
      }
      let bodyCopy = sourceBody;
      let body = sourceBody;
      if (sourceBody && typeof sourceBody === "object" && !(sourceBody instanceof Uint8Array)) {
        [bodyCopy, body] = await (0, import_util_stream2.splitStream)(sourceBody);
      }
      response.body = body;
      const bodyBytes = await collectBody4(bodyCopy, {
        streamCollector: async (stream) => {
          return (0, import_util_stream2.headStream)(stream, MAX_BYTES_TO_INSPECT);
        }
      });
      if (typeof (bodyCopy == null ? void 0 : bodyCopy.destroy) === "function") {
        bodyCopy.destroy();
      }
      const bodyStringTail = config.utf8Encoder(bodyBytes.subarray(bodyBytes.length - 16));
      if (bodyBytes.length === 0 && THROW_IF_EMPTY_BODY[context.commandName]) {
        const err = new Error("S3 aborted request");
        err.name = "InternalError";
        throw err;
      }
      if (bodyStringTail && bodyStringTail.endsWith("</Error>")) {
        response.statusCode = 400;
      }
      return result;
    }, "throw200ExceptionsMiddleware");
    var collectBody4 = /* @__PURE__ */ __name((streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    }, "collectBody");
    var throw200ExceptionsMiddlewareOptions = {
      relation: "after",
      toMiddleware: "deserializerMiddleware",
      tags: ["THROW_200_EXCEPTIONS", "S3"],
      name: "throw200ExceptionsMiddleware",
      override: true
    };
    var getThrow200ExceptionsPlugin = /* @__PURE__ */ __name((config) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(throw200ExceptionsMiddleware(config), throw200ExceptionsMiddlewareOptions);
      }
    }), "getThrow200ExceptionsPlugin");
    var import_util_arn_parser = require_dist_cjs28();
    function bucketEndpointMiddleware(options) {
      return (next, context) => async (args) => {
        var _a, _b, _c, _d;
        if (options.bucketEndpoint) {
          const endpoint = context.endpointV2;
          if (endpoint) {
            const bucket = args.input.Bucket;
            if (typeof bucket === "string") {
              try {
                const bucketEndpointUrl = new URL(bucket);
                context.endpointV2 = {
                  ...endpoint,
                  url: bucketEndpointUrl
                };
              } catch (e) {
                const warning = `@aws-sdk/middleware-sdk-s3: bucketEndpoint=true was set but Bucket=${bucket} could not be parsed as URL.`;
                if (((_b = (_a = context.logger) == null ? void 0 : _a.constructor) == null ? void 0 : _b.name) === "NoOpLogger") {
                  console.warn(warning);
                } else {
                  (_d = (_c = context.logger) == null ? void 0 : _c.warn) == null ? void 0 : _d.call(_c, warning);
                }
                throw e;
              }
            }
          }
        }
        return next(args);
      };
    }
    __name(bucketEndpointMiddleware, "bucketEndpointMiddleware");
    var bucketEndpointMiddlewareOptions = {
      name: "bucketEndpointMiddleware",
      override: true,
      relation: "after",
      toMiddleware: "endpointV2Middleware"
    };
    function validateBucketNameMiddleware({ bucketEndpoint }) {
      return (next) => async (args) => {
        const {
          input: { Bucket }
        } = args;
        if (!bucketEndpoint && typeof Bucket === "string" && !(0, import_util_arn_parser.validate)(Bucket) && Bucket.indexOf("/") >= 0) {
          const err = new Error(`Bucket name shouldn't contain '/', received '${Bucket}'`);
          err.name = "InvalidBucketName";
          throw err;
        }
        return next({ ...args });
      };
    }
    __name(validateBucketNameMiddleware, "validateBucketNameMiddleware");
    var validateBucketNameMiddlewareOptions = {
      step: "initialize",
      tags: ["VALIDATE_BUCKET_NAME"],
      name: "validateBucketNameMiddleware",
      override: true
    };
    var getValidateBucketNamePlugin = /* @__PURE__ */ __name((options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(validateBucketNameMiddleware(options), validateBucketNameMiddlewareOptions);
        clientStack.addRelativeTo(bucketEndpointMiddleware(options), bucketEndpointMiddlewareOptions);
      }
    }), "getValidateBucketNamePlugin");
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.1.7/node_modules/@smithy/util-endpoints/dist-cjs/index.js
var require_dist_cjs30 = __commonJS({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.1.7/node_modules/@smithy/util-endpoints/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      EndpointCache: () => EndpointCache,
      EndpointError: () => EndpointError2,
      customEndpointFunctions: () => customEndpointFunctions,
      isIpAddress: () => isIpAddress2,
      isValidHostLabel: () => isValidHostLabel,
      resolveEndpoint: () => resolveEndpoint2
    });
    module.exports = __toCommonJS2(src_exports);
    var _EndpointCache = class _EndpointCache {
      /**
       * @param [size] - desired average maximum capacity. A buffer of 10 additional keys will be allowed
       *                 before keys are dropped.
       * @param [params] - list of params to consider as part of the cache key.
       *
       * If the params list is not populated, no caching will happen.
       * This may be out of order depending on how the object is created and arrives to this class.
       */
      constructor({ size, params }) {
        this.data = /* @__PURE__ */ new Map();
        this.parameters = [];
        this.capacity = size ?? 50;
        if (params) {
          this.parameters = params;
        }
      }
      /**
       * @param endpointParams - query for endpoint.
       * @param resolver - provider of the value if not present.
       * @returns endpoint corresponding to the query.
       */
      get(endpointParams, resolver) {
        const key = this.hash(endpointParams);
        if (key === false) {
          return resolver();
        }
        if (!this.data.has(key)) {
          if (this.data.size > this.capacity + 10) {
            const keys = this.data.keys();
            let i = 0;
            while (true) {
              const { value, done } = keys.next();
              this.data.delete(value);
              if (done || ++i > 10) {
                break;
              }
            }
          }
          this.data.set(key, resolver());
        }
        return this.data.get(key);
      }
      size() {
        return this.data.size;
      }
      /**
       * @returns cache key or false if not cachable.
       */
      hash(endpointParams) {
        let buffer = "";
        const { parameters } = this;
        if (parameters.length === 0) {
          return false;
        }
        for (const param of parameters) {
          const val2 = String(endpointParams[param] ?? "");
          if (val2.includes("|;")) {
            return false;
          }
          buffer += val2 + "|;";
        }
        return buffer;
      }
    };
    __name(_EndpointCache, "EndpointCache");
    var EndpointCache = _EndpointCache;
    var IP_V4_REGEX = new RegExp(
      `^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$`
    );
    var isIpAddress2 = /* @__PURE__ */ __name((value) => IP_V4_REGEX.test(value) || value.startsWith("[") && value.endsWith("]"), "isIpAddress");
    var VALID_HOST_LABEL_REGEX = new RegExp(`^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$`);
    var isValidHostLabel = /* @__PURE__ */ __name((value, allowSubDomains = false) => {
      if (!allowSubDomains) {
        return VALID_HOST_LABEL_REGEX.test(value);
      }
      const labels = value.split(".");
      for (const label of labels) {
        if (!isValidHostLabel(label)) {
          return false;
        }
      }
      return true;
    }, "isValidHostLabel");
    var customEndpointFunctions = {};
    var debugId = "endpoints";
    function toDebugString(input) {
      if (typeof input !== "object" || input == null) {
        return input;
      }
      if ("ref" in input) {
        return `$${toDebugString(input.ref)}`;
      }
      if ("fn" in input) {
        return `${input.fn}(${(input.argv || []).map(toDebugString).join(", ")})`;
      }
      return JSON.stringify(input, null, 2);
    }
    __name(toDebugString, "toDebugString");
    var _EndpointError = class _EndpointError extends Error {
      constructor(message) {
        super(message);
        this.name = "EndpointError";
      }
    };
    __name(_EndpointError, "EndpointError");
    var EndpointError2 = _EndpointError;
    var booleanEquals = /* @__PURE__ */ __name((value1, value2) => value1 === value2, "booleanEquals");
    var getAttrPathList = /* @__PURE__ */ __name((path) => {
      const parts = path.split(".");
      const pathList = [];
      for (const part of parts) {
        const squareBracketIndex = part.indexOf("[");
        if (squareBracketIndex !== -1) {
          if (part.indexOf("]") !== part.length - 1) {
            throw new EndpointError2(`Path: '${path}' does not end with ']'`);
          }
          const arrayIndex = part.slice(squareBracketIndex + 1, -1);
          if (Number.isNaN(parseInt(arrayIndex))) {
            throw new EndpointError2(`Invalid array index: '${arrayIndex}' in path: '${path}'`);
          }
          if (squareBracketIndex !== 0) {
            pathList.push(part.slice(0, squareBracketIndex));
          }
          pathList.push(arrayIndex);
        } else {
          pathList.push(part);
        }
      }
      return pathList;
    }, "getAttrPathList");
    var getAttr = /* @__PURE__ */ __name((value, path) => getAttrPathList(path).reduce((acc, index) => {
      if (typeof acc !== "object") {
        throw new EndpointError2(`Index '${index}' in '${path}' not found in '${JSON.stringify(value)}'`);
      } else if (Array.isArray(acc)) {
        return acc[parseInt(index)];
      }
      return acc[index];
    }, value), "getAttr");
    var isSet = /* @__PURE__ */ __name((value) => value != null, "isSet");
    var not = /* @__PURE__ */ __name((value) => !value, "not");
    var import_types32 = require_dist_cjs();
    var DEFAULT_PORTS = {
      [import_types32.EndpointURLScheme.HTTP]: 80,
      [import_types32.EndpointURLScheme.HTTPS]: 443
    };
    var parseURL = /* @__PURE__ */ __name((value) => {
      const whatwgURL = (() => {
        try {
          if (value instanceof URL) {
            return value;
          }
          if (typeof value === "object" && "hostname" in value) {
            const { hostname: hostname2, port, protocol: protocol2 = "", path = "", query = {} } = value;
            const url = new URL(`${protocol2}//${hostname2}${port ? `:${port}` : ""}${path}`);
            url.search = Object.entries(query).map(([k, v]) => `${k}=${v}`).join("&");
            return url;
          }
          return new URL(value);
        } catch (error) {
          return null;
        }
      })();
      if (!whatwgURL) {
        console.error(`Unable to parse ${JSON.stringify(value)} as a whatwg URL.`);
        return null;
      }
      const urlString = whatwgURL.href;
      const { host, hostname, pathname, protocol, search } = whatwgURL;
      if (search) {
        return null;
      }
      const scheme = protocol.slice(0, -1);
      if (!Object.values(import_types32.EndpointURLScheme).includes(scheme)) {
        return null;
      }
      const isIp = isIpAddress2(hostname);
      const inputContainsDefaultPort = urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) || typeof value === "string" && value.includes(`${host}:${DEFAULT_PORTS[scheme]}`);
      const authority = `${host}${inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``}`;
      return {
        scheme,
        authority,
        path: pathname,
        normalizedPath: pathname.endsWith("/") ? pathname : `${pathname}/`,
        isIp
      };
    }, "parseURL");
    var stringEquals = /* @__PURE__ */ __name((value1, value2) => value1 === value2, "stringEquals");
    var substring = /* @__PURE__ */ __name((input, start, stop, reverse) => {
      if (start >= stop || input.length < stop) {
        return null;
      }
      if (!reverse) {
        return input.substring(start, stop);
      }
      return input.substring(input.length - stop, input.length - start);
    }, "substring");
    var uriEncode = /* @__PURE__ */ __name((value) => encodeURIComponent(value).replace(/[!*'()]/g, (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`), "uriEncode");
    var endpointFunctions = {
      booleanEquals,
      getAttr,
      isSet,
      isValidHostLabel,
      not,
      parseURL,
      stringEquals,
      substring,
      uriEncode
    };
    var evaluateTemplate = /* @__PURE__ */ __name((template, options) => {
      const evaluatedTemplateArr = [];
      const templateContext = {
        ...options.endpointParams,
        ...options.referenceRecord
      };
      let currentIndex = 0;
      while (currentIndex < template.length) {
        const openingBraceIndex = template.indexOf("{", currentIndex);
        if (openingBraceIndex === -1) {
          evaluatedTemplateArr.push(template.slice(currentIndex));
          break;
        }
        evaluatedTemplateArr.push(template.slice(currentIndex, openingBraceIndex));
        const closingBraceIndex = template.indexOf("}", openingBraceIndex);
        if (closingBraceIndex === -1) {
          evaluatedTemplateArr.push(template.slice(openingBraceIndex));
          break;
        }
        if (template[openingBraceIndex + 1] === "{" && template[closingBraceIndex + 1] === "}") {
          evaluatedTemplateArr.push(template.slice(openingBraceIndex + 1, closingBraceIndex));
          currentIndex = closingBraceIndex + 2;
        }
        const parameterName = template.substring(openingBraceIndex + 1, closingBraceIndex);
        if (parameterName.includes("#")) {
          const [refName, attrName] = parameterName.split("#");
          evaluatedTemplateArr.push(getAttr(templateContext[refName], attrName));
        } else {
          evaluatedTemplateArr.push(templateContext[parameterName]);
        }
        currentIndex = closingBraceIndex + 1;
      }
      return evaluatedTemplateArr.join("");
    }, "evaluateTemplate");
    var getReferenceValue = /* @__PURE__ */ __name(({ ref }, options) => {
      const referenceRecord = {
        ...options.endpointParams,
        ...options.referenceRecord
      };
      return referenceRecord[ref];
    }, "getReferenceValue");
    var evaluateExpression = /* @__PURE__ */ __name((obj, keyName, options) => {
      if (typeof obj === "string") {
        return evaluateTemplate(obj, options);
      } else if (obj["fn"]) {
        return callFunction(obj, options);
      } else if (obj["ref"]) {
        return getReferenceValue(obj, options);
      }
      throw new EndpointError2(`'${keyName}': ${String(obj)} is not a string, function or reference.`);
    }, "evaluateExpression");
    var callFunction = /* @__PURE__ */ __name(({ fn, argv }, options) => {
      const evaluatedArgs = argv.map(
        (arg) => ["boolean", "number"].includes(typeof arg) ? arg : evaluateExpression(arg, "arg", options)
      );
      const fnSegments = fn.split(".");
      if (fnSegments[0] in customEndpointFunctions && fnSegments[1] != null) {
        return customEndpointFunctions[fnSegments[0]][fnSegments[1]](...evaluatedArgs);
      }
      return endpointFunctions[fn](...evaluatedArgs);
    }, "callFunction");
    var evaluateCondition = /* @__PURE__ */ __name(({ assign, ...fnArgs }, options) => {
      var _a, _b;
      if (assign && assign in options.referenceRecord) {
        throw new EndpointError2(`'${assign}' is already defined in Reference Record.`);
      }
      const value = callFunction(fnArgs, options);
      (_b = (_a = options.logger) == null ? void 0 : _a.debug) == null ? void 0 : _b.call(_a, `${debugId} evaluateCondition: ${toDebugString(fnArgs)} = ${toDebugString(value)}`);
      return {
        result: value === "" ? true : !!value,
        ...assign != null && { toAssign: { name: assign, value } }
      };
    }, "evaluateCondition");
    var evaluateConditions = /* @__PURE__ */ __name((conditions = [], options) => {
      var _a, _b;
      const conditionsReferenceRecord = {};
      for (const condition of conditions) {
        const { result, toAssign } = evaluateCondition(condition, {
          ...options,
          referenceRecord: {
            ...options.referenceRecord,
            ...conditionsReferenceRecord
          }
        });
        if (!result) {
          return { result };
        }
        if (toAssign) {
          conditionsReferenceRecord[toAssign.name] = toAssign.value;
          (_b = (_a = options.logger) == null ? void 0 : _a.debug) == null ? void 0 : _b.call(_a, `${debugId} assign: ${toAssign.name} := ${toDebugString(toAssign.value)}`);
        }
      }
      return { result: true, referenceRecord: conditionsReferenceRecord };
    }, "evaluateConditions");
    var getEndpointHeaders = /* @__PURE__ */ __name((headers, options) => Object.entries(headers).reduce(
      (acc, [headerKey, headerVal]) => ({
        ...acc,
        [headerKey]: headerVal.map((headerValEntry) => {
          const processedExpr = evaluateExpression(headerValEntry, "Header value entry", options);
          if (typeof processedExpr !== "string") {
            throw new EndpointError2(`Header '${headerKey}' value '${processedExpr}' is not a string`);
          }
          return processedExpr;
        })
      }),
      {}
    ), "getEndpointHeaders");
    var getEndpointProperty = /* @__PURE__ */ __name((property, options) => {
      if (Array.isArray(property)) {
        return property.map((propertyEntry) => getEndpointProperty(propertyEntry, options));
      }
      switch (typeof property) {
        case "string":
          return evaluateTemplate(property, options);
        case "object":
          if (property === null) {
            throw new EndpointError2(`Unexpected endpoint property: ${property}`);
          }
          return getEndpointProperties(property, options);
        case "boolean":
          return property;
        default:
          throw new EndpointError2(`Unexpected endpoint property type: ${typeof property}`);
      }
    }, "getEndpointProperty");
    var getEndpointProperties = /* @__PURE__ */ __name((properties, options) => Object.entries(properties).reduce(
      (acc, [propertyKey, propertyVal]) => ({
        ...acc,
        [propertyKey]: getEndpointProperty(propertyVal, options)
      }),
      {}
    ), "getEndpointProperties");
    var getEndpointUrl = /* @__PURE__ */ __name((endpointUrl, options) => {
      const expression = evaluateExpression(endpointUrl, "Endpoint URL", options);
      if (typeof expression === "string") {
        try {
          return new URL(expression);
        } catch (error) {
          console.error(`Failed to construct URL with ${expression}`, error);
          throw error;
        }
      }
      throw new EndpointError2(`Endpoint URL must be a string, got ${typeof expression}`);
    }, "getEndpointUrl");
    var evaluateEndpointRule = /* @__PURE__ */ __name((endpointRule, options) => {
      var _a, _b;
      const { conditions, endpoint } = endpointRule;
      const { result, referenceRecord } = evaluateConditions(conditions, options);
      if (!result) {
        return;
      }
      const endpointRuleOptions = {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      };
      const { url, properties, headers } = endpoint;
      (_b = (_a = options.logger) == null ? void 0 : _a.debug) == null ? void 0 : _b.call(_a, `${debugId} Resolving endpoint from template: ${toDebugString(endpoint)}`);
      return {
        ...headers != void 0 && {
          headers: getEndpointHeaders(headers, endpointRuleOptions)
        },
        ...properties != void 0 && {
          properties: getEndpointProperties(properties, endpointRuleOptions)
        },
        url: getEndpointUrl(url, endpointRuleOptions)
      };
    }, "evaluateEndpointRule");
    var evaluateErrorRule = /* @__PURE__ */ __name((errorRule, options) => {
      const { conditions, error } = errorRule;
      const { result, referenceRecord } = evaluateConditions(conditions, options);
      if (!result) {
        return;
      }
      throw new EndpointError2(
        evaluateExpression(error, "Error", {
          ...options,
          referenceRecord: { ...options.referenceRecord, ...referenceRecord }
        })
      );
    }, "evaluateErrorRule");
    var evaluateTreeRule = /* @__PURE__ */ __name((treeRule, options) => {
      const { conditions, rules } = treeRule;
      const { result, referenceRecord } = evaluateConditions(conditions, options);
      if (!result) {
        return;
      }
      return evaluateRules(rules, {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      });
    }, "evaluateTreeRule");
    var evaluateRules = /* @__PURE__ */ __name((rules, options) => {
      for (const rule of rules) {
        if (rule.type === "endpoint") {
          const endpointOrUndefined = evaluateEndpointRule(rule, options);
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else if (rule.type === "error") {
          evaluateErrorRule(rule, options);
        } else if (rule.type === "tree") {
          const endpointOrUndefined = evaluateTreeRule(rule, options);
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else {
          throw new EndpointError2(`Unknown endpoint rule: ${rule}`);
        }
      }
      throw new EndpointError2(`Rules evaluation failed`);
    }, "evaluateRules");
    var resolveEndpoint2 = /* @__PURE__ */ __name((ruleSetObject, options) => {
      var _a, _b, _c, _d;
      const { endpointParams, logger: logger2 } = options;
      const { parameters, rules } = ruleSetObject;
      (_b = (_a = options.logger) == null ? void 0 : _a.debug) == null ? void 0 : _b.call(_a, `${debugId} Initial EndpointParams: ${toDebugString(endpointParams)}`);
      const paramsWithDefault = Object.entries(parameters).filter(([, v]) => v.default != null).map(([k, v]) => [k, v.default]);
      if (paramsWithDefault.length > 0) {
        for (const [paramKey, paramDefaultValue] of paramsWithDefault) {
          endpointParams[paramKey] = endpointParams[paramKey] ?? paramDefaultValue;
        }
      }
      const requiredParams = Object.entries(parameters).filter(([, v]) => v.required).map(([k]) => k);
      for (const requiredParam of requiredParams) {
        if (endpointParams[requiredParam] == null) {
          throw new EndpointError2(`Missing required parameter: '${requiredParam}'`);
        }
      }
      const endpoint = evaluateRules(rules, { endpointParams, logger: logger2, referenceRecord: {} });
      (_d = (_c = options.logger) == null ? void 0 : _c.debug) == null ? void 0 : _d.call(_c, `${debugId} Resolved endpoint: ${toDebugString(endpoint)}`);
      return endpoint;
    }, "resolveEndpoint");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.696.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/index.js
var require_dist_cjs31 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.696.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/index.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      ConditionObject: () => import_util_endpoints.ConditionObject,
      DeprecatedObject: () => import_util_endpoints.DeprecatedObject,
      EndpointError: () => import_util_endpoints.EndpointError,
      EndpointObject: () => import_util_endpoints.EndpointObject,
      EndpointObjectHeaders: () => import_util_endpoints.EndpointObjectHeaders,
      EndpointObjectProperties: () => import_util_endpoints.EndpointObjectProperties,
      EndpointParams: () => import_util_endpoints.EndpointParams,
      EndpointResolverOptions: () => import_util_endpoints.EndpointResolverOptions,
      EndpointRuleObject: () => import_util_endpoints.EndpointRuleObject,
      ErrorRuleObject: () => import_util_endpoints.ErrorRuleObject,
      EvaluateOptions: () => import_util_endpoints.EvaluateOptions,
      Expression: () => import_util_endpoints.Expression,
      FunctionArgv: () => import_util_endpoints.FunctionArgv,
      FunctionObject: () => import_util_endpoints.FunctionObject,
      FunctionReturn: () => import_util_endpoints.FunctionReturn,
      ParameterObject: () => import_util_endpoints.ParameterObject,
      ReferenceObject: () => import_util_endpoints.ReferenceObject,
      ReferenceRecord: () => import_util_endpoints.ReferenceRecord,
      RuleSetObject: () => import_util_endpoints.RuleSetObject,
      RuleSetRules: () => import_util_endpoints.RuleSetRules,
      TreeRuleObject: () => import_util_endpoints.TreeRuleObject,
      awsEndpointFunctions: () => awsEndpointFunctions,
      getUserAgentPrefix: () => getUserAgentPrefix,
      isIpAddress: () => import_util_endpoints.isIpAddress,
      partition: () => partition,
      resolveEndpoint: () => import_util_endpoints.resolveEndpoint,
      setPartitionInfo: () => setPartitionInfo,
      useDefaultPartitionInfo: () => useDefaultPartitionInfo
    });
    module.exports = __toCommonJS2(src_exports);
    var import_util_endpoints = require_dist_cjs30();
    var isVirtualHostableS3Bucket = /* @__PURE__ */ __name((value, allowSubDomains = false) => {
      if (allowSubDomains) {
        for (const label of value.split(".")) {
          if (!isVirtualHostableS3Bucket(label)) {
            return false;
          }
        }
        return true;
      }
      if (!(0, import_util_endpoints.isValidHostLabel)(value)) {
        return false;
      }
      if (value.length < 3 || value.length > 63) {
        return false;
      }
      if (value !== value.toLowerCase()) {
        return false;
      }
      if ((0, import_util_endpoints.isIpAddress)(value)) {
        return false;
      }
      return true;
    }, "isVirtualHostableS3Bucket");
    var ARN_DELIMITER = ":";
    var RESOURCE_DELIMITER = "/";
    var parseArn = /* @__PURE__ */ __name((value) => {
      const segments = value.split(ARN_DELIMITER);
      if (segments.length < 6)
        return null;
      const [arn, partition2, service, region, accountId, ...resourcePath] = segments;
      if (arn !== "arn" || partition2 === "" || service === "" || resourcePath.join(ARN_DELIMITER) === "")
        return null;
      const resourceId = resourcePath.map((resource) => resource.split(RESOURCE_DELIMITER)).flat();
      return {
        partition: partition2,
        service,
        region,
        accountId,
        resourceId
      };
    }, "parseArn");
    var partitions_default = {
      partitions: [{
        id: "aws",
        outputs: {
          dnsSuffix: "amazonaws.com",
          dualStackDnsSuffix: "api.aws",
          implicitGlobalRegion: "us-east-1",
          name: "aws",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^(us|eu|ap|sa|ca|me|af|il|mx)\\-\\w+\\-\\d+$",
        regions: {
          "af-south-1": {
            description: "Africa (Cape Town)"
          },
          "ap-east-1": {
            description: "Asia Pacific (Hong Kong)"
          },
          "ap-northeast-1": {
            description: "Asia Pacific (Tokyo)"
          },
          "ap-northeast-2": {
            description: "Asia Pacific (Seoul)"
          },
          "ap-northeast-3": {
            description: "Asia Pacific (Osaka)"
          },
          "ap-south-1": {
            description: "Asia Pacific (Mumbai)"
          },
          "ap-south-2": {
            description: "Asia Pacific (Hyderabad)"
          },
          "ap-southeast-1": {
            description: "Asia Pacific (Singapore)"
          },
          "ap-southeast-2": {
            description: "Asia Pacific (Sydney)"
          },
          "ap-southeast-3": {
            description: "Asia Pacific (Jakarta)"
          },
          "ap-southeast-4": {
            description: "Asia Pacific (Melbourne)"
          },
          "ap-southeast-5": {
            description: "Asia Pacific (Malaysia)"
          },
          "aws-global": {
            description: "AWS Standard global region"
          },
          "ca-central-1": {
            description: "Canada (Central)"
          },
          "ca-west-1": {
            description: "Canada West (Calgary)"
          },
          "eu-central-1": {
            description: "Europe (Frankfurt)"
          },
          "eu-central-2": {
            description: "Europe (Zurich)"
          },
          "eu-north-1": {
            description: "Europe (Stockholm)"
          },
          "eu-south-1": {
            description: "Europe (Milan)"
          },
          "eu-south-2": {
            description: "Europe (Spain)"
          },
          "eu-west-1": {
            description: "Europe (Ireland)"
          },
          "eu-west-2": {
            description: "Europe (London)"
          },
          "eu-west-3": {
            description: "Europe (Paris)"
          },
          "il-central-1": {
            description: "Israel (Tel Aviv)"
          },
          "me-central-1": {
            description: "Middle East (UAE)"
          },
          "me-south-1": {
            description: "Middle East (Bahrain)"
          },
          "sa-east-1": {
            description: "South America (Sao Paulo)"
          },
          "us-east-1": {
            description: "US East (N. Virginia)"
          },
          "us-east-2": {
            description: "US East (Ohio)"
          },
          "us-west-1": {
            description: "US West (N. California)"
          },
          "us-west-2": {
            description: "US West (Oregon)"
          }
        }
      }, {
        id: "aws-cn",
        outputs: {
          dnsSuffix: "amazonaws.com.cn",
          dualStackDnsSuffix: "api.amazonwebservices.com.cn",
          implicitGlobalRegion: "cn-northwest-1",
          name: "aws-cn",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^cn\\-\\w+\\-\\d+$",
        regions: {
          "aws-cn-global": {
            description: "AWS China global region"
          },
          "cn-north-1": {
            description: "China (Beijing)"
          },
          "cn-northwest-1": {
            description: "China (Ningxia)"
          }
        }
      }, {
        id: "aws-us-gov",
        outputs: {
          dnsSuffix: "amazonaws.com",
          dualStackDnsSuffix: "api.aws",
          implicitGlobalRegion: "us-gov-west-1",
          name: "aws-us-gov",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
        regions: {
          "aws-us-gov-global": {
            description: "AWS GovCloud (US) global region"
          },
          "us-gov-east-1": {
            description: "AWS GovCloud (US-East)"
          },
          "us-gov-west-1": {
            description: "AWS GovCloud (US-West)"
          }
        }
      }, {
        id: "aws-iso",
        outputs: {
          dnsSuffix: "c2s.ic.gov",
          dualStackDnsSuffix: "c2s.ic.gov",
          implicitGlobalRegion: "us-iso-east-1",
          name: "aws-iso",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-global": {
            description: "AWS ISO (US) global region"
          },
          "us-iso-east-1": {
            description: "US ISO East"
          },
          "us-iso-west-1": {
            description: "US ISO WEST"
          }
        }
      }, {
        id: "aws-iso-b",
        outputs: {
          dnsSuffix: "sc2s.sgov.gov",
          dualStackDnsSuffix: "sc2s.sgov.gov",
          implicitGlobalRegion: "us-isob-east-1",
          name: "aws-iso-b",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-b-global": {
            description: "AWS ISOB (US) global region"
          },
          "us-isob-east-1": {
            description: "US ISOB East (Ohio)"
          }
        }
      }, {
        id: "aws-iso-e",
        outputs: {
          dnsSuffix: "cloud.adc-e.uk",
          dualStackDnsSuffix: "cloud.adc-e.uk",
          implicitGlobalRegion: "eu-isoe-west-1",
          name: "aws-iso-e",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^eu\\-isoe\\-\\w+\\-\\d+$",
        regions: {
          "eu-isoe-west-1": {
            description: "EU ISOE West"
          }
        }
      }, {
        id: "aws-iso-f",
        outputs: {
          dnsSuffix: "csp.hci.ic.gov",
          dualStackDnsSuffix: "csp.hci.ic.gov",
          implicitGlobalRegion: "us-isof-south-1",
          name: "aws-iso-f",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-isof\\-\\w+\\-\\d+$",
        regions: {}
      }],
      version: "1.1"
    };
    var selectedPartitionsInfo = partitions_default;
    var selectedUserAgentPrefix = "";
    var partition = /* @__PURE__ */ __name((value) => {
      const { partitions } = selectedPartitionsInfo;
      for (const partition2 of partitions) {
        const { regions, outputs } = partition2;
        for (const [region, regionData] of Object.entries(regions)) {
          if (region === value) {
            return {
              ...outputs,
              ...regionData
            };
          }
        }
      }
      for (const partition2 of partitions) {
        const { regionRegex, outputs } = partition2;
        if (new RegExp(regionRegex).test(value)) {
          return {
            ...outputs
          };
        }
      }
      const DEFAULT_PARTITION = partitions.find((partition2) => partition2.id === "aws");
      if (!DEFAULT_PARTITION) {
        throw new Error(
          "Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist."
        );
      }
      return {
        ...DEFAULT_PARTITION.outputs
      };
    }, "partition");
    var setPartitionInfo = /* @__PURE__ */ __name((partitionsInfo, userAgentPrefix = "") => {
      selectedPartitionsInfo = partitionsInfo;
      selectedUserAgentPrefix = userAgentPrefix;
    }, "setPartitionInfo");
    var useDefaultPartitionInfo = /* @__PURE__ */ __name(() => {
      setPartitionInfo(partitions_default, "");
    }, "useDefaultPartitionInfo");
    var getUserAgentPrefix = /* @__PURE__ */ __name(() => selectedUserAgentPrefix, "getUserAgentPrefix");
    var awsEndpointFunctions = {
      isVirtualHostableS3Bucket,
      parseArn,
      partition
    };
    import_util_endpoints.customEndpointFunctions.aws = awsEndpointFunctions;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.696.0/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js
var require_dist_cjs32 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.696.0/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      DEFAULT_UA_APP_ID: () => DEFAULT_UA_APP_ID,
      getUserAgentMiddlewareOptions: () => getUserAgentMiddlewareOptions,
      getUserAgentPlugin: () => getUserAgentPlugin,
      resolveUserAgentConfig: () => resolveUserAgentConfig,
      userAgentMiddleware: () => userAgentMiddleware
    });
    module.exports = __toCommonJS2(src_exports);
    var import_core3 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var DEFAULT_UA_APP_ID = void 0;
    function isValidUserAgentAppId(appId) {
      if (appId === void 0) {
        return true;
      }
      return typeof appId === "string" && appId.length <= 50;
    }
    __name(isValidUserAgentAppId, "isValidUserAgentAppId");
    function resolveUserAgentConfig(input) {
      const normalizedAppIdProvider = (0, import_core3.normalizeProvider)(input.userAgentAppId ?? DEFAULT_UA_APP_ID);
      return {
        ...input,
        customUserAgent: typeof input.customUserAgent === "string" ? [[input.customUserAgent]] : input.customUserAgent,
        userAgentAppId: async () => {
          var _a, _b;
          const appId = await normalizedAppIdProvider();
          if (!isValidUserAgentAppId(appId)) {
            const logger2 = ((_b = (_a = input.logger) == null ? void 0 : _a.constructor) == null ? void 0 : _b.name) === "NoOpLogger" || !input.logger ? console : input.logger;
            if (typeof appId !== "string") {
              logger2 == null ? void 0 : logger2.warn("userAgentAppId must be a string or undefined.");
            } else if (appId.length > 50) {
              logger2 == null ? void 0 : logger2.warn("The provided userAgentAppId exceeds the maximum length of 50 characters.");
            }
          }
          return appId;
        }
      };
    }
    __name(resolveUserAgentConfig, "resolveUserAgentConfig");
    var import_util_endpoints = require_dist_cjs31();
    var import_protocol_http8 = require_dist_cjs2();
    var import_core22 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var ACCOUNT_ID_ENDPOINT_REGEX = /\d{12}\.ddb/;
    async function checkFeatures(context, config, args) {
      var _a, _b, _c, _d, _e, _f, _g;
      const request = args.request;
      if (((_a = request == null ? void 0 : request.headers) == null ? void 0 : _a["smithy-protocol"]) === "rpc-v2-cbor") {
        (0, import_core22.setFeature)(context, "PROTOCOL_RPC_V2_CBOR", "M");
      }
      if (typeof config.retryStrategy === "function") {
        const retryStrategy = await config.retryStrategy();
        if (typeof retryStrategy.acquireInitialRetryToken === "function") {
          if ((_c = (_b = retryStrategy.constructor) == null ? void 0 : _b.name) == null ? void 0 : _c.includes("Adaptive")) {
            (0, import_core22.setFeature)(context, "RETRY_MODE_ADAPTIVE", "F");
          } else {
            (0, import_core22.setFeature)(context, "RETRY_MODE_STANDARD", "E");
          }
        } else {
          (0, import_core22.setFeature)(context, "RETRY_MODE_LEGACY", "D");
        }
      }
      if (typeof config.accountIdEndpointMode === "function") {
        const endpointV2 = context.endpointV2;
        if (String((_d = endpointV2 == null ? void 0 : endpointV2.url) == null ? void 0 : _d.hostname).match(ACCOUNT_ID_ENDPOINT_REGEX)) {
          (0, import_core22.setFeature)(context, "ACCOUNT_ID_ENDPOINT", "O");
        }
        switch (await ((_e = config.accountIdEndpointMode) == null ? void 0 : _e.call(config))) {
          case "disabled":
            (0, import_core22.setFeature)(context, "ACCOUNT_ID_MODE_DISABLED", "Q");
            break;
          case "preferred":
            (0, import_core22.setFeature)(context, "ACCOUNT_ID_MODE_PREFERRED", "P");
            break;
          case "required":
            (0, import_core22.setFeature)(context, "ACCOUNT_ID_MODE_REQUIRED", "R");
            break;
        }
      }
      const identity = (_g = (_f = context.__smithy_context) == null ? void 0 : _f.selectedHttpAuthScheme) == null ? void 0 : _g.identity;
      if (identity == null ? void 0 : identity.$source) {
        const credentials = identity;
        if (credentials.accountId) {
          (0, import_core22.setFeature)(context, "RESOLVED_ACCOUNT_ID", "T");
        }
        for (const [key, value] of Object.entries(credentials.$source ?? {})) {
          (0, import_core22.setFeature)(context, key, value);
        }
      }
    }
    __name(checkFeatures, "checkFeatures");
    var USER_AGENT = "user-agent";
    var X_AMZ_USER_AGENT = "x-amz-user-agent";
    var SPACE = " ";
    var UA_NAME_SEPARATOR = "/";
    var UA_NAME_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
    var UA_VALUE_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w\#]/g;
    var UA_ESCAPE_CHAR = "-";
    var BYTE_LIMIT = 1024;
    function encodeFeatures(features) {
      let buffer = "";
      for (const key in features) {
        const val2 = features[key];
        if (buffer.length + val2.length + 1 <= BYTE_LIMIT) {
          if (buffer.length) {
            buffer += "," + val2;
          } else {
            buffer += val2;
          }
          continue;
        }
        break;
      }
      return buffer;
    }
    __name(encodeFeatures, "encodeFeatures");
    var userAgentMiddleware = /* @__PURE__ */ __name((options) => (next, context) => async (args) => {
      var _a, _b, _c, _d;
      const { request } = args;
      if (!import_protocol_http8.HttpRequest.isInstance(request)) {
        return next(args);
      }
      const { headers } = request;
      const userAgent = ((_a = context == null ? void 0 : context.userAgent) == null ? void 0 : _a.map(escapeUserAgent)) || [];
      const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
      await checkFeatures(context, options, args);
      const awsContext = context;
      defaultUserAgent.push(
        `m/${encodeFeatures(
          Object.assign({}, (_b = context.__smithy_context) == null ? void 0 : _b.features, (_c = awsContext.__aws_sdk_context) == null ? void 0 : _c.features)
        )}`
      );
      const customUserAgent = ((_d = options == null ? void 0 : options.customUserAgent) == null ? void 0 : _d.map(escapeUserAgent)) || [];
      const appId = await options.userAgentAppId();
      if (appId) {
        defaultUserAgent.push(escapeUserAgent([`app/${appId}`]));
      }
      const prefix = (0, import_util_endpoints.getUserAgentPrefix)();
      const sdkUserAgentValue = (prefix ? [prefix] : []).concat([...defaultUserAgent, ...userAgent, ...customUserAgent]).join(SPACE);
      const normalUAValue = [
        ...defaultUserAgent.filter((section) => section.startsWith("aws-sdk-")),
        ...customUserAgent
      ].join(SPACE);
      if (options.runtime !== "browser") {
        if (normalUAValue) {
          headers[X_AMZ_USER_AGENT] = headers[X_AMZ_USER_AGENT] ? `${headers[USER_AGENT]} ${normalUAValue}` : normalUAValue;
        }
        headers[USER_AGENT] = sdkUserAgentValue;
      } else {
        headers[X_AMZ_USER_AGENT] = sdkUserAgentValue;
      }
      return next({
        ...args,
        request
      });
    }, "userAgentMiddleware");
    var escapeUserAgent = /* @__PURE__ */ __name((userAgentPair) => {
      var _a;
      const name = userAgentPair[0].split(UA_NAME_SEPARATOR).map((part) => part.replace(UA_NAME_ESCAPE_REGEX, UA_ESCAPE_CHAR)).join(UA_NAME_SEPARATOR);
      const version2 = (_a = userAgentPair[1]) == null ? void 0 : _a.replace(UA_VALUE_ESCAPE_REGEX, UA_ESCAPE_CHAR);
      const prefixSeparatorIndex = name.indexOf(UA_NAME_SEPARATOR);
      const prefix = name.substring(0, prefixSeparatorIndex);
      let uaName = name.substring(prefixSeparatorIndex + 1);
      if (prefix === "api") {
        uaName = uaName.toLowerCase();
      }
      return [prefix, uaName, version2].filter((item) => item && item.length > 0).reduce((acc, item, index) => {
        switch (index) {
          case 0:
            return item;
          case 1:
            return `${acc}/${item}`;
          default:
            return `${acc}#${item}`;
        }
      }, "");
    }, "escapeUserAgent");
    var getUserAgentMiddlewareOptions = {
      name: "getUserAgentMiddleware",
      step: "build",
      priority: "low",
      tags: ["SET_USER_AGENT", "USER_AGENT"],
      override: true
    };
    var getUserAgentPlugin = /* @__PURE__ */ __name((config) => ({
      applyToStack: (clientStack) => {
        clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);
      }
    }), "getUserAgentPlugin");
  }
});

// ../../node_modules/.pnpm/@smithy+config-resolver@3.0.13/node_modules/@smithy/config-resolver/dist-cjs/index.js
var require_dist_cjs33 = __commonJS({
  "../../node_modules/.pnpm/@smithy+config-resolver@3.0.13/node_modules/@smithy/config-resolver/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      CONFIG_USE_DUALSTACK_ENDPOINT: () => CONFIG_USE_DUALSTACK_ENDPOINT,
      CONFIG_USE_FIPS_ENDPOINT: () => CONFIG_USE_FIPS_ENDPOINT,
      DEFAULT_USE_DUALSTACK_ENDPOINT: () => DEFAULT_USE_DUALSTACK_ENDPOINT,
      DEFAULT_USE_FIPS_ENDPOINT: () => DEFAULT_USE_FIPS_ENDPOINT,
      ENV_USE_DUALSTACK_ENDPOINT: () => ENV_USE_DUALSTACK_ENDPOINT,
      ENV_USE_FIPS_ENDPOINT: () => ENV_USE_FIPS_ENDPOINT,
      NODE_REGION_CONFIG_FILE_OPTIONS: () => NODE_REGION_CONFIG_FILE_OPTIONS,
      NODE_REGION_CONFIG_OPTIONS: () => NODE_REGION_CONFIG_OPTIONS,
      NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS: () => NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS,
      NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS: () => NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS,
      REGION_ENV_NAME: () => REGION_ENV_NAME,
      REGION_INI_NAME: () => REGION_INI_NAME,
      getRegionInfo: () => getRegionInfo,
      resolveCustomEndpointsConfig: () => resolveCustomEndpointsConfig,
      resolveEndpointsConfig: () => resolveEndpointsConfig,
      resolveRegionConfig: () => resolveRegionConfig
    });
    module.exports = __toCommonJS2(src_exports);
    var import_util_config_provider = require_dist_cjs27();
    var ENV_USE_DUALSTACK_ENDPOINT = "AWS_USE_DUALSTACK_ENDPOINT";
    var CONFIG_USE_DUALSTACK_ENDPOINT = "use_dualstack_endpoint";
    var DEFAULT_USE_DUALSTACK_ENDPOINT = false;
    var NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => (0, import_util_config_provider.booleanSelector)(env, ENV_USE_DUALSTACK_ENDPOINT, import_util_config_provider.SelectorType.ENV),
      configFileSelector: (profile) => (0, import_util_config_provider.booleanSelector)(profile, CONFIG_USE_DUALSTACK_ENDPOINT, import_util_config_provider.SelectorType.CONFIG),
      default: false
    };
    var ENV_USE_FIPS_ENDPOINT = "AWS_USE_FIPS_ENDPOINT";
    var CONFIG_USE_FIPS_ENDPOINT = "use_fips_endpoint";
    var DEFAULT_USE_FIPS_ENDPOINT = false;
    var NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => (0, import_util_config_provider.booleanSelector)(env, ENV_USE_FIPS_ENDPOINT, import_util_config_provider.SelectorType.ENV),
      configFileSelector: (profile) => (0, import_util_config_provider.booleanSelector)(profile, CONFIG_USE_FIPS_ENDPOINT, import_util_config_provider.SelectorType.CONFIG),
      default: false
    };
    var import_util_middleware3 = require_dist_cjs4();
    var resolveCustomEndpointsConfig = /* @__PURE__ */ __name((input) => {
      const { endpoint, urlParser } = input;
      return {
        ...input,
        tls: input.tls ?? true,
        endpoint: (0, import_util_middleware3.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint),
        isCustomEndpoint: true,
        useDualstackEndpoint: (0, import_util_middleware3.normalizeProvider)(input.useDualstackEndpoint ?? false)
      };
    }, "resolveCustomEndpointsConfig");
    var getEndpointFromRegion = /* @__PURE__ */ __name(async (input) => {
      const { tls = true } = input;
      const region = await input.region();
      const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
      if (!dnsHostRegex.test(region)) {
        throw new Error("Invalid region in client config");
      }
      const useDualstackEndpoint = await input.useDualstackEndpoint();
      const useFipsEndpoint = await input.useFipsEndpoint();
      const { hostname } = await input.regionInfoProvider(region, { useDualstackEndpoint, useFipsEndpoint }) ?? {};
      if (!hostname) {
        throw new Error("Cannot resolve hostname from client config");
      }
      return input.urlParser(`${tls ? "https:" : "http:"}//${hostname}`);
    }, "getEndpointFromRegion");
    var resolveEndpointsConfig = /* @__PURE__ */ __name((input) => {
      const useDualstackEndpoint = (0, import_util_middleware3.normalizeProvider)(input.useDualstackEndpoint ?? false);
      const { endpoint, useFipsEndpoint, urlParser } = input;
      return {
        ...input,
        tls: input.tls ?? true,
        endpoint: endpoint ? (0, import_util_middleware3.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint) : () => getEndpointFromRegion({ ...input, useDualstackEndpoint, useFipsEndpoint }),
        isCustomEndpoint: !!endpoint,
        useDualstackEndpoint
      };
    }, "resolveEndpointsConfig");
    var REGION_ENV_NAME = "AWS_REGION";
    var REGION_INI_NAME = "region";
    var NODE_REGION_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[REGION_ENV_NAME],
      configFileSelector: (profile) => profile[REGION_INI_NAME],
      default: () => {
        throw new Error("Region is missing");
      }
    };
    var NODE_REGION_CONFIG_FILE_OPTIONS = {
      preferredFile: "credentials"
    };
    var isFipsRegion = /* @__PURE__ */ __name((region) => typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips")), "isFipsRegion");
    var getRealRegion = /* @__PURE__ */ __name((region) => isFipsRegion(region) ? ["fips-aws-global", "aws-fips"].includes(region) ? "us-east-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "") : region, "getRealRegion");
    var resolveRegionConfig = /* @__PURE__ */ __name((input) => {
      const { region, useFipsEndpoint } = input;
      if (!region) {
        throw new Error("Region is missing");
      }
      return {
        ...input,
        region: async () => {
          if (typeof region === "string") {
            return getRealRegion(region);
          }
          const providedRegion = await region();
          return getRealRegion(providedRegion);
        },
        useFipsEndpoint: async () => {
          const providedRegion = typeof region === "string" ? region : await region();
          if (isFipsRegion(providedRegion)) {
            return true;
          }
          return typeof useFipsEndpoint !== "function" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();
        }
      };
    }, "resolveRegionConfig");
    var getHostnameFromVariants = /* @__PURE__ */ __name((variants = [], { useFipsEndpoint, useDualstackEndpoint }) => {
      var _a;
      return (_a = variants.find(
        ({ tags }) => useFipsEndpoint === tags.includes("fips") && useDualstackEndpoint === tags.includes("dualstack")
      )) == null ? void 0 : _a.hostname;
    }, "getHostnameFromVariants");
    var getResolvedHostname = /* @__PURE__ */ __name((resolvedRegion, { regionHostname, partitionHostname }) => regionHostname ? regionHostname : partitionHostname ? partitionHostname.replace("{region}", resolvedRegion) : void 0, "getResolvedHostname");
    var getResolvedPartition = /* @__PURE__ */ __name((region, { partitionHash }) => Object.keys(partitionHash || {}).find((key) => partitionHash[key].regions.includes(region)) ?? "aws", "getResolvedPartition");
    var getResolvedSigningRegion = /* @__PURE__ */ __name((hostname, { signingRegion, regionRegex, useFipsEndpoint }) => {
      if (signingRegion) {
        return signingRegion;
      } else if (useFipsEndpoint) {
        const regionRegexJs = regionRegex.replace("\\\\", "\\").replace(/^\^/g, "\\.").replace(/\$$/g, "\\.");
        const regionRegexmatchArray = hostname.match(regionRegexJs);
        if (regionRegexmatchArray) {
          return regionRegexmatchArray[0].slice(1, -1);
        }
      }
    }, "getResolvedSigningRegion");
    var getRegionInfo = /* @__PURE__ */ __name((region, {
      useFipsEndpoint = false,
      useDualstackEndpoint = false,
      signingService,
      regionHash,
      partitionHash
    }) => {
      var _a, _b, _c, _d, _e;
      const partition = getResolvedPartition(region, { partitionHash });
      const resolvedRegion = region in regionHash ? region : ((_a = partitionHash[partition]) == null ? void 0 : _a.endpoint) ?? region;
      const hostnameOptions = { useFipsEndpoint, useDualstackEndpoint };
      const regionHostname = getHostnameFromVariants((_b = regionHash[resolvedRegion]) == null ? void 0 : _b.variants, hostnameOptions);
      const partitionHostname = getHostnameFromVariants((_c = partitionHash[partition]) == null ? void 0 : _c.variants, hostnameOptions);
      const hostname = getResolvedHostname(resolvedRegion, { regionHostname, partitionHostname });
      if (hostname === void 0) {
        throw new Error(`Endpoint resolution failed for: ${{ resolvedRegion, useFipsEndpoint, useDualstackEndpoint }}`);
      }
      const signingRegion = getResolvedSigningRegion(hostname, {
        signingRegion: (_d = regionHash[resolvedRegion]) == null ? void 0 : _d.signingRegion,
        regionRegex: partitionHash[partition].regionRegex,
        useFipsEndpoint
      });
      return {
        partition,
        signingService,
        hostname,
        ...signingRegion && { signingRegion },
        ...((_e = regionHash[resolvedRegion]) == null ? void 0 : _e.signingService) && {
          signingService: regionHash[resolvedRegion].signingService
        }
      };
    }, "getRegionInfo");
  }
});

// ../../node_modules/.pnpm/@smithy+eventstream-serde-config-resolver@3.0.11/node_modules/@smithy/eventstream-serde-config-resolver/dist-cjs/index.js
var require_dist_cjs34 = __commonJS({
  "../../node_modules/.pnpm/@smithy+eventstream-serde-config-resolver@3.0.11/node_modules/@smithy/eventstream-serde-config-resolver/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      resolveEventStreamSerdeConfig: () => resolveEventStreamSerdeConfig
    });
    module.exports = __toCommonJS2(src_exports);
    var resolveEventStreamSerdeConfig = /* @__PURE__ */ __name((input) => ({
      ...input,
      eventStreamMarshaller: input.eventStreamSerdeProvider(input)
    }), "resolveEventStreamSerdeConfig");
  }
});

// ../../node_modules/.pnpm/@smithy+middleware-content-length@3.0.13/node_modules/@smithy/middleware-content-length/dist-cjs/index.js
var require_dist_cjs35 = __commonJS({
  "../../node_modules/.pnpm/@smithy+middleware-content-length@3.0.13/node_modules/@smithy/middleware-content-length/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      contentLengthMiddleware: () => contentLengthMiddleware,
      contentLengthMiddlewareOptions: () => contentLengthMiddlewareOptions,
      getContentLengthPlugin: () => getContentLengthPlugin
    });
    module.exports = __toCommonJS2(src_exports);
    var import_protocol_http8 = require_dist_cjs2();
    var CONTENT_LENGTH_HEADER = "content-length";
    function contentLengthMiddleware(bodyLengthChecker) {
      return (next) => async (args) => {
        const request = args.request;
        if (import_protocol_http8.HttpRequest.isInstance(request)) {
          const { body, headers } = request;
          if (body && Object.keys(headers).map((str) => str.toLowerCase()).indexOf(CONTENT_LENGTH_HEADER) === -1) {
            try {
              const length = bodyLengthChecker(body);
              request.headers = {
                ...request.headers,
                [CONTENT_LENGTH_HEADER]: String(length)
              };
            } catch (error) {
            }
          }
        }
        return next({
          ...args,
          request
        });
      };
    }
    __name(contentLengthMiddleware, "contentLengthMiddleware");
    var contentLengthMiddlewareOptions = {
      step: "build",
      tags: ["SET_CONTENT_LENGTH", "CONTENT_LENGTH"],
      name: "contentLengthMiddleware",
      override: true
    };
    var getContentLengthPlugin = /* @__PURE__ */ __name((options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), contentLengthMiddlewareOptions);
      }
    }), "getContentLengthPlugin");
  }
});

// ../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/rng.js
import crypto from "crypto";
function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    crypto.randomFillSync(rnds8Pool);
    poolPtr = 0;
  }
  return rnds8Pool.slice(poolPtr, poolPtr += 16);
}
var rnds8Pool, poolPtr;
var init_rng = __esm({
  "../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/rng.js"() {
    rnds8Pool = new Uint8Array(256);
    poolPtr = rnds8Pool.length;
  }
});

// ../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/regex.js
var regex_default;
var init_regex = __esm({
  "../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/regex.js"() {
    regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
  }
});

// ../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default;
var init_validate = __esm({
  "../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/validate.js"() {
    init_regex();
    validate_default = validate;
  }
});

// ../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/stringify.js
function unsafeStringify(arr, offset = 0) {
  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
}
function stringify(arr, offset = 0) {
  const uuid = unsafeStringify(arr, offset);
  if (!validate_default(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
var byteToHex, stringify_default;
var init_stringify = __esm({
  "../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/stringify.js"() {
    init_validate();
    byteToHex = [];
    for (let i = 0; i < 256; ++i) {
      byteToHex.push((i + 256).toString(16).slice(1));
    }
    stringify_default = stringify;
  }
});

// ../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/v1.js
function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || rng)();
    if (node == null) {
      node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }
    if (clockseq == null) {
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
    }
  }
  let msecs = options.msecs !== void 0 ? options.msecs : Date.now();
  let nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
  if (dt < 0 && options.clockseq === void 0) {
    clockseq = clockseq + 1 & 16383;
  }
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
    nsecs = 0;
  }
  if (nsecs >= 1e4) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }
  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;
  msecs += 122192928e5;
  const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
  b[i++] = tl >>> 24 & 255;
  b[i++] = tl >>> 16 & 255;
  b[i++] = tl >>> 8 & 255;
  b[i++] = tl & 255;
  const tmh = msecs / 4294967296 * 1e4 & 268435455;
  b[i++] = tmh >>> 8 & 255;
  b[i++] = tmh & 255;
  b[i++] = tmh >>> 24 & 15 | 16;
  b[i++] = tmh >>> 16 & 255;
  b[i++] = clockseq >>> 8 | 128;
  b[i++] = clockseq & 255;
  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }
  return buf || unsafeStringify(b);
}
var _nodeId, _clockseq, _lastMSecs, _lastNSecs, v1_default;
var init_v1 = __esm({
  "../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/v1.js"() {
    init_rng();
    init_stringify();
    _lastMSecs = 0;
    _lastNSecs = 0;
    v1_default = v1;
  }
});

// ../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/parse.js
function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  let v;
  const arr = new Uint8Array(16);
  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 255;
  arr[2] = v >>> 8 & 255;
  arr[3] = v & 255;
  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 255;
  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 255;
  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 255;
  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v / 4294967296 & 255;
  arr[12] = v >>> 24 & 255;
  arr[13] = v >>> 16 & 255;
  arr[14] = v >>> 8 & 255;
  arr[15] = v & 255;
  return arr;
}
var parse_default;
var init_parse = __esm({
  "../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/parse.js"() {
    init_validate();
    parse_default = parse;
  }
});

// ../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  const bytes = [];
  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
function v35(name, version2, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    var _namespace;
    if (typeof value === "string") {
      value = stringToBytes(value);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version2;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return unsafeStringify(bytes);
  }
  try {
    generateUUID.name = name;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL2;
  return generateUUID;
}
var DNS, URL2;
var init_v35 = __esm({
  "../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/v35.js"() {
    init_stringify();
    init_parse();
    DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
  }
});

// ../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/md5.js
import crypto2 from "crypto";
function md5(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === "string") {
    bytes = Buffer.from(bytes, "utf8");
  }
  return crypto2.createHash("md5").update(bytes).digest();
}
var md5_default;
var init_md5 = __esm({
  "../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/md5.js"() {
    md5_default = md5;
  }
});

// ../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/v3.js
var v3, v3_default;
var init_v3 = __esm({
  "../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/v3.js"() {
    init_v35();
    init_md5();
    v3 = v35("v3", 48, md5_default);
    v3_default = v3;
  }
});

// ../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/native.js
import crypto3 from "crypto";
var native_default;
var init_native = __esm({
  "../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/native.js"() {
    native_default = {
      randomUUID: crypto3.randomUUID
    };
  }
});

// ../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/v4.js
function v4(options, buf, offset) {
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var v4_default;
var init_v4 = __esm({
  "../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/v4.js"() {
    init_native();
    init_rng();
    init_stringify();
    v4_default = v4;
  }
});

// ../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/sha1.js
import crypto4 from "crypto";
function sha1(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === "string") {
    bytes = Buffer.from(bytes, "utf8");
  }
  return crypto4.createHash("sha1").update(bytes).digest();
}
var sha1_default;
var init_sha1 = __esm({
  "../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/sha1.js"() {
    sha1_default = sha1;
  }
});

// ../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/v5.js
var v5, v5_default;
var init_v5 = __esm({
  "../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/v5.js"() {
    init_v35();
    init_sha1();
    v5 = v35("v5", 80, sha1_default);
    v5_default = v5;
  }
});

// ../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/nil.js
var nil_default;
var init_nil = __esm({
  "../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/nil.js"() {
    nil_default = "00000000-0000-0000-0000-000000000000";
  }
});

// ../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/version.js
function version(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  return parseInt(uuid.slice(14, 15), 16);
}
var version_default;
var init_version = __esm({
  "../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/version.js"() {
    init_validate();
    version_default = version;
  }
});

// ../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/index.js
var esm_node_exports = {};
__export(esm_node_exports, {
  NIL: () => nil_default,
  parse: () => parse_default,
  stringify: () => stringify_default,
  v1: () => v1_default,
  v3: () => v3_default,
  v4: () => v4_default,
  v5: () => v5_default,
  validate: () => validate_default,
  version: () => version_default
});
var init_esm_node = __esm({
  "../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/index.js"() {
    init_v1();
    init_v3();
    init_v4();
    init_v5();
    init_nil();
    init_version();
    init_validate();
    init_stringify();
    init_parse();
  }
});

// ../../node_modules/.pnpm/@smithy+service-error-classification@3.0.11/node_modules/@smithy/service-error-classification/dist-cjs/index.js
var require_dist_cjs36 = __commonJS({
  "../../node_modules/.pnpm/@smithy+service-error-classification@3.0.11/node_modules/@smithy/service-error-classification/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      isClockSkewCorrectedError: () => isClockSkewCorrectedError,
      isClockSkewError: () => isClockSkewError,
      isRetryableByTrait: () => isRetryableByTrait,
      isServerError: () => isServerError,
      isThrottlingError: () => isThrottlingError,
      isTransientError: () => isTransientError
    });
    module.exports = __toCommonJS2(src_exports);
    var CLOCK_SKEW_ERROR_CODES = [
      "AuthFailure",
      "InvalidSignatureException",
      "RequestExpired",
      "RequestInTheFuture",
      "RequestTimeTooSkewed",
      "SignatureDoesNotMatch"
    ];
    var THROTTLING_ERROR_CODES = [
      "BandwidthLimitExceeded",
      "EC2ThrottledException",
      "LimitExceededException",
      "PriorRequestNotComplete",
      "ProvisionedThroughputExceededException",
      "RequestLimitExceeded",
      "RequestThrottled",
      "RequestThrottledException",
      "SlowDown",
      "ThrottledException",
      "Throttling",
      "ThrottlingException",
      "TooManyRequestsException",
      "TransactionInProgressException"
      // DynamoDB
    ];
    var TRANSIENT_ERROR_CODES = ["TimeoutError", "RequestTimeout", "RequestTimeoutException"];
    var TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];
    var NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "ECONNREFUSED", "EPIPE", "ETIMEDOUT"];
    var isRetryableByTrait = /* @__PURE__ */ __name((error) => error.$retryable !== void 0, "isRetryableByTrait");
    var isClockSkewError = /* @__PURE__ */ __name((error) => CLOCK_SKEW_ERROR_CODES.includes(error.name), "isClockSkewError");
    var isClockSkewCorrectedError = /* @__PURE__ */ __name((error) => {
      var _a;
      return (_a = error.$metadata) == null ? void 0 : _a.clockSkewCorrected;
    }, "isClockSkewCorrectedError");
    var isThrottlingError = /* @__PURE__ */ __name((error) => {
      var _a, _b;
      return ((_a = error.$metadata) == null ? void 0 : _a.httpStatusCode) === 429 || THROTTLING_ERROR_CODES.includes(error.name) || ((_b = error.$retryable) == null ? void 0 : _b.throttling) == true;
    }, "isThrottlingError");
    var isTransientError = /* @__PURE__ */ __name((error, depth = 0) => {
      var _a;
      return isClockSkewCorrectedError(error) || TRANSIENT_ERROR_CODES.includes(error.name) || NODEJS_TIMEOUT_ERROR_CODES.includes((error == null ? void 0 : error.code) || "") || TRANSIENT_ERROR_STATUS_CODES.includes(((_a = error.$metadata) == null ? void 0 : _a.httpStatusCode) || 0) || error.cause !== void 0 && depth <= 10 && isTransientError(error.cause, depth + 1);
    }, "isTransientError");
    var isServerError = /* @__PURE__ */ __name((error) => {
      var _a;
      if (((_a = error.$metadata) == null ? void 0 : _a.httpStatusCode) !== void 0) {
        const statusCode = error.$metadata.httpStatusCode;
        if (500 <= statusCode && statusCode <= 599 && !isTransientError(error)) {
          return true;
        }
        return false;
      }
      return false;
    }, "isServerError");
  }
});

// ../../node_modules/.pnpm/@smithy+util-retry@3.0.11/node_modules/@smithy/util-retry/dist-cjs/index.js
var require_dist_cjs37 = __commonJS({
  "../../node_modules/.pnpm/@smithy+util-retry@3.0.11/node_modules/@smithy/util-retry/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      AdaptiveRetryStrategy: () => AdaptiveRetryStrategy,
      ConfiguredRetryStrategy: () => ConfiguredRetryStrategy,
      DEFAULT_MAX_ATTEMPTS: () => DEFAULT_MAX_ATTEMPTS,
      DEFAULT_RETRY_DELAY_BASE: () => DEFAULT_RETRY_DELAY_BASE,
      DEFAULT_RETRY_MODE: () => DEFAULT_RETRY_MODE,
      DefaultRateLimiter: () => DefaultRateLimiter,
      INITIAL_RETRY_TOKENS: () => INITIAL_RETRY_TOKENS,
      INVOCATION_ID_HEADER: () => INVOCATION_ID_HEADER,
      MAXIMUM_RETRY_DELAY: () => MAXIMUM_RETRY_DELAY,
      NO_RETRY_INCREMENT: () => NO_RETRY_INCREMENT,
      REQUEST_HEADER: () => REQUEST_HEADER,
      RETRY_COST: () => RETRY_COST,
      RETRY_MODES: () => RETRY_MODES,
      StandardRetryStrategy: () => StandardRetryStrategy,
      THROTTLING_RETRY_DELAY_BASE: () => THROTTLING_RETRY_DELAY_BASE,
      TIMEOUT_RETRY_COST: () => TIMEOUT_RETRY_COST
    });
    module.exports = __toCommonJS2(src_exports);
    var RETRY_MODES = /* @__PURE__ */ ((RETRY_MODES2) => {
      RETRY_MODES2["STANDARD"] = "standard";
      RETRY_MODES2["ADAPTIVE"] = "adaptive";
      return RETRY_MODES2;
    })(RETRY_MODES || {});
    var DEFAULT_MAX_ATTEMPTS = 3;
    var DEFAULT_RETRY_MODE = "standard";
    var import_service_error_classification = require_dist_cjs36();
    var _DefaultRateLimiter = class _DefaultRateLimiter2 {
      constructor(options) {
        this.currentCapacity = 0;
        this.enabled = false;
        this.lastMaxRate = 0;
        this.measuredTxRate = 0;
        this.requestCount = 0;
        this.lastTimestamp = 0;
        this.timeWindow = 0;
        this.beta = (options == null ? void 0 : options.beta) ?? 0.7;
        this.minCapacity = (options == null ? void 0 : options.minCapacity) ?? 1;
        this.minFillRate = (options == null ? void 0 : options.minFillRate) ?? 0.5;
        this.scaleConstant = (options == null ? void 0 : options.scaleConstant) ?? 0.4;
        this.smooth = (options == null ? void 0 : options.smooth) ?? 0.8;
        const currentTimeInSeconds = this.getCurrentTimeInSeconds();
        this.lastThrottleTime = currentTimeInSeconds;
        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
        this.fillRate = this.minFillRate;
        this.maxCapacity = this.minCapacity;
      }
      getCurrentTimeInSeconds() {
        return Date.now() / 1e3;
      }
      async getSendToken() {
        return this.acquireTokenBucket(1);
      }
      async acquireTokenBucket(amount) {
        if (!this.enabled) {
          return;
        }
        this.refillTokenBucket();
        if (amount > this.currentCapacity) {
          const delay = (amount - this.currentCapacity) / this.fillRate * 1e3;
          await new Promise((resolve) => _DefaultRateLimiter2.setTimeoutFn(resolve, delay));
        }
        this.currentCapacity = this.currentCapacity - amount;
      }
      refillTokenBucket() {
        const timestamp = this.getCurrentTimeInSeconds();
        if (!this.lastTimestamp) {
          this.lastTimestamp = timestamp;
          return;
        }
        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);
        this.lastTimestamp = timestamp;
      }
      updateClientSendingRate(response) {
        let calculatedRate;
        this.updateMeasuredRate();
        if ((0, import_service_error_classification.isThrottlingError)(response)) {
          const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);
          this.lastMaxRate = rateToUse;
          this.calculateTimeWindow();
          this.lastThrottleTime = this.getCurrentTimeInSeconds();
          calculatedRate = this.cubicThrottle(rateToUse);
          this.enableTokenBucket();
        } else {
          this.calculateTimeWindow();
          calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
        }
        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
        this.updateTokenBucketRate(newRate);
      }
      calculateTimeWindow() {
        this.timeWindow = this.getPrecise(Math.pow(this.lastMaxRate * (1 - this.beta) / this.scaleConstant, 1 / 3));
      }
      cubicThrottle(rateToUse) {
        return this.getPrecise(rateToUse * this.beta);
      }
      cubicSuccess(timestamp) {
        return this.getPrecise(
          this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate
        );
      }
      enableTokenBucket() {
        this.enabled = true;
      }
      updateTokenBucketRate(newRate) {
        this.refillTokenBucket();
        this.fillRate = Math.max(newRate, this.minFillRate);
        this.maxCapacity = Math.max(newRate, this.minCapacity);
        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
      }
      updateMeasuredRate() {
        const t = this.getCurrentTimeInSeconds();
        const timeBucket = Math.floor(t * 2) / 2;
        this.requestCount++;
        if (timeBucket > this.lastTxRateBucket) {
          const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);
          this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));
          this.requestCount = 0;
          this.lastTxRateBucket = timeBucket;
        }
      }
      getPrecise(num) {
        return parseFloat(num.toFixed(8));
      }
    };
    __name(_DefaultRateLimiter, "DefaultRateLimiter");
    _DefaultRateLimiter.setTimeoutFn = setTimeout;
    var DefaultRateLimiter = _DefaultRateLimiter;
    var DEFAULT_RETRY_DELAY_BASE = 100;
    var MAXIMUM_RETRY_DELAY = 20 * 1e3;
    var THROTTLING_RETRY_DELAY_BASE = 500;
    var INITIAL_RETRY_TOKENS = 500;
    var RETRY_COST = 5;
    var TIMEOUT_RETRY_COST = 10;
    var NO_RETRY_INCREMENT = 1;
    var INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
    var REQUEST_HEADER = "amz-sdk-request";
    var getDefaultRetryBackoffStrategy = /* @__PURE__ */ __name(() => {
      let delayBase = DEFAULT_RETRY_DELAY_BASE;
      const computeNextBackoffDelay = /* @__PURE__ */ __name((attempts) => {
        return Math.floor(Math.min(MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
      }, "computeNextBackoffDelay");
      const setDelayBase = /* @__PURE__ */ __name((delay) => {
        delayBase = delay;
      }, "setDelayBase");
      return {
        computeNextBackoffDelay,
        setDelayBase
      };
    }, "getDefaultRetryBackoffStrategy");
    var createDefaultRetryToken = /* @__PURE__ */ __name(({
      retryDelay,
      retryCount,
      retryCost
    }) => {
      const getRetryCount = /* @__PURE__ */ __name(() => retryCount, "getRetryCount");
      const getRetryDelay = /* @__PURE__ */ __name(() => Math.min(MAXIMUM_RETRY_DELAY, retryDelay), "getRetryDelay");
      const getRetryCost = /* @__PURE__ */ __name(() => retryCost, "getRetryCost");
      return {
        getRetryCount,
        getRetryDelay,
        getRetryCost
      };
    }, "createDefaultRetryToken");
    var _StandardRetryStrategy = class _StandardRetryStrategy {
      constructor(maxAttempts) {
        this.maxAttempts = maxAttempts;
        this.mode = "standard";
        this.capacity = INITIAL_RETRY_TOKENS;
        this.retryBackoffStrategy = getDefaultRetryBackoffStrategy();
        this.maxAttemptsProvider = typeof maxAttempts === "function" ? maxAttempts : async () => maxAttempts;
      }
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      async acquireInitialRetryToken(retryTokenScope) {
        return createDefaultRetryToken({
          retryDelay: DEFAULT_RETRY_DELAY_BASE,
          retryCount: 0
        });
      }
      async refreshRetryTokenForRetry(token, errorInfo) {
        const maxAttempts = await this.getMaxAttempts();
        if (this.shouldRetry(token, errorInfo, maxAttempts)) {
          const errorType = errorInfo.errorType;
          this.retryBackoffStrategy.setDelayBase(
            errorType === "THROTTLING" ? THROTTLING_RETRY_DELAY_BASE : DEFAULT_RETRY_DELAY_BASE
          );
          const delayFromErrorType = this.retryBackoffStrategy.computeNextBackoffDelay(token.getRetryCount());
          const retryDelay = errorInfo.retryAfterHint ? Math.max(errorInfo.retryAfterHint.getTime() - Date.now() || 0, delayFromErrorType) : delayFromErrorType;
          const capacityCost = this.getCapacityCost(errorType);
          this.capacity -= capacityCost;
          return createDefaultRetryToken({
            retryDelay,
            retryCount: token.getRetryCount() + 1,
            retryCost: capacityCost
          });
        }
        throw new Error("No retry token available");
      }
      recordSuccess(token) {
        this.capacity = Math.max(INITIAL_RETRY_TOKENS, this.capacity + (token.getRetryCost() ?? NO_RETRY_INCREMENT));
      }
      /**
       * @returns the current available retry capacity.
       *
       * This number decreases when retries are executed and refills when requests or retries succeed.
       */
      getCapacity() {
        return this.capacity;
      }
      async getMaxAttempts() {
        try {
          return await this.maxAttemptsProvider();
        } catch (error) {
          console.warn(`Max attempts provider could not resolve. Using default of ${DEFAULT_MAX_ATTEMPTS}`);
          return DEFAULT_MAX_ATTEMPTS;
        }
      }
      shouldRetry(tokenToRenew, errorInfo, maxAttempts) {
        const attempts = tokenToRenew.getRetryCount() + 1;
        return attempts < maxAttempts && this.capacity >= this.getCapacityCost(errorInfo.errorType) && this.isRetryableError(errorInfo.errorType);
      }
      getCapacityCost(errorType) {
        return errorType === "TRANSIENT" ? TIMEOUT_RETRY_COST : RETRY_COST;
      }
      isRetryableError(errorType) {
        return errorType === "THROTTLING" || errorType === "TRANSIENT";
      }
    };
    __name(_StandardRetryStrategy, "StandardRetryStrategy");
    var StandardRetryStrategy = _StandardRetryStrategy;
    var _AdaptiveRetryStrategy = class _AdaptiveRetryStrategy {
      constructor(maxAttemptsProvider, options) {
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = "adaptive";
        const { rateLimiter } = options ?? {};
        this.rateLimiter = rateLimiter ?? new DefaultRateLimiter();
        this.standardRetryStrategy = new StandardRetryStrategy(maxAttemptsProvider);
      }
      async acquireInitialRetryToken(retryTokenScope) {
        await this.rateLimiter.getSendToken();
        return this.standardRetryStrategy.acquireInitialRetryToken(retryTokenScope);
      }
      async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        this.rateLimiter.updateClientSendingRate(errorInfo);
        return this.standardRetryStrategy.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
      }
      recordSuccess(token) {
        this.rateLimiter.updateClientSendingRate({});
        this.standardRetryStrategy.recordSuccess(token);
      }
    };
    __name(_AdaptiveRetryStrategy, "AdaptiveRetryStrategy");
    var AdaptiveRetryStrategy = _AdaptiveRetryStrategy;
    var _ConfiguredRetryStrategy = class _ConfiguredRetryStrategy extends StandardRetryStrategy {
      /**
       * @param maxAttempts - the maximum number of retry attempts allowed.
       *                      e.g., if set to 3, then 4 total requests are possible.
       * @param computeNextBackoffDelay - a millisecond delay for each retry or a function that takes the retry attempt
       *                                  and returns the delay.
       *
       * @example exponential backoff.
       * ```js
       * new Client({
       *   retryStrategy: new ConfiguredRetryStrategy(3, (attempt) => attempt ** 2)
       * });
       * ```
       * @example constant delay.
       * ```js
       * new Client({
       *   retryStrategy: new ConfiguredRetryStrategy(3, 2000)
       * });
       * ```
       */
      constructor(maxAttempts, computeNextBackoffDelay = DEFAULT_RETRY_DELAY_BASE) {
        super(typeof maxAttempts === "function" ? maxAttempts : async () => maxAttempts);
        if (typeof computeNextBackoffDelay === "number") {
          this.computeNextBackoffDelay = () => computeNextBackoffDelay;
        } else {
          this.computeNextBackoffDelay = computeNextBackoffDelay;
        }
      }
      async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        const token = await super.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
        token.getRetryDelay = () => this.computeNextBackoffDelay(token.getRetryCount());
        return token;
      }
    };
    __name(_ConfiguredRetryStrategy, "ConfiguredRetryStrategy");
    var ConfiguredRetryStrategy = _ConfiguredRetryStrategy;
  }
});

// ../../node_modules/.pnpm/@smithy+middleware-retry@3.0.34/node_modules/@smithy/middleware-retry/dist-cjs/isStreamingPayload/isStreamingPayload.js
var require_isStreamingPayload = __commonJS({
  "../../node_modules/.pnpm/@smithy+middleware-retry@3.0.34/node_modules/@smithy/middleware-retry/dist-cjs/isStreamingPayload/isStreamingPayload.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isStreamingPayload = void 0;
    var stream_1 = __require("stream");
    var isStreamingPayload = (request) => (request === null || request === void 0 ? void 0 : request.body) instanceof stream_1.Readable || typeof ReadableStream !== "undefined" && (request === null || request === void 0 ? void 0 : request.body) instanceof ReadableStream;
    exports.isStreamingPayload = isStreamingPayload;
  }
});

// ../../node_modules/.pnpm/@smithy+middleware-retry@3.0.34/node_modules/@smithy/middleware-retry/dist-cjs/index.js
var require_dist_cjs38 = __commonJS({
  "../../node_modules/.pnpm/@smithy+middleware-retry@3.0.34/node_modules/@smithy/middleware-retry/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      AdaptiveRetryStrategy: () => AdaptiveRetryStrategy,
      CONFIG_MAX_ATTEMPTS: () => CONFIG_MAX_ATTEMPTS,
      CONFIG_RETRY_MODE: () => CONFIG_RETRY_MODE,
      ENV_MAX_ATTEMPTS: () => ENV_MAX_ATTEMPTS,
      ENV_RETRY_MODE: () => ENV_RETRY_MODE,
      NODE_MAX_ATTEMPT_CONFIG_OPTIONS: () => NODE_MAX_ATTEMPT_CONFIG_OPTIONS,
      NODE_RETRY_MODE_CONFIG_OPTIONS: () => NODE_RETRY_MODE_CONFIG_OPTIONS,
      StandardRetryStrategy: () => StandardRetryStrategy,
      defaultDelayDecider: () => defaultDelayDecider,
      defaultRetryDecider: () => defaultRetryDecider,
      getOmitRetryHeadersPlugin: () => getOmitRetryHeadersPlugin,
      getRetryAfterHint: () => getRetryAfterHint,
      getRetryPlugin: () => getRetryPlugin,
      omitRetryHeadersMiddleware: () => omitRetryHeadersMiddleware,
      omitRetryHeadersMiddlewareOptions: () => omitRetryHeadersMiddlewareOptions,
      resolveRetryConfig: () => resolveRetryConfig,
      retryMiddleware: () => retryMiddleware,
      retryMiddlewareOptions: () => retryMiddlewareOptions
    });
    module.exports = __toCommonJS2(src_exports);
    var import_protocol_http8 = require_dist_cjs2();
    var import_uuid = (init_esm_node(), __toCommonJS(esm_node_exports));
    var import_util_retry = require_dist_cjs37();
    var getDefaultRetryQuota = /* @__PURE__ */ __name((initialRetryTokens, options) => {
      const MAX_CAPACITY = initialRetryTokens;
      const noRetryIncrement = (options == null ? void 0 : options.noRetryIncrement) ?? import_util_retry.NO_RETRY_INCREMENT;
      const retryCost = (options == null ? void 0 : options.retryCost) ?? import_util_retry.RETRY_COST;
      const timeoutRetryCost = (options == null ? void 0 : options.timeoutRetryCost) ?? import_util_retry.TIMEOUT_RETRY_COST;
      let availableCapacity = initialRetryTokens;
      const getCapacityAmount = /* @__PURE__ */ __name((error) => error.name === "TimeoutError" ? timeoutRetryCost : retryCost, "getCapacityAmount");
      const hasRetryTokens = /* @__PURE__ */ __name((error) => getCapacityAmount(error) <= availableCapacity, "hasRetryTokens");
      const retrieveRetryTokens = /* @__PURE__ */ __name((error) => {
        if (!hasRetryTokens(error)) {
          throw new Error("No retry token available");
        }
        const capacityAmount = getCapacityAmount(error);
        availableCapacity -= capacityAmount;
        return capacityAmount;
      }, "retrieveRetryTokens");
      const releaseRetryTokens = /* @__PURE__ */ __name((capacityReleaseAmount) => {
        availableCapacity += capacityReleaseAmount ?? noRetryIncrement;
        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
      }, "releaseRetryTokens");
      return Object.freeze({
        hasRetryTokens,
        retrieveRetryTokens,
        releaseRetryTokens
      });
    }, "getDefaultRetryQuota");
    var defaultDelayDecider = /* @__PURE__ */ __name((delayBase, attempts) => Math.floor(Math.min(import_util_retry.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase)), "defaultDelayDecider");
    var import_service_error_classification = require_dist_cjs36();
    var defaultRetryDecider = /* @__PURE__ */ __name((error) => {
      if (!error) {
        return false;
      }
      return (0, import_service_error_classification.isRetryableByTrait)(error) || (0, import_service_error_classification.isClockSkewError)(error) || (0, import_service_error_classification.isThrottlingError)(error) || (0, import_service_error_classification.isTransientError)(error);
    }, "defaultRetryDecider");
    var asSdkError = /* @__PURE__ */ __name((error) => {
      if (error instanceof Error)
        return error;
      if (error instanceof Object)
        return Object.assign(new Error(), error);
      if (typeof error === "string")
        return new Error(error);
      return new Error(`AWS SDK error wrapper for ${error}`);
    }, "asSdkError");
    var _StandardRetryStrategy = class _StandardRetryStrategy {
      constructor(maxAttemptsProvider, options) {
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = import_util_retry.RETRY_MODES.STANDARD;
        this.retryDecider = (options == null ? void 0 : options.retryDecider) ?? defaultRetryDecider;
        this.delayDecider = (options == null ? void 0 : options.delayDecider) ?? defaultDelayDecider;
        this.retryQuota = (options == null ? void 0 : options.retryQuota) ?? getDefaultRetryQuota(import_util_retry.INITIAL_RETRY_TOKENS);
      }
      shouldRetry(error, attempts, maxAttempts) {
        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
      }
      async getMaxAttempts() {
        let maxAttempts;
        try {
          maxAttempts = await this.maxAttemptsProvider();
        } catch (error) {
          maxAttempts = import_util_retry.DEFAULT_MAX_ATTEMPTS;
        }
        return maxAttempts;
      }
      async retry(next, args, options) {
        let retryTokenAmount;
        let attempts = 0;
        let totalDelay = 0;
        const maxAttempts = await this.getMaxAttempts();
        const { request } = args;
        if (import_protocol_http8.HttpRequest.isInstance(request)) {
          request.headers[import_util_retry.INVOCATION_ID_HEADER] = (0, import_uuid.v4)();
        }
        while (true) {
          try {
            if (import_protocol_http8.HttpRequest.isInstance(request)) {
              request.headers[import_util_retry.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
            }
            if (options == null ? void 0 : options.beforeRequest) {
              await options.beforeRequest();
            }
            const { response, output } = await next(args);
            if (options == null ? void 0 : options.afterRequest) {
              options.afterRequest(response);
            }
            this.retryQuota.releaseRetryTokens(retryTokenAmount);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalDelay;
            return { response, output };
          } catch (e) {
            const err = asSdkError(e);
            attempts++;
            if (this.shouldRetry(err, attempts, maxAttempts)) {
              retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);
              const delayFromDecider = this.delayDecider(
                (0, import_service_error_classification.isThrottlingError)(err) ? import_util_retry.THROTTLING_RETRY_DELAY_BASE : import_util_retry.DEFAULT_RETRY_DELAY_BASE,
                attempts
              );
              const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);
              const delay = Math.max(delayFromResponse || 0, delayFromDecider);
              totalDelay += delay;
              await new Promise((resolve) => setTimeout(resolve, delay));
              continue;
            }
            if (!err.$metadata) {
              err.$metadata = {};
            }
            err.$metadata.attempts = attempts;
            err.$metadata.totalRetryDelay = totalDelay;
            throw err;
          }
        }
      }
    };
    __name(_StandardRetryStrategy, "StandardRetryStrategy");
    var StandardRetryStrategy = _StandardRetryStrategy;
    var getDelayFromRetryAfterHeader = /* @__PURE__ */ __name((response) => {
      if (!import_protocol_http8.HttpResponse.isInstance(response))
        return;
      const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === "retry-after");
      if (!retryAfterHeaderName)
        return;
      const retryAfter = response.headers[retryAfterHeaderName];
      const retryAfterSeconds = Number(retryAfter);
      if (!Number.isNaN(retryAfterSeconds))
        return retryAfterSeconds * 1e3;
      const retryAfterDate = new Date(retryAfter);
      return retryAfterDate.getTime() - Date.now();
    }, "getDelayFromRetryAfterHeader");
    var _AdaptiveRetryStrategy = class _AdaptiveRetryStrategy extends StandardRetryStrategy {
      constructor(maxAttemptsProvider, options) {
        const { rateLimiter, ...superOptions } = options ?? {};
        super(maxAttemptsProvider, superOptions);
        this.rateLimiter = rateLimiter ?? new import_util_retry.DefaultRateLimiter();
        this.mode = import_util_retry.RETRY_MODES.ADAPTIVE;
      }
      async retry(next, args) {
        return super.retry(next, args, {
          beforeRequest: async () => {
            return this.rateLimiter.getSendToken();
          },
          afterRequest: (response) => {
            this.rateLimiter.updateClientSendingRate(response);
          }
        });
      }
    };
    __name(_AdaptiveRetryStrategy, "AdaptiveRetryStrategy");
    var AdaptiveRetryStrategy = _AdaptiveRetryStrategy;
    var import_util_middleware3 = require_dist_cjs4();
    var ENV_MAX_ATTEMPTS = "AWS_MAX_ATTEMPTS";
    var CONFIG_MAX_ATTEMPTS = "max_attempts";
    var NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        const value = env[ENV_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Environment variable ${ENV_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      configFileSelector: (profile) => {
        const value = profile[CONFIG_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Shared config file entry ${CONFIG_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      default: import_util_retry.DEFAULT_MAX_ATTEMPTS
    };
    var resolveRetryConfig = /* @__PURE__ */ __name((input) => {
      const { retryStrategy } = input;
      const maxAttempts = (0, import_util_middleware3.normalizeProvider)(input.maxAttempts ?? import_util_retry.DEFAULT_MAX_ATTEMPTS);
      return {
        ...input,
        maxAttempts,
        retryStrategy: async () => {
          if (retryStrategy) {
            return retryStrategy;
          }
          const retryMode = await (0, import_util_middleware3.normalizeProvider)(input.retryMode)();
          if (retryMode === import_util_retry.RETRY_MODES.ADAPTIVE) {
            return new import_util_retry.AdaptiveRetryStrategy(maxAttempts);
          }
          return new import_util_retry.StandardRetryStrategy(maxAttempts);
        }
      };
    }, "resolveRetryConfig");
    var ENV_RETRY_MODE = "AWS_RETRY_MODE";
    var CONFIG_RETRY_MODE = "retry_mode";
    var NODE_RETRY_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[ENV_RETRY_MODE],
      configFileSelector: (profile) => profile[CONFIG_RETRY_MODE],
      default: import_util_retry.DEFAULT_RETRY_MODE
    };
    var omitRetryHeadersMiddleware = /* @__PURE__ */ __name(() => (next) => async (args) => {
      const { request } = args;
      if (import_protocol_http8.HttpRequest.isInstance(request)) {
        delete request.headers[import_util_retry.INVOCATION_ID_HEADER];
        delete request.headers[import_util_retry.REQUEST_HEADER];
      }
      return next(args);
    }, "omitRetryHeadersMiddleware");
    var omitRetryHeadersMiddlewareOptions = {
      name: "omitRetryHeadersMiddleware",
      tags: ["RETRY", "HEADERS", "OMIT_RETRY_HEADERS"],
      relation: "before",
      toMiddleware: "awsAuthMiddleware",
      override: true
    };
    var getOmitRetryHeadersPlugin = /* @__PURE__ */ __name((options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(omitRetryHeadersMiddleware(), omitRetryHeadersMiddlewareOptions);
      }
    }), "getOmitRetryHeadersPlugin");
    var import_smithy_client4 = require_dist_cjs19();
    var import_isStreamingPayload = require_isStreamingPayload();
    var retryMiddleware = /* @__PURE__ */ __name((options) => (next, context) => async (args) => {
      var _a;
      let retryStrategy = await options.retryStrategy();
      const maxAttempts = await options.maxAttempts();
      if (isRetryStrategyV2(retryStrategy)) {
        retryStrategy = retryStrategy;
        let retryToken = await retryStrategy.acquireInitialRetryToken(context["partition_id"]);
        let lastError = new Error();
        let attempts = 0;
        let totalRetryDelay = 0;
        const { request } = args;
        const isRequest = import_protocol_http8.HttpRequest.isInstance(request);
        if (isRequest) {
          request.headers[import_util_retry.INVOCATION_ID_HEADER] = (0, import_uuid.v4)();
        }
        while (true) {
          try {
            if (isRequest) {
              request.headers[import_util_retry.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
            }
            const { response, output } = await next(args);
            retryStrategy.recordSuccess(retryToken);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalRetryDelay;
            return { response, output };
          } catch (e) {
            const retryErrorInfo = getRetryErrorInfo(e);
            lastError = asSdkError(e);
            if (isRequest && (0, import_isStreamingPayload.isStreamingPayload)(request)) {
              (_a = context.logger instanceof import_smithy_client4.NoOpLogger ? console : context.logger) == null ? void 0 : _a.warn(
                "An error was encountered in a non-retryable streaming request."
              );
              throw lastError;
            }
            try {
              retryToken = await retryStrategy.refreshRetryTokenForRetry(retryToken, retryErrorInfo);
            } catch (refreshError) {
              if (!lastError.$metadata) {
                lastError.$metadata = {};
              }
              lastError.$metadata.attempts = attempts + 1;
              lastError.$metadata.totalRetryDelay = totalRetryDelay;
              throw lastError;
            }
            attempts = retryToken.getRetryCount();
            const delay = retryToken.getRetryDelay();
            totalRetryDelay += delay;
            await new Promise((resolve) => setTimeout(resolve, delay));
          }
        }
      } else {
        retryStrategy = retryStrategy;
        if (retryStrategy == null ? void 0 : retryStrategy.mode)
          context.userAgent = [...context.userAgent || [], ["cfg/retry-mode", retryStrategy.mode]];
        return retryStrategy.retry(next, args);
      }
    }, "retryMiddleware");
    var isRetryStrategyV2 = /* @__PURE__ */ __name((retryStrategy) => typeof retryStrategy.acquireInitialRetryToken !== "undefined" && typeof retryStrategy.refreshRetryTokenForRetry !== "undefined" && typeof retryStrategy.recordSuccess !== "undefined", "isRetryStrategyV2");
    var getRetryErrorInfo = /* @__PURE__ */ __name((error) => {
      const errorInfo = {
        error,
        errorType: getRetryErrorType(error)
      };
      const retryAfterHint = getRetryAfterHint(error.$response);
      if (retryAfterHint) {
        errorInfo.retryAfterHint = retryAfterHint;
      }
      return errorInfo;
    }, "getRetryErrorInfo");
    var getRetryErrorType = /* @__PURE__ */ __name((error) => {
      if ((0, import_service_error_classification.isThrottlingError)(error))
        return "THROTTLING";
      if ((0, import_service_error_classification.isTransientError)(error))
        return "TRANSIENT";
      if ((0, import_service_error_classification.isServerError)(error))
        return "SERVER_ERROR";
      return "CLIENT_ERROR";
    }, "getRetryErrorType");
    var retryMiddlewareOptions = {
      name: "retryMiddleware",
      tags: ["RETRY"],
      step: "finalizeRequest",
      priority: "high",
      override: true
    };
    var getRetryPlugin = /* @__PURE__ */ __name((options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(retryMiddleware(options), retryMiddlewareOptions);
      }
    }), "getRetryPlugin");
    var getRetryAfterHint = /* @__PURE__ */ __name((response) => {
      if (!import_protocol_http8.HttpResponse.isInstance(response))
        return;
      const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === "retry-after");
      if (!retryAfterHeaderName)
        return;
      const retryAfter = response.headers[retryAfterHeaderName];
      const retryAfterSeconds = Number(retryAfter);
      if (!Number.isNaN(retryAfterSeconds))
        return new Date(retryAfterSeconds * 1e3);
      const retryAfterDate = new Date(retryAfter);
      return retryAfterDate;
    }, "getRetryAfterHint");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+signature-v4-multi-region@3.696.0/node_modules/@aws-sdk/signature-v4-multi-region/dist-cjs/index.js
var require_dist_cjs39 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+signature-v4-multi-region@3.696.0/node_modules/@aws-sdk/signature-v4-multi-region/dist-cjs/index.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      SignatureV4MultiRegion: () => SignatureV4MultiRegion,
      signatureV4CrtContainer: () => signatureV4CrtContainer
    });
    module.exports = __toCommonJS2(src_exports);
    var import_middleware_sdk_s3 = require_dist_cjs29();
    var signatureV4CrtContainer = {
      CrtSignerV4: null
    };
    var _SignatureV4MultiRegion = class _SignatureV4MultiRegion {
      constructor(options) {
        this.sigv4Signer = new import_middleware_sdk_s3.SignatureV4S3Express(options);
        this.signerOptions = options;
      }
      async sign(requestToSign, options = {}) {
        if (options.signingRegion === "*") {
          if (this.signerOptions.runtime !== "node")
            throw new Error("This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js");
          return this.getSigv4aSigner().sign(requestToSign, options);
        }
        return this.sigv4Signer.sign(requestToSign, options);
      }
      /**
       * Sign with alternate credentials to the ones provided in the constructor.
       */
      async signWithCredentials(requestToSign, credentials, options = {}) {
        if (options.signingRegion === "*") {
          if (this.signerOptions.runtime !== "node")
            throw new Error("This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js");
          return this.getSigv4aSigner().signWithCredentials(requestToSign, credentials, options);
        }
        return this.sigv4Signer.signWithCredentials(requestToSign, credentials, options);
      }
      async presign(originalRequest, options = {}) {
        if (options.signingRegion === "*") {
          if (this.signerOptions.runtime !== "node")
            throw new Error("This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js");
          return this.getSigv4aSigner().presign(originalRequest, options);
        }
        return this.sigv4Signer.presign(originalRequest, options);
      }
      async presignWithCredentials(originalRequest, credentials, options = {}) {
        if (options.signingRegion === "*") {
          throw new Error("Method presignWithCredentials is not supported for [signingRegion=*].");
        }
        return this.sigv4Signer.presignWithCredentials(originalRequest, credentials, options);
      }
      getSigv4aSigner() {
        if (!this.sigv4aSigner) {
          let CrtSignerV4 = null;
          try {
            CrtSignerV4 = signatureV4CrtContainer.CrtSignerV4;
            if (typeof CrtSignerV4 !== "function")
              throw new Error();
          } catch (e) {
            e.message = `${e.message}
Please check whether you have installed the "@aws-sdk/signature-v4-crt" package explicitly. 
You must also register the package by calling [require("@aws-sdk/signature-v4-crt");] or an ESM equivalent such as [import "@aws-sdk/signature-v4-crt";]. 
For more information please go to https://github.com/aws/aws-sdk-js-v3#functionality-requiring-aws-common-runtime-crt`;
            throw e;
          }
          this.sigv4aSigner = new CrtSignerV4({
            ...this.signerOptions,
            signingAlgorithm: 1
          });
        }
        return this.sigv4aSigner;
      }
    };
    __name(_SignatureV4MultiRegion, "SignatureV4MultiRegion");
    var SignatureV4MultiRegion = _SignatureV4MultiRegion;
  }
});

// ../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.12/node_modules/@smithy/shared-ini-file-loader/dist-cjs/getHomeDir.js
var require_getHomeDir = __commonJS({
  "../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.12/node_modules/@smithy/shared-ini-file-loader/dist-cjs/getHomeDir.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHomeDir = void 0;
    var os_1 = __require("os");
    var path_1 = __require("path");
    var homeDirCache = {};
    var getHomeDirCacheKey = () => {
      if (process && process.geteuid) {
        return `${process.geteuid()}`;
      }
      return "DEFAULT";
    };
    var getHomeDir2 = () => {
      const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${path_1.sep}` } = process.env;
      if (HOME)
        return HOME;
      if (USERPROFILE)
        return USERPROFILE;
      if (HOMEPATH)
        return `${HOMEDRIVE}${HOMEPATH}`;
      const homeDirCacheKey = getHomeDirCacheKey();
      if (!homeDirCache[homeDirCacheKey])
        homeDirCache[homeDirCacheKey] = (0, os_1.homedir)();
      return homeDirCache[homeDirCacheKey];
    };
    exports.getHomeDir = getHomeDir2;
  }
});

// ../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.12/node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js
var require_getSSOTokenFilepath = __commonJS({
  "../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.12/node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSSOTokenFilepath = void 0;
    var crypto_1 = __require("crypto");
    var path_1 = __require("path");
    var getHomeDir_1 = require_getHomeDir();
    var getSSOTokenFilepath2 = (id) => {
      const hasher = (0, crypto_1.createHash)("sha1");
      const cacheName = hasher.update(id).digest("hex");
      return (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "sso", "cache", `${cacheName}.json`);
    };
    exports.getSSOTokenFilepath = getSSOTokenFilepath2;
  }
});

// ../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.12/node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js
var require_getSSOTokenFromFile = __commonJS({
  "../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.12/node_modules/@smithy/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSSOTokenFromFile = void 0;
    var fs_1 = __require("fs");
    var getSSOTokenFilepath_1 = require_getSSOTokenFilepath();
    var { readFile } = fs_1.promises;
    var getSSOTokenFromFile2 = async (id) => {
      const ssoTokenFilepath = (0, getSSOTokenFilepath_1.getSSOTokenFilepath)(id);
      const ssoTokenText = await readFile(ssoTokenFilepath, "utf8");
      return JSON.parse(ssoTokenText);
    };
    exports.getSSOTokenFromFile = getSSOTokenFromFile2;
  }
});

// ../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.12/node_modules/@smithy/shared-ini-file-loader/dist-cjs/slurpFile.js
var require_slurpFile = __commonJS({
  "../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.12/node_modules/@smithy/shared-ini-file-loader/dist-cjs/slurpFile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.slurpFile = void 0;
    var fs_1 = __require("fs");
    var { readFile } = fs_1.promises;
    var filePromisesHash = {};
    var slurpFile = (path, options) => {
      if (!filePromisesHash[path] || (options === null || options === void 0 ? void 0 : options.ignoreCache)) {
        filePromisesHash[path] = readFile(path, "utf8");
      }
      return filePromisesHash[path];
    };
    exports.slurpFile = slurpFile;
  }
});

// ../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.12/node_modules/@smithy/shared-ini-file-loader/dist-cjs/index.js
var require_dist_cjs40 = __commonJS({
  "../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.12/node_modules/@smithy/shared-ini-file-loader/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __reExport = (target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default"));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      CONFIG_PREFIX_SEPARATOR: () => CONFIG_PREFIX_SEPARATOR,
      DEFAULT_PROFILE: () => DEFAULT_PROFILE,
      ENV_PROFILE: () => ENV_PROFILE,
      getProfileName: () => getProfileName,
      loadSharedConfigFiles: () => loadSharedConfigFiles,
      loadSsoSessionData: () => loadSsoSessionData,
      parseKnownFiles: () => parseKnownFiles
    });
    module.exports = __toCommonJS2(src_exports);
    __reExport(src_exports, require_getHomeDir(), module.exports);
    var ENV_PROFILE = "AWS_PROFILE";
    var DEFAULT_PROFILE = "default";
    var getProfileName = /* @__PURE__ */ __name((init) => init.profile || process.env[ENV_PROFILE] || DEFAULT_PROFILE, "getProfileName");
    __reExport(src_exports, require_getSSOTokenFilepath(), module.exports);
    __reExport(src_exports, require_getSSOTokenFromFile(), module.exports);
    var import_types5 = require_dist_cjs();
    var getConfigData = /* @__PURE__ */ __name((data) => Object.entries(data).filter(([key]) => {
      const indexOfSeparator = key.indexOf(CONFIG_PREFIX_SEPARATOR);
      if (indexOfSeparator === -1) {
        return false;
      }
      return Object.values(import_types5.IniSectionType).includes(key.substring(0, indexOfSeparator));
    }).reduce(
      (acc, [key, value]) => {
        const indexOfSeparator = key.indexOf(CONFIG_PREFIX_SEPARATOR);
        const updatedKey = key.substring(0, indexOfSeparator) === import_types5.IniSectionType.PROFILE ? key.substring(indexOfSeparator + 1) : key;
        acc[updatedKey] = value;
        return acc;
      },
      {
        // Populate default profile, if present.
        ...data.default && { default: data.default }
      }
    ), "getConfigData");
    var import_path = __require("path");
    var import_getHomeDir = require_getHomeDir();
    var ENV_CONFIG_PATH = "AWS_CONFIG_FILE";
    var getConfigFilepath = /* @__PURE__ */ __name(() => process.env[ENV_CONFIG_PATH] || (0, import_path.join)((0, import_getHomeDir.getHomeDir)(), ".aws", "config"), "getConfigFilepath");
    var import_getHomeDir2 = require_getHomeDir();
    var ENV_CREDENTIALS_PATH = "AWS_SHARED_CREDENTIALS_FILE";
    var getCredentialsFilepath = /* @__PURE__ */ __name(() => process.env[ENV_CREDENTIALS_PATH] || (0, import_path.join)((0, import_getHomeDir2.getHomeDir)(), ".aws", "credentials"), "getCredentialsFilepath");
    var import_getHomeDir3 = require_getHomeDir();
    var prefixKeyRegex = /^([\w-]+)\s(["'])?([\w-@\+\.%:/]+)\2$/;
    var profileNameBlockList = ["__proto__", "profile __proto__"];
    var parseIni = /* @__PURE__ */ __name((iniData) => {
      const map = {};
      let currentSection;
      let currentSubSection;
      for (const iniLine of iniData.split(/\r?\n/)) {
        const trimmedLine = iniLine.split(/(^|\s)[;#]/)[0].trim();
        const isSection = trimmedLine[0] === "[" && trimmedLine[trimmedLine.length - 1] === "]";
        if (isSection) {
          currentSection = void 0;
          currentSubSection = void 0;
          const sectionName = trimmedLine.substring(1, trimmedLine.length - 1);
          const matches = prefixKeyRegex.exec(sectionName);
          if (matches) {
            const [, prefix, , name] = matches;
            if (Object.values(import_types5.IniSectionType).includes(prefix)) {
              currentSection = [prefix, name].join(CONFIG_PREFIX_SEPARATOR);
            }
          } else {
            currentSection = sectionName;
          }
          if (profileNameBlockList.includes(sectionName)) {
            throw new Error(`Found invalid profile name "${sectionName}"`);
          }
        } else if (currentSection) {
          const indexOfEqualsSign = trimmedLine.indexOf("=");
          if (![0, -1].includes(indexOfEqualsSign)) {
            const [name, value] = [
              trimmedLine.substring(0, indexOfEqualsSign).trim(),
              trimmedLine.substring(indexOfEqualsSign + 1).trim()
            ];
            if (value === "") {
              currentSubSection = name;
            } else {
              if (currentSubSection && iniLine.trimStart() === iniLine) {
                currentSubSection = void 0;
              }
              map[currentSection] = map[currentSection] || {};
              const key = currentSubSection ? [currentSubSection, name].join(CONFIG_PREFIX_SEPARATOR) : name;
              map[currentSection][key] = value;
            }
          }
        }
      }
      return map;
    }, "parseIni");
    var import_slurpFile = require_slurpFile();
    var swallowError = /* @__PURE__ */ __name(() => ({}), "swallowError");
    var CONFIG_PREFIX_SEPARATOR = ".";
    var loadSharedConfigFiles = /* @__PURE__ */ __name(async (init = {}) => {
      const { filepath = getCredentialsFilepath(), configFilepath = getConfigFilepath() } = init;
      const homeDir = (0, import_getHomeDir3.getHomeDir)();
      const relativeHomeDirPrefix = "~/";
      let resolvedFilepath = filepath;
      if (filepath.startsWith(relativeHomeDirPrefix)) {
        resolvedFilepath = (0, import_path.join)(homeDir, filepath.slice(2));
      }
      let resolvedConfigFilepath = configFilepath;
      if (configFilepath.startsWith(relativeHomeDirPrefix)) {
        resolvedConfigFilepath = (0, import_path.join)(homeDir, configFilepath.slice(2));
      }
      const parsedFiles = await Promise.all([
        (0, import_slurpFile.slurpFile)(resolvedConfigFilepath, {
          ignoreCache: init.ignoreCache
        }).then(parseIni).then(getConfigData).catch(swallowError),
        (0, import_slurpFile.slurpFile)(resolvedFilepath, {
          ignoreCache: init.ignoreCache
        }).then(parseIni).catch(swallowError)
      ]);
      return {
        configFile: parsedFiles[0],
        credentialsFile: parsedFiles[1]
      };
    }, "loadSharedConfigFiles");
    var getSsoSessionData = /* @__PURE__ */ __name((data) => Object.entries(data).filter(([key]) => key.startsWith(import_types5.IniSectionType.SSO_SESSION + CONFIG_PREFIX_SEPARATOR)).reduce((acc, [key, value]) => ({ ...acc, [key.substring(key.indexOf(CONFIG_PREFIX_SEPARATOR) + 1)]: value }), {}), "getSsoSessionData");
    var import_slurpFile2 = require_slurpFile();
    var swallowError2 = /* @__PURE__ */ __name(() => ({}), "swallowError");
    var loadSsoSessionData = /* @__PURE__ */ __name(async (init = {}) => (0, import_slurpFile2.slurpFile)(init.configFilepath ?? getConfigFilepath()).then(parseIni).then(getSsoSessionData).catch(swallowError2), "loadSsoSessionData");
    var mergeConfigFiles = /* @__PURE__ */ __name((...files) => {
      const merged = {};
      for (const file of files) {
        for (const [key, values] of Object.entries(file)) {
          if (merged[key] !== void 0) {
            Object.assign(merged[key], values);
          } else {
            merged[key] = values;
          }
        }
      }
      return merged;
    }, "mergeConfigFiles");
    var parseKnownFiles = /* @__PURE__ */ __name(async (init) => {
      const parsedFiles = await loadSharedConfigFiles(init);
      return mergeConfigFiles(parsedFiles.configFile, parsedFiles.credentialsFile);
    }, "parseKnownFiles");
  }
});

// ../../node_modules/.pnpm/@smithy+node-config-provider@3.1.12/node_modules/@smithy/node-config-provider/dist-cjs/index.js
var require_dist_cjs41 = __commonJS({
  "../../node_modules/.pnpm/@smithy+node-config-provider@3.1.12/node_modules/@smithy/node-config-provider/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      loadConfig: () => loadConfig
    });
    module.exports = __toCommonJS2(src_exports);
    var import_property_provider2 = require_dist_cjs16();
    function getSelectorName(functionString) {
      try {
        const constants = new Set(Array.from(functionString.match(/([A-Z_]){3,}/g) ?? []));
        constants.delete("CONFIG");
        constants.delete("CONFIG_PREFIX_SEPARATOR");
        constants.delete("ENV");
        return [...constants].join(", ");
      } catch (e) {
        return functionString;
      }
    }
    __name(getSelectorName, "getSelectorName");
    var fromEnv = /* @__PURE__ */ __name((envVarSelector, logger2) => async () => {
      try {
        const config = envVarSelector(process.env);
        if (config === void 0) {
          throw new Error();
        }
        return config;
      } catch (e) {
        throw new import_property_provider2.CredentialsProviderError(
          e.message || `Not found in ENV: ${getSelectorName(envVarSelector.toString())}`,
          { logger: logger2 }
        );
      }
    }, "fromEnv");
    var import_shared_ini_file_loader = require_dist_cjs40();
    var fromSharedConfigFiles = /* @__PURE__ */ __name((configSelector, { preferredFile = "config", ...init } = {}) => async () => {
      const profile = (0, import_shared_ini_file_loader.getProfileName)(init);
      const { configFile, credentialsFile } = await (0, import_shared_ini_file_loader.loadSharedConfigFiles)(init);
      const profileFromCredentials = credentialsFile[profile] || {};
      const profileFromConfig = configFile[profile] || {};
      const mergedProfile = preferredFile === "config" ? { ...profileFromCredentials, ...profileFromConfig } : { ...profileFromConfig, ...profileFromCredentials };
      try {
        const cfgFile = preferredFile === "config" ? configFile : credentialsFile;
        const configValue = configSelector(mergedProfile, cfgFile);
        if (configValue === void 0) {
          throw new Error();
        }
        return configValue;
      } catch (e) {
        throw new import_property_provider2.CredentialsProviderError(
          e.message || `Not found in config files w/ profile [${profile}]: ${getSelectorName(configSelector.toString())}`,
          { logger: init.logger }
        );
      }
    }, "fromSharedConfigFiles");
    var isFunction = /* @__PURE__ */ __name((func) => typeof func === "function", "isFunction");
    var fromStatic = /* @__PURE__ */ __name((defaultValue) => isFunction(defaultValue) ? async () => await defaultValue() : (0, import_property_provider2.fromStatic)(defaultValue), "fromStatic");
    var loadConfig = /* @__PURE__ */ __name(({ environmentVariableSelector, configFileSelector, default: defaultValue }, configuration = {}) => (0, import_property_provider2.memoize)(
      (0, import_property_provider2.chain)(
        fromEnv(environmentVariableSelector),
        fromSharedConfigFiles(configFileSelector, configuration),
        fromStatic(defaultValue)
      )
    ), "loadConfig");
  }
});

// ../../node_modules/.pnpm/@smithy+middleware-endpoint@3.2.8/node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointUrlConfig.js
var require_getEndpointUrlConfig = __commonJS({
  "../../node_modules/.pnpm/@smithy+middleware-endpoint@3.2.8/node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointUrlConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointUrlConfig = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs40();
    var ENV_ENDPOINT_URL = "AWS_ENDPOINT_URL";
    var CONFIG_ENDPOINT_URL = "endpoint_url";
    var getEndpointUrlConfig = (serviceId) => ({
      environmentVariableSelector: (env) => {
        const serviceSuffixParts = serviceId.split(" ").map((w) => w.toUpperCase());
        const serviceEndpointUrl = env[[ENV_ENDPOINT_URL, ...serviceSuffixParts].join("_")];
        if (serviceEndpointUrl)
          return serviceEndpointUrl;
        const endpointUrl = env[ENV_ENDPOINT_URL];
        if (endpointUrl)
          return endpointUrl;
        return void 0;
      },
      configFileSelector: (profile, config) => {
        if (config && profile.services) {
          const servicesSection = config[["services", profile.services].join(shared_ini_file_loader_1.CONFIG_PREFIX_SEPARATOR)];
          if (servicesSection) {
            const servicePrefixParts = serviceId.split(" ").map((w) => w.toLowerCase());
            const endpointUrl2 = servicesSection[[servicePrefixParts.join("_"), CONFIG_ENDPOINT_URL].join(shared_ini_file_loader_1.CONFIG_PREFIX_SEPARATOR)];
            if (endpointUrl2)
              return endpointUrl2;
          }
        }
        const endpointUrl = profile[CONFIG_ENDPOINT_URL];
        if (endpointUrl)
          return endpointUrl;
        return void 0;
      },
      default: void 0
    });
    exports.getEndpointUrlConfig = getEndpointUrlConfig;
  }
});

// ../../node_modules/.pnpm/@smithy+middleware-endpoint@3.2.8/node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointFromConfig.js
var require_getEndpointFromConfig = __commonJS({
  "../../node_modules/.pnpm/@smithy+middleware-endpoint@3.2.8/node_modules/@smithy/middleware-endpoint/dist-cjs/adaptors/getEndpointFromConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointFromConfig = void 0;
    var node_config_provider_1 = require_dist_cjs41();
    var getEndpointUrlConfig_1 = require_getEndpointUrlConfig();
    var getEndpointFromConfig = async (serviceId) => (0, node_config_provider_1.loadConfig)((0, getEndpointUrlConfig_1.getEndpointUrlConfig)(serviceId !== null && serviceId !== void 0 ? serviceId : ""))();
    exports.getEndpointFromConfig = getEndpointFromConfig;
  }
});

// ../../node_modules/.pnpm/@smithy+querystring-parser@3.0.11/node_modules/@smithy/querystring-parser/dist-cjs/index.js
var require_dist_cjs42 = __commonJS({
  "../../node_modules/.pnpm/@smithy+querystring-parser@3.0.11/node_modules/@smithy/querystring-parser/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      parseQueryString: () => parseQueryString
    });
    module.exports = __toCommonJS2(src_exports);
    function parseQueryString(querystring) {
      const query = {};
      querystring = querystring.replace(/^\?/, "");
      if (querystring) {
        for (const pair of querystring.split("&")) {
          let [key, value = null] = pair.split("=");
          key = decodeURIComponent(key);
          if (value) {
            value = decodeURIComponent(value);
          }
          if (!(key in query)) {
            query[key] = value;
          } else if (Array.isArray(query[key])) {
            query[key].push(value);
          } else {
            query[key] = [query[key], value];
          }
        }
      }
      return query;
    }
    __name(parseQueryString, "parseQueryString");
  }
});

// ../../node_modules/.pnpm/@smithy+url-parser@3.0.11/node_modules/@smithy/url-parser/dist-cjs/index.js
var require_dist_cjs43 = __commonJS({
  "../../node_modules/.pnpm/@smithy+url-parser@3.0.11/node_modules/@smithy/url-parser/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      parseUrl: () => parseUrl
    });
    module.exports = __toCommonJS2(src_exports);
    var import_querystring_parser = require_dist_cjs42();
    var parseUrl = /* @__PURE__ */ __name((url) => {
      if (typeof url === "string") {
        return parseUrl(new URL(url));
      }
      const { hostname, pathname, port, protocol, search } = url;
      let query;
      if (search) {
        query = (0, import_querystring_parser.parseQueryString)(search);
      }
      return {
        hostname,
        port: port ? parseInt(port) : void 0,
        protocol,
        path: pathname,
        query
      };
    }, "parseUrl");
  }
});

// ../../node_modules/.pnpm/@smithy+middleware-endpoint@3.2.8/node_modules/@smithy/middleware-endpoint/dist-cjs/index.js
var require_dist_cjs44 = __commonJS({
  "../../node_modules/.pnpm/@smithy+middleware-endpoint@3.2.8/node_modules/@smithy/middleware-endpoint/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      endpointMiddleware: () => endpointMiddleware,
      endpointMiddlewareOptions: () => endpointMiddlewareOptions,
      getEndpointFromInstructions: () => getEndpointFromInstructions,
      getEndpointPlugin: () => getEndpointPlugin,
      resolveEndpointConfig: () => resolveEndpointConfig,
      resolveParams: () => resolveParams,
      toEndpointV1: () => toEndpointV1
    });
    module.exports = __toCommonJS2(src_exports);
    var resolveParamsForS3 = /* @__PURE__ */ __name(async (endpointParams) => {
      const bucket = (endpointParams == null ? void 0 : endpointParams.Bucket) || "";
      if (typeof endpointParams.Bucket === "string") {
        endpointParams.Bucket = bucket.replace(/#/g, encodeURIComponent("#")).replace(/\?/g, encodeURIComponent("?"));
      }
      if (isArnBucketName(bucket)) {
        if (endpointParams.ForcePathStyle === true) {
          throw new Error("Path-style addressing cannot be used with ARN buckets");
        }
      } else if (!isDnsCompatibleBucketName(bucket) || bucket.indexOf(".") !== -1 && !String(endpointParams.Endpoint).startsWith("http:") || bucket.toLowerCase() !== bucket || bucket.length < 3) {
        endpointParams.ForcePathStyle = true;
      }
      if (endpointParams.DisableMultiRegionAccessPoints) {
        endpointParams.disableMultiRegionAccessPoints = true;
        endpointParams.DisableMRAP = true;
      }
      return endpointParams;
    }, "resolveParamsForS3");
    var DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
    var IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
    var DOTS_PATTERN = /\.\./;
    var isDnsCompatibleBucketName = /* @__PURE__ */ __name((bucketName) => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName), "isDnsCompatibleBucketName");
    var isArnBucketName = /* @__PURE__ */ __name((bucketName) => {
      const [arn, partition, service, , , bucket] = bucketName.split(":");
      const isArn = arn === "arn" && bucketName.split(":").length >= 6;
      const isValidArn = Boolean(isArn && partition && service && bucket);
      if (isArn && !isValidArn) {
        throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);
      }
      return isValidArn;
    }, "isArnBucketName");
    var createConfigValueProvider = /* @__PURE__ */ __name((configKey, canonicalEndpointParamKey, config) => {
      const configProvider = /* @__PURE__ */ __name(async () => {
        const configValue = config[configKey] ?? config[canonicalEndpointParamKey];
        if (typeof configValue === "function") {
          return configValue();
        }
        return configValue;
      }, "configProvider");
      if (configKey === "credentialScope" || canonicalEndpointParamKey === "CredentialScope") {
        return async () => {
          const credentials = typeof config.credentials === "function" ? await config.credentials() : config.credentials;
          const configValue = (credentials == null ? void 0 : credentials.credentialScope) ?? (credentials == null ? void 0 : credentials.CredentialScope);
          return configValue;
        };
      }
      if (configKey === "accountId" || canonicalEndpointParamKey === "AccountId") {
        return async () => {
          const credentials = typeof config.credentials === "function" ? await config.credentials() : config.credentials;
          const configValue = (credentials == null ? void 0 : credentials.accountId) ?? (credentials == null ? void 0 : credentials.AccountId);
          return configValue;
        };
      }
      if (configKey === "endpoint" || canonicalEndpointParamKey === "endpoint") {
        return async () => {
          const endpoint = await configProvider();
          if (endpoint && typeof endpoint === "object") {
            if ("url" in endpoint) {
              return endpoint.url.href;
            }
            if ("hostname" in endpoint) {
              const { protocol, hostname, port, path } = endpoint;
              return `${protocol}//${hostname}${port ? ":" + port : ""}${path}`;
            }
          }
          return endpoint;
        };
      }
      return configProvider;
    }, "createConfigValueProvider");
    var import_getEndpointFromConfig = require_getEndpointFromConfig();
    var import_url_parser = require_dist_cjs43();
    var toEndpointV1 = /* @__PURE__ */ __name((endpoint) => {
      if (typeof endpoint === "object") {
        if ("url" in endpoint) {
          return (0, import_url_parser.parseUrl)(endpoint.url);
        }
        return endpoint;
      }
      return (0, import_url_parser.parseUrl)(endpoint);
    }, "toEndpointV1");
    var getEndpointFromInstructions = /* @__PURE__ */ __name(async (commandInput, instructionsSupplier, clientConfig, context) => {
      if (!clientConfig.endpoint) {
        let endpointFromConfig;
        if (clientConfig.serviceConfiguredEndpoint) {
          endpointFromConfig = await clientConfig.serviceConfiguredEndpoint();
        } else {
          endpointFromConfig = await (0, import_getEndpointFromConfig.getEndpointFromConfig)(clientConfig.serviceId);
        }
        if (endpointFromConfig) {
          clientConfig.endpoint = () => Promise.resolve(toEndpointV1(endpointFromConfig));
        }
      }
      const endpointParams = await resolveParams(commandInput, instructionsSupplier, clientConfig);
      if (typeof clientConfig.endpointProvider !== "function") {
        throw new Error("config.endpointProvider is not set.");
      }
      const endpoint = clientConfig.endpointProvider(endpointParams, context);
      return endpoint;
    }, "getEndpointFromInstructions");
    var resolveParams = /* @__PURE__ */ __name(async (commandInput, instructionsSupplier, clientConfig) => {
      var _a;
      const endpointParams = {};
      const instructions = ((_a = instructionsSupplier == null ? void 0 : instructionsSupplier.getEndpointParameterInstructions) == null ? void 0 : _a.call(instructionsSupplier)) || {};
      for (const [name, instruction] of Object.entries(instructions)) {
        switch (instruction.type) {
          case "staticContextParams":
            endpointParams[name] = instruction.value;
            break;
          case "contextParams":
            endpointParams[name] = commandInput[instruction.name];
            break;
          case "clientContextParams":
          case "builtInParams":
            endpointParams[name] = await createConfigValueProvider(instruction.name, name, clientConfig)();
            break;
          case "operationContextParams":
            endpointParams[name] = instruction.get(commandInput);
            break;
          default:
            throw new Error("Unrecognized endpoint parameter instruction: " + JSON.stringify(instruction));
        }
      }
      if (Object.keys(instructions).length === 0) {
        Object.assign(endpointParams, clientConfig);
      }
      if (String(clientConfig.serviceId).toLowerCase() === "s3") {
        await resolveParamsForS3(endpointParams);
      }
      return endpointParams;
    }, "resolveParams");
    var import_core3 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var import_util_middleware3 = require_dist_cjs4();
    var endpointMiddleware = /* @__PURE__ */ __name(({
      config,
      instructions
    }) => {
      return (next, context) => async (args) => {
        var _a, _b, _c;
        if (config.endpoint) {
          (0, import_core3.setFeature)(context, "ENDPOINT_OVERRIDE", "N");
        }
        const endpoint = await getEndpointFromInstructions(
          args.input,
          {
            getEndpointParameterInstructions() {
              return instructions;
            }
          },
          { ...config },
          context
        );
        context.endpointV2 = endpoint;
        context.authSchemes = (_a = endpoint.properties) == null ? void 0 : _a.authSchemes;
        const authScheme = (_b = context.authSchemes) == null ? void 0 : _b[0];
        if (authScheme) {
          context["signing_region"] = authScheme.signingRegion;
          context["signing_service"] = authScheme.signingName;
          const smithyContext = (0, import_util_middleware3.getSmithyContext)(context);
          const httpAuthOption = (_c = smithyContext == null ? void 0 : smithyContext.selectedHttpAuthScheme) == null ? void 0 : _c.httpAuthOption;
          if (httpAuthOption) {
            httpAuthOption.signingProperties = Object.assign(
              httpAuthOption.signingProperties || {},
              {
                signing_region: authScheme.signingRegion,
                signingRegion: authScheme.signingRegion,
                signing_service: authScheme.signingName,
                signingName: authScheme.signingName,
                signingRegionSet: authScheme.signingRegionSet
              },
              authScheme.properties
            );
          }
        }
        return next({
          ...args
        });
      };
    }, "endpointMiddleware");
    var import_middleware_serde2 = require_dist_cjs5();
    var endpointMiddlewareOptions = {
      step: "serialize",
      tags: ["ENDPOINT_PARAMETERS", "ENDPOINT_V2", "ENDPOINT"],
      name: "endpointV2Middleware",
      override: true,
      relation: "before",
      toMiddleware: import_middleware_serde2.serializerMiddlewareOption.name
    };
    var getEndpointPlugin = /* @__PURE__ */ __name((config, instructions) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(
          endpointMiddleware({
            config,
            instructions
          }),
          endpointMiddlewareOptions
        );
      }
    }), "getEndpointPlugin");
    var import_getEndpointFromConfig2 = require_getEndpointFromConfig();
    var resolveEndpointConfig = /* @__PURE__ */ __name((input) => {
      const tls = input.tls ?? true;
      const { endpoint } = input;
      const customEndpointProvider = endpoint != null ? async () => toEndpointV1(await (0, import_util_middleware3.normalizeProvider)(endpoint)()) : void 0;
      const isCustomEndpoint = !!endpoint;
      const resolvedConfig = {
        ...input,
        endpoint: customEndpointProvider,
        tls,
        isCustomEndpoint,
        useDualstackEndpoint: (0, import_util_middleware3.normalizeProvider)(input.useDualstackEndpoint ?? false),
        useFipsEndpoint: (0, import_util_middleware3.normalizeProvider)(input.useFipsEndpoint ?? false)
      };
      let configuredEndpointPromise = void 0;
      resolvedConfig.serviceConfiguredEndpoint = async () => {
        if (input.serviceId && !configuredEndpointPromise) {
          configuredEndpointPromise = (0, import_getEndpointFromConfig2.getEndpointFromConfig)(input.serviceId);
        }
        return configuredEndpointPromise;
      };
      return resolvedConfig;
    }, "resolveEndpointConfig");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-s3@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-s3/dist-cjs/endpoint/ruleset.js
var require_ruleset = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-s3@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-s3/dist-cjs/endpoint/ruleset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ruleSet = void 0;
    var ce = "required";
    var cf2 = "type";
    var cg = "conditions";
    var ch = "fn";
    var ci = "argv";
    var cj = "ref";
    var ck = "assign";
    var cl = "url";
    var cm = "properties";
    var cn = "backend";
    var co = "authSchemes";
    var cp = "disableDoubleEncoding";
    var cq = "signingName";
    var cr = "signingRegion";
    var cs = "headers";
    var ct = "signingRegionSet";
    var a = false;
    var b = true;
    var c = "isSet";
    var d = "booleanEquals";
    var e = "error";
    var f = "aws.partition";
    var g = "stringEquals";
    var h = "getAttr";
    var i = "name";
    var j = "substring";
    var k = "bucketSuffix";
    var l = "parseURL";
    var m = "{url#scheme}://{url#authority}/{uri_encoded_bucket}{url#path}";
    var n = "endpoint";
    var o = "tree";
    var p = "aws.isVirtualHostableS3Bucket";
    var q = "{url#scheme}://{Bucket}.{url#authority}{url#path}";
    var r = "not";
    var s = "{url#scheme}://{url#authority}{url#path}";
    var t = "hardwareType";
    var u = "regionPrefix";
    var v = "bucketAliasSuffix";
    var w = "outpostId";
    var x = "isValidHostLabel";
    var y = "sigv4a";
    var z = "s3-outposts";
    var A = "s3";
    var B = "{url#scheme}://{url#authority}{url#normalizedPath}{Bucket}";
    var C = "https://{Bucket}.s3-accelerate.{partitionResult#dnsSuffix}";
    var D = "https://{Bucket}.s3.{partitionResult#dnsSuffix}";
    var E = "aws.parseArn";
    var F = "bucketArn";
    var G = "arnType";
    var H = "";
    var I = "s3-object-lambda";
    var J = "accesspoint";
    var K = "accessPointName";
    var L = "{url#scheme}://{accessPointName}-{bucketArn#accountId}.{url#authority}{url#path}";
    var M = "mrapPartition";
    var N = "outpostType";
    var O = "arnPrefix";
    var P = "{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}";
    var Q = "https://s3.{partitionResult#dnsSuffix}/{uri_encoded_bucket}";
    var R = "https://s3.{partitionResult#dnsSuffix}";
    var S = { [ce]: false, [cf2]: "String" };
    var T = { [ce]: true, "default": false, [cf2]: "Boolean" };
    var U = { [ce]: false, [cf2]: "Boolean" };
    var V = { [ch]: d, [ci]: [{ [cj]: "Accelerate" }, true] };
    var W = { [ch]: d, [ci]: [{ [cj]: "UseFIPS" }, true] };
    var X = { [ch]: d, [ci]: [{ [cj]: "UseDualStack" }, true] };
    var Y = { [ch]: c, [ci]: [{ [cj]: "Endpoint" }] };
    var Z = { [ch]: f, [ci]: [{ [cj]: "Region" }], [ck]: "partitionResult" };
    var aa = { [ch]: g, [ci]: [{ [ch]: h, [ci]: [{ [cj]: "partitionResult" }, i] }, "aws-cn"] };
    var ab = { [ch]: c, [ci]: [{ [cj]: "Bucket" }] };
    var ac = { [cj]: "Bucket" };
    var ad = { [ch]: l, [ci]: [{ [cj]: "Endpoint" }], [ck]: "url" };
    var ae = { [ch]: d, [ci]: [{ [ch]: h, [ci]: [{ [cj]: "url" }, "isIp"] }, true] };
    var af = { [cj]: "url" };
    var ag = { [ch]: "uriEncode", [ci]: [ac], [ck]: "uri_encoded_bucket" };
    var ah = { [cn]: "S3Express", [co]: [{ [cp]: true, [i]: "sigv4", [cq]: "s3express", [cr]: "{Region}" }] };
    var ai = {};
    var aj = { [ch]: p, [ci]: [ac, false] };
    var ak = { [e]: "S3Express bucket name is not a valid virtual hostable name.", [cf2]: e };
    var al = { [cn]: "S3Express", [co]: [{ [cp]: true, [i]: "sigv4-s3express", [cq]: "s3express", [cr]: "{Region}" }] };
    var am = { [ch]: c, [ci]: [{ [cj]: "UseS3ExpressControlEndpoint" }] };
    var an = { [ch]: d, [ci]: [{ [cj]: "UseS3ExpressControlEndpoint" }, true] };
    var ao = { [ch]: r, [ci]: [Y] };
    var ap = { [e]: "Unrecognized S3Express bucket name format.", [cf2]: e };
    var aq = { [ch]: r, [ci]: [ab] };
    var ar = { [cj]: t };
    var as = { [cg]: [ao], [e]: "Expected a endpoint to be specified but no endpoint was found", [cf2]: e };
    var at = { [co]: [{ [cp]: true, [i]: y, [cq]: z, [ct]: ["*"] }, { [cp]: true, [i]: "sigv4", [cq]: z, [cr]: "{Region}" }] };
    var au = { [ch]: d, [ci]: [{ [cj]: "ForcePathStyle" }, false] };
    var av = { [cj]: "ForcePathStyle" };
    var aw = { [ch]: d, [ci]: [{ [cj]: "Accelerate" }, false] };
    var ax = { [ch]: g, [ci]: [{ [cj]: "Region" }, "aws-global"] };
    var ay = { [co]: [{ [cp]: true, [i]: "sigv4", [cq]: A, [cr]: "us-east-1" }] };
    var az = { [ch]: r, [ci]: [ax] };
    var aA = { [ch]: d, [ci]: [{ [cj]: "UseGlobalEndpoint" }, true] };
    var aB = { [cl]: "https://{Bucket}.s3-fips.dualstack.{Region}.{partitionResult#dnsSuffix}", [cm]: { [co]: [{ [cp]: true, [i]: "sigv4", [cq]: A, [cr]: "{Region}" }] }, [cs]: {} };
    var aC = { [co]: [{ [cp]: true, [i]: "sigv4", [cq]: A, [cr]: "{Region}" }] };
    var aD = { [ch]: d, [ci]: [{ [cj]: "UseGlobalEndpoint" }, false] };
    var aE = { [ch]: d, [ci]: [{ [cj]: "UseDualStack" }, false] };
    var aF = { [cl]: "https://{Bucket}.s3-fips.{Region}.{partitionResult#dnsSuffix}", [cm]: aC, [cs]: {} };
    var aG = { [ch]: d, [ci]: [{ [cj]: "UseFIPS" }, false] };
    var aH = { [cl]: "https://{Bucket}.s3-accelerate.dualstack.{partitionResult#dnsSuffix}", [cm]: aC, [cs]: {} };
    var aI = { [cl]: "https://{Bucket}.s3.dualstack.{Region}.{partitionResult#dnsSuffix}", [cm]: aC, [cs]: {} };
    var aJ = { [ch]: d, [ci]: [{ [ch]: h, [ci]: [af, "isIp"] }, false] };
    var aK = { [cl]: B, [cm]: aC, [cs]: {} };
    var aL = { [cl]: q, [cm]: aC, [cs]: {} };
    var aM = { [n]: aL, [cf2]: n };
    var aN = { [cl]: C, [cm]: aC, [cs]: {} };
    var aO = { [cl]: "https://{Bucket}.s3.{Region}.{partitionResult#dnsSuffix}", [cm]: aC, [cs]: {} };
    var aP = { [e]: "Invalid region: region was not a valid DNS name.", [cf2]: e };
    var aQ = { [cj]: F };
    var aR = { [cj]: G };
    var aS = { [ch]: h, [ci]: [aQ, "service"] };
    var aT = { [cj]: K };
    var aU = { [cg]: [X], [e]: "S3 Object Lambda does not support Dual-stack", [cf2]: e };
    var aV = { [cg]: [V], [e]: "S3 Object Lambda does not support S3 Accelerate", [cf2]: e };
    var aW = { [cg]: [{ [ch]: c, [ci]: [{ [cj]: "DisableAccessPoints" }] }, { [ch]: d, [ci]: [{ [cj]: "DisableAccessPoints" }, true] }], [e]: "Access points are not supported for this operation", [cf2]: e };
    var aX = { [cg]: [{ [ch]: c, [ci]: [{ [cj]: "UseArnRegion" }] }, { [ch]: d, [ci]: [{ [cj]: "UseArnRegion" }, false] }, { [ch]: r, [ci]: [{ [ch]: g, [ci]: [{ [ch]: h, [ci]: [aQ, "region"] }, "{Region}"] }] }], [e]: "Invalid configuration: region from ARN `{bucketArn#region}` does not match client region `{Region}` and UseArnRegion is `false`", [cf2]: e };
    var aY = { [ch]: h, [ci]: [{ [cj]: "bucketPartition" }, i] };
    var aZ = { [ch]: h, [ci]: [aQ, "accountId"] };
    var ba = { [co]: [{ [cp]: true, [i]: "sigv4", [cq]: I, [cr]: "{bucketArn#region}" }] };
    var bb = { [e]: "Invalid ARN: The access point name may only contain a-z, A-Z, 0-9 and `-`. Found: `{accessPointName}`", [cf2]: e };
    var bc = { [e]: "Invalid ARN: The account id may only contain a-z, A-Z, 0-9 and `-`. Found: `{bucketArn#accountId}`", [cf2]: e };
    var bd = { [e]: "Invalid region in ARN: `{bucketArn#region}` (invalid DNS name)", [cf2]: e };
    var be = { [e]: "Client was configured for partition `{partitionResult#name}` but ARN (`{Bucket}`) has `{bucketPartition#name}`", [cf2]: e };
    var bf = { [e]: "Invalid ARN: The ARN may only contain a single resource component after `accesspoint`.", [cf2]: e };
    var bg = { [e]: "Invalid ARN: Expected a resource of the format `accesspoint:<accesspoint name>` but no name was provided", [cf2]: e };
    var bh = { [co]: [{ [cp]: true, [i]: "sigv4", [cq]: A, [cr]: "{bucketArn#region}" }] };
    var bi = { [co]: [{ [cp]: true, [i]: y, [cq]: z, [ct]: ["*"] }, { [cp]: true, [i]: "sigv4", [cq]: z, [cr]: "{bucketArn#region}" }] };
    var bj = { [ch]: E, [ci]: [ac] };
    var bk = { [cl]: "https://s3-fips.dualstack.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [cm]: aC, [cs]: {} };
    var bl = { [cl]: "https://s3-fips.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [cm]: aC, [cs]: {} };
    var bm = { [cl]: "https://s3.dualstack.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [cm]: aC, [cs]: {} };
    var bn = { [cl]: P, [cm]: aC, [cs]: {} };
    var bo = { [cl]: "https://s3.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [cm]: aC, [cs]: {} };
    var bp = { [cj]: "UseObjectLambdaEndpoint" };
    var bq = { [co]: [{ [cp]: true, [i]: "sigv4", [cq]: I, [cr]: "{Region}" }] };
    var br = { [cl]: "https://s3-fips.dualstack.{Region}.{partitionResult#dnsSuffix}", [cm]: aC, [cs]: {} };
    var bs = { [cl]: "https://s3-fips.{Region}.{partitionResult#dnsSuffix}", [cm]: aC, [cs]: {} };
    var bt = { [cl]: "https://s3.dualstack.{Region}.{partitionResult#dnsSuffix}", [cm]: aC, [cs]: {} };
    var bu = { [cl]: s, [cm]: aC, [cs]: {} };
    var bv = { [cl]: "https://s3.{Region}.{partitionResult#dnsSuffix}", [cm]: aC, [cs]: {} };
    var bw = [{ [cj]: "Region" }];
    var bx = [{ [cj]: "Endpoint" }];
    var by = [ac];
    var bz = [X];
    var bA = [V];
    var bB = [Y, ad];
    var bC = [{ [ch]: c, [ci]: [{ [cj]: "DisableS3ExpressSessionAuth" }] }, { [ch]: d, [ci]: [{ [cj]: "DisableS3ExpressSessionAuth" }, true] }];
    var bD = [ae];
    var bE = [ag];
    var bF = [aj];
    var bG = [W];
    var bH = [{ [ch]: j, [ci]: [ac, 6, 14, true], [ck]: "s3expressAvailabilityZoneId" }, { [ch]: j, [ci]: [ac, 14, 16, true], [ck]: "s3expressAvailabilityZoneDelim" }, { [ch]: g, [ci]: [{ [cj]: "s3expressAvailabilityZoneDelim" }, "--"] }];
    var bI = [{ [cg]: [W], [n]: { [cl]: "https://{Bucket}.s3express-fips-{s3expressAvailabilityZoneId}.{Region}.amazonaws.com", [cm]: ah, [cs]: {} }, [cf2]: n }, { [n]: { [cl]: "https://{Bucket}.s3express-{s3expressAvailabilityZoneId}.{Region}.amazonaws.com", [cm]: ah, [cs]: {} }, [cf2]: n }];
    var bJ = [{ [ch]: j, [ci]: [ac, 6, 15, true], [ck]: "s3expressAvailabilityZoneId" }, { [ch]: j, [ci]: [ac, 15, 17, true], [ck]: "s3expressAvailabilityZoneDelim" }, { [ch]: g, [ci]: [{ [cj]: "s3expressAvailabilityZoneDelim" }, "--"] }];
    var bK = [{ [cg]: [W], [n]: { [cl]: "https://{Bucket}.s3express-fips-{s3expressAvailabilityZoneId}.{Region}.amazonaws.com", [cm]: al, [cs]: {} }, [cf2]: n }, { [n]: { [cl]: "https://{Bucket}.s3express-{s3expressAvailabilityZoneId}.{Region}.amazonaws.com", [cm]: al, [cs]: {} }, [cf2]: n }];
    var bL = [ab];
    var bM = [{ [ch]: x, [ci]: [{ [cj]: w }, false] }];
    var bN = [{ [ch]: g, [ci]: [{ [cj]: u }, "beta"] }];
    var bO = ["*"];
    var bP = [Z];
    var bQ = [{ [ch]: x, [ci]: [{ [cj]: "Region" }, false] }];
    var bR = [{ [ch]: g, [ci]: [{ [cj]: "Region" }, "us-east-1"] }];
    var bS = [{ [ch]: g, [ci]: [aR, J] }];
    var bT = [{ [ch]: h, [ci]: [aQ, "resourceId[1]"], [ck]: K }, { [ch]: r, [ci]: [{ [ch]: g, [ci]: [aT, H] }] }];
    var bU = [aQ, "resourceId[1]"];
    var bV = [{ [ch]: r, [ci]: [{ [ch]: g, [ci]: [{ [ch]: h, [ci]: [aQ, "region"] }, H] }] }];
    var bW = [{ [ch]: r, [ci]: [{ [ch]: c, [ci]: [{ [ch]: h, [ci]: [aQ, "resourceId[2]"] }] }] }];
    var bX = [aQ, "resourceId[2]"];
    var bY = [{ [ch]: f, [ci]: [{ [ch]: h, [ci]: [aQ, "region"] }], [ck]: "bucketPartition" }];
    var bZ = [{ [ch]: g, [ci]: [aY, { [ch]: h, [ci]: [{ [cj]: "partitionResult" }, i] }] }];
    var ca = [{ [ch]: x, [ci]: [{ [ch]: h, [ci]: [aQ, "region"] }, true] }];
    var cb = [{ [ch]: x, [ci]: [aZ, false] }];
    var cc = [{ [ch]: x, [ci]: [aT, false] }];
    var cd = [{ [ch]: x, [ci]: [{ [cj]: "Region" }, true] }];
    var _data = { version: "1.0", parameters: { Bucket: S, Region: S, UseFIPS: T, UseDualStack: T, Endpoint: S, ForcePathStyle: T, Accelerate: T, UseGlobalEndpoint: T, UseObjectLambdaEndpoint: U, Key: S, Prefix: S, CopySource: S, DisableAccessPoints: U, DisableMultiRegionAccessPoints: T, UseArnRegion: U, UseS3ExpressControlEndpoint: U, DisableS3ExpressSessionAuth: U }, rules: [{ [cg]: [{ [ch]: c, [ci]: bw }], rules: [{ [cg]: [V, W], error: "Accelerate cannot be used with FIPS", [cf2]: e }, { [cg]: [X, Y], error: "Cannot set dual-stack in combination with a custom endpoint.", [cf2]: e }, { [cg]: [Y, W], error: "A custom endpoint cannot be combined with FIPS", [cf2]: e }, { [cg]: [Y, V], error: "A custom endpoint cannot be combined with S3 Accelerate", [cf2]: e }, { [cg]: [W, Z, aa], error: "Partition does not support FIPS", [cf2]: e }, { [cg]: [ab, { [ch]: j, [ci]: [ac, 0, 6, b], [ck]: k }, { [ch]: g, [ci]: [{ [cj]: k }, "--x-s3"] }], rules: [{ [cg]: bz, error: "S3Express does not support Dual-stack.", [cf2]: e }, { [cg]: bA, error: "S3Express does not support S3 Accelerate.", [cf2]: e }, { [cg]: bB, rules: [{ [cg]: bC, rules: [{ [cg]: bD, rules: [{ [cg]: bE, rules: [{ endpoint: { [cl]: m, [cm]: ah, [cs]: ai }, [cf2]: n }], [cf2]: o }], [cf2]: o }, { [cg]: bF, rules: [{ endpoint: { [cl]: q, [cm]: ah, [cs]: ai }, [cf2]: n }], [cf2]: o }, ak], [cf2]: o }, { [cg]: bD, rules: [{ [cg]: bE, rules: [{ endpoint: { [cl]: m, [cm]: al, [cs]: ai }, [cf2]: n }], [cf2]: o }], [cf2]: o }, { [cg]: bF, rules: [{ endpoint: { [cl]: q, [cm]: al, [cs]: ai }, [cf2]: n }], [cf2]: o }, ak], [cf2]: o }, { [cg]: [am, an], rules: [{ [cg]: [ag, ao], rules: [{ [cg]: bG, endpoint: { [cl]: "https://s3express-control-fips.{Region}.amazonaws.com/{uri_encoded_bucket}", [cm]: ah, [cs]: ai }, [cf2]: n }, { endpoint: { [cl]: "https://s3express-control.{Region}.amazonaws.com/{uri_encoded_bucket}", [cm]: ah, [cs]: ai }, [cf2]: n }], [cf2]: o }], [cf2]: o }, { [cg]: bF, rules: [{ [cg]: bC, rules: [{ [cg]: bH, rules: bI, [cf2]: o }, { [cg]: bJ, rules: bI, [cf2]: o }, ap], [cf2]: o }, { [cg]: bH, rules: bK, [cf2]: o }, { [cg]: bJ, rules: bK, [cf2]: o }, ap], [cf2]: o }, ak], [cf2]: o }, { [cg]: [aq, am, an], rules: [{ [cg]: bB, endpoint: { [cl]: s, [cm]: ah, [cs]: ai }, [cf2]: n }, { [cg]: bG, endpoint: { [cl]: "https://s3express-control-fips.{Region}.amazonaws.com", [cm]: ah, [cs]: ai }, [cf2]: n }, { endpoint: { [cl]: "https://s3express-control.{Region}.amazonaws.com", [cm]: ah, [cs]: ai }, [cf2]: n }], [cf2]: o }, { [cg]: [ab, { [ch]: j, [ci]: [ac, 49, 50, b], [ck]: t }, { [ch]: j, [ci]: [ac, 8, 12, b], [ck]: u }, { [ch]: j, [ci]: [ac, 0, 7, b], [ck]: v }, { [ch]: j, [ci]: [ac, 32, 49, b], [ck]: w }, { [ch]: f, [ci]: bw, [ck]: "regionPartition" }, { [ch]: g, [ci]: [{ [cj]: v }, "--op-s3"] }], rules: [{ [cg]: bM, rules: [{ [cg]: [{ [ch]: g, [ci]: [ar, "e"] }], rules: [{ [cg]: bN, rules: [as, { [cg]: bB, endpoint: { [cl]: "https://{Bucket}.ec2.{url#authority}", [cm]: at, [cs]: ai }, [cf2]: n }], [cf2]: o }, { endpoint: { [cl]: "https://{Bucket}.ec2.s3-outposts.{Region}.{regionPartition#dnsSuffix}", [cm]: at, [cs]: ai }, [cf2]: n }], [cf2]: o }, { [cg]: [{ [ch]: g, [ci]: [ar, "o"] }], rules: [{ [cg]: bN, rules: [as, { [cg]: bB, endpoint: { [cl]: "https://{Bucket}.op-{outpostId}.{url#authority}", [cm]: at, [cs]: ai }, [cf2]: n }], [cf2]: o }, { endpoint: { [cl]: "https://{Bucket}.op-{outpostId}.s3-outposts.{Region}.{regionPartition#dnsSuffix}", [cm]: at, [cs]: ai }, [cf2]: n }], [cf2]: o }, { error: 'Unrecognized hardware type: "Expected hardware type o or e but got {hardwareType}"', [cf2]: e }], [cf2]: o }, { error: "Invalid ARN: The outpost Id must only contain a-z, A-Z, 0-9 and `-`.", [cf2]: e }], [cf2]: o }, { [cg]: bL, rules: [{ [cg]: [Y, { [ch]: r, [ci]: [{ [ch]: c, [ci]: [{ [ch]: l, [ci]: bx }] }] }], error: "Custom endpoint `{Endpoint}` was not a valid URI", [cf2]: e }, { [cg]: [au, aj], rules: [{ [cg]: bP, rules: [{ [cg]: bQ, rules: [{ [cg]: [V, aa], error: "S3 Accelerate cannot be used in this region", [cf2]: e }, { [cg]: [X, W, aw, ao, ax], endpoint: { [cl]: "https://{Bucket}.s3-fips.dualstack.us-east-1.{partitionResult#dnsSuffix}", [cm]: ay, [cs]: ai }, [cf2]: n }, { [cg]: [X, W, aw, ao, az, aA], rules: [{ endpoint: aB, [cf2]: n }], [cf2]: o }, { [cg]: [X, W, aw, ao, az, aD], endpoint: aB, [cf2]: n }, { [cg]: [aE, W, aw, ao, ax], endpoint: { [cl]: "https://{Bucket}.s3-fips.us-east-1.{partitionResult#dnsSuffix}", [cm]: ay, [cs]: ai }, [cf2]: n }, { [cg]: [aE, W, aw, ao, az, aA], rules: [{ endpoint: aF, [cf2]: n }], [cf2]: o }, { [cg]: [aE, W, aw, ao, az, aD], endpoint: aF, [cf2]: n }, { [cg]: [X, aG, V, ao, ax], endpoint: { [cl]: "https://{Bucket}.s3-accelerate.dualstack.us-east-1.{partitionResult#dnsSuffix}", [cm]: ay, [cs]: ai }, [cf2]: n }, { [cg]: [X, aG, V, ao, az, aA], rules: [{ endpoint: aH, [cf2]: n }], [cf2]: o }, { [cg]: [X, aG, V, ao, az, aD], endpoint: aH, [cf2]: n }, { [cg]: [X, aG, aw, ao, ax], endpoint: { [cl]: "https://{Bucket}.s3.dualstack.us-east-1.{partitionResult#dnsSuffix}", [cm]: ay, [cs]: ai }, [cf2]: n }, { [cg]: [X, aG, aw, ao, az, aA], rules: [{ endpoint: aI, [cf2]: n }], [cf2]: o }, { [cg]: [X, aG, aw, ao, az, aD], endpoint: aI, [cf2]: n }, { [cg]: [aE, aG, aw, Y, ad, ae, ax], endpoint: { [cl]: B, [cm]: ay, [cs]: ai }, [cf2]: n }, { [cg]: [aE, aG, aw, Y, ad, aJ, ax], endpoint: { [cl]: q, [cm]: ay, [cs]: ai }, [cf2]: n }, { [cg]: [aE, aG, aw, Y, ad, ae, az, aA], rules: [{ [cg]: bR, endpoint: aK, [cf2]: n }, { endpoint: aK, [cf2]: n }], [cf2]: o }, { [cg]: [aE, aG, aw, Y, ad, aJ, az, aA], rules: [{ [cg]: bR, endpoint: aL, [cf2]: n }, aM], [cf2]: o }, { [cg]: [aE, aG, aw, Y, ad, ae, az, aD], endpoint: aK, [cf2]: n }, { [cg]: [aE, aG, aw, Y, ad, aJ, az, aD], endpoint: aL, [cf2]: n }, { [cg]: [aE, aG, V, ao, ax], endpoint: { [cl]: C, [cm]: ay, [cs]: ai }, [cf2]: n }, { [cg]: [aE, aG, V, ao, az, aA], rules: [{ [cg]: bR, endpoint: aN, [cf2]: n }, { endpoint: aN, [cf2]: n }], [cf2]: o }, { [cg]: [aE, aG, V, ao, az, aD], endpoint: aN, [cf2]: n }, { [cg]: [aE, aG, aw, ao, ax], endpoint: { [cl]: D, [cm]: ay, [cs]: ai }, [cf2]: n }, { [cg]: [aE, aG, aw, ao, az, aA], rules: [{ [cg]: bR, endpoint: { [cl]: D, [cm]: aC, [cs]: ai }, [cf2]: n }, { endpoint: aO, [cf2]: n }], [cf2]: o }, { [cg]: [aE, aG, aw, ao, az, aD], endpoint: aO, [cf2]: n }], [cf2]: o }, aP], [cf2]: o }], [cf2]: o }, { [cg]: [Y, ad, { [ch]: g, [ci]: [{ [ch]: h, [ci]: [af, "scheme"] }, "http"] }, { [ch]: p, [ci]: [ac, b] }, au, aG, aE, aw], rules: [{ [cg]: bP, rules: [{ [cg]: bQ, rules: [aM], [cf2]: o }, aP], [cf2]: o }], [cf2]: o }, { [cg]: [au, { [ch]: E, [ci]: by, [ck]: F }], rules: [{ [cg]: [{ [ch]: h, [ci]: [aQ, "resourceId[0]"], [ck]: G }, { [ch]: r, [ci]: [{ [ch]: g, [ci]: [aR, H] }] }], rules: [{ [cg]: [{ [ch]: g, [ci]: [aS, I] }], rules: [{ [cg]: bS, rules: [{ [cg]: bT, rules: [aU, aV, { [cg]: bV, rules: [aW, { [cg]: bW, rules: [aX, { [cg]: bY, rules: [{ [cg]: bP, rules: [{ [cg]: bZ, rules: [{ [cg]: ca, rules: [{ [cg]: [{ [ch]: g, [ci]: [aZ, H] }], error: "Invalid ARN: Missing account id", [cf2]: e }, { [cg]: cb, rules: [{ [cg]: cc, rules: [{ [cg]: bB, endpoint: { [cl]: L, [cm]: ba, [cs]: ai }, [cf2]: n }, { [cg]: bG, endpoint: { [cl]: "https://{accessPointName}-{bucketArn#accountId}.s3-object-lambda-fips.{bucketArn#region}.{bucketPartition#dnsSuffix}", [cm]: ba, [cs]: ai }, [cf2]: n }, { endpoint: { [cl]: "https://{accessPointName}-{bucketArn#accountId}.s3-object-lambda.{bucketArn#region}.{bucketPartition#dnsSuffix}", [cm]: ba, [cs]: ai }, [cf2]: n }], [cf2]: o }, bb], [cf2]: o }, bc], [cf2]: o }, bd], [cf2]: o }, be], [cf2]: o }], [cf2]: o }], [cf2]: o }, bf], [cf2]: o }, { error: "Invalid ARN: bucket ARN is missing a region", [cf2]: e }], [cf2]: o }, bg], [cf2]: o }, { error: "Invalid ARN: Object Lambda ARNs only support `accesspoint` arn types, but found: `{arnType}`", [cf2]: e }], [cf2]: o }, { [cg]: bS, rules: [{ [cg]: bT, rules: [{ [cg]: bV, rules: [{ [cg]: bS, rules: [{ [cg]: bV, rules: [aW, { [cg]: bW, rules: [aX, { [cg]: bY, rules: [{ [cg]: bP, rules: [{ [cg]: [{ [ch]: g, [ci]: [aY, "{partitionResult#name}"] }], rules: [{ [cg]: ca, rules: [{ [cg]: [{ [ch]: g, [ci]: [aS, A] }], rules: [{ [cg]: cb, rules: [{ [cg]: cc, rules: [{ [cg]: bA, error: "Access Points do not support S3 Accelerate", [cf2]: e }, { [cg]: [W, X], endpoint: { [cl]: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint-fips.dualstack.{bucketArn#region}.{bucketPartition#dnsSuffix}", [cm]: bh, [cs]: ai }, [cf2]: n }, { [cg]: [W, aE], endpoint: { [cl]: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint-fips.{bucketArn#region}.{bucketPartition#dnsSuffix}", [cm]: bh, [cs]: ai }, [cf2]: n }, { [cg]: [aG, X], endpoint: { [cl]: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint.dualstack.{bucketArn#region}.{bucketPartition#dnsSuffix}", [cm]: bh, [cs]: ai }, [cf2]: n }, { [cg]: [aG, aE, Y, ad], endpoint: { [cl]: L, [cm]: bh, [cs]: ai }, [cf2]: n }, { [cg]: [aG, aE], endpoint: { [cl]: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint.{bucketArn#region}.{bucketPartition#dnsSuffix}", [cm]: bh, [cs]: ai }, [cf2]: n }], [cf2]: o }, bb], [cf2]: o }, bc], [cf2]: o }, { error: "Invalid ARN: The ARN was not for the S3 service, found: {bucketArn#service}", [cf2]: e }], [cf2]: o }, bd], [cf2]: o }, be], [cf2]: o }], [cf2]: o }], [cf2]: o }, bf], [cf2]: o }], [cf2]: o }], [cf2]: o }, { [cg]: [{ [ch]: x, [ci]: [aT, b] }], rules: [{ [cg]: bz, error: "S3 MRAP does not support dual-stack", [cf2]: e }, { [cg]: bG, error: "S3 MRAP does not support FIPS", [cf2]: e }, { [cg]: bA, error: "S3 MRAP does not support S3 Accelerate", [cf2]: e }, { [cg]: [{ [ch]: d, [ci]: [{ [cj]: "DisableMultiRegionAccessPoints" }, b] }], error: "Invalid configuration: Multi-Region Access Point ARNs are disabled.", [cf2]: e }, { [cg]: [{ [ch]: f, [ci]: bw, [ck]: M }], rules: [{ [cg]: [{ [ch]: g, [ci]: [{ [ch]: h, [ci]: [{ [cj]: M }, i] }, { [ch]: h, [ci]: [aQ, "partition"] }] }], rules: [{ endpoint: { [cl]: "https://{accessPointName}.accesspoint.s3-global.{mrapPartition#dnsSuffix}", [cm]: { [co]: [{ [cp]: b, name: y, [cq]: A, [ct]: bO }] }, [cs]: ai }, [cf2]: n }], [cf2]: o }, { error: "Client was configured for partition `{mrapPartition#name}` but bucket referred to partition `{bucketArn#partition}`", [cf2]: e }], [cf2]: o }], [cf2]: o }, { error: "Invalid Access Point Name", [cf2]: e }], [cf2]: o }, bg], [cf2]: o }, { [cg]: [{ [ch]: g, [ci]: [aS, z] }], rules: [{ [cg]: bz, error: "S3 Outposts does not support Dual-stack", [cf2]: e }, { [cg]: bG, error: "S3 Outposts does not support FIPS", [cf2]: e }, { [cg]: bA, error: "S3 Outposts does not support S3 Accelerate", [cf2]: e }, { [cg]: [{ [ch]: c, [ci]: [{ [ch]: h, [ci]: [aQ, "resourceId[4]"] }] }], error: "Invalid Arn: Outpost Access Point ARN contains sub resources", [cf2]: e }, { [cg]: [{ [ch]: h, [ci]: bU, [ck]: w }], rules: [{ [cg]: bM, rules: [aX, { [cg]: bY, rules: [{ [cg]: bP, rules: [{ [cg]: bZ, rules: [{ [cg]: ca, rules: [{ [cg]: cb, rules: [{ [cg]: [{ [ch]: h, [ci]: bX, [ck]: N }], rules: [{ [cg]: [{ [ch]: h, [ci]: [aQ, "resourceId[3]"], [ck]: K }], rules: [{ [cg]: [{ [ch]: g, [ci]: [{ [cj]: N }, J] }], rules: [{ [cg]: bB, endpoint: { [cl]: "https://{accessPointName}-{bucketArn#accountId}.{outpostId}.{url#authority}", [cm]: bi, [cs]: ai }, [cf2]: n }, { endpoint: { [cl]: "https://{accessPointName}-{bucketArn#accountId}.{outpostId}.s3-outposts.{bucketArn#region}.{bucketPartition#dnsSuffix}", [cm]: bi, [cs]: ai }, [cf2]: n }], [cf2]: o }, { error: "Expected an outpost type `accesspoint`, found {outpostType}", [cf2]: e }], [cf2]: o }, { error: "Invalid ARN: expected an access point name", [cf2]: e }], [cf2]: o }, { error: "Invalid ARN: Expected a 4-component resource", [cf2]: e }], [cf2]: o }, bc], [cf2]: o }, bd], [cf2]: o }, be], [cf2]: o }], [cf2]: o }], [cf2]: o }, { error: "Invalid ARN: The outpost Id may only contain a-z, A-Z, 0-9 and `-`. Found: `{outpostId}`", [cf2]: e }], [cf2]: o }, { error: "Invalid ARN: The Outpost Id was not set", [cf2]: e }], [cf2]: o }, { error: "Invalid ARN: Unrecognized format: {Bucket} (type: {arnType})", [cf2]: e }], [cf2]: o }, { error: "Invalid ARN: No ARN type specified", [cf2]: e }], [cf2]: o }, { [cg]: [{ [ch]: j, [ci]: [ac, 0, 4, a], [ck]: O }, { [ch]: g, [ci]: [{ [cj]: O }, "arn:"] }, { [ch]: r, [ci]: [{ [ch]: c, [ci]: [bj] }] }], error: "Invalid ARN: `{Bucket}` was not a valid ARN", [cf2]: e }, { [cg]: [{ [ch]: d, [ci]: [av, b] }, bj], error: "Path-style addressing cannot be used with ARN buckets", [cf2]: e }, { [cg]: bE, rules: [{ [cg]: bP, rules: [{ [cg]: [aw], rules: [{ [cg]: [X, ao, W, ax], endpoint: { [cl]: "https://s3-fips.dualstack.us-east-1.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [cm]: ay, [cs]: ai }, [cf2]: n }, { [cg]: [X, ao, W, az, aA], rules: [{ endpoint: bk, [cf2]: n }], [cf2]: o }, { [cg]: [X, ao, W, az, aD], endpoint: bk, [cf2]: n }, { [cg]: [aE, ao, W, ax], endpoint: { [cl]: "https://s3-fips.us-east-1.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [cm]: ay, [cs]: ai }, [cf2]: n }, { [cg]: [aE, ao, W, az, aA], rules: [{ endpoint: bl, [cf2]: n }], [cf2]: o }, { [cg]: [aE, ao, W, az, aD], endpoint: bl, [cf2]: n }, { [cg]: [X, ao, aG, ax], endpoint: { [cl]: "https://s3.dualstack.us-east-1.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [cm]: ay, [cs]: ai }, [cf2]: n }, { [cg]: [X, ao, aG, az, aA], rules: [{ endpoint: bm, [cf2]: n }], [cf2]: o }, { [cg]: [X, ao, aG, az, aD], endpoint: bm, [cf2]: n }, { [cg]: [aE, Y, ad, aG, ax], endpoint: { [cl]: P, [cm]: ay, [cs]: ai }, [cf2]: n }, { [cg]: [aE, Y, ad, aG, az, aA], rules: [{ [cg]: bR, endpoint: bn, [cf2]: n }, { endpoint: bn, [cf2]: n }], [cf2]: o }, { [cg]: [aE, Y, ad, aG, az, aD], endpoint: bn, [cf2]: n }, { [cg]: [aE, ao, aG, ax], endpoint: { [cl]: Q, [cm]: ay, [cs]: ai }, [cf2]: n }, { [cg]: [aE, ao, aG, az, aA], rules: [{ [cg]: bR, endpoint: { [cl]: Q, [cm]: aC, [cs]: ai }, [cf2]: n }, { endpoint: bo, [cf2]: n }], [cf2]: o }, { [cg]: [aE, ao, aG, az, aD], endpoint: bo, [cf2]: n }], [cf2]: o }, { error: "Path-style addressing cannot be used with S3 Accelerate", [cf2]: e }], [cf2]: o }], [cf2]: o }], [cf2]: o }, { [cg]: [{ [ch]: c, [ci]: [bp] }, { [ch]: d, [ci]: [bp, b] }], rules: [{ [cg]: bP, rules: [{ [cg]: cd, rules: [aU, aV, { [cg]: bB, endpoint: { [cl]: s, [cm]: bq, [cs]: ai }, [cf2]: n }, { [cg]: bG, endpoint: { [cl]: "https://s3-object-lambda-fips.{Region}.{partitionResult#dnsSuffix}", [cm]: bq, [cs]: ai }, [cf2]: n }, { endpoint: { [cl]: "https://s3-object-lambda.{Region}.{partitionResult#dnsSuffix}", [cm]: bq, [cs]: ai }, [cf2]: n }], [cf2]: o }, aP], [cf2]: o }], [cf2]: o }, { [cg]: [aq], rules: [{ [cg]: bP, rules: [{ [cg]: cd, rules: [{ [cg]: [W, X, ao, ax], endpoint: { [cl]: "https://s3-fips.dualstack.us-east-1.{partitionResult#dnsSuffix}", [cm]: ay, [cs]: ai }, [cf2]: n }, { [cg]: [W, X, ao, az, aA], rules: [{ endpoint: br, [cf2]: n }], [cf2]: o }, { [cg]: [W, X, ao, az, aD], endpoint: br, [cf2]: n }, { [cg]: [W, aE, ao, ax], endpoint: { [cl]: "https://s3-fips.us-east-1.{partitionResult#dnsSuffix}", [cm]: ay, [cs]: ai }, [cf2]: n }, { [cg]: [W, aE, ao, az, aA], rules: [{ endpoint: bs, [cf2]: n }], [cf2]: o }, { [cg]: [W, aE, ao, az, aD], endpoint: bs, [cf2]: n }, { [cg]: [aG, X, ao, ax], endpoint: { [cl]: "https://s3.dualstack.us-east-1.{partitionResult#dnsSuffix}", [cm]: ay, [cs]: ai }, [cf2]: n }, { [cg]: [aG, X, ao, az, aA], rules: [{ endpoint: bt, [cf2]: n }], [cf2]: o }, { [cg]: [aG, X, ao, az, aD], endpoint: bt, [cf2]: n }, { [cg]: [aG, aE, Y, ad, ax], endpoint: { [cl]: s, [cm]: ay, [cs]: ai }, [cf2]: n }, { [cg]: [aG, aE, Y, ad, az, aA], rules: [{ [cg]: bR, endpoint: bu, [cf2]: n }, { endpoint: bu, [cf2]: n }], [cf2]: o }, { [cg]: [aG, aE, Y, ad, az, aD], endpoint: bu, [cf2]: n }, { [cg]: [aG, aE, ao, ax], endpoint: { [cl]: R, [cm]: ay, [cs]: ai }, [cf2]: n }, { [cg]: [aG, aE, ao, az, aA], rules: [{ [cg]: bR, endpoint: { [cl]: R, [cm]: aC, [cs]: ai }, [cf2]: n }, { endpoint: bv, [cf2]: n }], [cf2]: o }, { [cg]: [aG, aE, ao, az, aD], endpoint: bv, [cf2]: n }], [cf2]: o }, aP], [cf2]: o }], [cf2]: o }], [cf2]: o }, { error: "A region must be set when sending requests to S3.", [cf2]: e }] };
    exports.ruleSet = _data;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-s3@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-s3/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-s3@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-s3/dist-cjs/endpoint/endpointResolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs31();
    var util_endpoints_2 = require_dist_cjs30();
    var ruleset_1 = require_ruleset();
    var cache = new util_endpoints_2.EndpointCache({
      size: 50,
      params: [
        "Accelerate",
        "Bucket",
        "DisableAccessPoints",
        "DisableMultiRegionAccessPoints",
        "DisableS3ExpressSessionAuth",
        "Endpoint",
        "ForcePathStyle",
        "Region",
        "UseArnRegion",
        "UseDualStack",
        "UseFIPS",
        "UseGlobalEndpoint",
        "UseObjectLambdaEndpoint",
        "UseS3ExpressControlEndpoint"
      ]
    });
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return cache.get(endpointParams, () => (0, util_endpoints_2.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      }));
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
    util_endpoints_2.customEndpointFunctions.aws = util_endpoints_1.awsEndpointFunctions;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-s3@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-s3/dist-cjs/auth/httpAuthSchemeProvider.js
var require_httpAuthSchemeProvider = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-s3@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-s3/dist-cjs/auth/httpAuthSchemeProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveHttpAuthSchemeConfig = exports.defaultS3HttpAuthSchemeProvider = exports.defaultS3HttpAuthSchemeParametersProvider = void 0;
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var signature_v4_multi_region_1 = require_dist_cjs39();
    var middleware_endpoint_1 = require_dist_cjs44();
    var util_middleware_1 = require_dist_cjs4();
    var endpointResolver_1 = require_endpointResolver();
    var createEndpointRuleSetHttpAuthSchemeParametersProvider = (defaultHttpAuthSchemeParametersProvider) => async (config, context, input) => {
      if (!input) {
        throw new Error(`Could not find \`input\` for \`defaultEndpointRuleSetHttpAuthSchemeParametersProvider\``);
      }
      const defaultParameters = await defaultHttpAuthSchemeParametersProvider(config, context, input);
      const instructionsFn = (0, util_middleware_1.getSmithyContext)(context)?.commandInstance?.constructor?.getEndpointParameterInstructions;
      if (!instructionsFn) {
        throw new Error(`getEndpointParameterInstructions() is not defined on \`${context.commandName}\``);
      }
      const endpointParameters = await (0, middleware_endpoint_1.resolveParams)(input, { getEndpointParameterInstructions: instructionsFn }, config);
      return Object.assign(defaultParameters, endpointParameters);
    };
    var _defaultS3HttpAuthSchemeParametersProvider = async (config, context, input) => {
      return {
        operation: (0, util_middleware_1.getSmithyContext)(context).operation,
        region: await (0, util_middleware_1.normalizeProvider)(config.region)() || (() => {
          throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
        })()
      };
    };
    exports.defaultS3HttpAuthSchemeParametersProvider = createEndpointRuleSetHttpAuthSchemeParametersProvider(_defaultS3HttpAuthSchemeParametersProvider);
    function createAwsAuthSigv4HttpAuthOption(authParameters) {
      return {
        schemeId: "aws.auth#sigv4",
        signingProperties: {
          name: "s3",
          region: authParameters.region
        },
        propertiesExtractor: (config, context) => ({
          signingProperties: {
            config,
            context
          }
        })
      };
    }
    function createAwsAuthSigv4aHttpAuthOption(authParameters) {
      return {
        schemeId: "aws.auth#sigv4a",
        signingProperties: {
          name: "s3",
          region: authParameters.region
        },
        propertiesExtractor: (config, context) => ({
          signingProperties: {
            config,
            context
          }
        })
      };
    }
    var createEndpointRuleSetHttpAuthSchemeProvider = (defaultEndpointResolver, defaultHttpAuthSchemeResolver, createHttpAuthOptionFunctions) => {
      const endpointRuleSetHttpAuthSchemeProvider = (authParameters) => {
        const endpoint = defaultEndpointResolver(authParameters);
        const authSchemes = endpoint.properties?.authSchemes;
        if (!authSchemes) {
          return defaultHttpAuthSchemeResolver(authParameters);
        }
        const options = [];
        for (const scheme of authSchemes) {
          const { name: resolvedName, properties = {}, ...rest } = scheme;
          const name = resolvedName.toLowerCase();
          if (resolvedName !== name) {
            console.warn(`HttpAuthScheme has been normalized with lowercasing: \`${resolvedName}\` to \`${name}\``);
          }
          let schemeId;
          if (name === "sigv4a") {
            schemeId = "aws.auth#sigv4a";
            const sigv4Present = authSchemes.find((s) => {
              const name2 = s.name.toLowerCase();
              return name2 !== "sigv4a" && name2.startsWith("sigv4");
            });
            if (!signature_v4_multi_region_1.signatureV4CrtContainer.CrtSignerV4 && sigv4Present) {
              continue;
            }
          } else if (name.startsWith("sigv4")) {
            schemeId = "aws.auth#sigv4";
          } else {
            throw new Error(`Unknown HttpAuthScheme found in \`@smithy.rules#endpointRuleSet\`: \`${name}\``);
          }
          const createOption = createHttpAuthOptionFunctions[schemeId];
          if (!createOption) {
            throw new Error(`Could not find HttpAuthOption create function for \`${schemeId}\``);
          }
          const option = createOption(authParameters);
          option.schemeId = schemeId;
          option.signingProperties = { ...option.signingProperties || {}, ...rest, ...properties };
          options.push(option);
        }
        return options;
      };
      return endpointRuleSetHttpAuthSchemeProvider;
    };
    var _defaultS3HttpAuthSchemeProvider = (authParameters) => {
      const options = [];
      switch (authParameters.operation) {
        default: {
          options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
          options.push(createAwsAuthSigv4aHttpAuthOption(authParameters));
        }
      }
      return options;
    };
    exports.defaultS3HttpAuthSchemeProvider = createEndpointRuleSetHttpAuthSchemeProvider(endpointResolver_1.defaultEndpointResolver, _defaultS3HttpAuthSchemeProvider, {
      "aws.auth#sigv4": createAwsAuthSigv4HttpAuthOption,
      "aws.auth#sigv4a": createAwsAuthSigv4aHttpAuthOption
    });
    var resolveHttpAuthSchemeConfig = (config) => {
      const config_0 = (0, core_1.resolveAwsSdkSigV4Config)(config);
      const config_1 = (0, core_1.resolveAwsSdkSigV4AConfig)(config_0);
      return {
        ...config_1
      };
    };
    exports.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+xml-builder@3.696.0/node_modules/@aws-sdk/xml-builder/dist-cjs/index.js
var require_dist_cjs45 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+xml-builder@3.696.0/node_modules/@aws-sdk/xml-builder/dist-cjs/index.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      XmlNode: () => XmlNode,
      XmlText: () => XmlText
    });
    module.exports = __toCommonJS2(src_exports);
    function escapeAttribute(value) {
      return value.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
    }
    __name(escapeAttribute, "escapeAttribute");
    function escapeElement(value) {
      return value.replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/'/g, "&apos;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\r/g, "&#x0D;").replace(/\n/g, "&#x0A;").replace(/\u0085/g, "&#x85;").replace(/\u2028/, "&#x2028;");
    }
    __name(escapeElement, "escapeElement");
    var _XmlText = class _XmlText {
      constructor(value) {
        this.value = value;
      }
      toString() {
        return escapeElement("" + this.value);
      }
    };
    __name(_XmlText, "XmlText");
    var XmlText = _XmlText;
    var _XmlNode = class _XmlNode2 {
      constructor(name, children = []) {
        this.name = name;
        this.children = children;
        this.attributes = {};
      }
      static of(name, childText, withName) {
        const node = new _XmlNode2(name);
        if (childText !== void 0) {
          node.addChildNode(new XmlText(childText));
        }
        if (withName !== void 0) {
          node.withName(withName);
        }
        return node;
      }
      withName(name) {
        this.name = name;
        return this;
      }
      addAttribute(name, value) {
        this.attributes[name] = value;
        return this;
      }
      addChildNode(child) {
        this.children.push(child);
        return this;
      }
      removeAttribute(name) {
        delete this.attributes[name];
        return this;
      }
      /**
       * @internal
       * Alias of {@link XmlNode#withName(string)} for codegen brevity.
       */
      n(name) {
        this.name = name;
        return this;
      }
      /**
       * @internal
       * Alias of {@link XmlNode#addChildNode(string)} for codegen brevity.
       */
      c(child) {
        this.children.push(child);
        return this;
      }
      /**
       * @internal
       * Checked version of {@link XmlNode#addAttribute(string)} for codegen brevity.
       */
      a(name, value) {
        if (value != null) {
          this.attributes[name] = value;
        }
        return this;
      }
      /**
       * Create a child node.
       * Used in serialization of string fields.
       * @internal
       */
      cc(input, field, withName = field) {
        if (input[field] != null) {
          const node = _XmlNode2.of(field, input[field]).withName(withName);
          this.c(node);
        }
      }
      /**
       * Creates list child nodes.
       * @internal
       */
      l(input, listName, memberName, valueProvider) {
        if (input[listName] != null) {
          const nodes = valueProvider();
          nodes.map((node) => {
            node.withName(memberName);
            this.c(node);
          });
        }
      }
      /**
       * Creates list child nodes with container.
       * @internal
       */
      lc(input, listName, memberName, valueProvider) {
        if (input[listName] != null) {
          const nodes = valueProvider();
          const containerNode = new _XmlNode2(memberName);
          nodes.map((node) => {
            containerNode.c(node);
          });
          this.c(containerNode);
        }
      }
      toString() {
        const hasChildren = Boolean(this.children.length);
        let xmlText = `<${this.name}`;
        const attributes = this.attributes;
        for (const attributeName of Object.keys(attributes)) {
          const attribute = attributes[attributeName];
          if (attribute != null) {
            xmlText += ` ${attributeName}="${escapeAttribute("" + attribute)}"`;
          }
        }
        return xmlText += !hasChildren ? "/>" : `>${this.children.map((c) => c.toString()).join("")}</${this.name}>`;
      }
    };
    __name(_XmlNode, "XmlNode");
    var XmlNode = _XmlNode;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-s3@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-s3/package.json
var require_package = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-s3@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-s3/package.json"(exports, module) {
    module.exports = {
      name: "@aws-sdk/client-s3",
      description: "AWS SDK for JavaScript S3 Client for Node.js, Browser and React Native",
      version: "3.699.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "node ../../scripts/compilation/inline client-s3",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo s3",
        test: "yarn g:vitest run",
        "test:browser": "node ./test/browser-build/esbuild && vitest run -c vitest.config.browser.ts --mode development",
        "test:browser:watch": "node ./test/browser-build/esbuild && yarn g:vitest watch -c vitest.config.browser.ts",
        "test:e2e": "yarn g:vitest run -c vitest.config.e2e.ts --mode development && yarn test:browser",
        "test:e2e:watch": "yarn g:vitest watch -c vitest.config.e2e.ts",
        "test:watch": "yarn g:vitest watch"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha1-browser": "5.2.0",
        "@aws-crypto/sha256-browser": "5.2.0",
        "@aws-crypto/sha256-js": "5.2.0",
        "@aws-sdk/client-sso-oidc": "3.699.0",
        "@aws-sdk/client-sts": "3.699.0",
        "@aws-sdk/core": "3.696.0",
        "@aws-sdk/credential-provider-node": "3.699.0",
        "@aws-sdk/middleware-bucket-endpoint": "3.696.0",
        "@aws-sdk/middleware-expect-continue": "3.696.0",
        "@aws-sdk/middleware-flexible-checksums": "3.697.0",
        "@aws-sdk/middleware-host-header": "3.696.0",
        "@aws-sdk/middleware-location-constraint": "3.696.0",
        "@aws-sdk/middleware-logger": "3.696.0",
        "@aws-sdk/middleware-recursion-detection": "3.696.0",
        "@aws-sdk/middleware-sdk-s3": "3.696.0",
        "@aws-sdk/middleware-ssec": "3.696.0",
        "@aws-sdk/middleware-user-agent": "3.696.0",
        "@aws-sdk/region-config-resolver": "3.696.0",
        "@aws-sdk/signature-v4-multi-region": "3.696.0",
        "@aws-sdk/types": "3.696.0",
        "@aws-sdk/util-endpoints": "3.696.0",
        "@aws-sdk/util-user-agent-browser": "3.696.0",
        "@aws-sdk/util-user-agent-node": "3.696.0",
        "@aws-sdk/xml-builder": "3.696.0",
        "@smithy/config-resolver": "^3.0.12",
        "@smithy/core": "^2.5.3",
        "@smithy/eventstream-serde-browser": "^3.0.13",
        "@smithy/eventstream-serde-config-resolver": "^3.0.10",
        "@smithy/eventstream-serde-node": "^3.0.12",
        "@smithy/fetch-http-handler": "^4.1.1",
        "@smithy/hash-blob-browser": "^3.1.9",
        "@smithy/hash-node": "^3.0.10",
        "@smithy/hash-stream-node": "^3.1.9",
        "@smithy/invalid-dependency": "^3.0.10",
        "@smithy/md5-js": "^3.0.10",
        "@smithy/middleware-content-length": "^3.0.12",
        "@smithy/middleware-endpoint": "^3.2.3",
        "@smithy/middleware-retry": "^3.0.27",
        "@smithy/middleware-serde": "^3.0.10",
        "@smithy/middleware-stack": "^3.0.10",
        "@smithy/node-config-provider": "^3.1.11",
        "@smithy/node-http-handler": "^3.3.1",
        "@smithy/protocol-http": "^4.1.7",
        "@smithy/smithy-client": "^3.4.4",
        "@smithy/types": "^3.7.1",
        "@smithy/url-parser": "^3.0.10",
        "@smithy/util-base64": "^3.0.0",
        "@smithy/util-body-length-browser": "^3.0.0",
        "@smithy/util-body-length-node": "^3.0.0",
        "@smithy/util-defaults-mode-browser": "^3.0.27",
        "@smithy/util-defaults-mode-node": "^3.0.27",
        "@smithy/util-endpoints": "^2.1.6",
        "@smithy/util-middleware": "^3.0.10",
        "@smithy/util-retry": "^3.0.10",
        "@smithy/util-stream": "^3.3.1",
        "@smithy/util-utf8": "^3.0.0",
        "@smithy/util-waiter": "^3.1.9",
        tslib: "^2.6.2"
      },
      devDependencies: {
        "@aws-sdk/signature-v4-crt": "3.696.0",
        "@tsconfig/node16": "16.1.3",
        "@types/node": "^16.18.96",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=16.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-s3",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-s3"
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-env@3.696.0/node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js
var require_dist_cjs46 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-env@3.696.0/node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      ENV_ACCOUNT_ID: () => ENV_ACCOUNT_ID,
      ENV_CREDENTIAL_SCOPE: () => ENV_CREDENTIAL_SCOPE,
      ENV_EXPIRATION: () => ENV_EXPIRATION,
      ENV_KEY: () => ENV_KEY,
      ENV_SECRET: () => ENV_SECRET,
      ENV_SESSION: () => ENV_SESSION,
      fromEnv: () => fromEnv
    });
    module.exports = __toCommonJS2(src_exports);
    var import_client2 = (init_client(), __toCommonJS(client_exports));
    var import_property_provider2 = require_dist_cjs16();
    var ENV_KEY = "AWS_ACCESS_KEY_ID";
    var ENV_SECRET = "AWS_SECRET_ACCESS_KEY";
    var ENV_SESSION = "AWS_SESSION_TOKEN";
    var ENV_EXPIRATION = "AWS_CREDENTIAL_EXPIRATION";
    var ENV_CREDENTIAL_SCOPE = "AWS_CREDENTIAL_SCOPE";
    var ENV_ACCOUNT_ID = "AWS_ACCOUNT_ID";
    var fromEnv = /* @__PURE__ */ __name((init) => async () => {
      var _a;
      (_a = init == null ? void 0 : init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-env - fromEnv");
      const accessKeyId = process.env[ENV_KEY];
      const secretAccessKey = process.env[ENV_SECRET];
      const sessionToken = process.env[ENV_SESSION];
      const expiry = process.env[ENV_EXPIRATION];
      const credentialScope = process.env[ENV_CREDENTIAL_SCOPE];
      const accountId = process.env[ENV_ACCOUNT_ID];
      if (accessKeyId && secretAccessKey) {
        const credentials = {
          accessKeyId,
          secretAccessKey,
          ...sessionToken && { sessionToken },
          ...expiry && { expiration: new Date(expiry) },
          ...credentialScope && { credentialScope },
          ...accountId && { accountId }
        };
        (0, import_client2.setCredentialFeature)(credentials, "CREDENTIALS_ENV_VARS", "g");
        return credentials;
      }
      throw new import_property_provider2.CredentialsProviderError("Unable to find environment variable credentials.", { logger: init == null ? void 0 : init.logger });
    }, "fromEnv");
  }
});

// ../../node_modules/.pnpm/@smithy+credential-provider-imds@3.2.8/node_modules/@smithy/credential-provider-imds/dist-cjs/index.js
var require_dist_cjs47 = __commonJS({
  "../../node_modules/.pnpm/@smithy+credential-provider-imds@3.2.8/node_modules/@smithy/credential-provider-imds/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      DEFAULT_MAX_RETRIES: () => DEFAULT_MAX_RETRIES,
      DEFAULT_TIMEOUT: () => DEFAULT_TIMEOUT,
      ENV_CMDS_AUTH_TOKEN: () => ENV_CMDS_AUTH_TOKEN,
      ENV_CMDS_FULL_URI: () => ENV_CMDS_FULL_URI,
      ENV_CMDS_RELATIVE_URI: () => ENV_CMDS_RELATIVE_URI,
      Endpoint: () => Endpoint,
      fromContainerMetadata: () => fromContainerMetadata,
      fromInstanceMetadata: () => fromInstanceMetadata,
      getInstanceMetadataEndpoint: () => getInstanceMetadataEndpoint,
      httpRequest: () => httpRequest,
      providerConfigFromInit: () => providerConfigFromInit
    });
    module.exports = __toCommonJS2(src_exports);
    var import_url = __require("url");
    var import_property_provider2 = require_dist_cjs16();
    var import_buffer = __require("buffer");
    var import_http = __require("http");
    function httpRequest(options) {
      return new Promise((resolve, reject) => {
        var _a;
        const req = (0, import_http.request)({
          method: "GET",
          ...options,
          // Node.js http module doesn't accept hostname with square brackets
          // Refs: https://github.com/nodejs/node/issues/39738
          hostname: (_a = options.hostname) == null ? void 0 : _a.replace(/^\[(.+)\]$/, "$1")
        });
        req.on("error", (err) => {
          reject(Object.assign(new import_property_provider2.ProviderError("Unable to connect to instance metadata service"), err));
          req.destroy();
        });
        req.on("timeout", () => {
          reject(new import_property_provider2.ProviderError("TimeoutError from instance metadata service"));
          req.destroy();
        });
        req.on("response", (res) => {
          const { statusCode = 400 } = res;
          if (statusCode < 200 || 300 <= statusCode) {
            reject(
              Object.assign(new import_property_provider2.ProviderError("Error response received from instance metadata service"), { statusCode })
            );
            req.destroy();
          }
          const chunks = [];
          res.on("data", (chunk) => {
            chunks.push(chunk);
          });
          res.on("end", () => {
            resolve(import_buffer.Buffer.concat(chunks));
            req.destroy();
          });
        });
        req.end();
      });
    }
    __name(httpRequest, "httpRequest");
    var isImdsCredentials = /* @__PURE__ */ __name((arg) => Boolean(arg) && typeof arg === "object" && typeof arg.AccessKeyId === "string" && typeof arg.SecretAccessKey === "string" && typeof arg.Token === "string" && typeof arg.Expiration === "string", "isImdsCredentials");
    var fromImdsCredentials = /* @__PURE__ */ __name((creds) => ({
      accessKeyId: creds.AccessKeyId,
      secretAccessKey: creds.SecretAccessKey,
      sessionToken: creds.Token,
      expiration: new Date(creds.Expiration),
      ...creds.AccountId && { accountId: creds.AccountId }
    }), "fromImdsCredentials");
    var DEFAULT_TIMEOUT = 1e3;
    var DEFAULT_MAX_RETRIES = 0;
    var providerConfigFromInit = /* @__PURE__ */ __name(({
      maxRetries = DEFAULT_MAX_RETRIES,
      timeout = DEFAULT_TIMEOUT
    }) => ({ maxRetries, timeout }), "providerConfigFromInit");
    var retry = /* @__PURE__ */ __name((toRetry, maxRetries) => {
      let promise = toRetry();
      for (let i = 0; i < maxRetries; i++) {
        promise = promise.catch(toRetry);
      }
      return promise;
    }, "retry");
    var ENV_CMDS_FULL_URI = "AWS_CONTAINER_CREDENTIALS_FULL_URI";
    var ENV_CMDS_RELATIVE_URI = "AWS_CONTAINER_CREDENTIALS_RELATIVE_URI";
    var ENV_CMDS_AUTH_TOKEN = "AWS_CONTAINER_AUTHORIZATION_TOKEN";
    var fromContainerMetadata = /* @__PURE__ */ __name((init = {}) => {
      const { timeout, maxRetries } = providerConfigFromInit(init);
      return () => retry(async () => {
        const requestOptions = await getCmdsUri({ logger: init.logger });
        const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));
        if (!isImdsCredentials(credsResponse)) {
          throw new import_property_provider2.CredentialsProviderError("Invalid response received from instance metadata service.", {
            logger: init.logger
          });
        }
        return fromImdsCredentials(credsResponse);
      }, maxRetries);
    }, "fromContainerMetadata");
    var requestFromEcsImds = /* @__PURE__ */ __name(async (timeout, options) => {
      if (process.env[ENV_CMDS_AUTH_TOKEN]) {
        options.headers = {
          ...options.headers,
          Authorization: process.env[ENV_CMDS_AUTH_TOKEN]
        };
      }
      const buffer = await httpRequest({
        ...options,
        timeout
      });
      return buffer.toString();
    }, "requestFromEcsImds");
    var CMDS_IP = "169.254.170.2";
    var GREENGRASS_HOSTS = {
      localhost: true,
      "127.0.0.1": true
    };
    var GREENGRASS_PROTOCOLS = {
      "http:": true,
      "https:": true
    };
    var getCmdsUri = /* @__PURE__ */ __name(async ({ logger: logger2 }) => {
      if (process.env[ENV_CMDS_RELATIVE_URI]) {
        return {
          hostname: CMDS_IP,
          path: process.env[ENV_CMDS_RELATIVE_URI]
        };
      }
      if (process.env[ENV_CMDS_FULL_URI]) {
        const parsed = (0, import_url.parse)(process.env[ENV_CMDS_FULL_URI]);
        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {
          throw new import_property_provider2.CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, {
            tryNextLink: false,
            logger: logger2
          });
        }
        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {
          throw new import_property_provider2.CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, {
            tryNextLink: false,
            logger: logger2
          });
        }
        return {
          ...parsed,
          port: parsed.port ? parseInt(parsed.port, 10) : void 0
        };
      }
      throw new import_property_provider2.CredentialsProviderError(
        `The container metadata credential provider cannot be used unless the ${ENV_CMDS_RELATIVE_URI} or ${ENV_CMDS_FULL_URI} environment variable is set`,
        {
          tryNextLink: false,
          logger: logger2
        }
      );
    }, "getCmdsUri");
    var _InstanceMetadataV1FallbackError = class _InstanceMetadataV1FallbackError2 extends import_property_provider2.CredentialsProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "InstanceMetadataV1FallbackError";
        Object.setPrototypeOf(this, _InstanceMetadataV1FallbackError2.prototype);
      }
    };
    __name(_InstanceMetadataV1FallbackError, "InstanceMetadataV1FallbackError");
    var InstanceMetadataV1FallbackError = _InstanceMetadataV1FallbackError;
    var import_node_config_provider = require_dist_cjs41();
    var import_url_parser = require_dist_cjs43();
    var Endpoint = /* @__PURE__ */ ((Endpoint2) => {
      Endpoint2["IPv4"] = "http://169.254.169.254";
      Endpoint2["IPv6"] = "http://[fd00:ec2::254]";
      return Endpoint2;
    })(Endpoint || {});
    var ENV_ENDPOINT_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT";
    var CONFIG_ENDPOINT_NAME = "ec2_metadata_service_endpoint";
    var ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[ENV_ENDPOINT_NAME],
      configFileSelector: (profile) => profile[CONFIG_ENDPOINT_NAME],
      default: void 0
    };
    var EndpointMode = /* @__PURE__ */ ((EndpointMode2) => {
      EndpointMode2["IPv4"] = "IPv4";
      EndpointMode2["IPv6"] = "IPv6";
      return EndpointMode2;
    })(EndpointMode || {});
    var ENV_ENDPOINT_MODE_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE";
    var CONFIG_ENDPOINT_MODE_NAME = "ec2_metadata_service_endpoint_mode";
    var ENDPOINT_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[ENV_ENDPOINT_MODE_NAME],
      configFileSelector: (profile) => profile[CONFIG_ENDPOINT_MODE_NAME],
      default: "IPv4"
      /* IPv4 */
    };
    var getInstanceMetadataEndpoint = /* @__PURE__ */ __name(async () => (0, import_url_parser.parseUrl)(await getFromEndpointConfig() || await getFromEndpointModeConfig()), "getInstanceMetadataEndpoint");
    var getFromEndpointConfig = /* @__PURE__ */ __name(async () => (0, import_node_config_provider.loadConfig)(ENDPOINT_CONFIG_OPTIONS)(), "getFromEndpointConfig");
    var getFromEndpointModeConfig = /* @__PURE__ */ __name(async () => {
      const endpointMode = await (0, import_node_config_provider.loadConfig)(ENDPOINT_MODE_CONFIG_OPTIONS)();
      switch (endpointMode) {
        case "IPv4":
          return "http://169.254.169.254";
        case "IPv6":
          return "http://[fd00:ec2::254]";
        default:
          throw new Error(`Unsupported endpoint mode: ${endpointMode}. Select from ${Object.values(EndpointMode)}`);
      }
    }, "getFromEndpointModeConfig");
    var STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;
    var STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;
    var STATIC_STABILITY_DOC_URL = "https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html";
    var getExtendedInstanceMetadataCredentials = /* @__PURE__ */ __name((credentials, logger2) => {
      const refreshInterval = STATIC_STABILITY_REFRESH_INTERVAL_SECONDS + Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);
      const newExpiration = new Date(Date.now() + refreshInterval * 1e3);
      logger2.warn(
        `Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(newExpiration)}.
For more information, please visit: ` + STATIC_STABILITY_DOC_URL
      );
      const originalExpiration = credentials.originalExpiration ?? credentials.expiration;
      return {
        ...credentials,
        ...originalExpiration ? { originalExpiration } : {},
        expiration: newExpiration
      };
    }, "getExtendedInstanceMetadataCredentials");
    var staticStabilityProvider = /* @__PURE__ */ __name((provider, options = {}) => {
      const logger2 = (options == null ? void 0 : options.logger) || console;
      let pastCredentials;
      return async () => {
        let credentials;
        try {
          credentials = await provider();
          if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {
            credentials = getExtendedInstanceMetadataCredentials(credentials, logger2);
          }
        } catch (e) {
          if (pastCredentials) {
            logger2.warn("Credential renew failed: ", e);
            credentials = getExtendedInstanceMetadataCredentials(pastCredentials, logger2);
          } else {
            throw e;
          }
        }
        pastCredentials = credentials;
        return credentials;
      };
    }, "staticStabilityProvider");
    var IMDS_PATH = "/latest/meta-data/iam/security-credentials/";
    var IMDS_TOKEN_PATH = "/latest/api/token";
    var AWS_EC2_METADATA_V1_DISABLED = "AWS_EC2_METADATA_V1_DISABLED";
    var PROFILE_AWS_EC2_METADATA_V1_DISABLED = "ec2_metadata_v1_disabled";
    var X_AWS_EC2_METADATA_TOKEN = "x-aws-ec2-metadata-token";
    var fromInstanceMetadata = /* @__PURE__ */ __name((init = {}) => staticStabilityProvider(getInstanceMetadataProvider(init), { logger: init.logger }), "fromInstanceMetadata");
    var getInstanceMetadataProvider = /* @__PURE__ */ __name((init = {}) => {
      let disableFetchToken = false;
      const { logger: logger2, profile } = init;
      const { timeout, maxRetries } = providerConfigFromInit(init);
      const getCredentials = /* @__PURE__ */ __name(async (maxRetries2, options) => {
        var _a;
        const isImdsV1Fallback = disableFetchToken || ((_a = options.headers) == null ? void 0 : _a[X_AWS_EC2_METADATA_TOKEN]) == null;
        if (isImdsV1Fallback) {
          let fallbackBlockedFromProfile = false;
          let fallbackBlockedFromProcessEnv = false;
          const configValue = await (0, import_node_config_provider.loadConfig)(
            {
              environmentVariableSelector: (env) => {
                const envValue = env[AWS_EC2_METADATA_V1_DISABLED];
                fallbackBlockedFromProcessEnv = !!envValue && envValue !== "false";
                if (envValue === void 0) {
                  throw new import_property_provider2.CredentialsProviderError(
                    `${AWS_EC2_METADATA_V1_DISABLED} not set in env, checking config file next.`,
                    { logger: init.logger }
                  );
                }
                return fallbackBlockedFromProcessEnv;
              },
              configFileSelector: (profile2) => {
                const profileValue = profile2[PROFILE_AWS_EC2_METADATA_V1_DISABLED];
                fallbackBlockedFromProfile = !!profileValue && profileValue !== "false";
                return fallbackBlockedFromProfile;
              },
              default: false
            },
            {
              profile
            }
          )();
          if (init.ec2MetadataV1Disabled || configValue) {
            const causes = [];
            if (init.ec2MetadataV1Disabled)
              causes.push("credential provider initialization (runtime option ec2MetadataV1Disabled)");
            if (fallbackBlockedFromProfile)
              causes.push(`config file profile (${PROFILE_AWS_EC2_METADATA_V1_DISABLED})`);
            if (fallbackBlockedFromProcessEnv)
              causes.push(`process environment variable (${AWS_EC2_METADATA_V1_DISABLED})`);
            throw new InstanceMetadataV1FallbackError(
              `AWS EC2 Metadata v1 fallback has been blocked by AWS SDK configuration in the following: [${causes.join(
                ", "
              )}].`
            );
          }
        }
        const imdsProfile = (await retry(async () => {
          let profile2;
          try {
            profile2 = await getProfile(options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return profile2;
        }, maxRetries2)).trim();
        return retry(async () => {
          let creds;
          try {
            creds = await getCredentialsFromProfile(imdsProfile, options, init);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return creds;
        }, maxRetries2);
      }, "getCredentials");
      return async () => {
        const endpoint = await getInstanceMetadataEndpoint();
        if (disableFetchToken) {
          logger2 == null ? void 0 : logger2.debug("AWS SDK Instance Metadata", "using v1 fallback (no token fetch)");
          return getCredentials(maxRetries, { ...endpoint, timeout });
        } else {
          let token;
          try {
            token = (await getMetadataToken({ ...endpoint, timeout })).toString();
          } catch (error) {
            if ((error == null ? void 0 : error.statusCode) === 400) {
              throw Object.assign(error, {
                message: "EC2 Metadata token request returned error"
              });
            } else if (error.message === "TimeoutError" || [403, 404, 405].includes(error.statusCode)) {
              disableFetchToken = true;
            }
            logger2 == null ? void 0 : logger2.debug("AWS SDK Instance Metadata", "using v1 fallback (initial)");
            return getCredentials(maxRetries, { ...endpoint, timeout });
          }
          return getCredentials(maxRetries, {
            ...endpoint,
            headers: {
              [X_AWS_EC2_METADATA_TOKEN]: token
            },
            timeout
          });
        }
      };
    }, "getInstanceMetadataProvider");
    var getMetadataToken = /* @__PURE__ */ __name(async (options) => httpRequest({
      ...options,
      path: IMDS_TOKEN_PATH,
      method: "PUT",
      headers: {
        "x-aws-ec2-metadata-token-ttl-seconds": "21600"
      }
    }), "getMetadataToken");
    var getProfile = /* @__PURE__ */ __name(async (options) => (await httpRequest({ ...options, path: IMDS_PATH })).toString(), "getProfile");
    var getCredentialsFromProfile = /* @__PURE__ */ __name(async (profile, options, init) => {
      const credentialsResponse = JSON.parse(
        (await httpRequest({
          ...options,
          path: IMDS_PATH + profile
        })).toString()
      );
      if (!isImdsCredentials(credentialsResponse)) {
        throw new import_property_provider2.CredentialsProviderError("Invalid response received from instance metadata service.", {
          logger: init.logger
        });
      }
      return fromImdsCredentials(credentialsResponse);
    }, "getCredentialsFromProfile");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-http@3.696.0/node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/checkUrl.js
var require_checkUrl = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-http@3.696.0/node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/checkUrl.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.checkUrl = void 0;
    var property_provider_1 = require_dist_cjs16();
    var ECS_CONTAINER_HOST = "169.254.170.2";
    var EKS_CONTAINER_HOST_IPv4 = "169.254.170.23";
    var EKS_CONTAINER_HOST_IPv6 = "[fd00:ec2::23]";
    var checkUrl = (url, logger2) => {
      if (url.protocol === "https:") {
        return;
      }
      if (url.hostname === ECS_CONTAINER_HOST || url.hostname === EKS_CONTAINER_HOST_IPv4 || url.hostname === EKS_CONTAINER_HOST_IPv6) {
        return;
      }
      if (url.hostname.includes("[")) {
        if (url.hostname === "[::1]" || url.hostname === "[0000:0000:0000:0000:0000:0000:0000:0001]") {
          return;
        }
      } else {
        if (url.hostname === "localhost") {
          return;
        }
        const ipComponents = url.hostname.split(".");
        const inRange = (component) => {
          const num = parseInt(component, 10);
          return 0 <= num && num <= 255;
        };
        if (ipComponents[0] === "127" && inRange(ipComponents[1]) && inRange(ipComponents[2]) && inRange(ipComponents[3]) && ipComponents.length === 4) {
          return;
        }
      }
      throw new property_provider_1.CredentialsProviderError(`URL not accepted. It must either be HTTPS or match one of the following:
  - loopback CIDR 127.0.0.0/8 or [::1/128]
  - ECS container host 169.254.170.2
  - EKS container host 169.254.170.23 or [fd00:ec2::23]`, { logger: logger2 });
    };
    exports.checkUrl = checkUrl;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-http@3.696.0/node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/requestHelpers.js
var require_requestHelpers = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-http@3.696.0/node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/requestHelpers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCredentials = exports.createGetRequest = void 0;
    var property_provider_1 = require_dist_cjs16();
    var protocol_http_1 = require_dist_cjs2();
    var smithy_client_1 = require_dist_cjs19();
    var util_stream_1 = require_dist_cjs15();
    function createGetRequest(url) {
      return new protocol_http_1.HttpRequest({
        protocol: url.protocol,
        hostname: url.hostname,
        port: Number(url.port),
        path: url.pathname,
        query: Array.from(url.searchParams.entries()).reduce((acc, [k, v]) => {
          acc[k] = v;
          return acc;
        }, {}),
        fragment: url.hash
      });
    }
    exports.createGetRequest = createGetRequest;
    async function getCredentials(response, logger2) {
      const stream = (0, util_stream_1.sdkStreamMixin)(response.body);
      const str = await stream.transformToString();
      if (response.statusCode === 200) {
        const parsed = JSON.parse(str);
        if (typeof parsed.AccessKeyId !== "string" || typeof parsed.SecretAccessKey !== "string" || typeof parsed.Token !== "string" || typeof parsed.Expiration !== "string") {
          throw new property_provider_1.CredentialsProviderError("HTTP credential provider response not of the required format, an object matching: { AccessKeyId: string, SecretAccessKey: string, Token: string, Expiration: string(rfc3339) }", { logger: logger2 });
        }
        return {
          accessKeyId: parsed.AccessKeyId,
          secretAccessKey: parsed.SecretAccessKey,
          sessionToken: parsed.Token,
          expiration: (0, smithy_client_1.parseRfc3339DateTime)(parsed.Expiration)
        };
      }
      if (response.statusCode >= 400 && response.statusCode < 500) {
        let parsedBody = {};
        try {
          parsedBody = JSON.parse(str);
        } catch (e) {
        }
        throw Object.assign(new property_provider_1.CredentialsProviderError(`Server responded with status: ${response.statusCode}`, { logger: logger2 }), {
          Code: parsedBody.Code,
          Message: parsedBody.Message
        });
      }
      throw new property_provider_1.CredentialsProviderError(`Server responded with status: ${response.statusCode}`, { logger: logger2 });
    }
    exports.getCredentials = getCredentials;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-http@3.696.0/node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/retry-wrapper.js
var require_retry_wrapper = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-http@3.696.0/node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/retry-wrapper.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.retryWrapper = void 0;
    var retryWrapper = (toRetry, maxRetries, delayMs) => {
      return async () => {
        for (let i = 0; i < maxRetries; ++i) {
          try {
            return await toRetry();
          } catch (e) {
            await new Promise((resolve) => setTimeout(resolve, delayMs));
          }
        }
        return await toRetry();
      };
    };
    exports.retryWrapper = retryWrapper;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-http@3.696.0/node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/fromHttp.js
var require_fromHttp = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-http@3.696.0/node_modules/@aws-sdk/credential-provider-http/dist-cjs/fromHttp/fromHttp.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromHttp = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var client_1 = (init_client(), __toCommonJS(client_exports));
    var node_http_handler_1 = require_dist_cjs12();
    var property_provider_1 = require_dist_cjs16();
    var promises_1 = tslib_1.__importDefault(__require("fs/promises"));
    var checkUrl_1 = require_checkUrl();
    var requestHelpers_1 = require_requestHelpers();
    var retry_wrapper_1 = require_retry_wrapper();
    var AWS_CONTAINER_CREDENTIALS_RELATIVE_URI = "AWS_CONTAINER_CREDENTIALS_RELATIVE_URI";
    var DEFAULT_LINK_LOCAL_HOST = "http://169.254.170.2";
    var AWS_CONTAINER_CREDENTIALS_FULL_URI = "AWS_CONTAINER_CREDENTIALS_FULL_URI";
    var AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE = "AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE";
    var AWS_CONTAINER_AUTHORIZATION_TOKEN = "AWS_CONTAINER_AUTHORIZATION_TOKEN";
    var fromHttp = (options = {}) => {
      options.logger?.debug("@aws-sdk/credential-provider-http - fromHttp");
      let host;
      const relative = options.awsContainerCredentialsRelativeUri ?? process.env[AWS_CONTAINER_CREDENTIALS_RELATIVE_URI];
      const full = options.awsContainerCredentialsFullUri ?? process.env[AWS_CONTAINER_CREDENTIALS_FULL_URI];
      const token = options.awsContainerAuthorizationToken ?? process.env[AWS_CONTAINER_AUTHORIZATION_TOKEN];
      const tokenFile = options.awsContainerAuthorizationTokenFile ?? process.env[AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE];
      const warn = options.logger?.constructor?.name === "NoOpLogger" || !options.logger ? console.warn : options.logger.warn;
      if (relative && full) {
        warn("@aws-sdk/credential-provider-http: you have set both awsContainerCredentialsRelativeUri and awsContainerCredentialsFullUri.");
        warn("awsContainerCredentialsFullUri will take precedence.");
      }
      if (token && tokenFile) {
        warn("@aws-sdk/credential-provider-http: you have set both awsContainerAuthorizationToken and awsContainerAuthorizationTokenFile.");
        warn("awsContainerAuthorizationToken will take precedence.");
      }
      if (full) {
        host = full;
      } else if (relative) {
        host = `${DEFAULT_LINK_LOCAL_HOST}${relative}`;
      } else {
        throw new property_provider_1.CredentialsProviderError(`No HTTP credential provider host provided.
Set AWS_CONTAINER_CREDENTIALS_FULL_URI or AWS_CONTAINER_CREDENTIALS_RELATIVE_URI.`, { logger: options.logger });
      }
      const url = new URL(host);
      (0, checkUrl_1.checkUrl)(url, options.logger);
      const requestHandler = new node_http_handler_1.NodeHttpHandler({
        requestTimeout: options.timeout ?? 1e3,
        connectionTimeout: options.timeout ?? 1e3
      });
      return (0, retry_wrapper_1.retryWrapper)(async () => {
        const request = (0, requestHelpers_1.createGetRequest)(url);
        if (token) {
          request.headers.Authorization = token;
        } else if (tokenFile) {
          request.headers.Authorization = (await promises_1.default.readFile(tokenFile)).toString();
        }
        try {
          const result = await requestHandler.handle(request);
          return (0, requestHelpers_1.getCredentials)(result.response).then((creds) => (0, client_1.setCredentialFeature)(creds, "CREDENTIALS_HTTP", "z"));
        } catch (e) {
          throw new property_provider_1.CredentialsProviderError(String(e), { logger: options.logger });
        }
      }, options.maxRetries ?? 3, options.timeout ?? 1e3);
    };
    exports.fromHttp = fromHttp;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-http@3.696.0/node_modules/@aws-sdk/credential-provider-http/dist-cjs/index.js
var require_dist_cjs48 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-http@3.696.0/node_modules/@aws-sdk/credential-provider-http/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromHttp = void 0;
    var fromHttp_1 = require_fromHttp();
    Object.defineProperty(exports, "fromHttp", { enumerable: true, get: function() {
      return fromHttp_1.fromHttp;
    } });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.696.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-sso/dist-cjs/auth/httpAuthSchemeProvider.js
var require_httpAuthSchemeProvider2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.696.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-sso/dist-cjs/auth/httpAuthSchemeProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveHttpAuthSchemeConfig = exports.defaultSSOHttpAuthSchemeProvider = exports.defaultSSOHttpAuthSchemeParametersProvider = void 0;
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var util_middleware_1 = require_dist_cjs4();
    var defaultSSOHttpAuthSchemeParametersProvider = async (config, context, input) => {
      return {
        operation: (0, util_middleware_1.getSmithyContext)(context).operation,
        region: await (0, util_middleware_1.normalizeProvider)(config.region)() || (() => {
          throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
        })()
      };
    };
    exports.defaultSSOHttpAuthSchemeParametersProvider = defaultSSOHttpAuthSchemeParametersProvider;
    function createAwsAuthSigv4HttpAuthOption(authParameters) {
      return {
        schemeId: "aws.auth#sigv4",
        signingProperties: {
          name: "awsssoportal",
          region: authParameters.region
        },
        propertiesExtractor: (config, context) => ({
          signingProperties: {
            config,
            context
          }
        })
      };
    }
    function createSmithyApiNoAuthHttpAuthOption(authParameters) {
      return {
        schemeId: "smithy.api#noAuth"
      };
    }
    var defaultSSOHttpAuthSchemeProvider = (authParameters) => {
      const options = [];
      switch (authParameters.operation) {
        case "GetRoleCredentials": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        case "ListAccountRoles": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        case "ListAccounts": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        case "Logout": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        default: {
          options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
        }
      }
      return options;
    };
    exports.defaultSSOHttpAuthSchemeProvider = defaultSSOHttpAuthSchemeProvider;
    var resolveHttpAuthSchemeConfig = (config) => {
      const config_0 = (0, core_1.resolveAwsSdkSigV4Config)(config);
      return {
        ...config_0
      };
    };
    exports.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.696.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-sso/package.json
var require_package2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.696.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-sso/package.json"(exports, module) {
    module.exports = {
      name: "@aws-sdk/client-sso",
      description: "AWS SDK for JavaScript Sso Client for Node.js, Browser and React Native",
      version: "3.696.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "node ../../scripts/compilation/inline client-sso",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sso"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "5.2.0",
        "@aws-crypto/sha256-js": "5.2.0",
        "@aws-sdk/core": "3.696.0",
        "@aws-sdk/middleware-host-header": "3.696.0",
        "@aws-sdk/middleware-logger": "3.696.0",
        "@aws-sdk/middleware-recursion-detection": "3.696.0",
        "@aws-sdk/middleware-user-agent": "3.696.0",
        "@aws-sdk/region-config-resolver": "3.696.0",
        "@aws-sdk/types": "3.696.0",
        "@aws-sdk/util-endpoints": "3.696.0",
        "@aws-sdk/util-user-agent-browser": "3.696.0",
        "@aws-sdk/util-user-agent-node": "3.696.0",
        "@smithy/config-resolver": "^3.0.12",
        "@smithy/core": "^2.5.3",
        "@smithy/fetch-http-handler": "^4.1.1",
        "@smithy/hash-node": "^3.0.10",
        "@smithy/invalid-dependency": "^3.0.10",
        "@smithy/middleware-content-length": "^3.0.12",
        "@smithy/middleware-endpoint": "^3.2.3",
        "@smithy/middleware-retry": "^3.0.27",
        "@smithy/middleware-serde": "^3.0.10",
        "@smithy/middleware-stack": "^3.0.10",
        "@smithy/node-config-provider": "^3.1.11",
        "@smithy/node-http-handler": "^3.3.1",
        "@smithy/protocol-http": "^4.1.7",
        "@smithy/smithy-client": "^3.4.4",
        "@smithy/types": "^3.7.1",
        "@smithy/url-parser": "^3.0.10",
        "@smithy/util-base64": "^3.0.0",
        "@smithy/util-body-length-browser": "^3.0.0",
        "@smithy/util-body-length-node": "^3.0.0",
        "@smithy/util-defaults-mode-browser": "^3.0.27",
        "@smithy/util-defaults-mode-node": "^3.0.27",
        "@smithy/util-endpoints": "^2.1.6",
        "@smithy/util-middleware": "^3.0.10",
        "@smithy/util-retry": "^3.0.10",
        "@smithy/util-utf8": "^3.0.0",
        tslib: "^2.6.2"
      },
      devDependencies: {
        "@tsconfig/node16": "16.1.3",
        "@types/node": "^16.18.96",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=16.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sso"
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-user-agent-node@3.696.0_aws-crt@1.27.1/node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js
var require_dist_cjs49 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-user-agent-node@3.696.0_aws-crt@1.27.1/node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      NODE_APP_ID_CONFIG_OPTIONS: () => NODE_APP_ID_CONFIG_OPTIONS,
      UA_APP_ID_ENV_NAME: () => UA_APP_ID_ENV_NAME,
      UA_APP_ID_INI_NAME: () => UA_APP_ID_INI_NAME,
      createDefaultUserAgentProvider: () => createDefaultUserAgentProvider,
      crtAvailability: () => crtAvailability,
      defaultUserAgent: () => defaultUserAgent
    });
    module.exports = __toCommonJS2(src_exports);
    var import_os = __require("os");
    var import_process = __require("process");
    var crtAvailability = {
      isCrtAvailable: false
    };
    var isCrtAvailable = /* @__PURE__ */ __name(() => {
      if (crtAvailability.isCrtAvailable) {
        return ["md/crt-avail"];
      }
      return null;
    }, "isCrtAvailable");
    var createDefaultUserAgentProvider = /* @__PURE__ */ __name(({ serviceId, clientVersion }) => {
      return async (config) => {
        var _a;
        const sections = [
          // sdk-metadata
          ["aws-sdk-js", clientVersion],
          // ua-metadata
          ["ua", "2.1"],
          // os-metadata
          [`os/${(0, import_os.platform)()}`, (0, import_os.release)()],
          // language-metadata
          // ECMAScript edition doesn't matter in JS, so no version needed.
          ["lang/js"],
          ["md/nodejs", `${import_process.versions.node}`]
        ];
        const crtAvailable = isCrtAvailable();
        if (crtAvailable) {
          sections.push(crtAvailable);
        }
        if (serviceId) {
          sections.push([`api/${serviceId}`, clientVersion]);
        }
        if (import_process.env.AWS_EXECUTION_ENV) {
          sections.push([`exec-env/${import_process.env.AWS_EXECUTION_ENV}`]);
        }
        const appId = await ((_a = config == null ? void 0 : config.userAgentAppId) == null ? void 0 : _a.call(config));
        const resolvedUserAgent = appId ? [...sections, [`app/${appId}`]] : [...sections];
        return resolvedUserAgent;
      };
    }, "createDefaultUserAgentProvider");
    var defaultUserAgent = createDefaultUserAgentProvider;
    var import_middleware_user_agent = require_dist_cjs32();
    var UA_APP_ID_ENV_NAME = "AWS_SDK_UA_APP_ID";
    var UA_APP_ID_INI_NAME = "sdk-ua-app-id";
    var NODE_APP_ID_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => env2[UA_APP_ID_ENV_NAME],
      configFileSelector: (profile) => profile[UA_APP_ID_INI_NAME],
      default: import_middleware_user_agent.DEFAULT_UA_APP_ID
    };
  }
});

// ../../node_modules/.pnpm/@smithy+hash-node@3.0.11/node_modules/@smithy/hash-node/dist-cjs/index.js
var require_dist_cjs50 = __commonJS({
  "../../node_modules/.pnpm/@smithy+hash-node@3.0.11/node_modules/@smithy/hash-node/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      Hash: () => Hash
    });
    module.exports = __toCommonJS2(src_exports);
    var import_util_buffer_from = require_dist_cjs7();
    var import_util_utf8 = require_dist_cjs8();
    var import_buffer = __require("buffer");
    var import_crypto5 = __require("crypto");
    var _Hash = class _Hash {
      constructor(algorithmIdentifier, secret) {
        this.algorithmIdentifier = algorithmIdentifier;
        this.secret = secret;
        this.reset();
      }
      update(toHash, encoding) {
        this.hash.update((0, import_util_utf8.toUint8Array)(castSourceData(toHash, encoding)));
      }
      digest() {
        return Promise.resolve(this.hash.digest());
      }
      reset() {
        this.hash = this.secret ? (0, import_crypto5.createHmac)(this.algorithmIdentifier, castSourceData(this.secret)) : (0, import_crypto5.createHash)(this.algorithmIdentifier);
      }
    };
    __name(_Hash, "Hash");
    var Hash = _Hash;
    function castSourceData(toCast, encoding) {
      if (import_buffer.Buffer.isBuffer(toCast)) {
        return toCast;
      }
      if (typeof toCast === "string") {
        return (0, import_util_buffer_from.fromString)(toCast, encoding);
      }
      if (ArrayBuffer.isView(toCast)) {
        return (0, import_util_buffer_from.fromArrayBuffer)(toCast.buffer, toCast.byteOffset, toCast.byteLength);
      }
      return (0, import_util_buffer_from.fromArrayBuffer)(toCast);
    }
    __name(castSourceData, "castSourceData");
  }
});

// ../../node_modules/.pnpm/@smithy+util-body-length-node@3.0.0/node_modules/@smithy/util-body-length-node/dist-cjs/index.js
var require_dist_cjs51 = __commonJS({
  "../../node_modules/.pnpm/@smithy+util-body-length-node@3.0.0/node_modules/@smithy/util-body-length-node/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      calculateBodyLength: () => calculateBodyLength
    });
    module.exports = __toCommonJS2(src_exports);
    var import_fs = __require("fs");
    var calculateBodyLength = /* @__PURE__ */ __name((body) => {
      if (!body) {
        return 0;
      }
      if (typeof body === "string") {
        return Buffer.byteLength(body);
      } else if (typeof body.byteLength === "number") {
        return body.byteLength;
      } else if (typeof body.size === "number") {
        return body.size;
      } else if (typeof body.start === "number" && typeof body.end === "number") {
        return body.end + 1 - body.start;
      } else if (typeof body.path === "string" || Buffer.isBuffer(body.path)) {
        return (0, import_fs.lstatSync)(body.path).size;
      } else if (typeof body.fd === "number") {
        return (0, import_fs.fstatSync)(body.fd).size;
      }
      throw new Error(`Body Length computation failed for ${body}`);
    }, "calculateBodyLength");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.696.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js
var require_ruleset2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.696.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ruleSet = void 0;
    var u = "required";
    var v = "fn";
    var w = "argv";
    var x = "ref";
    var a = true;
    var b = "isSet";
    var c = "booleanEquals";
    var d = "error";
    var e = "endpoint";
    var f = "tree";
    var g = "PartitionResult";
    var h = "getAttr";
    var i = { [u]: false, "type": "String" };
    var j = { [u]: true, "default": false, "type": "Boolean" };
    var k = { [x]: "Endpoint" };
    var l = { [v]: c, [w]: [{ [x]: "UseFIPS" }, true] };
    var m = { [v]: c, [w]: [{ [x]: "UseDualStack" }, true] };
    var n = {};
    var o = { [v]: h, [w]: [{ [x]: g }, "supportsFIPS"] };
    var p = { [x]: g };
    var q = { [v]: c, [w]: [true, { [v]: h, [w]: [p, "supportsDualStack"] }] };
    var r = [l];
    var s = [m];
    var t = [{ [x]: "Region" }];
    var _data = { version: "1.0", parameters: { Region: i, UseDualStack: j, UseFIPS: j, Endpoint: i }, rules: [{ conditions: [{ [v]: b, [w]: [k] }], rules: [{ conditions: r, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d }, { conditions: s, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d }, { endpoint: { url: k, properties: n, headers: n }, type: e }], type: f }, { conditions: [{ [v]: b, [w]: t }], rules: [{ conditions: [{ [v]: "aws.partition", [w]: t, assign: g }], rules: [{ conditions: [l, m], rules: [{ conditions: [{ [v]: c, [w]: [a, o] }, q], rules: [{ endpoint: { url: "https://portal.sso-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d }], type: f }, { conditions: r, rules: [{ conditions: [{ [v]: c, [w]: [o, a] }], rules: [{ conditions: [{ [v]: "stringEquals", [w]: [{ [v]: h, [w]: [p, "name"] }, "aws-us-gov"] }], endpoint: { url: "https://portal.sso.{Region}.amazonaws.com", properties: n, headers: n }, type: e }, { endpoint: { url: "https://portal.sso-fips.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS is enabled but this partition does not support FIPS", type: d }], type: f }, { conditions: s, rules: [{ conditions: [q], rules: [{ endpoint: { url: "https://portal.sso.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "DualStack is enabled but this partition does not support DualStack", type: d }], type: f }, { endpoint: { url: "https://portal.sso.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }], type: f }, { error: "Invalid Configuration: Missing Region", type: d }] };
    exports.ruleSet = _data;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.696.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.696.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/endpointResolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs31();
    var util_endpoints_2 = require_dist_cjs30();
    var ruleset_1 = require_ruleset2();
    var cache = new util_endpoints_2.EndpointCache({
      size: 50,
      params: ["Endpoint", "Region", "UseDualStack", "UseFIPS"]
    });
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return cache.get(endpointParams, () => (0, util_endpoints_2.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      }));
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
    util_endpoints_2.customEndpointFunctions.aws = util_endpoints_1.awsEndpointFunctions;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.696.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.696.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var core_2 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var smithy_client_1 = require_dist_cjs19();
    var url_parser_1 = require_dist_cjs43();
    var util_base64_1 = require_dist_cjs9();
    var util_utf8_1 = require_dist_cjs8();
    var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider2();
    var endpointResolver_1 = require_endpointResolver2();
    var getRuntimeConfig = (config) => {
      return {
        apiVersion: "2019-06-10",
        base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
        base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
        disableHostPrefix: config?.disableHostPrefix ?? false,
        endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
        extensions: config?.extensions ?? [],
        httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? httpAuthSchemeProvider_1.defaultSSOHttpAuthSchemeProvider,
        httpAuthSchemes: config?.httpAuthSchemes ?? [
          {
            schemeId: "aws.auth#sigv4",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
            signer: new core_1.AwsSdkSigV4Signer()
          },
          {
            schemeId: "smithy.api#noAuth",
            identityProvider: (ipc) => ipc.getIdentityProvider("smithy.api#noAuth") || (async () => ({})),
            signer: new core_2.NoAuthSigner()
          }
        ],
        logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
        serviceId: config?.serviceId ?? "SSO",
        urlParser: config?.urlParser ?? url_parser_1.parseUrl,
        utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
        utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/.pnpm/@smithy+util-defaults-mode-node@3.0.34/node_modules/@smithy/util-defaults-mode-node/dist-cjs/index.js
var require_dist_cjs52 = __commonJS({
  "../../node_modules/.pnpm/@smithy+util-defaults-mode-node@3.0.34/node_modules/@smithy/util-defaults-mode-node/dist-cjs/index.js"(exports, module) {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      resolveDefaultsModeConfig: () => resolveDefaultsModeConfig
    });
    module.exports = __toCommonJS2(src_exports);
    var import_config_resolver = require_dist_cjs33();
    var import_node_config_provider = require_dist_cjs41();
    var import_property_provider2 = require_dist_cjs16();
    var AWS_EXECUTION_ENV = "AWS_EXECUTION_ENV";
    var AWS_REGION_ENV = "AWS_REGION";
    var AWS_DEFAULT_REGION_ENV = "AWS_DEFAULT_REGION";
    var ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    var DEFAULTS_MODE_OPTIONS = ["in-region", "cross-region", "mobile", "standard", "legacy"];
    var IMDS_REGION_PATH = "/latest/meta-data/placement/region";
    var AWS_DEFAULTS_MODE_ENV = "AWS_DEFAULTS_MODE";
    var AWS_DEFAULTS_MODE_CONFIG = "defaults_mode";
    var NODE_DEFAULTS_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        return env[AWS_DEFAULTS_MODE_ENV];
      },
      configFileSelector: (profile) => {
        return profile[AWS_DEFAULTS_MODE_CONFIG];
      },
      default: "legacy"
    };
    var resolveDefaultsModeConfig = /* @__PURE__ */ __name(({
      region = (0, import_node_config_provider.loadConfig)(import_config_resolver.NODE_REGION_CONFIG_OPTIONS),
      defaultsMode = (0, import_node_config_provider.loadConfig)(NODE_DEFAULTS_MODE_CONFIG_OPTIONS)
    } = {}) => (0, import_property_provider2.memoize)(async () => {
      const mode = typeof defaultsMode === "function" ? await defaultsMode() : defaultsMode;
      switch (mode == null ? void 0 : mode.toLowerCase()) {
        case "auto":
          return resolveNodeDefaultsModeAuto(region);
        case "in-region":
        case "cross-region":
        case "mobile":
        case "standard":
        case "legacy":
          return Promise.resolve(mode == null ? void 0 : mode.toLocaleLowerCase());
        case void 0:
          return Promise.resolve("legacy");
        default:
          throw new Error(
            `Invalid parameter for "defaultsMode", expect ${DEFAULTS_MODE_OPTIONS.join(", ")}, got ${mode}`
          );
      }
    }), "resolveDefaultsModeConfig");
    var resolveNodeDefaultsModeAuto = /* @__PURE__ */ __name(async (clientRegion) => {
      if (clientRegion) {
        const resolvedRegion = typeof clientRegion === "function" ? await clientRegion() : clientRegion;
        const inferredRegion = await inferPhysicalRegion();
        if (!inferredRegion) {
          return "standard";
        }
        if (resolvedRegion === inferredRegion) {
          return "in-region";
        } else {
          return "cross-region";
        }
      }
      return "standard";
    }, "resolveNodeDefaultsModeAuto");
    var inferPhysicalRegion = /* @__PURE__ */ __name(async () => {
      if (process.env[AWS_EXECUTION_ENV] && (process.env[AWS_REGION_ENV] || process.env[AWS_DEFAULT_REGION_ENV])) {
        return process.env[AWS_REGION_ENV] ?? process.env[AWS_DEFAULT_REGION_ENV];
      }
      if (!process.env[ENV_IMDS_DISABLED]) {
        try {
          const { getInstanceMetadataEndpoint, httpRequest } = await Promise.resolve().then(() => __toESM2(require_dist_cjs47()));
          const endpoint = await getInstanceMetadataEndpoint();
          return (await httpRequest({ ...endpoint, path: IMDS_REGION_PATH })).toString();
        } catch (e) {
        }
      }
    }, "inferPhysicalRegion");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.696.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js
var require_runtimeConfig = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.696.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package2());
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var util_user_agent_node_1 = require_dist_cjs49();
    var config_resolver_1 = require_dist_cjs33();
    var hash_node_1 = require_dist_cjs50();
    var middleware_retry_1 = require_dist_cjs38();
    var node_config_provider_1 = require_dist_cjs41();
    var node_http_handler_1 = require_dist_cjs12();
    var util_body_length_node_1 = require_dist_cjs51();
    var util_retry_1 = require_dist_cjs37();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared();
    var smithy_client_1 = require_dist_cjs19();
    var util_defaults_mode_node_1 = require_dist_cjs52();
    var smithy_client_2 = require_dist_cjs19();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      (0, core_1.emitWarningIfUnsupportedVersion)(process.version);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.createDefaultUserAgentProvider)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: node_http_handler_1.NodeHttpHandler.create(config?.requestHandler ?? defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),
        userAgentAppId: config?.userAgentAppId ?? (0, node_config_provider_1.loadConfig)(util_user_agent_node_1.NODE_APP_ID_CONFIG_OPTIONS)
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+region-config-resolver@3.696.0/node_modules/@aws-sdk/region-config-resolver/dist-cjs/index.js
var require_dist_cjs53 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+region-config-resolver@3.696.0/node_modules/@aws-sdk/region-config-resolver/dist-cjs/index.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      NODE_REGION_CONFIG_FILE_OPTIONS: () => NODE_REGION_CONFIG_FILE_OPTIONS,
      NODE_REGION_CONFIG_OPTIONS: () => NODE_REGION_CONFIG_OPTIONS,
      REGION_ENV_NAME: () => REGION_ENV_NAME,
      REGION_INI_NAME: () => REGION_INI_NAME,
      getAwsRegionExtensionConfiguration: () => getAwsRegionExtensionConfiguration,
      resolveAwsRegionExtensionConfiguration: () => resolveAwsRegionExtensionConfiguration,
      resolveRegionConfig: () => resolveRegionConfig
    });
    module.exports = __toCommonJS2(src_exports);
    var getAwsRegionExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      let runtimeConfigRegion = /* @__PURE__ */ __name(async () => {
        if (runtimeConfig.region === void 0) {
          throw new Error("Region is missing from runtimeConfig");
        }
        const region = runtimeConfig.region;
        if (typeof region === "string") {
          return region;
        }
        return region();
      }, "runtimeConfigRegion");
      return {
        setRegion(region) {
          runtimeConfigRegion = region;
        },
        region() {
          return runtimeConfigRegion;
        }
      };
    }, "getAwsRegionExtensionConfiguration");
    var resolveAwsRegionExtensionConfiguration = /* @__PURE__ */ __name((awsRegionExtensionConfiguration) => {
      return {
        region: awsRegionExtensionConfiguration.region()
      };
    }, "resolveAwsRegionExtensionConfiguration");
    var REGION_ENV_NAME = "AWS_REGION";
    var REGION_INI_NAME = "region";
    var NODE_REGION_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[REGION_ENV_NAME],
      configFileSelector: (profile) => profile[REGION_INI_NAME],
      default: () => {
        throw new Error("Region is missing");
      }
    };
    var NODE_REGION_CONFIG_FILE_OPTIONS = {
      preferredFile: "credentials"
    };
    var isFipsRegion = /* @__PURE__ */ __name((region) => typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips")), "isFipsRegion");
    var getRealRegion = /* @__PURE__ */ __name((region) => isFipsRegion(region) ? ["fips-aws-global", "aws-fips"].includes(region) ? "us-east-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "") : region, "getRealRegion");
    var resolveRegionConfig = /* @__PURE__ */ __name((input) => {
      const { region, useFipsEndpoint } = input;
      if (!region) {
        throw new Error("Region is missing");
      }
      return {
        ...input,
        region: async () => {
          if (typeof region === "string") {
            return getRealRegion(region);
          }
          const providedRegion = await region();
          return getRealRegion(providedRegion);
        },
        useFipsEndpoint: async () => {
          const providedRegion = typeof region === "string" ? region : await region();
          if (isFipsRegion(providedRegion)) {
            return true;
          }
          return typeof useFipsEndpoint !== "function" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();
        }
      };
    }, "resolveRegionConfig");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.696.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-sso/dist-cjs/index.js
var require_dist_cjs54 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.696.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-sso/dist-cjs/index.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      GetRoleCredentialsCommand: () => GetRoleCredentialsCommand,
      GetRoleCredentialsRequestFilterSensitiveLog: () => GetRoleCredentialsRequestFilterSensitiveLog,
      GetRoleCredentialsResponseFilterSensitiveLog: () => GetRoleCredentialsResponseFilterSensitiveLog,
      InvalidRequestException: () => InvalidRequestException,
      ListAccountRolesCommand: () => ListAccountRolesCommand,
      ListAccountRolesRequestFilterSensitiveLog: () => ListAccountRolesRequestFilterSensitiveLog,
      ListAccountsCommand: () => ListAccountsCommand,
      ListAccountsRequestFilterSensitiveLog: () => ListAccountsRequestFilterSensitiveLog,
      LogoutCommand: () => LogoutCommand,
      LogoutRequestFilterSensitiveLog: () => LogoutRequestFilterSensitiveLog,
      ResourceNotFoundException: () => ResourceNotFoundException,
      RoleCredentialsFilterSensitiveLog: () => RoleCredentialsFilterSensitiveLog,
      SSO: () => SSO,
      SSOClient: () => SSOClient,
      SSOServiceException: () => SSOServiceException,
      TooManyRequestsException: () => TooManyRequestsException,
      UnauthorizedException: () => UnauthorizedException,
      __Client: () => import_smithy_client4.Client,
      paginateListAccountRoles: () => paginateListAccountRoles,
      paginateListAccounts: () => paginateListAccounts
    });
    module.exports = __toCommonJS2(src_exports);
    var import_middleware_host_header = require_dist_cjs24();
    var import_middleware_logger = require_dist_cjs25();
    var import_middleware_recursion_detection = require_dist_cjs26();
    var import_middleware_user_agent = require_dist_cjs32();
    var import_config_resolver = require_dist_cjs33();
    var import_core3 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var import_middleware_content_length = require_dist_cjs35();
    var import_middleware_endpoint = require_dist_cjs44();
    var import_middleware_retry = require_dist_cjs38();
    var import_httpAuthSchemeProvider = require_httpAuthSchemeProvider2();
    var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "awsssoportal"
      };
    }, "resolveClientEndpointParameters");
    var commonParams = {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
    var import_runtimeConfig = require_runtimeConfig();
    var import_region_config_resolver = require_dist_cjs53();
    var import_protocol_http8 = require_dist_cjs2();
    var import_smithy_client4 = require_dist_cjs19();
    var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
      let _credentials = runtimeConfig.credentials;
      return {
        setHttpAuthScheme(httpAuthScheme) {
          const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
          if (index === -1) {
            _httpAuthSchemes.push(httpAuthScheme);
          } else {
            _httpAuthSchemes.splice(index, 1, httpAuthScheme);
          }
        },
        httpAuthSchemes() {
          return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
          _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
          return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
          _credentials = credentials;
        },
        credentials() {
          return _credentials;
        }
      };
    }, "getHttpAuthExtensionConfiguration");
    var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
      return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials()
      };
    }, "resolveHttpAuthRuntimeConfig");
    var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
    var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
      const extensionConfiguration = {
        ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, import_smithy_client4.getDefaultExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, import_protocol_http8.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
        ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
      };
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return {
        ...runtimeConfig,
        ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
        ...(0, import_smithy_client4.resolveDefaultRuntimeConfig)(extensionConfiguration),
        ...(0, import_protocol_http8.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
        ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
      };
    }, "resolveRuntimeExtensions");
    var _SSOClient = class _SSOClient extends import_smithy_client4.Client {
      constructor(...[configuration]) {
        const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_1);
        const _config_3 = (0, import_middleware_retry.resolveRetryConfig)(_config_2);
        const _config_4 = (0, import_config_resolver.resolveRegionConfig)(_config_3);
        const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_5);
        const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
        super(_config_8);
        this.config = _config_8;
        this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use(
          (0, import_core3.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
            httpAuthSchemeParametersProvider: import_httpAuthSchemeProvider.defaultSSOHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new import_core3.DefaultIdentityProviderConfig({
              "aws.auth#sigv4": config.credentials
            })
          })
        );
        this.middlewareStack.use((0, import_core3.getHttpSigningPlugin)(this.config));
      }
      /**
       * Destroy underlying resources, like sockets. It's usually not necessary to do this.
       * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
       * Otherwise, sockets might stay open for quite a long time before the server terminates them.
       */
      destroy() {
        super.destroy();
      }
    };
    __name(_SSOClient, "SSOClient");
    var SSOClient = _SSOClient;
    var import_middleware_serde2 = require_dist_cjs5();
    var _SSOServiceException = class _SSOServiceException2 extends import_smithy_client4.ServiceException {
      /**
       * @internal
       */
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _SSOServiceException2.prototype);
      }
    };
    __name(_SSOServiceException, "SSOServiceException");
    var SSOServiceException = _SSOServiceException;
    var _InvalidRequestException = class _InvalidRequestException2 extends SSOServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidRequestException2.prototype);
      }
    };
    __name(_InvalidRequestException, "InvalidRequestException");
    var InvalidRequestException = _InvalidRequestException;
    var _ResourceNotFoundException = class _ResourceNotFoundException2 extends SSOServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ResourceNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceNotFoundException2.prototype);
      }
    };
    __name(_ResourceNotFoundException, "ResourceNotFoundException");
    var ResourceNotFoundException = _ResourceNotFoundException;
    var _TooManyRequestsException = class _TooManyRequestsException2 extends SSOServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "TooManyRequestsException",
          $fault: "client",
          ...opts
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TooManyRequestsException2.prototype);
      }
    };
    __name(_TooManyRequestsException, "TooManyRequestsException");
    var TooManyRequestsException = _TooManyRequestsException;
    var _UnauthorizedException = class _UnauthorizedException2 extends SSOServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "UnauthorizedException",
          $fault: "client",
          ...opts
        });
        this.name = "UnauthorizedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnauthorizedException2.prototype);
      }
    };
    __name(_UnauthorizedException, "UnauthorizedException");
    var UnauthorizedException = _UnauthorizedException;
    var GetRoleCredentialsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: import_smithy_client4.SENSITIVE_STRING }
    }), "GetRoleCredentialsRequestFilterSensitiveLog");
    var RoleCredentialsFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.secretAccessKey && { secretAccessKey: import_smithy_client4.SENSITIVE_STRING },
      ...obj.sessionToken && { sessionToken: import_smithy_client4.SENSITIVE_STRING }
    }), "RoleCredentialsFilterSensitiveLog");
    var GetRoleCredentialsResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.roleCredentials && { roleCredentials: RoleCredentialsFilterSensitiveLog(obj.roleCredentials) }
    }), "GetRoleCredentialsResponseFilterSensitiveLog");
    var ListAccountRolesRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: import_smithy_client4.SENSITIVE_STRING }
    }), "ListAccountRolesRequestFilterSensitiveLog");
    var ListAccountsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: import_smithy_client4.SENSITIVE_STRING }
    }), "ListAccountsRequestFilterSensitiveLog");
    var LogoutRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: import_smithy_client4.SENSITIVE_STRING }
    }), "LogoutRequestFilterSensitiveLog");
    var import_core22 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var se_GetRoleCredentialsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core3.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xasbt]: input[_aT]
      });
      b.bp("/federation/credentials");
      const query = (0, import_smithy_client4.map)({
        [_rn]: [, (0, import_smithy_client4.expectNonNull)(input[_rN], `roleName`)],
        [_ai]: [, (0, import_smithy_client4.expectNonNull)(input[_aI], `accountId`)]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_GetRoleCredentialsCommand");
    var se_ListAccountRolesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core3.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xasbt]: input[_aT]
      });
      b.bp("/assignment/roles");
      const query = (0, import_smithy_client4.map)({
        [_nt]: [, input[_nT]],
        [_mr]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_ai]: [, (0, import_smithy_client4.expectNonNull)(input[_aI], `accountId`)]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_ListAccountRolesCommand");
    var se_ListAccountsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core3.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xasbt]: input[_aT]
      });
      b.bp("/assignment/accounts");
      const query = (0, import_smithy_client4.map)({
        [_nt]: [, input[_nT]],
        [_mr]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_ListAccountsCommand");
    var se_LogoutCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core3.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xasbt]: input[_aT]
      });
      b.bp("/logout");
      let body;
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_LogoutCommand");
    var de_GetRoleCredentialsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client4.take)(data, {
        roleCredentials: import_smithy_client4._json
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_GetRoleCredentialsCommand");
    var de_ListAccountRolesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client4.take)(data, {
        nextToken: import_smithy_client4.expectString,
        roleList: import_smithy_client4._json
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_ListAccountRolesCommand");
    var de_ListAccountsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client4.take)(data, {
        accountList: import_smithy_client4._json,
        nextToken: import_smithy_client4.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_ListAccountsCommand");
    var de_LogoutCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_LogoutCommand");
    var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await (0, import_core22.parseJsonErrorBody)(output.body, context)
      };
      const errorCode = (0, import_core22.loadRestJsonErrorCode)(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    }, "de_CommandError");
    var throwDefaultError = (0, import_smithy_client4.withBaseException)(SSOServiceException);
    var de_InvalidRequestExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client4.take)(data, {
        message: import_smithy_client4.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InvalidRequestExceptionRes");
    var de_ResourceNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client4.take)(data, {
        message: import_smithy_client4.expectString
      });
      Object.assign(contents, doc);
      const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_ResourceNotFoundExceptionRes");
    var de_TooManyRequestsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client4.take)(data, {
        message: import_smithy_client4.expectString
      });
      Object.assign(contents, doc);
      const exception = new TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_TooManyRequestsExceptionRes");
    var de_UnauthorizedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client4.take)(data, {
        message: import_smithy_client4.expectString
      });
      Object.assign(contents, doc);
      const exception = new UnauthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_UnauthorizedExceptionRes");
    var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    }), "deserializeMetadata");
    var _aI = "accountId";
    var _aT = "accessToken";
    var _ai = "account_id";
    var _mR = "maxResults";
    var _mr = "max_result";
    var _nT = "nextToken";
    var _nt = "next_token";
    var _rN = "roleName";
    var _rn = "role_name";
    var _xasbt = "x-amz-sso_bearer_token";
    var _GetRoleCredentialsCommand = class _GetRoleCredentialsCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("SWBPortalService", "GetRoleCredentials", {}).n("SSOClient", "GetRoleCredentialsCommand").f(GetRoleCredentialsRequestFilterSensitiveLog, GetRoleCredentialsResponseFilterSensitiveLog).ser(se_GetRoleCredentialsCommand).de(de_GetRoleCredentialsCommand).build() {
    };
    __name(_GetRoleCredentialsCommand, "GetRoleCredentialsCommand");
    var GetRoleCredentialsCommand = _GetRoleCredentialsCommand;
    var _ListAccountRolesCommand = class _ListAccountRolesCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("SWBPortalService", "ListAccountRoles", {}).n("SSOClient", "ListAccountRolesCommand").f(ListAccountRolesRequestFilterSensitiveLog, void 0).ser(se_ListAccountRolesCommand).de(de_ListAccountRolesCommand).build() {
    };
    __name(_ListAccountRolesCommand, "ListAccountRolesCommand");
    var ListAccountRolesCommand = _ListAccountRolesCommand;
    var _ListAccountsCommand = class _ListAccountsCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("SWBPortalService", "ListAccounts", {}).n("SSOClient", "ListAccountsCommand").f(ListAccountsRequestFilterSensitiveLog, void 0).ser(se_ListAccountsCommand).de(de_ListAccountsCommand).build() {
    };
    __name(_ListAccountsCommand, "ListAccountsCommand");
    var ListAccountsCommand = _ListAccountsCommand;
    var _LogoutCommand = class _LogoutCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("SWBPortalService", "Logout", {}).n("SSOClient", "LogoutCommand").f(LogoutRequestFilterSensitiveLog, void 0).ser(se_LogoutCommand).de(de_LogoutCommand).build() {
    };
    __name(_LogoutCommand, "LogoutCommand");
    var LogoutCommand = _LogoutCommand;
    var commands = {
      GetRoleCredentialsCommand,
      ListAccountRolesCommand,
      ListAccountsCommand,
      LogoutCommand
    };
    var _SSO = class _SSO extends SSOClient {
    };
    __name(_SSO, "SSO");
    var SSO = _SSO;
    (0, import_smithy_client4.createAggregatedClient)(commands, SSO);
    var paginateListAccountRoles = (0, import_core3.createPaginator)(SSOClient, ListAccountRolesCommand, "nextToken", "nextToken", "maxResults");
    var paginateListAccounts = (0, import_core3.createPaginator)(SSOClient, ListAccountsCommand, "nextToken", "nextToken", "maxResults");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.699.0_@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1__aws-crt@1.27.1/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/auth/httpAuthSchemeProvider.js
var require_httpAuthSchemeProvider3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.699.0_@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1__aws-crt@1.27.1/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/auth/httpAuthSchemeProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveHttpAuthSchemeConfig = exports.defaultSSOOIDCHttpAuthSchemeProvider = exports.defaultSSOOIDCHttpAuthSchemeParametersProvider = void 0;
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var util_middleware_1 = require_dist_cjs4();
    var defaultSSOOIDCHttpAuthSchemeParametersProvider = async (config, context, input) => {
      return {
        operation: (0, util_middleware_1.getSmithyContext)(context).operation,
        region: await (0, util_middleware_1.normalizeProvider)(config.region)() || (() => {
          throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
        })()
      };
    };
    exports.defaultSSOOIDCHttpAuthSchemeParametersProvider = defaultSSOOIDCHttpAuthSchemeParametersProvider;
    function createAwsAuthSigv4HttpAuthOption(authParameters) {
      return {
        schemeId: "aws.auth#sigv4",
        signingProperties: {
          name: "sso-oauth",
          region: authParameters.region
        },
        propertiesExtractor: (config, context) => ({
          signingProperties: {
            config,
            context
          }
        })
      };
    }
    function createSmithyApiNoAuthHttpAuthOption(authParameters) {
      return {
        schemeId: "smithy.api#noAuth"
      };
    }
    var defaultSSOOIDCHttpAuthSchemeProvider = (authParameters) => {
      const options = [];
      switch (authParameters.operation) {
        case "CreateToken": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        case "RegisterClient": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        case "StartDeviceAuthorization": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        default: {
          options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
        }
      }
      return options;
    };
    exports.defaultSSOOIDCHttpAuthSchemeProvider = defaultSSOOIDCHttpAuthSchemeProvider;
    var resolveHttpAuthSchemeConfig = (config) => {
      const config_0 = (0, core_1.resolveAwsSdkSigV4Config)(config);
      return {
        ...config_0
      };
    };
    exports.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.699.0_@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1__aws-crt@1.27.1/node_modules/@aws-sdk/client-sso-oidc/package.json
var require_package3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.699.0_@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1__aws-crt@1.27.1/node_modules/@aws-sdk/client-sso-oidc/package.json"(exports, module) {
    module.exports = {
      name: "@aws-sdk/client-sso-oidc",
      description: "AWS SDK for JavaScript Sso Oidc Client for Node.js, Browser and React Native",
      version: "3.699.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "node ../../scripts/compilation/inline client-sso-oidc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sso-oidc"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "5.2.0",
        "@aws-crypto/sha256-js": "5.2.0",
        "@aws-sdk/core": "3.696.0",
        "@aws-sdk/credential-provider-node": "3.699.0",
        "@aws-sdk/middleware-host-header": "3.696.0",
        "@aws-sdk/middleware-logger": "3.696.0",
        "@aws-sdk/middleware-recursion-detection": "3.696.0",
        "@aws-sdk/middleware-user-agent": "3.696.0",
        "@aws-sdk/region-config-resolver": "3.696.0",
        "@aws-sdk/types": "3.696.0",
        "@aws-sdk/util-endpoints": "3.696.0",
        "@aws-sdk/util-user-agent-browser": "3.696.0",
        "@aws-sdk/util-user-agent-node": "3.696.0",
        "@smithy/config-resolver": "^3.0.12",
        "@smithy/core": "^2.5.3",
        "@smithy/fetch-http-handler": "^4.1.1",
        "@smithy/hash-node": "^3.0.10",
        "@smithy/invalid-dependency": "^3.0.10",
        "@smithy/middleware-content-length": "^3.0.12",
        "@smithy/middleware-endpoint": "^3.2.3",
        "@smithy/middleware-retry": "^3.0.27",
        "@smithy/middleware-serde": "^3.0.10",
        "@smithy/middleware-stack": "^3.0.10",
        "@smithy/node-config-provider": "^3.1.11",
        "@smithy/node-http-handler": "^3.3.1",
        "@smithy/protocol-http": "^4.1.7",
        "@smithy/smithy-client": "^3.4.4",
        "@smithy/types": "^3.7.1",
        "@smithy/url-parser": "^3.0.10",
        "@smithy/util-base64": "^3.0.0",
        "@smithy/util-body-length-browser": "^3.0.0",
        "@smithy/util-body-length-node": "^3.0.0",
        "@smithy/util-defaults-mode-browser": "^3.0.27",
        "@smithy/util-defaults-mode-node": "^3.0.27",
        "@smithy/util-endpoints": "^2.1.6",
        "@smithy/util-middleware": "^3.0.10",
        "@smithy/util-retry": "^3.0.10",
        "@smithy/util-utf8": "^3.0.0",
        tslib: "^2.6.2"
      },
      devDependencies: {
        "@tsconfig/node16": "16.1.3",
        "@types/node": "^16.18.96",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=16.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      peerDependencies: {
        "@aws-sdk/client-sts": "^3.699.0"
      },
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso-oidc",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sso-oidc"
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.699.0_@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1__aws-crt@1.27.1/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/ruleset.js
var require_ruleset3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.699.0_@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1__aws-crt@1.27.1/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/ruleset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ruleSet = void 0;
    var u = "required";
    var v = "fn";
    var w = "argv";
    var x = "ref";
    var a = true;
    var b = "isSet";
    var c = "booleanEquals";
    var d = "error";
    var e = "endpoint";
    var f = "tree";
    var g = "PartitionResult";
    var h = "getAttr";
    var i = { [u]: false, "type": "String" };
    var j = { [u]: true, "default": false, "type": "Boolean" };
    var k = { [x]: "Endpoint" };
    var l = { [v]: c, [w]: [{ [x]: "UseFIPS" }, true] };
    var m = { [v]: c, [w]: [{ [x]: "UseDualStack" }, true] };
    var n = {};
    var o = { [v]: h, [w]: [{ [x]: g }, "supportsFIPS"] };
    var p = { [x]: g };
    var q = { [v]: c, [w]: [true, { [v]: h, [w]: [p, "supportsDualStack"] }] };
    var r = [l];
    var s = [m];
    var t = [{ [x]: "Region" }];
    var _data = { version: "1.0", parameters: { Region: i, UseDualStack: j, UseFIPS: j, Endpoint: i }, rules: [{ conditions: [{ [v]: b, [w]: [k] }], rules: [{ conditions: r, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d }, { conditions: s, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d }, { endpoint: { url: k, properties: n, headers: n }, type: e }], type: f }, { conditions: [{ [v]: b, [w]: t }], rules: [{ conditions: [{ [v]: "aws.partition", [w]: t, assign: g }], rules: [{ conditions: [l, m], rules: [{ conditions: [{ [v]: c, [w]: [a, o] }, q], rules: [{ endpoint: { url: "https://oidc-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d }], type: f }, { conditions: r, rules: [{ conditions: [{ [v]: c, [w]: [o, a] }], rules: [{ conditions: [{ [v]: "stringEquals", [w]: [{ [v]: h, [w]: [p, "name"] }, "aws-us-gov"] }], endpoint: { url: "https://oidc.{Region}.amazonaws.com", properties: n, headers: n }, type: e }, { endpoint: { url: "https://oidc-fips.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS is enabled but this partition does not support FIPS", type: d }], type: f }, { conditions: s, rules: [{ conditions: [q], rules: [{ endpoint: { url: "https://oidc.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "DualStack is enabled but this partition does not support DualStack", type: d }], type: f }, { endpoint: { url: "https://oidc.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }], type: f }, { error: "Invalid Configuration: Missing Region", type: d }] };
    exports.ruleSet = _data;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.699.0_@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1__aws-crt@1.27.1/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.699.0_@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1__aws-crt@1.27.1/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/endpointResolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs31();
    var util_endpoints_2 = require_dist_cjs30();
    var ruleset_1 = require_ruleset3();
    var cache = new util_endpoints_2.EndpointCache({
      size: 50,
      params: ["Endpoint", "Region", "UseDualStack", "UseFIPS"]
    });
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return cache.get(endpointParams, () => (0, util_endpoints_2.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      }));
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
    util_endpoints_2.customEndpointFunctions.aws = util_endpoints_1.awsEndpointFunctions;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.699.0_@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1__aws-crt@1.27.1/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.699.0_@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1__aws-crt@1.27.1/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var core_2 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var smithy_client_1 = require_dist_cjs19();
    var url_parser_1 = require_dist_cjs43();
    var util_base64_1 = require_dist_cjs9();
    var util_utf8_1 = require_dist_cjs8();
    var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider3();
    var endpointResolver_1 = require_endpointResolver3();
    var getRuntimeConfig = (config) => {
      return {
        apiVersion: "2019-06-10",
        base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
        base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
        disableHostPrefix: config?.disableHostPrefix ?? false,
        endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
        extensions: config?.extensions ?? [],
        httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? httpAuthSchemeProvider_1.defaultSSOOIDCHttpAuthSchemeProvider,
        httpAuthSchemes: config?.httpAuthSchemes ?? [
          {
            schemeId: "aws.auth#sigv4",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
            signer: new core_1.AwsSdkSigV4Signer()
          },
          {
            schemeId: "smithy.api#noAuth",
            identityProvider: (ipc) => ipc.getIdentityProvider("smithy.api#noAuth") || (async () => ({})),
            signer: new core_2.NoAuthSigner()
          }
        ],
        logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
        serviceId: config?.serviceId ?? "SSO OIDC",
        urlParser: config?.urlParser ?? url_parser_1.parseUrl,
        utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
        utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.699.0_@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1__aws-crt@1.27.1/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.js
var require_runtimeConfig2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.699.0_@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1__aws-crt@1.27.1/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package3());
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var credential_provider_node_1 = require_dist_cjs62();
    var util_user_agent_node_1 = require_dist_cjs49();
    var config_resolver_1 = require_dist_cjs33();
    var hash_node_1 = require_dist_cjs50();
    var middleware_retry_1 = require_dist_cjs38();
    var node_config_provider_1 = require_dist_cjs41();
    var node_http_handler_1 = require_dist_cjs12();
    var util_body_length_node_1 = require_dist_cjs51();
    var util_retry_1 = require_dist_cjs37();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared2();
    var smithy_client_1 = require_dist_cjs19();
    var util_defaults_mode_node_1 = require_dist_cjs52();
    var smithy_client_2 = require_dist_cjs19();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      (0, core_1.emitWarningIfUnsupportedVersion)(process.version);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? credential_provider_node_1.defaultProvider,
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.createDefaultUserAgentProvider)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: node_http_handler_1.NodeHttpHandler.create(config?.requestHandler ?? defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),
        userAgentAppId: config?.userAgentAppId ?? (0, node_config_provider_1.loadConfig)(util_user_agent_node_1.NODE_APP_ID_CONFIG_OPTIONS)
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.699.0_@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1__aws-crt@1.27.1/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/index.js
var require_dist_cjs55 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.699.0_@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1__aws-crt@1.27.1/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/index.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      AccessDeniedException: () => AccessDeniedException,
      AuthorizationPendingException: () => AuthorizationPendingException,
      CreateTokenCommand: () => CreateTokenCommand,
      CreateTokenRequestFilterSensitiveLog: () => CreateTokenRequestFilterSensitiveLog,
      CreateTokenResponseFilterSensitiveLog: () => CreateTokenResponseFilterSensitiveLog,
      CreateTokenWithIAMCommand: () => CreateTokenWithIAMCommand,
      CreateTokenWithIAMRequestFilterSensitiveLog: () => CreateTokenWithIAMRequestFilterSensitiveLog,
      CreateTokenWithIAMResponseFilterSensitiveLog: () => CreateTokenWithIAMResponseFilterSensitiveLog,
      ExpiredTokenException: () => ExpiredTokenException,
      InternalServerException: () => InternalServerException,
      InvalidClientException: () => InvalidClientException,
      InvalidClientMetadataException: () => InvalidClientMetadataException,
      InvalidGrantException: () => InvalidGrantException,
      InvalidRedirectUriException: () => InvalidRedirectUriException,
      InvalidRequestException: () => InvalidRequestException,
      InvalidRequestRegionException: () => InvalidRequestRegionException,
      InvalidScopeException: () => InvalidScopeException,
      RegisterClientCommand: () => RegisterClientCommand,
      RegisterClientResponseFilterSensitiveLog: () => RegisterClientResponseFilterSensitiveLog,
      SSOOIDC: () => SSOOIDC,
      SSOOIDCClient: () => SSOOIDCClient,
      SSOOIDCServiceException: () => SSOOIDCServiceException,
      SlowDownException: () => SlowDownException,
      StartDeviceAuthorizationCommand: () => StartDeviceAuthorizationCommand,
      StartDeviceAuthorizationRequestFilterSensitiveLog: () => StartDeviceAuthorizationRequestFilterSensitiveLog,
      UnauthorizedClientException: () => UnauthorizedClientException,
      UnsupportedGrantTypeException: () => UnsupportedGrantTypeException,
      __Client: () => import_smithy_client4.Client
    });
    module.exports = __toCommonJS2(src_exports);
    var import_middleware_host_header = require_dist_cjs24();
    var import_middleware_logger = require_dist_cjs25();
    var import_middleware_recursion_detection = require_dist_cjs26();
    var import_middleware_user_agent = require_dist_cjs32();
    var import_config_resolver = require_dist_cjs33();
    var import_core3 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var import_middleware_content_length = require_dist_cjs35();
    var import_middleware_endpoint = require_dist_cjs44();
    var import_middleware_retry = require_dist_cjs38();
    var import_httpAuthSchemeProvider = require_httpAuthSchemeProvider3();
    var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "sso-oauth"
      };
    }, "resolveClientEndpointParameters");
    var commonParams = {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
    var import_runtimeConfig = require_runtimeConfig2();
    var import_region_config_resolver = require_dist_cjs53();
    var import_protocol_http8 = require_dist_cjs2();
    var import_smithy_client4 = require_dist_cjs19();
    var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
      let _credentials = runtimeConfig.credentials;
      return {
        setHttpAuthScheme(httpAuthScheme) {
          const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
          if (index === -1) {
            _httpAuthSchemes.push(httpAuthScheme);
          } else {
            _httpAuthSchemes.splice(index, 1, httpAuthScheme);
          }
        },
        httpAuthSchemes() {
          return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
          _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
          return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
          _credentials = credentials;
        },
        credentials() {
          return _credentials;
        }
      };
    }, "getHttpAuthExtensionConfiguration");
    var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
      return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials()
      };
    }, "resolveHttpAuthRuntimeConfig");
    var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
    var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
      const extensionConfiguration = {
        ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, import_smithy_client4.getDefaultExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, import_protocol_http8.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
        ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
      };
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return {
        ...runtimeConfig,
        ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
        ...(0, import_smithy_client4.resolveDefaultRuntimeConfig)(extensionConfiguration),
        ...(0, import_protocol_http8.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
        ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
      };
    }, "resolveRuntimeExtensions");
    var _SSOOIDCClient = class _SSOOIDCClient extends import_smithy_client4.Client {
      constructor(...[configuration]) {
        const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_1);
        const _config_3 = (0, import_middleware_retry.resolveRetryConfig)(_config_2);
        const _config_4 = (0, import_config_resolver.resolveRegionConfig)(_config_3);
        const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_5);
        const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
        super(_config_8);
        this.config = _config_8;
        this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use(
          (0, import_core3.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
            httpAuthSchemeParametersProvider: import_httpAuthSchemeProvider.defaultSSOOIDCHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new import_core3.DefaultIdentityProviderConfig({
              "aws.auth#sigv4": config.credentials
            })
          })
        );
        this.middlewareStack.use((0, import_core3.getHttpSigningPlugin)(this.config));
      }
      /**
       * Destroy underlying resources, like sockets. It's usually not necessary to do this.
       * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
       * Otherwise, sockets might stay open for quite a long time before the server terminates them.
       */
      destroy() {
        super.destroy();
      }
    };
    __name(_SSOOIDCClient, "SSOOIDCClient");
    var SSOOIDCClient = _SSOOIDCClient;
    var import_middleware_serde2 = require_dist_cjs5();
    var _SSOOIDCServiceException = class _SSOOIDCServiceException2 extends import_smithy_client4.ServiceException {
      /**
       * @internal
       */
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _SSOOIDCServiceException2.prototype);
      }
    };
    __name(_SSOOIDCServiceException, "SSOOIDCServiceException");
    var SSOOIDCServiceException = _SSOOIDCServiceException;
    var _AccessDeniedException = class _AccessDeniedException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "AccessDeniedException",
          $fault: "client",
          ...opts
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AccessDeniedException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_AccessDeniedException, "AccessDeniedException");
    var AccessDeniedException = _AccessDeniedException;
    var _AuthorizationPendingException = class _AuthorizationPendingException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "AuthorizationPendingException",
          $fault: "client",
          ...opts
        });
        this.name = "AuthorizationPendingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AuthorizationPendingException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_AuthorizationPendingException, "AuthorizationPendingException");
    var AuthorizationPendingException = _AuthorizationPendingException;
    var _ExpiredTokenException = class _ExpiredTokenException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ExpiredTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "ExpiredTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ExpiredTokenException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_ExpiredTokenException, "ExpiredTokenException");
    var ExpiredTokenException = _ExpiredTokenException;
    var _InternalServerException = class _InternalServerException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InternalServerException",
          $fault: "server",
          ...opts
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _InternalServerException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_InternalServerException, "InternalServerException");
    var InternalServerException = _InternalServerException;
    var _InvalidClientException = class _InvalidClientException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidClientException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidClientException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_InvalidClientException, "InvalidClientException");
    var InvalidClientException = _InvalidClientException;
    var _InvalidGrantException = class _InvalidGrantException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidGrantException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidGrantException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidGrantException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_InvalidGrantException, "InvalidGrantException");
    var InvalidGrantException = _InvalidGrantException;
    var _InvalidRequestException = class _InvalidRequestException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidRequestException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_InvalidRequestException, "InvalidRequestException");
    var InvalidRequestException = _InvalidRequestException;
    var _InvalidScopeException = class _InvalidScopeException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidScopeException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidScopeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidScopeException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_InvalidScopeException, "InvalidScopeException");
    var InvalidScopeException = _InvalidScopeException;
    var _SlowDownException = class _SlowDownException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "SlowDownException",
          $fault: "client",
          ...opts
        });
        this.name = "SlowDownException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _SlowDownException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_SlowDownException, "SlowDownException");
    var SlowDownException = _SlowDownException;
    var _UnauthorizedClientException = class _UnauthorizedClientException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "UnauthorizedClientException",
          $fault: "client",
          ...opts
        });
        this.name = "UnauthorizedClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnauthorizedClientException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_UnauthorizedClientException, "UnauthorizedClientException");
    var UnauthorizedClientException = _UnauthorizedClientException;
    var _UnsupportedGrantTypeException = class _UnsupportedGrantTypeException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "UnsupportedGrantTypeException",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedGrantTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnsupportedGrantTypeException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_UnsupportedGrantTypeException, "UnsupportedGrantTypeException");
    var UnsupportedGrantTypeException = _UnsupportedGrantTypeException;
    var _InvalidRequestRegionException = class _InvalidRequestRegionException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidRequestRegionException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRequestRegionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidRequestRegionException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
        this.endpoint = opts.endpoint;
        this.region = opts.region;
      }
    };
    __name(_InvalidRequestRegionException, "InvalidRequestRegionException");
    var InvalidRequestRegionException = _InvalidRequestRegionException;
    var _InvalidClientMetadataException = class _InvalidClientMetadataException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidClientMetadataException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidClientMetadataException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidClientMetadataException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_InvalidClientMetadataException, "InvalidClientMetadataException");
    var InvalidClientMetadataException = _InvalidClientMetadataException;
    var _InvalidRedirectUriException = class _InvalidRedirectUriException2 extends SSOOIDCServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidRedirectUriException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRedirectUriException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidRedirectUriException2.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    __name(_InvalidRedirectUriException, "InvalidRedirectUriException");
    var InvalidRedirectUriException = _InvalidRedirectUriException;
    var CreateTokenRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.clientSecret && { clientSecret: import_smithy_client4.SENSITIVE_STRING },
      ...obj.refreshToken && { refreshToken: import_smithy_client4.SENSITIVE_STRING },
      ...obj.codeVerifier && { codeVerifier: import_smithy_client4.SENSITIVE_STRING }
    }), "CreateTokenRequestFilterSensitiveLog");
    var CreateTokenResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: import_smithy_client4.SENSITIVE_STRING },
      ...obj.refreshToken && { refreshToken: import_smithy_client4.SENSITIVE_STRING },
      ...obj.idToken && { idToken: import_smithy_client4.SENSITIVE_STRING }
    }), "CreateTokenResponseFilterSensitiveLog");
    var CreateTokenWithIAMRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.refreshToken && { refreshToken: import_smithy_client4.SENSITIVE_STRING },
      ...obj.assertion && { assertion: import_smithy_client4.SENSITIVE_STRING },
      ...obj.subjectToken && { subjectToken: import_smithy_client4.SENSITIVE_STRING },
      ...obj.codeVerifier && { codeVerifier: import_smithy_client4.SENSITIVE_STRING }
    }), "CreateTokenWithIAMRequestFilterSensitiveLog");
    var CreateTokenWithIAMResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: import_smithy_client4.SENSITIVE_STRING },
      ...obj.refreshToken && { refreshToken: import_smithy_client4.SENSITIVE_STRING },
      ...obj.idToken && { idToken: import_smithy_client4.SENSITIVE_STRING }
    }), "CreateTokenWithIAMResponseFilterSensitiveLog");
    var RegisterClientResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.clientSecret && { clientSecret: import_smithy_client4.SENSITIVE_STRING }
    }), "RegisterClientResponseFilterSensitiveLog");
    var StartDeviceAuthorizationRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.clientSecret && { clientSecret: import_smithy_client4.SENSITIVE_STRING }
    }), "StartDeviceAuthorizationRequestFilterSensitiveLog");
    var import_core22 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var se_CreateTokenCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core3.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/token");
      let body;
      body = JSON.stringify(
        (0, import_smithy_client4.take)(input, {
          clientId: [],
          clientSecret: [],
          code: [],
          codeVerifier: [],
          deviceCode: [],
          grantType: [],
          redirectUri: [],
          refreshToken: [],
          scope: (_) => (0, import_smithy_client4._json)(_)
        })
      );
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_CreateTokenCommand");
    var se_CreateTokenWithIAMCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core3.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/token");
      const query = (0, import_smithy_client4.map)({
        [_ai]: [, "t"]
      });
      let body;
      body = JSON.stringify(
        (0, import_smithy_client4.take)(input, {
          assertion: [],
          clientId: [],
          code: [],
          codeVerifier: [],
          grantType: [],
          redirectUri: [],
          refreshToken: [],
          requestedTokenType: [],
          scope: (_) => (0, import_smithy_client4._json)(_),
          subjectToken: [],
          subjectTokenType: []
        })
      );
      b.m("POST").h(headers).q(query).b(body);
      return b.build();
    }, "se_CreateTokenWithIAMCommand");
    var se_RegisterClientCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core3.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/client/register");
      let body;
      body = JSON.stringify(
        (0, import_smithy_client4.take)(input, {
          clientName: [],
          clientType: [],
          entitledApplicationArn: [],
          grantTypes: (_) => (0, import_smithy_client4._json)(_),
          issuerUrl: [],
          redirectUris: (_) => (0, import_smithy_client4._json)(_),
          scopes: (_) => (0, import_smithy_client4._json)(_)
        })
      );
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_RegisterClientCommand");
    var se_StartDeviceAuthorizationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core3.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b.bp("/device_authorization");
      let body;
      body = JSON.stringify(
        (0, import_smithy_client4.take)(input, {
          clientId: [],
          clientSecret: [],
          startUrl: []
        })
      );
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_StartDeviceAuthorizationCommand");
    var de_CreateTokenCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client4.take)(data, {
        accessToken: import_smithy_client4.expectString,
        expiresIn: import_smithy_client4.expectInt32,
        idToken: import_smithy_client4.expectString,
        refreshToken: import_smithy_client4.expectString,
        tokenType: import_smithy_client4.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_CreateTokenCommand");
    var de_CreateTokenWithIAMCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client4.take)(data, {
        accessToken: import_smithy_client4.expectString,
        expiresIn: import_smithy_client4.expectInt32,
        idToken: import_smithy_client4.expectString,
        issuedTokenType: import_smithy_client4.expectString,
        refreshToken: import_smithy_client4.expectString,
        scope: import_smithy_client4._json,
        tokenType: import_smithy_client4.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_CreateTokenWithIAMCommand");
    var de_RegisterClientCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client4.take)(data, {
        authorizationEndpoint: import_smithy_client4.expectString,
        clientId: import_smithy_client4.expectString,
        clientIdIssuedAt: import_smithy_client4.expectLong,
        clientSecret: import_smithy_client4.expectString,
        clientSecretExpiresAt: import_smithy_client4.expectLong,
        tokenEndpoint: import_smithy_client4.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_RegisterClientCommand");
    var de_StartDeviceAuthorizationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client4.take)(data, {
        deviceCode: import_smithy_client4.expectString,
        expiresIn: import_smithy_client4.expectInt32,
        interval: import_smithy_client4.expectInt32,
        userCode: import_smithy_client4.expectString,
        verificationUri: import_smithy_client4.expectString,
        verificationUriComplete: import_smithy_client4.expectString
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_StartDeviceAuthorizationCommand");
    var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await (0, import_core22.parseJsonErrorBody)(output.body, context)
      };
      const errorCode = (0, import_core22.loadRestJsonErrorCode)(output, parsedOutput.body);
      switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.ssooidc#AccessDeniedException":
          throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AuthorizationPendingException":
        case "com.amazonaws.ssooidc#AuthorizationPendingException":
          throw await de_AuthorizationPendingExceptionRes(parsedOutput, context);
        case "ExpiredTokenException":
        case "com.amazonaws.ssooidc#ExpiredTokenException":
          throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
          throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidClientException":
        case "com.amazonaws.ssooidc#InvalidClientException":
          throw await de_InvalidClientExceptionRes(parsedOutput, context);
        case "InvalidGrantException":
        case "com.amazonaws.ssooidc#InvalidGrantException":
          throw await de_InvalidGrantExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "InvalidScopeException":
        case "com.amazonaws.ssooidc#InvalidScopeException":
          throw await de_InvalidScopeExceptionRes(parsedOutput, context);
        case "SlowDownException":
        case "com.amazonaws.ssooidc#SlowDownException":
          throw await de_SlowDownExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.ssooidc#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        case "UnsupportedGrantTypeException":
        case "com.amazonaws.ssooidc#UnsupportedGrantTypeException":
          throw await de_UnsupportedGrantTypeExceptionRes(parsedOutput, context);
        case "InvalidRequestRegionException":
        case "com.amazonaws.ssooidc#InvalidRequestRegionException":
          throw await de_InvalidRequestRegionExceptionRes(parsedOutput, context);
        case "InvalidClientMetadataException":
        case "com.amazonaws.ssooidc#InvalidClientMetadataException":
          throw await de_InvalidClientMetadataExceptionRes(parsedOutput, context);
        case "InvalidRedirectUriException":
        case "com.amazonaws.ssooidc#InvalidRedirectUriException":
          throw await de_InvalidRedirectUriExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    }, "de_CommandError");
    var throwDefaultError = (0, import_smithy_client4.withBaseException)(SSOOIDCServiceException);
    var de_AccessDeniedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client4.take)(data, {
        error: import_smithy_client4.expectString,
        error_description: import_smithy_client4.expectString
      });
      Object.assign(contents, doc);
      const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_AccessDeniedExceptionRes");
    var de_AuthorizationPendingExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client4.take)(data, {
        error: import_smithy_client4.expectString,
        error_description: import_smithy_client4.expectString
      });
      Object.assign(contents, doc);
      const exception = new AuthorizationPendingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_AuthorizationPendingExceptionRes");
    var de_ExpiredTokenExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client4.take)(data, {
        error: import_smithy_client4.expectString,
        error_description: import_smithy_client4.expectString
      });
      Object.assign(contents, doc);
      const exception = new ExpiredTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_ExpiredTokenExceptionRes");
    var de_InternalServerExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client4.take)(data, {
        error: import_smithy_client4.expectString,
        error_description: import_smithy_client4.expectString
      });
      Object.assign(contents, doc);
      const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InternalServerExceptionRes");
    var de_InvalidClientExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client4.take)(data, {
        error: import_smithy_client4.expectString,
        error_description: import_smithy_client4.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InvalidClientExceptionRes");
    var de_InvalidClientMetadataExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client4.take)(data, {
        error: import_smithy_client4.expectString,
        error_description: import_smithy_client4.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidClientMetadataException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InvalidClientMetadataExceptionRes");
    var de_InvalidGrantExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client4.take)(data, {
        error: import_smithy_client4.expectString,
        error_description: import_smithy_client4.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidGrantException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InvalidGrantExceptionRes");
    var de_InvalidRedirectUriExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client4.take)(data, {
        error: import_smithy_client4.expectString,
        error_description: import_smithy_client4.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidRedirectUriException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InvalidRedirectUriExceptionRes");
    var de_InvalidRequestExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client4.take)(data, {
        error: import_smithy_client4.expectString,
        error_description: import_smithy_client4.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InvalidRequestExceptionRes");
    var de_InvalidRequestRegionExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client4.take)(data, {
        endpoint: import_smithy_client4.expectString,
        error: import_smithy_client4.expectString,
        error_description: import_smithy_client4.expectString,
        region: import_smithy_client4.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidRequestRegionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InvalidRequestRegionExceptionRes");
    var de_InvalidScopeExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client4.take)(data, {
        error: import_smithy_client4.expectString,
        error_description: import_smithy_client4.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidScopeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InvalidScopeExceptionRes");
    var de_SlowDownExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client4.take)(data, {
        error: import_smithy_client4.expectString,
        error_description: import_smithy_client4.expectString
      });
      Object.assign(contents, doc);
      const exception = new SlowDownException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_SlowDownExceptionRes");
    var de_UnauthorizedClientExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client4.take)(data, {
        error: import_smithy_client4.expectString,
        error_description: import_smithy_client4.expectString
      });
      Object.assign(contents, doc);
      const exception = new UnauthorizedClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_UnauthorizedClientExceptionRes");
    var de_UnsupportedGrantTypeExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client4.take)(data, {
        error: import_smithy_client4.expectString,
        error_description: import_smithy_client4.expectString
      });
      Object.assign(contents, doc);
      const exception = new UnsupportedGrantTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_UnsupportedGrantTypeExceptionRes");
    var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    }), "deserializeMetadata");
    var _ai = "aws_iam";
    var _CreateTokenCommand = class _CreateTokenCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSSOOIDCService", "CreateToken", {}).n("SSOOIDCClient", "CreateTokenCommand").f(CreateTokenRequestFilterSensitiveLog, CreateTokenResponseFilterSensitiveLog).ser(se_CreateTokenCommand).de(de_CreateTokenCommand).build() {
    };
    __name(_CreateTokenCommand, "CreateTokenCommand");
    var CreateTokenCommand = _CreateTokenCommand;
    var _CreateTokenWithIAMCommand = class _CreateTokenWithIAMCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSSOOIDCService", "CreateTokenWithIAM", {}).n("SSOOIDCClient", "CreateTokenWithIAMCommand").f(CreateTokenWithIAMRequestFilterSensitiveLog, CreateTokenWithIAMResponseFilterSensitiveLog).ser(se_CreateTokenWithIAMCommand).de(de_CreateTokenWithIAMCommand).build() {
    };
    __name(_CreateTokenWithIAMCommand, "CreateTokenWithIAMCommand");
    var CreateTokenWithIAMCommand = _CreateTokenWithIAMCommand;
    var _RegisterClientCommand = class _RegisterClientCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSSOOIDCService", "RegisterClient", {}).n("SSOOIDCClient", "RegisterClientCommand").f(void 0, RegisterClientResponseFilterSensitiveLog).ser(se_RegisterClientCommand).de(de_RegisterClientCommand).build() {
    };
    __name(_RegisterClientCommand, "RegisterClientCommand");
    var RegisterClientCommand = _RegisterClientCommand;
    var _StartDeviceAuthorizationCommand = class _StartDeviceAuthorizationCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSSOOIDCService", "StartDeviceAuthorization", {}).n("SSOOIDCClient", "StartDeviceAuthorizationCommand").f(StartDeviceAuthorizationRequestFilterSensitiveLog, void 0).ser(se_StartDeviceAuthorizationCommand).de(de_StartDeviceAuthorizationCommand).build() {
    };
    __name(_StartDeviceAuthorizationCommand, "StartDeviceAuthorizationCommand");
    var StartDeviceAuthorizationCommand = _StartDeviceAuthorizationCommand;
    var commands = {
      CreateTokenCommand,
      CreateTokenWithIAMCommand,
      RegisterClientCommand,
      StartDeviceAuthorizationCommand
    };
    var _SSOOIDC = class _SSOOIDC extends SSOOIDCClient {
    };
    __name(_SSOOIDC, "SSOOIDC");
    var SSOOIDC = _SSOOIDC;
    (0, import_smithy_client4.createAggregatedClient)(commands, SSOOIDC);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+token-providers@3.699.0_@aws-sdk+client-sso-oidc@3.699.0_@aws-sdk+client-sts@3.699.0_kkxl27ihwohjxvhokcx4xndqza/node_modules/@aws-sdk/token-providers/dist-cjs/index.js
var require_dist_cjs56 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+token-providers@3.699.0_@aws-sdk+client-sso-oidc@3.699.0_@aws-sdk+client-sts@3.699.0_kkxl27ihwohjxvhokcx4xndqza/node_modules/@aws-sdk/token-providers/dist-cjs/index.js"(exports, module) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      fromSso: () => fromSso,
      fromStatic: () => fromStatic,
      nodeProvider: () => nodeProvider
    });
    module.exports = __toCommonJS2(src_exports);
    var EXPIRE_WINDOW_MS = 5 * 60 * 1e3;
    var REFRESH_MESSAGE = `To refresh this SSO session run 'aws sso login' with the corresponding profile.`;
    var getSsoOidcClient = /* @__PURE__ */ __name(async (ssoRegion, init = {}) => {
      var _a, _b, _c;
      const { SSOOIDCClient } = await Promise.resolve().then(() => __toESM2(require_dist_cjs55()));
      const ssoOidcClient = new SSOOIDCClient(
        Object.assign({}, init.clientConfig ?? {}, {
          region: ssoRegion ?? ((_a = init.clientConfig) == null ? void 0 : _a.region),
          logger: ((_b = init.clientConfig) == null ? void 0 : _b.logger) ?? ((_c = init.parentClientConfig) == null ? void 0 : _c.logger)
        })
      );
      return ssoOidcClient;
    }, "getSsoOidcClient");
    var getNewSsoOidcToken = /* @__PURE__ */ __name(async (ssoToken, ssoRegion, init = {}) => {
      const { CreateTokenCommand } = await Promise.resolve().then(() => __toESM2(require_dist_cjs55()));
      const ssoOidcClient = await getSsoOidcClient(ssoRegion, init);
      return ssoOidcClient.send(
        new CreateTokenCommand({
          clientId: ssoToken.clientId,
          clientSecret: ssoToken.clientSecret,
          refreshToken: ssoToken.refreshToken,
          grantType: "refresh_token"
        })
      );
    }, "getNewSsoOidcToken");
    var import_property_provider2 = require_dist_cjs16();
    var validateTokenExpiry = /* @__PURE__ */ __name((token) => {
      if (token.expiration && token.expiration.getTime() < Date.now()) {
        throw new import_property_provider2.TokenProviderError(`Token is expired. ${REFRESH_MESSAGE}`, false);
      }
    }, "validateTokenExpiry");
    var validateTokenKey = /* @__PURE__ */ __name((key, value, forRefresh = false) => {
      if (typeof value === "undefined") {
        throw new import_property_provider2.TokenProviderError(
          `Value not present for '${key}' in SSO Token${forRefresh ? ". Cannot refresh" : ""}. ${REFRESH_MESSAGE}`,
          false
        );
      }
    }, "validateTokenKey");
    var import_shared_ini_file_loader = require_dist_cjs40();
    var import_fs = __require("fs");
    var { writeFile } = import_fs.promises;
    var writeSSOTokenToFile = /* @__PURE__ */ __name((id, ssoToken) => {
      const tokenFilepath = (0, import_shared_ini_file_loader.getSSOTokenFilepath)(id);
      const tokenString = JSON.stringify(ssoToken, null, 2);
      return writeFile(tokenFilepath, tokenString);
    }, "writeSSOTokenToFile");
    var lastRefreshAttemptTime = /* @__PURE__ */ new Date(0);
    var fromSso = /* @__PURE__ */ __name((init = {}) => async () => {
      var _a;
      (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/token-providers - fromSso");
      const profiles = await (0, import_shared_ini_file_loader.parseKnownFiles)(init);
      const profileName = (0, import_shared_ini_file_loader.getProfileName)(init);
      const profile = profiles[profileName];
      if (!profile) {
        throw new import_property_provider2.TokenProviderError(`Profile '${profileName}' could not be found in shared credentials file.`, false);
      } else if (!profile["sso_session"]) {
        throw new import_property_provider2.TokenProviderError(`Profile '${profileName}' is missing required property 'sso_session'.`);
      }
      const ssoSessionName = profile["sso_session"];
      const ssoSessions = await (0, import_shared_ini_file_loader.loadSsoSessionData)(init);
      const ssoSession = ssoSessions[ssoSessionName];
      if (!ssoSession) {
        throw new import_property_provider2.TokenProviderError(
          `Sso session '${ssoSessionName}' could not be found in shared credentials file.`,
          false
        );
      }
      for (const ssoSessionRequiredKey of ["sso_start_url", "sso_region"]) {
        if (!ssoSession[ssoSessionRequiredKey]) {
          throw new import_property_provider2.TokenProviderError(
            `Sso session '${ssoSessionName}' is missing required property '${ssoSessionRequiredKey}'.`,
            false
          );
        }
      }
      const ssoStartUrl = ssoSession["sso_start_url"];
      const ssoRegion = ssoSession["sso_region"];
      let ssoToken;
      try {
        ssoToken = await (0, import_shared_ini_file_loader.getSSOTokenFromFile)(ssoSessionName);
      } catch (e) {
        throw new import_property_provider2.TokenProviderError(
          `The SSO session token associated with profile=${profileName} was not found or is invalid. ${REFRESH_MESSAGE}`,
          false
        );
      }
      validateTokenKey("accessToken", ssoToken.accessToken);
      validateTokenKey("expiresAt", ssoToken.expiresAt);
      const { accessToken, expiresAt } = ssoToken;
      const existingToken = { token: accessToken, expiration: new Date(expiresAt) };
      if (existingToken.expiration.getTime() - Date.now() > EXPIRE_WINDOW_MS) {
        return existingToken;
      }
      if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1e3) {
        validateTokenExpiry(existingToken);
        return existingToken;
      }
      validateTokenKey("clientId", ssoToken.clientId, true);
      validateTokenKey("clientSecret", ssoToken.clientSecret, true);
      validateTokenKey("refreshToken", ssoToken.refreshToken, true);
      try {
        lastRefreshAttemptTime.setTime(Date.now());
        const newSsoOidcToken = await getNewSsoOidcToken(ssoToken, ssoRegion, init);
        validateTokenKey("accessToken", newSsoOidcToken.accessToken);
        validateTokenKey("expiresIn", newSsoOidcToken.expiresIn);
        const newTokenExpiration = new Date(Date.now() + newSsoOidcToken.expiresIn * 1e3);
        try {
          await writeSSOTokenToFile(ssoSessionName, {
            ...ssoToken,
            accessToken: newSsoOidcToken.accessToken,
            expiresAt: newTokenExpiration.toISOString(),
            refreshToken: newSsoOidcToken.refreshToken
          });
        } catch (error) {
        }
        return {
          token: newSsoOidcToken.accessToken,
          expiration: newTokenExpiration
        };
      } catch (error) {
        validateTokenExpiry(existingToken);
        return existingToken;
      }
    }, "fromSso");
    var fromStatic = /* @__PURE__ */ __name(({ token, logger: logger2 }) => async () => {
      logger2 == null ? void 0 : logger2.debug("@aws-sdk/token-providers - fromStatic");
      if (!token || !token.token) {
        throw new import_property_provider2.TokenProviderError(`Please pass a valid token to fromStatic`, false);
      }
      return token;
    }, "fromStatic");
    var nodeProvider = /* @__PURE__ */ __name((init = {}) => (0, import_property_provider2.memoize)(
      (0, import_property_provider2.chain)(fromSso(init), async () => {
        throw new import_property_provider2.TokenProviderError("Could not load token from any providers", false);
      }),
      (token) => token.expiration !== void 0 && token.expiration.getTime() - Date.now() < 3e5,
      (token) => token.expiration !== void 0
    ), "nodeProvider");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.699.0_@aws-sdk+client-sso-oidc@3.699.0_@aws-sdk+client-sts_ygvfqju4t76h62fib52lvjuyoq/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js
var require_dist_cjs57 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.699.0_@aws-sdk+client-sso-oidc@3.699.0_@aws-sdk+client-sts_ygvfqju4t76h62fib52lvjuyoq/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __esm2 = (fn, res) => function __init() {
      return fn && (res = (0, fn[__getOwnPropNames2(fn)[0]])(fn = 0)), res;
    };
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var loadSso_exports = {};
    __export2(loadSso_exports, {
      GetRoleCredentialsCommand: () => import_client_sso.GetRoleCredentialsCommand,
      SSOClient: () => import_client_sso.SSOClient
    });
    var import_client_sso;
    var init_loadSso = __esm2({
      "src/loadSso.ts"() {
        "use strict";
        import_client_sso = require_dist_cjs54();
      }
    });
    var src_exports = {};
    __export2(src_exports, {
      fromSSO: () => fromSSO,
      isSsoProfile: () => isSsoProfile,
      validateSsoProfile: () => validateSsoProfile
    });
    module.exports = __toCommonJS2(src_exports);
    var isSsoProfile = /* @__PURE__ */ __name((arg) => arg && (typeof arg.sso_start_url === "string" || typeof arg.sso_account_id === "string" || typeof arg.sso_session === "string" || typeof arg.sso_region === "string" || typeof arg.sso_role_name === "string"), "isSsoProfile");
    var import_client2 = (init_client(), __toCommonJS(client_exports));
    var import_token_providers = require_dist_cjs56();
    var import_property_provider2 = require_dist_cjs16();
    var import_shared_ini_file_loader = require_dist_cjs40();
    var SHOULD_FAIL_CREDENTIAL_CHAIN = false;
    var resolveSSOCredentials = /* @__PURE__ */ __name(async ({
      ssoStartUrl,
      ssoSession,
      ssoAccountId,
      ssoRegion,
      ssoRoleName,
      ssoClient,
      clientConfig,
      parentClientConfig,
      profile,
      logger: logger2
    }) => {
      let token;
      const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;
      if (ssoSession) {
        try {
          const _token = await (0, import_token_providers.fromSso)({ profile })();
          token = {
            accessToken: _token.token,
            expiresAt: new Date(_token.expiration).toISOString()
          };
        } catch (e) {
          throw new import_property_provider2.CredentialsProviderError(e.message, {
            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
            logger: logger2
          });
        }
      } else {
        try {
          token = await (0, import_shared_ini_file_loader.getSSOTokenFromFile)(ssoStartUrl);
        } catch (e) {
          throw new import_property_provider2.CredentialsProviderError(`The SSO session associated with this profile is invalid. ${refreshMessage}`, {
            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
            logger: logger2
          });
        }
      }
      if (new Date(token.expiresAt).getTime() - Date.now() <= 0) {
        throw new import_property_provider2.CredentialsProviderError(`The SSO session associated with this profile has expired. ${refreshMessage}`, {
          tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
          logger: logger2
        });
      }
      const { accessToken } = token;
      const { SSOClient: SSOClient2, GetRoleCredentialsCommand: GetRoleCredentialsCommand2 } = await Promise.resolve().then(() => (init_loadSso(), loadSso_exports));
      const sso = ssoClient || new SSOClient2(
        Object.assign({}, clientConfig ?? {}, {
          logger: (clientConfig == null ? void 0 : clientConfig.logger) ?? (parentClientConfig == null ? void 0 : parentClientConfig.logger),
          region: (clientConfig == null ? void 0 : clientConfig.region) ?? ssoRegion
        })
      );
      let ssoResp;
      try {
        ssoResp = await sso.send(
          new GetRoleCredentialsCommand2({
            accountId: ssoAccountId,
            roleName: ssoRoleName,
            accessToken
          })
        );
      } catch (e) {
        throw new import_property_provider2.CredentialsProviderError(e, {
          tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
          logger: logger2
        });
      }
      const {
        roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration, credentialScope, accountId } = {}
      } = ssoResp;
      if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {
        throw new import_property_provider2.CredentialsProviderError("SSO returns an invalid temporary credential.", {
          tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
          logger: logger2
        });
      }
      const credentials = {
        accessKeyId,
        secretAccessKey,
        sessionToken,
        expiration: new Date(expiration),
        ...credentialScope && { credentialScope },
        ...accountId && { accountId }
      };
      if (ssoSession) {
        (0, import_client2.setCredentialFeature)(credentials, "CREDENTIALS_SSO", "s");
      } else {
        (0, import_client2.setCredentialFeature)(credentials, "CREDENTIALS_SSO_LEGACY", "u");
      }
      return credentials;
    }, "resolveSSOCredentials");
    var validateSsoProfile = /* @__PURE__ */ __name((profile, logger2) => {
      const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;
      if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {
        throw new import_property_provider2.CredentialsProviderError(
          `Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(profile).join(
            ", "
          )}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,
          { tryNextLink: false, logger: logger2 }
        );
      }
      return profile;
    }, "validateSsoProfile");
    var fromSSO = /* @__PURE__ */ __name((init = {}) => async () => {
      var _a;
      (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-sso - fromSSO");
      const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoSession } = init;
      const { ssoClient } = init;
      const profileName = (0, import_shared_ini_file_loader.getProfileName)(init);
      if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {
        const profiles = await (0, import_shared_ini_file_loader.parseKnownFiles)(init);
        const profile = profiles[profileName];
        if (!profile) {
          throw new import_property_provider2.CredentialsProviderError(`Profile ${profileName} was not found.`, { logger: init.logger });
        }
        if (!isSsoProfile(profile)) {
          throw new import_property_provider2.CredentialsProviderError(`Profile ${profileName} is not configured with SSO credentials.`, {
            logger: init.logger
          });
        }
        if (profile == null ? void 0 : profile.sso_session) {
          const ssoSessions = await (0, import_shared_ini_file_loader.loadSsoSessionData)(init);
          const session = ssoSessions[profile.sso_session];
          const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;
          if (ssoRegion && ssoRegion !== session.sso_region) {
            throw new import_property_provider2.CredentialsProviderError(`Conflicting SSO region` + conflictMsg, {
              tryNextLink: false,
              logger: init.logger
            });
          }
          if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) {
            throw new import_property_provider2.CredentialsProviderError(`Conflicting SSO start_url` + conflictMsg, {
              tryNextLink: false,
              logger: init.logger
            });
          }
          profile.sso_region = session.sso_region;
          profile.sso_start_url = session.sso_start_url;
        }
        const { sso_start_url, sso_account_id, sso_region, sso_role_name, sso_session } = validateSsoProfile(
          profile,
          init.logger
        );
        return resolveSSOCredentials({
          ssoStartUrl: sso_start_url,
          ssoSession: sso_session,
          ssoAccountId: sso_account_id,
          ssoRegion: sso_region,
          ssoRoleName: sso_role_name,
          ssoClient,
          clientConfig: init.clientConfig,
          parentClientConfig: init.parentClientConfig,
          profile: profileName
        });
      } else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {
        throw new import_property_provider2.CredentialsProviderError(
          'Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"',
          { tryNextLink: false, logger: init.logger }
        );
      } else {
        return resolveSSOCredentials({
          ssoStartUrl,
          ssoSession,
          ssoAccountId,
          ssoRegion,
          ssoRoleName,
          ssoClient,
          clientConfig: init.clientConfig,
          parentClientConfig: init.parentClientConfig,
          profile: profileName
        });
      }
    }, "fromSSO");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-sts/dist-cjs/auth/httpAuthSchemeProvider.js
var require_httpAuthSchemeProvider4 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-sts/dist-cjs/auth/httpAuthSchemeProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveHttpAuthSchemeConfig = exports.resolveStsAuthConfig = exports.defaultSTSHttpAuthSchemeProvider = exports.defaultSTSHttpAuthSchemeParametersProvider = void 0;
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var util_middleware_1 = require_dist_cjs4();
    var STSClient_1 = require_STSClient();
    var defaultSTSHttpAuthSchemeParametersProvider = async (config, context, input) => {
      return {
        operation: (0, util_middleware_1.getSmithyContext)(context).operation,
        region: await (0, util_middleware_1.normalizeProvider)(config.region)() || (() => {
          throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
        })()
      };
    };
    exports.defaultSTSHttpAuthSchemeParametersProvider = defaultSTSHttpAuthSchemeParametersProvider;
    function createAwsAuthSigv4HttpAuthOption(authParameters) {
      return {
        schemeId: "aws.auth#sigv4",
        signingProperties: {
          name: "sts",
          region: authParameters.region
        },
        propertiesExtractor: (config, context) => ({
          signingProperties: {
            config,
            context
          }
        })
      };
    }
    function createSmithyApiNoAuthHttpAuthOption(authParameters) {
      return {
        schemeId: "smithy.api#noAuth"
      };
    }
    var defaultSTSHttpAuthSchemeProvider = (authParameters) => {
      const options = [];
      switch (authParameters.operation) {
        case "AssumeRoleWithSAML": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        case "AssumeRoleWithWebIdentity": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        default: {
          options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
        }
      }
      return options;
    };
    exports.defaultSTSHttpAuthSchemeProvider = defaultSTSHttpAuthSchemeProvider;
    var resolveStsAuthConfig = (input) => ({
      ...input,
      stsClientCtor: STSClient_1.STSClient
    });
    exports.resolveStsAuthConfig = resolveStsAuthConfig;
    var resolveHttpAuthSchemeConfig = (config) => {
      const config_0 = (0, exports.resolveStsAuthConfig)(config);
      const config_1 = (0, core_1.resolveAwsSdkSigV4Config)(config_0);
      return {
        ...config_1
      };
    };
    exports.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/EndpointParameters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.commonParams = exports.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        useGlobalEndpoint: options.useGlobalEndpoint ?? false,
        defaultSigningName: "sts"
      };
    };
    exports.resolveClientEndpointParameters = resolveClientEndpointParameters;
    exports.commonParams = {
      UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-sts/package.json
var require_package4 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-sts/package.json"(exports, module) {
    module.exports = {
      name: "@aws-sdk/client-sts",
      description: "AWS SDK for JavaScript Sts Client for Node.js, Browser and React Native",
      version: "3.699.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "node ../../scripts/compilation/inline client-sts",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "rimraf ./dist-types tsconfig.types.tsbuildinfo && tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sts",
        test: "yarn g:vitest run",
        "test:watch": "yarn g:vitest watch"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "5.2.0",
        "@aws-crypto/sha256-js": "5.2.0",
        "@aws-sdk/client-sso-oidc": "3.699.0",
        "@aws-sdk/core": "3.696.0",
        "@aws-sdk/credential-provider-node": "3.699.0",
        "@aws-sdk/middleware-host-header": "3.696.0",
        "@aws-sdk/middleware-logger": "3.696.0",
        "@aws-sdk/middleware-recursion-detection": "3.696.0",
        "@aws-sdk/middleware-user-agent": "3.696.0",
        "@aws-sdk/region-config-resolver": "3.696.0",
        "@aws-sdk/types": "3.696.0",
        "@aws-sdk/util-endpoints": "3.696.0",
        "@aws-sdk/util-user-agent-browser": "3.696.0",
        "@aws-sdk/util-user-agent-node": "3.696.0",
        "@smithy/config-resolver": "^3.0.12",
        "@smithy/core": "^2.5.3",
        "@smithy/fetch-http-handler": "^4.1.1",
        "@smithy/hash-node": "^3.0.10",
        "@smithy/invalid-dependency": "^3.0.10",
        "@smithy/middleware-content-length": "^3.0.12",
        "@smithy/middleware-endpoint": "^3.2.3",
        "@smithy/middleware-retry": "^3.0.27",
        "@smithy/middleware-serde": "^3.0.10",
        "@smithy/middleware-stack": "^3.0.10",
        "@smithy/node-config-provider": "^3.1.11",
        "@smithy/node-http-handler": "^3.3.1",
        "@smithy/protocol-http": "^4.1.7",
        "@smithy/smithy-client": "^3.4.4",
        "@smithy/types": "^3.7.1",
        "@smithy/url-parser": "^3.0.10",
        "@smithy/util-base64": "^3.0.0",
        "@smithy/util-body-length-browser": "^3.0.0",
        "@smithy/util-body-length-node": "^3.0.0",
        "@smithy/util-defaults-mode-browser": "^3.0.27",
        "@smithy/util-defaults-mode-node": "^3.0.27",
        "@smithy/util-endpoints": "^2.1.6",
        "@smithy/util-middleware": "^3.0.10",
        "@smithy/util-retry": "^3.0.10",
        "@smithy/util-utf8": "^3.0.0",
        tslib: "^2.6.2"
      },
      devDependencies: {
        "@tsconfig/node16": "16.1.3",
        "@types/node": "^16.18.96",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=16.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sts",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sts"
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/ruleset.js
var require_ruleset4 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/ruleset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ruleSet = void 0;
    var F = "required";
    var G = "type";
    var H = "fn";
    var I = "argv";
    var J = "ref";
    var a = false;
    var b = true;
    var c = "booleanEquals";
    var d = "stringEquals";
    var e = "sigv4";
    var f = "sts";
    var g = "us-east-1";
    var h = "endpoint";
    var i = "https://sts.{Region}.{PartitionResult#dnsSuffix}";
    var j = "tree";
    var k = "error";
    var l = "getAttr";
    var m = { [F]: false, [G]: "String" };
    var n = { [F]: true, "default": false, [G]: "Boolean" };
    var o = { [J]: "Endpoint" };
    var p = { [H]: "isSet", [I]: [{ [J]: "Region" }] };
    var q = { [J]: "Region" };
    var r = { [H]: "aws.partition", [I]: [q], "assign": "PartitionResult" };
    var s = { [J]: "UseFIPS" };
    var t = { [J]: "UseDualStack" };
    var u = { "url": "https://sts.amazonaws.com", "properties": { "authSchemes": [{ "name": e, "signingName": f, "signingRegion": g }] }, "headers": {} };
    var v = {};
    var w = { "conditions": [{ [H]: d, [I]: [q, "aws-global"] }], [h]: u, [G]: h };
    var x = { [H]: c, [I]: [s, true] };
    var y = { [H]: c, [I]: [t, true] };
    var z = { [H]: l, [I]: [{ [J]: "PartitionResult" }, "supportsFIPS"] };
    var A = { [J]: "PartitionResult" };
    var B = { [H]: c, [I]: [true, { [H]: l, [I]: [A, "supportsDualStack"] }] };
    var C = [{ [H]: "isSet", [I]: [o] }];
    var D = [x];
    var E = [y];
    var _data = { version: "1.0", parameters: { Region: m, UseDualStack: n, UseFIPS: n, Endpoint: m, UseGlobalEndpoint: n }, rules: [{ conditions: [{ [H]: c, [I]: [{ [J]: "UseGlobalEndpoint" }, b] }, { [H]: "not", [I]: C }, p, r, { [H]: c, [I]: [s, a] }, { [H]: c, [I]: [t, a] }], rules: [{ conditions: [{ [H]: d, [I]: [q, "ap-northeast-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "ap-south-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "ap-southeast-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "ap-southeast-2"] }], endpoint: u, [G]: h }, w, { conditions: [{ [H]: d, [I]: [q, "ca-central-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "eu-central-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "eu-north-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "eu-west-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "eu-west-2"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "eu-west-3"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "sa-east-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, g] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "us-east-2"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "us-west-1"] }], endpoint: u, [G]: h }, { conditions: [{ [H]: d, [I]: [q, "us-west-2"] }], endpoint: u, [G]: h }, { endpoint: { url: i, properties: { authSchemes: [{ name: e, signingName: f, signingRegion: "{Region}" }] }, headers: v }, [G]: h }], [G]: j }, { conditions: C, rules: [{ conditions: D, error: "Invalid Configuration: FIPS and custom endpoint are not supported", [G]: k }, { conditions: E, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", [G]: k }, { endpoint: { url: o, properties: v, headers: v }, [G]: h }], [G]: j }, { conditions: [p], rules: [{ conditions: [r], rules: [{ conditions: [x, y], rules: [{ conditions: [{ [H]: c, [I]: [b, z] }, B], rules: [{ endpoint: { url: "https://sts-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: v, headers: v }, [G]: h }], [G]: j }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", [G]: k }], [G]: j }, { conditions: D, rules: [{ conditions: [{ [H]: c, [I]: [z, b] }], rules: [{ conditions: [{ [H]: d, [I]: [{ [H]: l, [I]: [A, "name"] }, "aws-us-gov"] }], endpoint: { url: "https://sts.{Region}.amazonaws.com", properties: v, headers: v }, [G]: h }, { endpoint: { url: "https://sts-fips.{Region}.{PartitionResult#dnsSuffix}", properties: v, headers: v }, [G]: h }], [G]: j }, { error: "FIPS is enabled but this partition does not support FIPS", [G]: k }], [G]: j }, { conditions: E, rules: [{ conditions: [B], rules: [{ endpoint: { url: "https://sts.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: v, headers: v }, [G]: h }], [G]: j }, { error: "DualStack is enabled but this partition does not support DualStack", [G]: k }], [G]: j }, w, { endpoint: { url: i, properties: v, headers: v }, [G]: h }], [G]: j }], [G]: j }, { error: "Invalid Configuration: Missing Region", [G]: k }] };
    exports.ruleSet = _data;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver4 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/endpointResolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs31();
    var util_endpoints_2 = require_dist_cjs30();
    var ruleset_1 = require_ruleset4();
    var cache = new util_endpoints_2.EndpointCache({
      size: 50,
      params: ["Endpoint", "Region", "UseDualStack", "UseFIPS", "UseGlobalEndpoint"]
    });
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return cache.get(endpointParams, () => (0, util_endpoints_2.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      }));
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
    util_endpoints_2.customEndpointFunctions.aws = util_endpoints_1.awsEndpointFunctions;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var core_2 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var smithy_client_1 = require_dist_cjs19();
    var url_parser_1 = require_dist_cjs43();
    var util_base64_1 = require_dist_cjs9();
    var util_utf8_1 = require_dist_cjs8();
    var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider4();
    var endpointResolver_1 = require_endpointResolver4();
    var getRuntimeConfig = (config) => {
      return {
        apiVersion: "2011-06-15",
        base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
        base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
        disableHostPrefix: config?.disableHostPrefix ?? false,
        endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
        extensions: config?.extensions ?? [],
        httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? httpAuthSchemeProvider_1.defaultSTSHttpAuthSchemeProvider,
        httpAuthSchemes: config?.httpAuthSchemes ?? [
          {
            schemeId: "aws.auth#sigv4",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
            signer: new core_1.AwsSdkSigV4Signer()
          },
          {
            schemeId: "smithy.api#noAuth",
            identityProvider: (ipc) => ipc.getIdentityProvider("smithy.api#noAuth") || (async () => ({})),
            signer: new core_2.NoAuthSigner()
          }
        ],
        logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
        serviceId: config?.serviceId ?? "STS",
        urlParser: config?.urlParser ?? url_parser_1.parseUrl,
        utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
        utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js
var require_runtimeConfig3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package4());
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var credential_provider_node_1 = require_dist_cjs62();
    var util_user_agent_node_1 = require_dist_cjs49();
    var config_resolver_1 = require_dist_cjs33();
    var core_2 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var hash_node_1 = require_dist_cjs50();
    var middleware_retry_1 = require_dist_cjs38();
    var node_config_provider_1 = require_dist_cjs41();
    var node_http_handler_1 = require_dist_cjs12();
    var util_body_length_node_1 = require_dist_cjs51();
    var util_retry_1 = require_dist_cjs37();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared3();
    var smithy_client_1 = require_dist_cjs19();
    var util_defaults_mode_node_1 = require_dist_cjs52();
    var smithy_client_2 = require_dist_cjs19();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      (0, core_1.emitWarningIfUnsupportedVersion)(process.version);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? credential_provider_node_1.defaultProvider,
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.createDefaultUserAgentProvider)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        httpAuthSchemes: config?.httpAuthSchemes ?? [
          {
            schemeId: "aws.auth#sigv4",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4") || (async (idProps) => await (0, credential_provider_node_1.defaultProvider)(idProps?.__config || {})()),
            signer: new core_1.AwsSdkSigV4Signer()
          },
          {
            schemeId: "smithy.api#noAuth",
            identityProvider: (ipc) => ipc.getIdentityProvider("smithy.api#noAuth") || (async () => ({})),
            signer: new core_2.NoAuthSigner()
          }
        ],
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: node_http_handler_1.NodeHttpHandler.create(config?.requestHandler ?? defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),
        userAgentAppId: config?.userAgentAppId ?? (0, node_config_provider_1.loadConfig)(util_user_agent_node_1.NODE_APP_ID_CONFIG_OPTIONS)
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-sts/dist-cjs/auth/httpAuthExtensionConfiguration.js
var require_httpAuthExtensionConfiguration = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-sts/dist-cjs/auth/httpAuthExtensionConfiguration.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveHttpAuthRuntimeConfig = exports.getHttpAuthExtensionConfiguration = void 0;
    var getHttpAuthExtensionConfiguration = (runtimeConfig) => {
      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
      let _credentials = runtimeConfig.credentials;
      return {
        setHttpAuthScheme(httpAuthScheme) {
          const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
          if (index === -1) {
            _httpAuthSchemes.push(httpAuthScheme);
          } else {
            _httpAuthSchemes.splice(index, 1, httpAuthScheme);
          }
        },
        httpAuthSchemes() {
          return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
          _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
          return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
          _credentials = credentials;
        },
        credentials() {
          return _credentials;
        }
      };
    };
    exports.getHttpAuthExtensionConfiguration = getHttpAuthExtensionConfiguration;
    var resolveHttpAuthRuntimeConfig = (config) => {
      return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials()
      };
    };
    exports.resolveHttpAuthRuntimeConfig = resolveHttpAuthRuntimeConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-sts/dist-cjs/runtimeExtensions.js
var require_runtimeExtensions = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-sts/dist-cjs/runtimeExtensions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveRuntimeExtensions = void 0;
    var region_config_resolver_1 = require_dist_cjs53();
    var protocol_http_1 = require_dist_cjs2();
    var smithy_client_1 = require_dist_cjs19();
    var httpAuthExtensionConfiguration_1 = require_httpAuthExtensionConfiguration();
    var asPartial = (t) => t;
    var resolveRuntimeExtensions = (runtimeConfig, extensions) => {
      const extensionConfiguration = {
        ...asPartial((0, region_config_resolver_1.getAwsRegionExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, smithy_client_1.getDefaultExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, protocol_http_1.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, httpAuthExtensionConfiguration_1.getHttpAuthExtensionConfiguration)(runtimeConfig))
      };
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return {
        ...runtimeConfig,
        ...(0, region_config_resolver_1.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
        ...(0, smithy_client_1.resolveDefaultRuntimeConfig)(extensionConfiguration),
        ...(0, protocol_http_1.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
        ...(0, httpAuthExtensionConfiguration_1.resolveHttpAuthRuntimeConfig)(extensionConfiguration)
      };
    };
    exports.resolveRuntimeExtensions = resolveRuntimeExtensions;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js
var require_STSClient = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STSClient = exports.__Client = void 0;
    var middleware_host_header_1 = require_dist_cjs24();
    var middleware_logger_1 = require_dist_cjs25();
    var middleware_recursion_detection_1 = require_dist_cjs26();
    var middleware_user_agent_1 = require_dist_cjs32();
    var config_resolver_1 = require_dist_cjs33();
    var core_1 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var middleware_content_length_1 = require_dist_cjs35();
    var middleware_endpoint_1 = require_dist_cjs44();
    var middleware_retry_1 = require_dist_cjs38();
    var smithy_client_1 = require_dist_cjs19();
    Object.defineProperty(exports, "__Client", { enumerable: true, get: function() {
      return smithy_client_1.Client;
    } });
    var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider4();
    var EndpointParameters_1 = require_EndpointParameters();
    var runtimeConfig_1 = require_runtimeConfig3();
    var runtimeExtensions_1 = require_runtimeExtensions();
    var STSClient2 = class extends smithy_client_1.Client {
      constructor(...[configuration]) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration || {});
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_1);
        const _config_3 = (0, middleware_retry_1.resolveRetryConfig)(_config_2);
        const _config_4 = (0, config_resolver_1.resolveRegionConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_5);
        const _config_7 = (0, httpAuthSchemeProvider_1.resolveHttpAuthSchemeConfig)(_config_6);
        const _config_8 = (0, runtimeExtensions_1.resolveRuntimeExtensions)(_config_7, configuration?.extensions || []);
        super(_config_8);
        this.config = _config_8;
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, core_1.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
          httpAuthSchemeParametersProvider: httpAuthSchemeProvider_1.defaultSTSHttpAuthSchemeParametersProvider,
          identityProviderConfigProvider: async (config) => new core_1.DefaultIdentityProviderConfig({
            "aws.auth#sigv4": config.credentials
          })
        }));
        this.middlewareStack.use((0, core_1.getHttpSigningPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports.STSClient = STSClient2;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-sts/dist-cjs/index.js
var require_dist_cjs58 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-sts/dist-cjs/index.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __reExport = (target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default"));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      AssumeRoleCommand: () => AssumeRoleCommand,
      AssumeRoleResponseFilterSensitiveLog: () => AssumeRoleResponseFilterSensitiveLog,
      AssumeRoleWithSAMLCommand: () => AssumeRoleWithSAMLCommand,
      AssumeRoleWithSAMLRequestFilterSensitiveLog: () => AssumeRoleWithSAMLRequestFilterSensitiveLog,
      AssumeRoleWithSAMLResponseFilterSensitiveLog: () => AssumeRoleWithSAMLResponseFilterSensitiveLog,
      AssumeRoleWithWebIdentityCommand: () => AssumeRoleWithWebIdentityCommand,
      AssumeRoleWithWebIdentityRequestFilterSensitiveLog: () => AssumeRoleWithWebIdentityRequestFilterSensitiveLog,
      AssumeRoleWithWebIdentityResponseFilterSensitiveLog: () => AssumeRoleWithWebIdentityResponseFilterSensitiveLog,
      AssumeRootCommand: () => AssumeRootCommand,
      AssumeRootResponseFilterSensitiveLog: () => AssumeRootResponseFilterSensitiveLog,
      ClientInputEndpointParameters: () => import_EndpointParameters10.ClientInputEndpointParameters,
      CredentialsFilterSensitiveLog: () => CredentialsFilterSensitiveLog,
      DecodeAuthorizationMessageCommand: () => DecodeAuthorizationMessageCommand,
      ExpiredTokenException: () => ExpiredTokenException,
      GetAccessKeyInfoCommand: () => GetAccessKeyInfoCommand,
      GetCallerIdentityCommand: () => GetCallerIdentityCommand,
      GetFederationTokenCommand: () => GetFederationTokenCommand,
      GetFederationTokenResponseFilterSensitiveLog: () => GetFederationTokenResponseFilterSensitiveLog,
      GetSessionTokenCommand: () => GetSessionTokenCommand,
      GetSessionTokenResponseFilterSensitiveLog: () => GetSessionTokenResponseFilterSensitiveLog,
      IDPCommunicationErrorException: () => IDPCommunicationErrorException,
      IDPRejectedClaimException: () => IDPRejectedClaimException,
      InvalidAuthorizationMessageException: () => InvalidAuthorizationMessageException,
      InvalidIdentityTokenException: () => InvalidIdentityTokenException,
      MalformedPolicyDocumentException: () => MalformedPolicyDocumentException,
      PackedPolicyTooLargeException: () => PackedPolicyTooLargeException,
      RegionDisabledException: () => RegionDisabledException,
      STS: () => STS,
      STSServiceException: () => STSServiceException,
      decorateDefaultCredentialProvider: () => decorateDefaultCredentialProvider,
      getDefaultRoleAssumer: () => getDefaultRoleAssumer2,
      getDefaultRoleAssumerWithWebIdentity: () => getDefaultRoleAssumerWithWebIdentity2
    });
    module.exports = __toCommonJS2(src_exports);
    __reExport(src_exports, require_STSClient(), module.exports);
    var import_middleware_endpoint = require_dist_cjs44();
    var import_middleware_serde2 = require_dist_cjs5();
    var import_EndpointParameters = require_EndpointParameters();
    var import_smithy_client4 = require_dist_cjs19();
    var _STSServiceException = class _STSServiceException2 extends import_smithy_client4.ServiceException {
      /**
       * @internal
       */
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _STSServiceException2.prototype);
      }
    };
    __name(_STSServiceException, "STSServiceException");
    var STSServiceException = _STSServiceException;
    var _ExpiredTokenException = class _ExpiredTokenException2 extends STSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ExpiredTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "ExpiredTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ExpiredTokenException2.prototype);
      }
    };
    __name(_ExpiredTokenException, "ExpiredTokenException");
    var ExpiredTokenException = _ExpiredTokenException;
    var _MalformedPolicyDocumentException = class _MalformedPolicyDocumentException2 extends STSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "MalformedPolicyDocumentException",
          $fault: "client",
          ...opts
        });
        this.name = "MalformedPolicyDocumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _MalformedPolicyDocumentException2.prototype);
      }
    };
    __name(_MalformedPolicyDocumentException, "MalformedPolicyDocumentException");
    var MalformedPolicyDocumentException = _MalformedPolicyDocumentException;
    var _PackedPolicyTooLargeException = class _PackedPolicyTooLargeException2 extends STSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "PackedPolicyTooLargeException",
          $fault: "client",
          ...opts
        });
        this.name = "PackedPolicyTooLargeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _PackedPolicyTooLargeException2.prototype);
      }
    };
    __name(_PackedPolicyTooLargeException, "PackedPolicyTooLargeException");
    var PackedPolicyTooLargeException = _PackedPolicyTooLargeException;
    var _RegionDisabledException = class _RegionDisabledException2 extends STSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "RegionDisabledException",
          $fault: "client",
          ...opts
        });
        this.name = "RegionDisabledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _RegionDisabledException2.prototype);
      }
    };
    __name(_RegionDisabledException, "RegionDisabledException");
    var RegionDisabledException = _RegionDisabledException;
    var _IDPRejectedClaimException = class _IDPRejectedClaimException2 extends STSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "IDPRejectedClaimException",
          $fault: "client",
          ...opts
        });
        this.name = "IDPRejectedClaimException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _IDPRejectedClaimException2.prototype);
      }
    };
    __name(_IDPRejectedClaimException, "IDPRejectedClaimException");
    var IDPRejectedClaimException = _IDPRejectedClaimException;
    var _InvalidIdentityTokenException = class _InvalidIdentityTokenException2 extends STSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidIdentityTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidIdentityTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidIdentityTokenException2.prototype);
      }
    };
    __name(_InvalidIdentityTokenException, "InvalidIdentityTokenException");
    var InvalidIdentityTokenException = _InvalidIdentityTokenException;
    var _IDPCommunicationErrorException = class _IDPCommunicationErrorException2 extends STSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "IDPCommunicationErrorException",
          $fault: "client",
          ...opts
        });
        this.name = "IDPCommunicationErrorException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _IDPCommunicationErrorException2.prototype);
      }
    };
    __name(_IDPCommunicationErrorException, "IDPCommunicationErrorException");
    var IDPCommunicationErrorException = _IDPCommunicationErrorException;
    var _InvalidAuthorizationMessageException = class _InvalidAuthorizationMessageException2 extends STSServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidAuthorizationMessageException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAuthorizationMessageException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidAuthorizationMessageException2.prototype);
      }
    };
    __name(_InvalidAuthorizationMessageException, "InvalidAuthorizationMessageException");
    var InvalidAuthorizationMessageException = _InvalidAuthorizationMessageException;
    var CredentialsFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.SecretAccessKey && { SecretAccessKey: import_smithy_client4.SENSITIVE_STRING }
    }), "CredentialsFilterSensitiveLog");
    var AssumeRoleResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
    }), "AssumeRoleResponseFilterSensitiveLog");
    var AssumeRoleWithSAMLRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.SAMLAssertion && { SAMLAssertion: import_smithy_client4.SENSITIVE_STRING }
    }), "AssumeRoleWithSAMLRequestFilterSensitiveLog");
    var AssumeRoleWithSAMLResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
    }), "AssumeRoleWithSAMLResponseFilterSensitiveLog");
    var AssumeRoleWithWebIdentityRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.WebIdentityToken && { WebIdentityToken: import_smithy_client4.SENSITIVE_STRING }
    }), "AssumeRoleWithWebIdentityRequestFilterSensitiveLog");
    var AssumeRoleWithWebIdentityResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
    }), "AssumeRoleWithWebIdentityResponseFilterSensitiveLog");
    var AssumeRootResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
    }), "AssumeRootResponseFilterSensitiveLog");
    var GetFederationTokenResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
    }), "GetFederationTokenResponseFilterSensitiveLog");
    var GetSessionTokenResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
    }), "GetSessionTokenResponseFilterSensitiveLog");
    var import_core3 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var import_protocol_http8 = require_dist_cjs2();
    var se_AssumeRoleCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AssumeRoleRequest(input, context),
        [_A]: _AR,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_AssumeRoleCommand");
    var se_AssumeRoleWithSAMLCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AssumeRoleWithSAMLRequest(input, context),
        [_A]: _ARWSAML,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_AssumeRoleWithSAMLCommand");
    var se_AssumeRoleWithWebIdentityCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AssumeRoleWithWebIdentityRequest(input, context),
        [_A]: _ARWWI,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_AssumeRoleWithWebIdentityCommand");
    var se_AssumeRootCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AssumeRootRequest(input, context),
        [_A]: _ARs,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_AssumeRootCommand");
    var se_DecodeAuthorizationMessageCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DecodeAuthorizationMessageRequest(input, context),
        [_A]: _DAM,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DecodeAuthorizationMessageCommand");
    var se_GetAccessKeyInfoCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetAccessKeyInfoRequest(input, context),
        [_A]: _GAKI,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetAccessKeyInfoCommand");
    var se_GetCallerIdentityCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetCallerIdentityRequest(input, context),
        [_A]: _GCI,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetCallerIdentityCommand");
    var se_GetFederationTokenCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetFederationTokenRequest(input, context),
        [_A]: _GFT,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetFederationTokenCommand");
    var se_GetSessionTokenCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetSessionTokenRequest(input, context),
        [_A]: _GST,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetSessionTokenCommand");
    var de_AssumeRoleCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core3.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_AssumeRoleResponse(data.AssumeRoleResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_AssumeRoleCommand");
    var de_AssumeRoleWithSAMLCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core3.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_AssumeRoleWithSAMLResponse(data.AssumeRoleWithSAMLResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_AssumeRoleWithSAMLCommand");
    var de_AssumeRoleWithWebIdentityCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core3.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_AssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_AssumeRoleWithWebIdentityCommand");
    var de_AssumeRootCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core3.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_AssumeRootResponse(data.AssumeRootResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_AssumeRootCommand");
    var de_DecodeAuthorizationMessageCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core3.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_DecodeAuthorizationMessageResponse(data.DecodeAuthorizationMessageResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DecodeAuthorizationMessageCommand");
    var de_GetAccessKeyInfoCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core3.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_GetAccessKeyInfoResponse(data.GetAccessKeyInfoResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetAccessKeyInfoCommand");
    var de_GetCallerIdentityCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core3.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_GetCallerIdentityResponse(data.GetCallerIdentityResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetCallerIdentityCommand");
    var de_GetFederationTokenCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core3.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_GetFederationTokenResponse(data.GetFederationTokenResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetFederationTokenCommand");
    var de_GetSessionTokenCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core3.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_GetSessionTokenResponse(data.GetSessionTokenResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetSessionTokenCommand");
    var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await (0, import_core3.parseXmlErrorBody)(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        case "IDPRejectedClaim":
        case "com.amazonaws.sts#IDPRejectedClaimException":
          throw await de_IDPRejectedClaimExceptionRes(parsedOutput, context);
        case "InvalidIdentityToken":
        case "com.amazonaws.sts#InvalidIdentityTokenException":
          throw await de_InvalidIdentityTokenExceptionRes(parsedOutput, context);
        case "IDPCommunicationError":
        case "com.amazonaws.sts#IDPCommunicationErrorException":
          throw await de_IDPCommunicationErrorExceptionRes(parsedOutput, context);
        case "InvalidAuthorizationMessageException":
        case "com.amazonaws.sts#InvalidAuthorizationMessageException":
          throw await de_InvalidAuthorizationMessageExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    }, "de_CommandError");
    var de_ExpiredTokenExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_ExpiredTokenException(body.Error, context);
      const exception = new ExpiredTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, body);
    }, "de_ExpiredTokenExceptionRes");
    var de_IDPCommunicationErrorExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_IDPCommunicationErrorException(body.Error, context);
      const exception = new IDPCommunicationErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, body);
    }, "de_IDPCommunicationErrorExceptionRes");
    var de_IDPRejectedClaimExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_IDPRejectedClaimException(body.Error, context);
      const exception = new IDPRejectedClaimException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, body);
    }, "de_IDPRejectedClaimExceptionRes");
    var de_InvalidAuthorizationMessageExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidAuthorizationMessageException(body.Error, context);
      const exception = new InvalidAuthorizationMessageException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, body);
    }, "de_InvalidAuthorizationMessageExceptionRes");
    var de_InvalidIdentityTokenExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidIdentityTokenException(body.Error, context);
      const exception = new InvalidIdentityTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, body);
    }, "de_InvalidIdentityTokenExceptionRes");
    var de_MalformedPolicyDocumentExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_MalformedPolicyDocumentException(body.Error, context);
      const exception = new MalformedPolicyDocumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, body);
    }, "de_MalformedPolicyDocumentExceptionRes");
    var de_PackedPolicyTooLargeExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_PackedPolicyTooLargeException(body.Error, context);
      const exception = new PackedPolicyTooLargeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, body);
    }, "de_PackedPolicyTooLargeExceptionRes");
    var de_RegionDisabledExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_RegionDisabledException(body.Error, context);
      const exception = new RegionDisabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, body);
    }, "de_RegionDisabledExceptionRes");
    var se_AssumeRoleRequest = /* @__PURE__ */ __name((input, context) => {
      var _a2, _b, _c, _d;
      const entries = {};
      if (input[_RA] != null) {
        entries[_RA] = input[_RA];
      }
      if (input[_RSN] != null) {
        entries[_RSN] = input[_RSN];
      }
      if (input[_PA] != null) {
        const memberEntries = se_policyDescriptorListType(input[_PA], context);
        if (((_a2 = input[_PA]) == null ? void 0 : _a2.length) === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_P] != null) {
        entries[_P] = input[_P];
      }
      if (input[_DS] != null) {
        entries[_DS] = input[_DS];
      }
      if (input[_T] != null) {
        const memberEntries = se_tagListType(input[_T], context);
        if (((_b = input[_T]) == null ? void 0 : _b.length) === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_TTK] != null) {
        const memberEntries = se_tagKeyListType(input[_TTK], context);
        if (((_c = input[_TTK]) == null ? void 0 : _c.length) === 0) {
          entries.TransitiveTagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TransitiveTagKeys.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_EI] != null) {
        entries[_EI] = input[_EI];
      }
      if (input[_SN] != null) {
        entries[_SN] = input[_SN];
      }
      if (input[_TC] != null) {
        entries[_TC] = input[_TC];
      }
      if (input[_SI] != null) {
        entries[_SI] = input[_SI];
      }
      if (input[_PC] != null) {
        const memberEntries = se_ProvidedContextsListType(input[_PC], context);
        if (((_d = input[_PC]) == null ? void 0 : _d.length) === 0) {
          entries.ProvidedContexts = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ProvidedContexts.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    }, "se_AssumeRoleRequest");
    var se_AssumeRoleWithSAMLRequest = /* @__PURE__ */ __name((input, context) => {
      var _a2;
      const entries = {};
      if (input[_RA] != null) {
        entries[_RA] = input[_RA];
      }
      if (input[_PAr] != null) {
        entries[_PAr] = input[_PAr];
      }
      if (input[_SAMLA] != null) {
        entries[_SAMLA] = input[_SAMLA];
      }
      if (input[_PA] != null) {
        const memberEntries = se_policyDescriptorListType(input[_PA], context);
        if (((_a2 = input[_PA]) == null ? void 0 : _a2.length) === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_P] != null) {
        entries[_P] = input[_P];
      }
      if (input[_DS] != null) {
        entries[_DS] = input[_DS];
      }
      return entries;
    }, "se_AssumeRoleWithSAMLRequest");
    var se_AssumeRoleWithWebIdentityRequest = /* @__PURE__ */ __name((input, context) => {
      var _a2;
      const entries = {};
      if (input[_RA] != null) {
        entries[_RA] = input[_RA];
      }
      if (input[_RSN] != null) {
        entries[_RSN] = input[_RSN];
      }
      if (input[_WIT] != null) {
        entries[_WIT] = input[_WIT];
      }
      if (input[_PI] != null) {
        entries[_PI] = input[_PI];
      }
      if (input[_PA] != null) {
        const memberEntries = se_policyDescriptorListType(input[_PA], context);
        if (((_a2 = input[_PA]) == null ? void 0 : _a2.length) === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_P] != null) {
        entries[_P] = input[_P];
      }
      if (input[_DS] != null) {
        entries[_DS] = input[_DS];
      }
      return entries;
    }, "se_AssumeRoleWithWebIdentityRequest");
    var se_AssumeRootRequest = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_TP] != null) {
        entries[_TP] = input[_TP];
      }
      if (input[_TPA] != null) {
        const memberEntries = se_PolicyDescriptorType(input[_TPA], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TaskPolicyArn.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_DS] != null) {
        entries[_DS] = input[_DS];
      }
      return entries;
    }, "se_AssumeRootRequest");
    var se_DecodeAuthorizationMessageRequest = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_EM] != null) {
        entries[_EM] = input[_EM];
      }
      return entries;
    }, "se_DecodeAuthorizationMessageRequest");
    var se_GetAccessKeyInfoRequest = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_AKI] != null) {
        entries[_AKI] = input[_AKI];
      }
      return entries;
    }, "se_GetAccessKeyInfoRequest");
    var se_GetCallerIdentityRequest = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      return entries;
    }, "se_GetCallerIdentityRequest");
    var se_GetFederationTokenRequest = /* @__PURE__ */ __name((input, context) => {
      var _a2, _b;
      const entries = {};
      if (input[_N] != null) {
        entries[_N] = input[_N];
      }
      if (input[_P] != null) {
        entries[_P] = input[_P];
      }
      if (input[_PA] != null) {
        const memberEntries = se_policyDescriptorListType(input[_PA], context);
        if (((_a2 = input[_PA]) == null ? void 0 : _a2.length) === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_DS] != null) {
        entries[_DS] = input[_DS];
      }
      if (input[_T] != null) {
        const memberEntries = se_tagListType(input[_T], context);
        if (((_b = input[_T]) == null ? void 0 : _b.length) === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    }, "se_GetFederationTokenRequest");
    var se_GetSessionTokenRequest = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_DS] != null) {
        entries[_DS] = input[_DS];
      }
      if (input[_SN] != null) {
        entries[_SN] = input[_SN];
      }
      if (input[_TC] != null) {
        entries[_TC] = input[_TC];
      }
      return entries;
    }, "se_GetSessionTokenRequest");
    var se_policyDescriptorListType = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_PolicyDescriptorType(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    }, "se_policyDescriptorListType");
    var se_PolicyDescriptorType = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_a] != null) {
        entries[_a] = input[_a];
      }
      return entries;
    }, "se_PolicyDescriptorType");
    var se_ProvidedContext = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_PAro] != null) {
        entries[_PAro] = input[_PAro];
      }
      if (input[_CA] != null) {
        entries[_CA] = input[_CA];
      }
      return entries;
    }, "se_ProvidedContext");
    var se_ProvidedContextsListType = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_ProvidedContext(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    }, "se_ProvidedContextsListType");
    var se_Tag = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_K] != null) {
        entries[_K] = input[_K];
      }
      if (input[_Va] != null) {
        entries[_Va] = input[_Va];
      }
      return entries;
    }, "se_Tag");
    var se_tagKeyListType = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    }, "se_tagKeyListType");
    var se_tagListType = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_Tag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    }, "se_tagListType");
    var de_AssumedRoleUser = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_ARI] != null) {
        contents[_ARI] = (0, import_smithy_client4.expectString)(output[_ARI]);
      }
      if (output[_Ar] != null) {
        contents[_Ar] = (0, import_smithy_client4.expectString)(output[_Ar]);
      }
      return contents;
    }, "de_AssumedRoleUser");
    var de_AssumeRoleResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_C] != null) {
        contents[_C] = de_Credentials(output[_C], context);
      }
      if (output[_ARU] != null) {
        contents[_ARU] = de_AssumedRoleUser(output[_ARU], context);
      }
      if (output[_PPS] != null) {
        contents[_PPS] = (0, import_smithy_client4.strictParseInt32)(output[_PPS]);
      }
      if (output[_SI] != null) {
        contents[_SI] = (0, import_smithy_client4.expectString)(output[_SI]);
      }
      return contents;
    }, "de_AssumeRoleResponse");
    var de_AssumeRoleWithSAMLResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_C] != null) {
        contents[_C] = de_Credentials(output[_C], context);
      }
      if (output[_ARU] != null) {
        contents[_ARU] = de_AssumedRoleUser(output[_ARU], context);
      }
      if (output[_PPS] != null) {
        contents[_PPS] = (0, import_smithy_client4.strictParseInt32)(output[_PPS]);
      }
      if (output[_S] != null) {
        contents[_S] = (0, import_smithy_client4.expectString)(output[_S]);
      }
      if (output[_ST] != null) {
        contents[_ST] = (0, import_smithy_client4.expectString)(output[_ST]);
      }
      if (output[_I] != null) {
        contents[_I] = (0, import_smithy_client4.expectString)(output[_I]);
      }
      if (output[_Au] != null) {
        contents[_Au] = (0, import_smithy_client4.expectString)(output[_Au]);
      }
      if (output[_NQ] != null) {
        contents[_NQ] = (0, import_smithy_client4.expectString)(output[_NQ]);
      }
      if (output[_SI] != null) {
        contents[_SI] = (0, import_smithy_client4.expectString)(output[_SI]);
      }
      return contents;
    }, "de_AssumeRoleWithSAMLResponse");
    var de_AssumeRoleWithWebIdentityResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_C] != null) {
        contents[_C] = de_Credentials(output[_C], context);
      }
      if (output[_SFWIT] != null) {
        contents[_SFWIT] = (0, import_smithy_client4.expectString)(output[_SFWIT]);
      }
      if (output[_ARU] != null) {
        contents[_ARU] = de_AssumedRoleUser(output[_ARU], context);
      }
      if (output[_PPS] != null) {
        contents[_PPS] = (0, import_smithy_client4.strictParseInt32)(output[_PPS]);
      }
      if (output[_Pr] != null) {
        contents[_Pr] = (0, import_smithy_client4.expectString)(output[_Pr]);
      }
      if (output[_Au] != null) {
        contents[_Au] = (0, import_smithy_client4.expectString)(output[_Au]);
      }
      if (output[_SI] != null) {
        contents[_SI] = (0, import_smithy_client4.expectString)(output[_SI]);
      }
      return contents;
    }, "de_AssumeRoleWithWebIdentityResponse");
    var de_AssumeRootResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_C] != null) {
        contents[_C] = de_Credentials(output[_C], context);
      }
      if (output[_SI] != null) {
        contents[_SI] = (0, import_smithy_client4.expectString)(output[_SI]);
      }
      return contents;
    }, "de_AssumeRootResponse");
    var de_Credentials = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_AKI] != null) {
        contents[_AKI] = (0, import_smithy_client4.expectString)(output[_AKI]);
      }
      if (output[_SAK] != null) {
        contents[_SAK] = (0, import_smithy_client4.expectString)(output[_SAK]);
      }
      if (output[_STe] != null) {
        contents[_STe] = (0, import_smithy_client4.expectString)(output[_STe]);
      }
      if (output[_E] != null) {
        contents[_E] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_E]));
      }
      return contents;
    }, "de_Credentials");
    var de_DecodeAuthorizationMessageResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_DM] != null) {
        contents[_DM] = (0, import_smithy_client4.expectString)(output[_DM]);
      }
      return contents;
    }, "de_DecodeAuthorizationMessageResponse");
    var de_ExpiredTokenException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client4.expectString)(output[_m]);
      }
      return contents;
    }, "de_ExpiredTokenException");
    var de_FederatedUser = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_FUI] != null) {
        contents[_FUI] = (0, import_smithy_client4.expectString)(output[_FUI]);
      }
      if (output[_Ar] != null) {
        contents[_Ar] = (0, import_smithy_client4.expectString)(output[_Ar]);
      }
      return contents;
    }, "de_FederatedUser");
    var de_GetAccessKeyInfoResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_Ac] != null) {
        contents[_Ac] = (0, import_smithy_client4.expectString)(output[_Ac]);
      }
      return contents;
    }, "de_GetAccessKeyInfoResponse");
    var de_GetCallerIdentityResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_UI] != null) {
        contents[_UI] = (0, import_smithy_client4.expectString)(output[_UI]);
      }
      if (output[_Ac] != null) {
        contents[_Ac] = (0, import_smithy_client4.expectString)(output[_Ac]);
      }
      if (output[_Ar] != null) {
        contents[_Ar] = (0, import_smithy_client4.expectString)(output[_Ar]);
      }
      return contents;
    }, "de_GetCallerIdentityResponse");
    var de_GetFederationTokenResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_C] != null) {
        contents[_C] = de_Credentials(output[_C], context);
      }
      if (output[_FU] != null) {
        contents[_FU] = de_FederatedUser(output[_FU], context);
      }
      if (output[_PPS] != null) {
        contents[_PPS] = (0, import_smithy_client4.strictParseInt32)(output[_PPS]);
      }
      return contents;
    }, "de_GetFederationTokenResponse");
    var de_GetSessionTokenResponse = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_C] != null) {
        contents[_C] = de_Credentials(output[_C], context);
      }
      return contents;
    }, "de_GetSessionTokenResponse");
    var de_IDPCommunicationErrorException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client4.expectString)(output[_m]);
      }
      return contents;
    }, "de_IDPCommunicationErrorException");
    var de_IDPRejectedClaimException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client4.expectString)(output[_m]);
      }
      return contents;
    }, "de_IDPRejectedClaimException");
    var de_InvalidAuthorizationMessageException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client4.expectString)(output[_m]);
      }
      return contents;
    }, "de_InvalidAuthorizationMessageException");
    var de_InvalidIdentityTokenException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client4.expectString)(output[_m]);
      }
      return contents;
    }, "de_InvalidIdentityTokenException");
    var de_MalformedPolicyDocumentException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client4.expectString)(output[_m]);
      }
      return contents;
    }, "de_MalformedPolicyDocumentException");
    var de_PackedPolicyTooLargeException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client4.expectString)(output[_m]);
      }
      return contents;
    }, "de_PackedPolicyTooLargeException");
    var de_RegionDisabledException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = (0, import_smithy_client4.expectString)(output[_m]);
      }
      return contents;
    }, "de_RegionDisabledException");
    var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    }), "deserializeMetadata");
    var throwDefaultError = (0, import_smithy_client4.withBaseException)(STSServiceException);
    var buildHttpRpcRequest = /* @__PURE__ */ __name(async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new import_protocol_http8.HttpRequest(contents);
    }, "buildHttpRpcRequest");
    var SHARED_HEADERS = {
      "content-type": "application/x-www-form-urlencoded"
    };
    var _ = "2011-06-15";
    var _A = "Action";
    var _AKI = "AccessKeyId";
    var _AR = "AssumeRole";
    var _ARI = "AssumedRoleId";
    var _ARU = "AssumedRoleUser";
    var _ARWSAML = "AssumeRoleWithSAML";
    var _ARWWI = "AssumeRoleWithWebIdentity";
    var _ARs = "AssumeRoot";
    var _Ac = "Account";
    var _Ar = "Arn";
    var _Au = "Audience";
    var _C = "Credentials";
    var _CA = "ContextAssertion";
    var _DAM = "DecodeAuthorizationMessage";
    var _DM = "DecodedMessage";
    var _DS = "DurationSeconds";
    var _E = "Expiration";
    var _EI = "ExternalId";
    var _EM = "EncodedMessage";
    var _FU = "FederatedUser";
    var _FUI = "FederatedUserId";
    var _GAKI = "GetAccessKeyInfo";
    var _GCI = "GetCallerIdentity";
    var _GFT = "GetFederationToken";
    var _GST = "GetSessionToken";
    var _I = "Issuer";
    var _K = "Key";
    var _N = "Name";
    var _NQ = "NameQualifier";
    var _P = "Policy";
    var _PA = "PolicyArns";
    var _PAr = "PrincipalArn";
    var _PAro = "ProviderArn";
    var _PC = "ProvidedContexts";
    var _PI = "ProviderId";
    var _PPS = "PackedPolicySize";
    var _Pr = "Provider";
    var _RA = "RoleArn";
    var _RSN = "RoleSessionName";
    var _S = "Subject";
    var _SAK = "SecretAccessKey";
    var _SAMLA = "SAMLAssertion";
    var _SFWIT = "SubjectFromWebIdentityToken";
    var _SI = "SourceIdentity";
    var _SN = "SerialNumber";
    var _ST = "SubjectType";
    var _STe = "SessionToken";
    var _T = "Tags";
    var _TC = "TokenCode";
    var _TP = "TargetPrincipal";
    var _TPA = "TaskPolicyArn";
    var _TTK = "TransitiveTagKeys";
    var _UI = "UserId";
    var _V = "Version";
    var _Va = "Value";
    var _WIT = "WebIdentityToken";
    var _a = "arn";
    var _m = "message";
    var buildFormUrlencodedString = /* @__PURE__ */ __name((formEntries) => Object.entries(formEntries).map(([key, value]) => (0, import_smithy_client4.extendedEncodeURIComponent)(key) + "=" + (0, import_smithy_client4.extendedEncodeURIComponent)(value)).join("&"), "buildFormUrlencodedString");
    var loadQueryErrorCode = /* @__PURE__ */ __name((output, data) => {
      var _a2;
      if (((_a2 = data.Error) == null ? void 0 : _a2.Code) !== void 0) {
        return data.Error.Code;
      }
      if (output.statusCode == 404) {
        return "NotFound";
      }
    }, "loadQueryErrorCode");
    var _AssumeRoleCommand = class _AssumeRoleCommand extends import_smithy_client4.Command.classBuilder().ep(import_EndpointParameters.commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "AssumeRole", {}).n("STSClient", "AssumeRoleCommand").f(void 0, AssumeRoleResponseFilterSensitiveLog).ser(se_AssumeRoleCommand).de(de_AssumeRoleCommand).build() {
    };
    __name(_AssumeRoleCommand, "AssumeRoleCommand");
    var AssumeRoleCommand = _AssumeRoleCommand;
    var import_EndpointParameters2 = require_EndpointParameters();
    var _AssumeRoleWithSAMLCommand = class _AssumeRoleWithSAMLCommand extends import_smithy_client4.Command.classBuilder().ep(import_EndpointParameters2.commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "AssumeRoleWithSAML", {}).n("STSClient", "AssumeRoleWithSAMLCommand").f(AssumeRoleWithSAMLRequestFilterSensitiveLog, AssumeRoleWithSAMLResponseFilterSensitiveLog).ser(se_AssumeRoleWithSAMLCommand).de(de_AssumeRoleWithSAMLCommand).build() {
    };
    __name(_AssumeRoleWithSAMLCommand, "AssumeRoleWithSAMLCommand");
    var AssumeRoleWithSAMLCommand = _AssumeRoleWithSAMLCommand;
    var import_EndpointParameters3 = require_EndpointParameters();
    var _AssumeRoleWithWebIdentityCommand = class _AssumeRoleWithWebIdentityCommand extends import_smithy_client4.Command.classBuilder().ep(import_EndpointParameters3.commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "AssumeRoleWithWebIdentity", {}).n("STSClient", "AssumeRoleWithWebIdentityCommand").f(AssumeRoleWithWebIdentityRequestFilterSensitiveLog, AssumeRoleWithWebIdentityResponseFilterSensitiveLog).ser(se_AssumeRoleWithWebIdentityCommand).de(de_AssumeRoleWithWebIdentityCommand).build() {
    };
    __name(_AssumeRoleWithWebIdentityCommand, "AssumeRoleWithWebIdentityCommand");
    var AssumeRoleWithWebIdentityCommand = _AssumeRoleWithWebIdentityCommand;
    var import_EndpointParameters4 = require_EndpointParameters();
    var _AssumeRootCommand = class _AssumeRootCommand extends import_smithy_client4.Command.classBuilder().ep(import_EndpointParameters4.commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "AssumeRoot", {}).n("STSClient", "AssumeRootCommand").f(void 0, AssumeRootResponseFilterSensitiveLog).ser(se_AssumeRootCommand).de(de_AssumeRootCommand).build() {
    };
    __name(_AssumeRootCommand, "AssumeRootCommand");
    var AssumeRootCommand = _AssumeRootCommand;
    var import_EndpointParameters5 = require_EndpointParameters();
    var _DecodeAuthorizationMessageCommand = class _DecodeAuthorizationMessageCommand extends import_smithy_client4.Command.classBuilder().ep(import_EndpointParameters5.commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "DecodeAuthorizationMessage", {}).n("STSClient", "DecodeAuthorizationMessageCommand").f(void 0, void 0).ser(se_DecodeAuthorizationMessageCommand).de(de_DecodeAuthorizationMessageCommand).build() {
    };
    __name(_DecodeAuthorizationMessageCommand, "DecodeAuthorizationMessageCommand");
    var DecodeAuthorizationMessageCommand = _DecodeAuthorizationMessageCommand;
    var import_EndpointParameters6 = require_EndpointParameters();
    var _GetAccessKeyInfoCommand = class _GetAccessKeyInfoCommand extends import_smithy_client4.Command.classBuilder().ep(import_EndpointParameters6.commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "GetAccessKeyInfo", {}).n("STSClient", "GetAccessKeyInfoCommand").f(void 0, void 0).ser(se_GetAccessKeyInfoCommand).de(de_GetAccessKeyInfoCommand).build() {
    };
    __name(_GetAccessKeyInfoCommand, "GetAccessKeyInfoCommand");
    var GetAccessKeyInfoCommand = _GetAccessKeyInfoCommand;
    var import_EndpointParameters7 = require_EndpointParameters();
    var _GetCallerIdentityCommand = class _GetCallerIdentityCommand extends import_smithy_client4.Command.classBuilder().ep(import_EndpointParameters7.commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "GetCallerIdentity", {}).n("STSClient", "GetCallerIdentityCommand").f(void 0, void 0).ser(se_GetCallerIdentityCommand).de(de_GetCallerIdentityCommand).build() {
    };
    __name(_GetCallerIdentityCommand, "GetCallerIdentityCommand");
    var GetCallerIdentityCommand = _GetCallerIdentityCommand;
    var import_EndpointParameters8 = require_EndpointParameters();
    var _GetFederationTokenCommand = class _GetFederationTokenCommand extends import_smithy_client4.Command.classBuilder().ep(import_EndpointParameters8.commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "GetFederationToken", {}).n("STSClient", "GetFederationTokenCommand").f(void 0, GetFederationTokenResponseFilterSensitiveLog).ser(se_GetFederationTokenCommand).de(de_GetFederationTokenCommand).build() {
    };
    __name(_GetFederationTokenCommand, "GetFederationTokenCommand");
    var GetFederationTokenCommand = _GetFederationTokenCommand;
    var import_EndpointParameters9 = require_EndpointParameters();
    var _GetSessionTokenCommand = class _GetSessionTokenCommand extends import_smithy_client4.Command.classBuilder().ep(import_EndpointParameters9.commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "GetSessionToken", {}).n("STSClient", "GetSessionTokenCommand").f(void 0, GetSessionTokenResponseFilterSensitiveLog).ser(se_GetSessionTokenCommand).de(de_GetSessionTokenCommand).build() {
    };
    __name(_GetSessionTokenCommand, "GetSessionTokenCommand");
    var GetSessionTokenCommand = _GetSessionTokenCommand;
    var import_STSClient = require_STSClient();
    var commands = {
      AssumeRoleCommand,
      AssumeRoleWithSAMLCommand,
      AssumeRoleWithWebIdentityCommand,
      AssumeRootCommand,
      DecodeAuthorizationMessageCommand,
      GetAccessKeyInfoCommand,
      GetCallerIdentityCommand,
      GetFederationTokenCommand,
      GetSessionTokenCommand
    };
    var _STS = class _STS extends import_STSClient.STSClient {
    };
    __name(_STS, "STS");
    var STS = _STS;
    (0, import_smithy_client4.createAggregatedClient)(commands, STS);
    var import_EndpointParameters10 = require_EndpointParameters();
    var import_client2 = (init_client(), __toCommonJS(client_exports));
    var ASSUME_ROLE_DEFAULT_REGION = "us-east-1";
    var getAccountIdFromAssumedRoleUser = /* @__PURE__ */ __name((assumedRoleUser) => {
      if (typeof (assumedRoleUser == null ? void 0 : assumedRoleUser.Arn) === "string") {
        const arnComponents = assumedRoleUser.Arn.split(":");
        if (arnComponents.length > 4 && arnComponents[4] !== "") {
          return arnComponents[4];
        }
      }
      return void 0;
    }, "getAccountIdFromAssumedRoleUser");
    var resolveRegion = /* @__PURE__ */ __name(async (_region, _parentRegion, credentialProviderLogger) => {
      var _a2;
      const region = typeof _region === "function" ? await _region() : _region;
      const parentRegion = typeof _parentRegion === "function" ? await _parentRegion() : _parentRegion;
      (_a2 = credentialProviderLogger == null ? void 0 : credentialProviderLogger.debug) == null ? void 0 : _a2.call(
        credentialProviderLogger,
        "@aws-sdk/client-sts::resolveRegion",
        "accepting first of:",
        `${region} (provider)`,
        `${parentRegion} (parent client)`,
        `${ASSUME_ROLE_DEFAULT_REGION} (STS default)`
      );
      return region ?? parentRegion ?? ASSUME_ROLE_DEFAULT_REGION;
    }, "resolveRegion");
    var getDefaultRoleAssumer = /* @__PURE__ */ __name((stsOptions, stsClientCtor) => {
      let stsClient;
      let closureSourceCreds;
      return async (sourceCreds, params) => {
        var _a2, _b, _c;
        closureSourceCreds = sourceCreds;
        if (!stsClient) {
          const {
            logger: logger2 = (_a2 = stsOptions == null ? void 0 : stsOptions.parentClientConfig) == null ? void 0 : _a2.logger,
            region,
            requestHandler = (_b = stsOptions == null ? void 0 : stsOptions.parentClientConfig) == null ? void 0 : _b.requestHandler,
            credentialProviderLogger
          } = stsOptions;
          const resolvedRegion = await resolveRegion(
            region,
            (_c = stsOptions == null ? void 0 : stsOptions.parentClientConfig) == null ? void 0 : _c.region,
            credentialProviderLogger
          );
          const isCompatibleRequestHandler = !isH2(requestHandler);
          stsClient = new stsClientCtor({
            // A hack to make sts client uses the credential in current closure.
            credentialDefaultProvider: () => async () => closureSourceCreds,
            region: resolvedRegion,
            requestHandler: isCompatibleRequestHandler ? requestHandler : void 0,
            logger: logger2
          });
        }
        const { Credentials: Credentials2, AssumedRoleUser: AssumedRoleUser2 } = await stsClient.send(new AssumeRoleCommand(params));
        if (!Credentials2 || !Credentials2.AccessKeyId || !Credentials2.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);
        }
        const accountId = getAccountIdFromAssumedRoleUser(AssumedRoleUser2);
        const credentials = {
          accessKeyId: Credentials2.AccessKeyId,
          secretAccessKey: Credentials2.SecretAccessKey,
          sessionToken: Credentials2.SessionToken,
          expiration: Credentials2.Expiration,
          // TODO(credentialScope): access normally when shape is updated.
          ...Credentials2.CredentialScope && { credentialScope: Credentials2.CredentialScope },
          ...accountId && { accountId }
        };
        (0, import_client2.setCredentialFeature)(credentials, "CREDENTIALS_STS_ASSUME_ROLE", "i");
        return credentials;
      };
    }, "getDefaultRoleAssumer");
    var getDefaultRoleAssumerWithWebIdentity = /* @__PURE__ */ __name((stsOptions, stsClientCtor) => {
      let stsClient;
      return async (params) => {
        var _a2, _b, _c;
        if (!stsClient) {
          const {
            logger: logger2 = (_a2 = stsOptions == null ? void 0 : stsOptions.parentClientConfig) == null ? void 0 : _a2.logger,
            region,
            requestHandler = (_b = stsOptions == null ? void 0 : stsOptions.parentClientConfig) == null ? void 0 : _b.requestHandler,
            credentialProviderLogger
          } = stsOptions;
          const resolvedRegion = await resolveRegion(
            region,
            (_c = stsOptions == null ? void 0 : stsOptions.parentClientConfig) == null ? void 0 : _c.region,
            credentialProviderLogger
          );
          const isCompatibleRequestHandler = !isH2(requestHandler);
          stsClient = new stsClientCtor({
            region: resolvedRegion,
            requestHandler: isCompatibleRequestHandler ? requestHandler : void 0,
            logger: logger2
          });
        }
        const { Credentials: Credentials2, AssumedRoleUser: AssumedRoleUser2 } = await stsClient.send(new AssumeRoleWithWebIdentityCommand(params));
        if (!Credentials2 || !Credentials2.AccessKeyId || !Credentials2.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);
        }
        const accountId = getAccountIdFromAssumedRoleUser(AssumedRoleUser2);
        const credentials = {
          accessKeyId: Credentials2.AccessKeyId,
          secretAccessKey: Credentials2.SecretAccessKey,
          sessionToken: Credentials2.SessionToken,
          expiration: Credentials2.Expiration,
          // TODO(credentialScope): access normally when shape is updated.
          ...Credentials2.CredentialScope && { credentialScope: Credentials2.CredentialScope },
          ...accountId && { accountId }
        };
        if (accountId) {
          (0, import_client2.setCredentialFeature)(credentials, "RESOLVED_ACCOUNT_ID", "T");
        }
        (0, import_client2.setCredentialFeature)(credentials, "CREDENTIALS_STS_ASSUME_ROLE_WEB_ID", "k");
        return credentials;
      };
    }, "getDefaultRoleAssumerWithWebIdentity");
    var isH2 = /* @__PURE__ */ __name((requestHandler) => {
      var _a2;
      return ((_a2 = requestHandler == null ? void 0 : requestHandler.metadata) == null ? void 0 : _a2.handlerProtocol) === "h2";
    }, "isH2");
    var import_STSClient2 = require_STSClient();
    var getCustomizableStsClientCtor = /* @__PURE__ */ __name((baseCtor, customizations) => {
      var _a2;
      if (!customizations)
        return baseCtor;
      else
        return _a2 = class extends baseCtor {
          constructor(config) {
            super(config);
            for (const customization of customizations) {
              this.middlewareStack.use(customization);
            }
          }
        }, __name(_a2, "CustomizableSTSClient"), _a2;
    }, "getCustomizableStsClientCtor");
    var getDefaultRoleAssumer2 = /* @__PURE__ */ __name((stsOptions = {}, stsPlugins) => getDefaultRoleAssumer(stsOptions, getCustomizableStsClientCtor(import_STSClient2.STSClient, stsPlugins)), "getDefaultRoleAssumer");
    var getDefaultRoleAssumerWithWebIdentity2 = /* @__PURE__ */ __name((stsOptions = {}, stsPlugins) => getDefaultRoleAssumerWithWebIdentity(stsOptions, getCustomizableStsClientCtor(import_STSClient2.STSClient, stsPlugins)), "getDefaultRoleAssumerWithWebIdentity");
    var decorateDefaultCredentialProvider = /* @__PURE__ */ __name((provider) => (input) => provider({
      roleAssumer: getDefaultRoleAssumer2(input),
      roleAssumerWithWebIdentity: getDefaultRoleAssumerWithWebIdentity2(input),
      ...input
    }), "decorateDefaultCredentialProvider");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.696.0/node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js
var require_dist_cjs59 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.696.0/node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      fromProcess: () => fromProcess
    });
    module.exports = __toCommonJS2(src_exports);
    var import_shared_ini_file_loader = require_dist_cjs40();
    var import_property_provider2 = require_dist_cjs16();
    var import_child_process = __require("child_process");
    var import_util = __require("util");
    var import_client2 = (init_client(), __toCommonJS(client_exports));
    var getValidatedProcessCredentials = /* @__PURE__ */ __name((profileName, data, profiles) => {
      var _a;
      if (data.Version !== 1) {
        throw Error(`Profile ${profileName} credential_process did not return Version 1.`);
      }
      if (data.AccessKeyId === void 0 || data.SecretAccessKey === void 0) {
        throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);
      }
      if (data.Expiration) {
        const currentTime = /* @__PURE__ */ new Date();
        const expireTime = new Date(data.Expiration);
        if (expireTime < currentTime) {
          throw Error(`Profile ${profileName} credential_process returned expired credentials.`);
        }
      }
      let accountId = data.AccountId;
      if (!accountId && ((_a = profiles == null ? void 0 : profiles[profileName]) == null ? void 0 : _a.aws_account_id)) {
        accountId = profiles[profileName].aws_account_id;
      }
      const credentials = {
        accessKeyId: data.AccessKeyId,
        secretAccessKey: data.SecretAccessKey,
        ...data.SessionToken && { sessionToken: data.SessionToken },
        ...data.Expiration && { expiration: new Date(data.Expiration) },
        ...data.CredentialScope && { credentialScope: data.CredentialScope },
        ...accountId && { accountId }
      };
      (0, import_client2.setCredentialFeature)(credentials, "CREDENTIALS_PROCESS", "w");
      return credentials;
    }, "getValidatedProcessCredentials");
    var resolveProcessCredentials = /* @__PURE__ */ __name(async (profileName, profiles, logger2) => {
      const profile = profiles[profileName];
      if (profiles[profileName]) {
        const credentialProcess = profile["credential_process"];
        if (credentialProcess !== void 0) {
          const execPromise = (0, import_util.promisify)(import_child_process.exec);
          try {
            const { stdout } = await execPromise(credentialProcess);
            let data;
            try {
              data = JSON.parse(stdout.trim());
            } catch {
              throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);
            }
            return getValidatedProcessCredentials(profileName, data, profiles);
          } catch (error) {
            throw new import_property_provider2.CredentialsProviderError(error.message, { logger: logger2 });
          }
        } else {
          throw new import_property_provider2.CredentialsProviderError(`Profile ${profileName} did not contain credential_process.`, { logger: logger2 });
        }
      } else {
        throw new import_property_provider2.CredentialsProviderError(`Profile ${profileName} could not be found in shared credentials file.`, {
          logger: logger2
        });
      }
    }, "resolveProcessCredentials");
    var fromProcess = /* @__PURE__ */ __name((init = {}) => async () => {
      var _a;
      (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-process - fromProcess");
      const profiles = await (0, import_shared_ini_file_loader.parseKnownFiles)(init);
      return resolveProcessCredentials((0, import_shared_ini_file_loader.getProfileName)(init), profiles, init.logger);
    }, "fromProcess");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-web-identity@3.696.0_@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1_/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js
var require_fromWebToken = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-web-identity@3.696.0_@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1_/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromWebToken = void 0;
    var fromWebToken2 = (init) => async () => {
      init.logger?.debug("@aws-sdk/credential-provider-web-identity - fromWebToken");
      const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds } = init;
      let { roleAssumerWithWebIdentity } = init;
      if (!roleAssumerWithWebIdentity) {
        const { getDefaultRoleAssumerWithWebIdentity } = await Promise.resolve().then(() => __importStar2(require_dist_cjs58()));
        roleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity({
          ...init.clientConfig,
          credentialProviderLogger: init.logger,
          parentClientConfig: init.parentClientConfig
        }, init.clientPlugins);
      }
      return roleAssumerWithWebIdentity({
        RoleArn: roleArn,
        RoleSessionName: roleSessionName ?? `aws-sdk-js-session-${Date.now()}`,
        WebIdentityToken: webIdentityToken,
        ProviderId: providerId,
        PolicyArns: policyArns,
        Policy: policy,
        DurationSeconds: durationSeconds
      });
    };
    exports.fromWebToken = fromWebToken2;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-web-identity@3.696.0_@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1_/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js
var require_fromTokenFile = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-web-identity@3.696.0_@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1_/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromTokenFile = void 0;
    var client_1 = (init_client(), __toCommonJS(client_exports));
    var property_provider_1 = require_dist_cjs16();
    var fs_1 = __require("fs");
    var fromWebToken_1 = require_fromWebToken();
    var ENV_TOKEN_FILE = "AWS_WEB_IDENTITY_TOKEN_FILE";
    var ENV_ROLE_ARN = "AWS_ROLE_ARN";
    var ENV_ROLE_SESSION_NAME = "AWS_ROLE_SESSION_NAME";
    var fromTokenFile2 = (init = {}) => async () => {
      init.logger?.debug("@aws-sdk/credential-provider-web-identity - fromTokenFile");
      const webIdentityTokenFile = init?.webIdentityTokenFile ?? process.env[ENV_TOKEN_FILE];
      const roleArn = init?.roleArn ?? process.env[ENV_ROLE_ARN];
      const roleSessionName = init?.roleSessionName ?? process.env[ENV_ROLE_SESSION_NAME];
      if (!webIdentityTokenFile || !roleArn) {
        throw new property_provider_1.CredentialsProviderError("Web identity configuration not specified", {
          logger: init.logger
        });
      }
      const credentials = await (0, fromWebToken_1.fromWebToken)({
        ...init,
        webIdentityToken: (0, fs_1.readFileSync)(webIdentityTokenFile, { encoding: "ascii" }),
        roleArn,
        roleSessionName
      })();
      if (webIdentityTokenFile === process.env[ENV_TOKEN_FILE]) {
        (0, client_1.setCredentialFeature)(credentials, "CREDENTIALS_ENV_VARS_STS_WEB_ID_TOKEN", "h");
      }
      return credentials;
    };
    exports.fromTokenFile = fromTokenFile2;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-web-identity@3.696.0_@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1_/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js
var require_dist_cjs60 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-web-identity@3.696.0_@aws-sdk+client-sts@3.699.0_aws-crt@1.27.1_/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __reExport = (target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default"));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    module.exports = __toCommonJS2(src_exports);
    __reExport(src_exports, require_fromTokenFile(), module.exports);
    __reExport(src_exports, require_fromWebToken(), module.exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.699.0_@aws-sdk+client-sso-oidc@3.699.0_@aws-sdk+client-sts_cws6h6w7l3v7pnm7qbxorcyjsm/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js
var require_dist_cjs61 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.699.0_@aws-sdk+client-sso-oidc@3.699.0_@aws-sdk+client-sts_cws6h6w7l3v7pnm7qbxorcyjsm/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js"(exports, module) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      fromIni: () => fromIni
    });
    module.exports = __toCommonJS2(src_exports);
    var import_shared_ini_file_loader = require_dist_cjs40();
    var import_client2 = (init_client(), __toCommonJS(client_exports));
    var import_property_provider2 = require_dist_cjs16();
    var resolveCredentialSource = /* @__PURE__ */ __name((credentialSource, profileName, logger2) => {
      const sourceProvidersMap = {
        EcsContainer: async (options) => {
          const { fromHttp } = await Promise.resolve().then(() => __toESM2(require_dist_cjs48()));
          const { fromContainerMetadata } = await Promise.resolve().then(() => __toESM2(require_dist_cjs47()));
          logger2 == null ? void 0 : logger2.debug("@aws-sdk/credential-provider-ini - credential_source is EcsContainer");
          return async () => (0, import_property_provider2.chain)(fromHttp(options ?? {}), fromContainerMetadata(options))().then(setNamedProvider);
        },
        Ec2InstanceMetadata: async (options) => {
          logger2 == null ? void 0 : logger2.debug("@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata");
          const { fromInstanceMetadata } = await Promise.resolve().then(() => __toESM2(require_dist_cjs47()));
          return async () => fromInstanceMetadata(options)().then(setNamedProvider);
        },
        Environment: async (options) => {
          logger2 == null ? void 0 : logger2.debug("@aws-sdk/credential-provider-ini - credential_source is Environment");
          const { fromEnv } = await Promise.resolve().then(() => __toESM2(require_dist_cjs46()));
          return async () => fromEnv(options)().then(setNamedProvider);
        }
      };
      if (credentialSource in sourceProvidersMap) {
        return sourceProvidersMap[credentialSource];
      } else {
        throw new import_property_provider2.CredentialsProviderError(
          `Unsupported credential source in profile ${profileName}. Got ${credentialSource}, expected EcsContainer or Ec2InstanceMetadata or Environment.`,
          { logger: logger2 }
        );
      }
    }, "resolveCredentialSource");
    var setNamedProvider = /* @__PURE__ */ __name((creds) => (0, import_client2.setCredentialFeature)(creds, "CREDENTIALS_PROFILE_NAMED_PROVIDER", "p"), "setNamedProvider");
    var isAssumeRoleProfile = /* @__PURE__ */ __name((arg, { profile = "default", logger: logger2 } = {}) => {
      return Boolean(arg) && typeof arg === "object" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1 && ["undefined", "string"].indexOf(typeof arg.external_id) > -1 && ["undefined", "string"].indexOf(typeof arg.mfa_serial) > -1 && (isAssumeRoleWithSourceProfile(arg, { profile, logger: logger2 }) || isCredentialSourceProfile(arg, { profile, logger: logger2 }));
    }, "isAssumeRoleProfile");
    var isAssumeRoleWithSourceProfile = /* @__PURE__ */ __name((arg, { profile, logger: logger2 }) => {
      var _a;
      const withSourceProfile = typeof arg.source_profile === "string" && typeof arg.credential_source === "undefined";
      if (withSourceProfile) {
        (_a = logger2 == null ? void 0 : logger2.debug) == null ? void 0 : _a.call(logger2, `    ${profile} isAssumeRoleWithSourceProfile source_profile=${arg.source_profile}`);
      }
      return withSourceProfile;
    }, "isAssumeRoleWithSourceProfile");
    var isCredentialSourceProfile = /* @__PURE__ */ __name((arg, { profile, logger: logger2 }) => {
      var _a;
      const withProviderProfile = typeof arg.credential_source === "string" && typeof arg.source_profile === "undefined";
      if (withProviderProfile) {
        (_a = logger2 == null ? void 0 : logger2.debug) == null ? void 0 : _a.call(logger2, `    ${profile} isCredentialSourceProfile credential_source=${arg.credential_source}`);
      }
      return withProviderProfile;
    }, "isCredentialSourceProfile");
    var resolveAssumeRoleCredentials = /* @__PURE__ */ __name(async (profileName, profiles, options, visitedProfiles = {}) => {
      var _a, _b;
      (_a = options.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)");
      const data = profiles[profileName];
      if (!options.roleAssumer) {
        const { getDefaultRoleAssumer } = await Promise.resolve().then(() => __toESM2(require_dist_cjs58()));
        options.roleAssumer = getDefaultRoleAssumer(
          {
            ...options.clientConfig,
            credentialProviderLogger: options.logger,
            parentClientConfig: options == null ? void 0 : options.parentClientConfig
          },
          options.clientPlugins
        );
      }
      const { source_profile } = data;
      if (source_profile && source_profile in visitedProfiles) {
        throw new import_property_provider2.CredentialsProviderError(
          `Detected a cycle attempting to resolve credentials for profile ${(0, import_shared_ini_file_loader.getProfileName)(options)}. Profiles visited: ` + Object.keys(visitedProfiles).join(", "),
          { logger: options.logger }
        );
      }
      (_b = options.logger) == null ? void 0 : _b.debug(
        `@aws-sdk/credential-provider-ini - finding credential resolver using ${source_profile ? `source_profile=[${source_profile}]` : `profile=[${profileName}]`}`
      );
      const sourceCredsProvider = source_profile ? resolveProfileData(
        source_profile,
        profiles,
        options,
        {
          ...visitedProfiles,
          [source_profile]: true
        },
        isCredentialSourceWithoutRoleArn(profiles[source_profile] ?? {})
      ) : (await resolveCredentialSource(data.credential_source, profileName, options.logger)(options))();
      if (isCredentialSourceWithoutRoleArn(data)) {
        return sourceCredsProvider.then((creds) => (0, import_client2.setCredentialFeature)(creds, "CREDENTIALS_PROFILE_SOURCE_PROFILE", "o"));
      } else {
        const params = {
          RoleArn: data.role_arn,
          RoleSessionName: data.role_session_name || `aws-sdk-js-${Date.now()}`,
          ExternalId: data.external_id,
          DurationSeconds: parseInt(data.duration_seconds || "3600", 10)
        };
        const { mfa_serial } = data;
        if (mfa_serial) {
          if (!options.mfaCodeProvider) {
            throw new import_property_provider2.CredentialsProviderError(
              `Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`,
              { logger: options.logger, tryNextLink: false }
            );
          }
          params.SerialNumber = mfa_serial;
          params.TokenCode = await options.mfaCodeProvider(mfa_serial);
        }
        const sourceCreds = await sourceCredsProvider;
        return options.roleAssumer(sourceCreds, params).then(
          (creds) => (0, import_client2.setCredentialFeature)(creds, "CREDENTIALS_PROFILE_SOURCE_PROFILE", "o")
        );
      }
    }, "resolveAssumeRoleCredentials");
    var isCredentialSourceWithoutRoleArn = /* @__PURE__ */ __name((section) => {
      return !section.role_arn && !!section.credential_source;
    }, "isCredentialSourceWithoutRoleArn");
    var isProcessProfile = /* @__PURE__ */ __name((arg) => Boolean(arg) && typeof arg === "object" && typeof arg.credential_process === "string", "isProcessProfile");
    var resolveProcessCredentials = /* @__PURE__ */ __name(async (options, profile) => Promise.resolve().then(() => __toESM2(require_dist_cjs59())).then(
      ({ fromProcess }) => fromProcess({
        ...options,
        profile
      })().then((creds) => (0, import_client2.setCredentialFeature)(creds, "CREDENTIALS_PROFILE_PROCESS", "v"))
    ), "resolveProcessCredentials");
    var resolveSsoCredentials = /* @__PURE__ */ __name(async (profile, profileData, options = {}) => {
      const { fromSSO } = await Promise.resolve().then(() => __toESM2(require_dist_cjs57()));
      return fromSSO({
        profile,
        logger: options.logger,
        parentClientConfig: options.parentClientConfig,
        clientConfig: options.clientConfig
      })().then((creds) => {
        if (profileData.sso_session) {
          return (0, import_client2.setCredentialFeature)(creds, "CREDENTIALS_PROFILE_SSO", "r");
        } else {
          return (0, import_client2.setCredentialFeature)(creds, "CREDENTIALS_PROFILE_SSO_LEGACY", "t");
        }
      });
    }, "resolveSsoCredentials");
    var isSsoProfile = /* @__PURE__ */ __name((arg) => arg && (typeof arg.sso_start_url === "string" || typeof arg.sso_account_id === "string" || typeof arg.sso_session === "string" || typeof arg.sso_region === "string" || typeof arg.sso_role_name === "string"), "isSsoProfile");
    var isStaticCredsProfile = /* @__PURE__ */ __name((arg) => Boolean(arg) && typeof arg === "object" && typeof arg.aws_access_key_id === "string" && typeof arg.aws_secret_access_key === "string" && ["undefined", "string"].indexOf(typeof arg.aws_session_token) > -1 && ["undefined", "string"].indexOf(typeof arg.aws_account_id) > -1, "isStaticCredsProfile");
    var resolveStaticCredentials = /* @__PURE__ */ __name(async (profile, options) => {
      var _a;
      (_a = options == null ? void 0 : options.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-ini - resolveStaticCredentials");
      const credentials = {
        accessKeyId: profile.aws_access_key_id,
        secretAccessKey: profile.aws_secret_access_key,
        sessionToken: profile.aws_session_token,
        ...profile.aws_credential_scope && { credentialScope: profile.aws_credential_scope },
        ...profile.aws_account_id && { accountId: profile.aws_account_id }
      };
      return (0, import_client2.setCredentialFeature)(credentials, "CREDENTIALS_PROFILE", "n");
    }, "resolveStaticCredentials");
    var isWebIdentityProfile = /* @__PURE__ */ __name((arg) => Boolean(arg) && typeof arg === "object" && typeof arg.web_identity_token_file === "string" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1, "isWebIdentityProfile");
    var resolveWebIdentityCredentials = /* @__PURE__ */ __name(async (profile, options) => Promise.resolve().then(() => __toESM2(require_dist_cjs60())).then(
      ({ fromTokenFile: fromTokenFile2 }) => fromTokenFile2({
        webIdentityTokenFile: profile.web_identity_token_file,
        roleArn: profile.role_arn,
        roleSessionName: profile.role_session_name,
        roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity,
        logger: options.logger,
        parentClientConfig: options.parentClientConfig
      })().then((creds) => (0, import_client2.setCredentialFeature)(creds, "CREDENTIALS_PROFILE_STS_WEB_ID_TOKEN", "q"))
    ), "resolveWebIdentityCredentials");
    var resolveProfileData = /* @__PURE__ */ __name(async (profileName, profiles, options, visitedProfiles = {}, isAssumeRoleRecursiveCall = false) => {
      const data = profiles[profileName];
      if (Object.keys(visitedProfiles).length > 0 && isStaticCredsProfile(data)) {
        return resolveStaticCredentials(data, options);
      }
      if (isAssumeRoleRecursiveCall || isAssumeRoleProfile(data, { profile: profileName, logger: options.logger })) {
        return resolveAssumeRoleCredentials(profileName, profiles, options, visitedProfiles);
      }
      if (isStaticCredsProfile(data)) {
        return resolveStaticCredentials(data, options);
      }
      if (isWebIdentityProfile(data)) {
        return resolveWebIdentityCredentials(data, options);
      }
      if (isProcessProfile(data)) {
        return resolveProcessCredentials(options, profileName);
      }
      if (isSsoProfile(data)) {
        return await resolveSsoCredentials(profileName, data, options);
      }
      throw new import_property_provider2.CredentialsProviderError(
        `Could not resolve credentials using profile: [${profileName}] in configuration/credentials file(s).`,
        { logger: options.logger }
      );
    }, "resolveProfileData");
    var fromIni = /* @__PURE__ */ __name((init = {}) => async () => {
      var _a;
      (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-ini - fromIni");
      const profiles = await (0, import_shared_ini_file_loader.parseKnownFiles)(init);
      return resolveProfileData((0, import_shared_ini_file_loader.getProfileName)(init), profiles, init);
    }, "fromIni");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-node@3.699.0_@aws-sdk+client-sso-oidc@3.699.0_@aws-sdk+client-st_cuc2iebd7ldm3vuk3nvteukrn4/node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js
var require_dist_cjs62 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-node@3.699.0_@aws-sdk+client-sso-oidc@3.699.0_@aws-sdk+client-st_cuc2iebd7ldm3vuk3nvteukrn4/node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js"(exports, module) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      credentialsTreatedAsExpired: () => credentialsTreatedAsExpired,
      credentialsWillNeedRefresh: () => credentialsWillNeedRefresh,
      defaultProvider: () => defaultProvider
    });
    module.exports = __toCommonJS2(src_exports);
    var import_credential_provider_env = require_dist_cjs46();
    var import_shared_ini_file_loader = require_dist_cjs40();
    var import_property_provider2 = require_dist_cjs16();
    var ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    var remoteProvider = /* @__PURE__ */ __name(async (init) => {
      var _a, _b;
      const { ENV_CMDS_FULL_URI, ENV_CMDS_RELATIVE_URI, fromContainerMetadata, fromInstanceMetadata } = await Promise.resolve().then(() => __toESM2(require_dist_cjs47()));
      if (process.env[ENV_CMDS_RELATIVE_URI] || process.env[ENV_CMDS_FULL_URI]) {
        (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-node - remoteProvider::fromHttp/fromContainerMetadata");
        const { fromHttp } = await Promise.resolve().then(() => __toESM2(require_dist_cjs48()));
        return (0, import_property_provider2.chain)(fromHttp(init), fromContainerMetadata(init));
      }
      if (process.env[ENV_IMDS_DISABLED]) {
        return async () => {
          throw new import_property_provider2.CredentialsProviderError("EC2 Instance Metadata Service access disabled", { logger: init.logger });
        };
      }
      (_b = init.logger) == null ? void 0 : _b.debug("@aws-sdk/credential-provider-node - remoteProvider::fromInstanceMetadata");
      return fromInstanceMetadata(init);
    }, "remoteProvider");
    var multipleCredentialSourceWarningEmitted = false;
    var defaultProvider = /* @__PURE__ */ __name((init = {}) => (0, import_property_provider2.memoize)(
      (0, import_property_provider2.chain)(
        async () => {
          var _a, _b, _c, _d;
          const profile = init.profile ?? process.env[import_shared_ini_file_loader.ENV_PROFILE];
          if (profile) {
            const envStaticCredentialsAreSet = process.env[import_credential_provider_env.ENV_KEY] && process.env[import_credential_provider_env.ENV_SECRET];
            if (envStaticCredentialsAreSet) {
              if (!multipleCredentialSourceWarningEmitted) {
                const warnFn = ((_a = init.logger) == null ? void 0 : _a.warn) && ((_c = (_b = init.logger) == null ? void 0 : _b.constructor) == null ? void 0 : _c.name) !== "NoOpLogger" ? init.logger.warn : console.warn;
                warnFn(
                  `@aws-sdk/credential-provider-node - defaultProvider::fromEnv WARNING:
    Multiple credential sources detected: 
    Both AWS_PROFILE and the pair AWS_ACCESS_KEY_ID/AWS_SECRET_ACCESS_KEY static credentials are set.
    This SDK will proceed with the AWS_PROFILE value.
    
    However, a future version may change this behavior to prefer the ENV static credentials.
    Please ensure that your environment only sets either the AWS_PROFILE or the
    AWS_ACCESS_KEY_ID/AWS_SECRET_ACCESS_KEY pair.
`
                );
                multipleCredentialSourceWarningEmitted = true;
              }
            }
            throw new import_property_provider2.CredentialsProviderError("AWS_PROFILE is set, skipping fromEnv provider.", {
              logger: init.logger,
              tryNextLink: true
            });
          }
          (_d = init.logger) == null ? void 0 : _d.debug("@aws-sdk/credential-provider-node - defaultProvider::fromEnv");
          return (0, import_credential_provider_env.fromEnv)(init)();
        },
        async () => {
          var _a;
          (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-node - defaultProvider::fromSSO");
          const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoSession } = init;
          if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {
            throw new import_property_provider2.CredentialsProviderError(
              "Skipping SSO provider in default chain (inputs do not include SSO fields).",
              { logger: init.logger }
            );
          }
          const { fromSSO } = await Promise.resolve().then(() => __toESM2(require_dist_cjs57()));
          return fromSSO(init)();
        },
        async () => {
          var _a;
          (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-node - defaultProvider::fromIni");
          const { fromIni } = await Promise.resolve().then(() => __toESM2(require_dist_cjs61()));
          return fromIni(init)();
        },
        async () => {
          var _a;
          (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-node - defaultProvider::fromProcess");
          const { fromProcess } = await Promise.resolve().then(() => __toESM2(require_dist_cjs59()));
          return fromProcess(init)();
        },
        async () => {
          var _a;
          (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-node - defaultProvider::fromTokenFile");
          const { fromTokenFile: fromTokenFile2 } = await Promise.resolve().then(() => __toESM2(require_dist_cjs60()));
          return fromTokenFile2(init)();
        },
        async () => {
          var _a;
          (_a = init.logger) == null ? void 0 : _a.debug("@aws-sdk/credential-provider-node - defaultProvider::remoteProvider");
          return (await remoteProvider(init))();
        },
        async () => {
          throw new import_property_provider2.CredentialsProviderError("Could not load credentials from any providers", {
            tryNextLink: false,
            logger: init.logger
          });
        }
      ),
      credentialsTreatedAsExpired,
      credentialsWillNeedRefresh
    ), "defaultProvider");
    var credentialsWillNeedRefresh = /* @__PURE__ */ __name((credentials) => (credentials == null ? void 0 : credentials.expiration) !== void 0, "credentialsWillNeedRefresh");
    var credentialsTreatedAsExpired = /* @__PURE__ */ __name((credentials) => (credentials == null ? void 0 : credentials.expiration) !== void 0 && credentials.expiration.getTime() - Date.now() < 3e5, "credentialsTreatedAsExpired");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-bucket-endpoint@3.696.0/node_modules/@aws-sdk/middleware-bucket-endpoint/dist-cjs/index.js
var require_dist_cjs63 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-bucket-endpoint@3.696.0/node_modules/@aws-sdk/middleware-bucket-endpoint/dist-cjs/index.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      NODE_DISABLE_MULTIREGION_ACCESS_POINT_CONFIG_OPTIONS: () => NODE_DISABLE_MULTIREGION_ACCESS_POINT_CONFIG_OPTIONS,
      NODE_DISABLE_MULTIREGION_ACCESS_POINT_ENV_NAME: () => NODE_DISABLE_MULTIREGION_ACCESS_POINT_ENV_NAME,
      NODE_DISABLE_MULTIREGION_ACCESS_POINT_INI_NAME: () => NODE_DISABLE_MULTIREGION_ACCESS_POINT_INI_NAME,
      NODE_USE_ARN_REGION_CONFIG_OPTIONS: () => NODE_USE_ARN_REGION_CONFIG_OPTIONS,
      NODE_USE_ARN_REGION_ENV_NAME: () => NODE_USE_ARN_REGION_ENV_NAME,
      NODE_USE_ARN_REGION_INI_NAME: () => NODE_USE_ARN_REGION_INI_NAME,
      bucketEndpointMiddleware: () => bucketEndpointMiddleware,
      bucketEndpointMiddlewareOptions: () => bucketEndpointMiddlewareOptions,
      bucketHostname: () => bucketHostname,
      getArnResources: () => getArnResources,
      getBucketEndpointPlugin: () => getBucketEndpointPlugin,
      getSuffixForArnEndpoint: () => getSuffixForArnEndpoint,
      resolveBucketEndpointConfig: () => resolveBucketEndpointConfig,
      validateAccountId: () => validateAccountId,
      validateDNSHostLabel: () => validateDNSHostLabel,
      validateNoDualstack: () => validateNoDualstack,
      validateNoFIPS: () => validateNoFIPS,
      validateOutpostService: () => validateOutpostService,
      validatePartition: () => validatePartition,
      validateRegion: () => validateRegion
    });
    module.exports = __toCommonJS2(src_exports);
    var import_util_config_provider = require_dist_cjs27();
    var NODE_DISABLE_MULTIREGION_ACCESS_POINT_ENV_NAME = "AWS_S3_DISABLE_MULTIREGION_ACCESS_POINTS";
    var NODE_DISABLE_MULTIREGION_ACCESS_POINT_INI_NAME = "s3_disable_multiregion_access_points";
    var NODE_DISABLE_MULTIREGION_ACCESS_POINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => (0, import_util_config_provider.booleanSelector)(env, NODE_DISABLE_MULTIREGION_ACCESS_POINT_ENV_NAME, import_util_config_provider.SelectorType.ENV),
      configFileSelector: (profile) => (0, import_util_config_provider.booleanSelector)(profile, NODE_DISABLE_MULTIREGION_ACCESS_POINT_INI_NAME, import_util_config_provider.SelectorType.CONFIG),
      default: false
    };
    var NODE_USE_ARN_REGION_ENV_NAME = "AWS_S3_USE_ARN_REGION";
    var NODE_USE_ARN_REGION_INI_NAME = "s3_use_arn_region";
    var NODE_USE_ARN_REGION_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => (0, import_util_config_provider.booleanSelector)(env, NODE_USE_ARN_REGION_ENV_NAME, import_util_config_provider.SelectorType.ENV),
      configFileSelector: (profile) => (0, import_util_config_provider.booleanSelector)(profile, NODE_USE_ARN_REGION_INI_NAME, import_util_config_provider.SelectorType.CONFIG),
      default: false
    };
    var import_util_arn_parser = require_dist_cjs28();
    var import_protocol_http8 = require_dist_cjs2();
    var DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
    var IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
    var DOTS_PATTERN = /\.\./;
    var DOT_PATTERN = /\./;
    var S3_HOSTNAME_PATTERN = /^(.+\.)?s3(-fips)?(\.dualstack)?[.-]([a-z0-9-]+)\./;
    var S3_US_EAST_1_ALTNAME_PATTERN = /^s3(-external-1)?\.amazonaws\.com$/;
    var AWS_PARTITION_SUFFIX = "amazonaws.com";
    var isBucketNameOptions = /* @__PURE__ */ __name((options) => typeof options.bucketName === "string", "isBucketNameOptions");
    var isDnsCompatibleBucketName = /* @__PURE__ */ __name((bucketName) => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName), "isDnsCompatibleBucketName");
    var getRegionalSuffix = /* @__PURE__ */ __name((hostname) => {
      const parts = hostname.match(S3_HOSTNAME_PATTERN);
      return [parts[4], hostname.replace(new RegExp(`^${parts[0]}`), "")];
    }, "getRegionalSuffix");
    var getSuffix = /* @__PURE__ */ __name((hostname) => S3_US_EAST_1_ALTNAME_PATTERN.test(hostname) ? ["us-east-1", AWS_PARTITION_SUFFIX] : getRegionalSuffix(hostname), "getSuffix");
    var getSuffixForArnEndpoint = /* @__PURE__ */ __name((hostname) => S3_US_EAST_1_ALTNAME_PATTERN.test(hostname) ? [hostname.replace(`.${AWS_PARTITION_SUFFIX}`, ""), AWS_PARTITION_SUFFIX] : getRegionalSuffix(hostname), "getSuffixForArnEndpoint");
    var validateArnEndpointOptions = /* @__PURE__ */ __name((options) => {
      if (options.pathStyleEndpoint) {
        throw new Error("Path-style S3 endpoint is not supported when bucket is an ARN");
      }
      if (options.accelerateEndpoint) {
        throw new Error("Accelerate endpoint is not supported when bucket is an ARN");
      }
      if (!options.tlsCompatible) {
        throw new Error("HTTPS is required when bucket is an ARN");
      }
    }, "validateArnEndpointOptions");
    var validateService = /* @__PURE__ */ __name((service) => {
      if (service !== "s3" && service !== "s3-outposts" && service !== "s3-object-lambda") {
        throw new Error("Expect 's3' or 's3-outposts' or 's3-object-lambda' in ARN service component");
      }
    }, "validateService");
    var validateS3Service = /* @__PURE__ */ __name((service) => {
      if (service !== "s3") {
        throw new Error("Expect 's3' in Accesspoint ARN service component");
      }
    }, "validateS3Service");
    var validateOutpostService = /* @__PURE__ */ __name((service) => {
      if (service !== "s3-outposts") {
        throw new Error("Expect 's3-posts' in Outpost ARN service component");
      }
    }, "validateOutpostService");
    var validatePartition = /* @__PURE__ */ __name((partition, options) => {
      if (partition !== options.clientPartition) {
        throw new Error(`Partition in ARN is incompatible, got "${partition}" but expected "${options.clientPartition}"`);
      }
    }, "validatePartition");
    var validateRegion = /* @__PURE__ */ __name((region, options) => {
      if (region === "") {
        throw new Error("ARN region is empty");
      }
      if (options.useFipsEndpoint) {
        if (!options.allowFipsRegion) {
          throw new Error("FIPS region is not supported");
        } else if (!isEqualRegions(region, options.clientRegion)) {
          throw new Error(`Client FIPS region ${options.clientRegion} doesn't match region ${region} in ARN`);
        }
      }
      if (!options.useArnRegion && !isEqualRegions(region, options.clientRegion || "") && !isEqualRegions(region, options.clientSigningRegion || "")) {
        throw new Error(`Region in ARN is incompatible, got ${region} but expected ${options.clientRegion}`);
      }
    }, "validateRegion");
    var validateRegionalClient = /* @__PURE__ */ __name((region) => {
      if (["s3-external-1", "aws-global"].includes(region)) {
        throw new Error(`Client region ${region} is not regional`);
      }
    }, "validateRegionalClient");
    var isEqualRegions = /* @__PURE__ */ __name((regionA, regionB) => regionA === regionB, "isEqualRegions");
    var validateAccountId = /* @__PURE__ */ __name((accountId) => {
      if (!/[0-9]{12}/.exec(accountId)) {
        throw new Error("Access point ARN accountID does not match regex '[0-9]{12}'");
      }
    }, "validateAccountId");
    var validateDNSHostLabel = /* @__PURE__ */ __name((label, options = { tlsCompatible: true }) => {
      if (label.length >= 64 || !/^[a-z0-9][a-z0-9.-]*[a-z0-9]$/.test(label) || /(\d+\.){3}\d+/.test(label) || /[.-]{2}/.test(label) || (options == null ? void 0 : options.tlsCompatible) && DOT_PATTERN.test(label)) {
        throw new Error(`Invalid DNS label ${label}`);
      }
    }, "validateDNSHostLabel");
    var validateCustomEndpoint = /* @__PURE__ */ __name((options) => {
      if (options.isCustomEndpoint) {
        if (options.dualstackEndpoint)
          throw new Error("Dualstack endpoint is not supported with custom endpoint");
        if (options.accelerateEndpoint)
          throw new Error("Accelerate endpoint is not supported with custom endpoint");
      }
    }, "validateCustomEndpoint");
    var getArnResources = /* @__PURE__ */ __name((resource) => {
      const delimiter = resource.includes(":") ? ":" : "/";
      const [resourceType, ...rest] = resource.split(delimiter);
      if (resourceType === "accesspoint") {
        if (rest.length !== 1 || rest[0] === "") {
          throw new Error(`Access Point ARN should have one resource accesspoint${delimiter}{accesspointname}`);
        }
        return { accesspointName: rest[0] };
      } else if (resourceType === "outpost") {
        if (!rest[0] || rest[1] !== "accesspoint" || !rest[2] || rest.length !== 3) {
          throw new Error(
            `Outpost ARN should have resource outpost${delimiter}{outpostId}${delimiter}accesspoint${delimiter}{accesspointName}`
          );
        }
        const [outpostId, _, accesspointName] = rest;
        return { outpostId, accesspointName };
      } else {
        throw new Error(`ARN resource should begin with 'accesspoint${delimiter}' or 'outpost${delimiter}'`);
      }
    }, "getArnResources");
    var validateNoDualstack = /* @__PURE__ */ __name((dualstackEndpoint) => {
      if (dualstackEndpoint)
        throw new Error("Dualstack endpoint is not supported with Outpost or Multi-region Access Point ARN.");
    }, "validateNoDualstack");
    var validateNoFIPS = /* @__PURE__ */ __name((useFipsEndpoint) => {
      if (useFipsEndpoint)
        throw new Error(`FIPS region is not supported with Outpost.`);
    }, "validateNoFIPS");
    var validateMrapAlias = /* @__PURE__ */ __name((name) => {
      try {
        name.split(".").forEach((label) => {
          validateDNSHostLabel(label);
        });
      } catch (e) {
        throw new Error(`"${name}" is not a DNS compatible name.`);
      }
    }, "validateMrapAlias");
    var bucketHostname = /* @__PURE__ */ __name((options) => {
      validateCustomEndpoint(options);
      return isBucketNameOptions(options) ? (
        // Construct endpoint when bucketName is a string referring to a bucket name
        getEndpointFromBucketName(options)
      ) : (
        // Construct endpoint when bucketName is an ARN referring to an S3 resource like Access Point
        getEndpointFromArn(options)
      );
    }, "bucketHostname");
    var getEndpointFromBucketName = /* @__PURE__ */ __name(({
      accelerateEndpoint = false,
      clientRegion: region,
      baseHostname,
      bucketName,
      dualstackEndpoint = false,
      fipsEndpoint = false,
      pathStyleEndpoint = false,
      tlsCompatible = true,
      isCustomEndpoint = false
    }) => {
      const [clientRegion, hostnameSuffix] = isCustomEndpoint ? [region, baseHostname] : getSuffix(baseHostname);
      if (pathStyleEndpoint || !isDnsCompatibleBucketName(bucketName) || tlsCompatible && DOT_PATTERN.test(bucketName)) {
        return {
          bucketEndpoint: false,
          hostname: dualstackEndpoint ? `s3.dualstack.${clientRegion}.${hostnameSuffix}` : baseHostname
        };
      }
      if (accelerateEndpoint) {
        baseHostname = `s3-accelerate${dualstackEndpoint ? ".dualstack" : ""}.${hostnameSuffix}`;
      } else if (dualstackEndpoint) {
        baseHostname = `s3.dualstack.${clientRegion}.${hostnameSuffix}`;
      }
      return {
        bucketEndpoint: true,
        hostname: `${bucketName}.${baseHostname}`
      };
    }, "getEndpointFromBucketName");
    var getEndpointFromArn = /* @__PURE__ */ __name((options) => {
      const { isCustomEndpoint, baseHostname, clientRegion } = options;
      const hostnameSuffix = isCustomEndpoint ? baseHostname : getSuffixForArnEndpoint(baseHostname)[1];
      const {
        pathStyleEndpoint,
        accelerateEndpoint = false,
        fipsEndpoint = false,
        tlsCompatible = true,
        bucketName,
        clientPartition = "aws"
      } = options;
      validateArnEndpointOptions({ pathStyleEndpoint, accelerateEndpoint, tlsCompatible });
      const { service, partition, accountId, region, resource } = bucketName;
      validateService(service);
      validatePartition(partition, { clientPartition });
      validateAccountId(accountId);
      const { accesspointName, outpostId } = getArnResources(resource);
      if (service === "s3-object-lambda") {
        return getEndpointFromObjectLambdaArn({ ...options, tlsCompatible, bucketName, accesspointName, hostnameSuffix });
      }
      if (region === "") {
        return getEndpointFromMRAPArn({ ...options, clientRegion, mrapAlias: accesspointName, hostnameSuffix });
      }
      if (outpostId) {
        return getEndpointFromOutpostArn({ ...options, clientRegion, outpostId, accesspointName, hostnameSuffix });
      }
      return getEndpointFromAccessPointArn({ ...options, clientRegion, accesspointName, hostnameSuffix });
    }, "getEndpointFromArn");
    var getEndpointFromObjectLambdaArn = /* @__PURE__ */ __name(({
      dualstackEndpoint = false,
      fipsEndpoint = false,
      tlsCompatible = true,
      useArnRegion,
      clientRegion,
      clientSigningRegion = clientRegion,
      accesspointName,
      bucketName,
      hostnameSuffix
    }) => {
      const { accountId, region, service } = bucketName;
      validateRegionalClient(clientRegion);
      validateRegion(region, {
        useArnRegion,
        clientRegion,
        clientSigningRegion,
        allowFipsRegion: true,
        useFipsEndpoint: fipsEndpoint
      });
      validateNoDualstack(dualstackEndpoint);
      const DNSHostLabel = `${accesspointName}-${accountId}`;
      validateDNSHostLabel(DNSHostLabel, { tlsCompatible });
      const endpointRegion = useArnRegion ? region : clientRegion;
      const signingRegion = useArnRegion ? region : clientSigningRegion;
      return {
        bucketEndpoint: true,
        hostname: `${DNSHostLabel}.${service}${fipsEndpoint ? "-fips" : ""}.${endpointRegion}.${hostnameSuffix}`,
        signingRegion,
        signingService: service
      };
    }, "getEndpointFromObjectLambdaArn");
    var getEndpointFromMRAPArn = /* @__PURE__ */ __name(({
      disableMultiregionAccessPoints,
      dualstackEndpoint = false,
      isCustomEndpoint,
      mrapAlias,
      hostnameSuffix
    }) => {
      if (disableMultiregionAccessPoints === true) {
        throw new Error("SDK is attempting to use a MRAP ARN. Please enable to feature.");
      }
      validateMrapAlias(mrapAlias);
      validateNoDualstack(dualstackEndpoint);
      return {
        bucketEndpoint: true,
        hostname: `${mrapAlias}${isCustomEndpoint ? "" : `.accesspoint.s3-global`}.${hostnameSuffix}`,
        signingRegion: "*"
      };
    }, "getEndpointFromMRAPArn");
    var getEndpointFromOutpostArn = /* @__PURE__ */ __name(({
      useArnRegion,
      clientRegion,
      clientSigningRegion = clientRegion,
      bucketName,
      outpostId,
      dualstackEndpoint = false,
      fipsEndpoint = false,
      tlsCompatible = true,
      accesspointName,
      isCustomEndpoint,
      hostnameSuffix
    }) => {
      validateRegionalClient(clientRegion);
      validateRegion(bucketName.region, { useArnRegion, clientRegion, clientSigningRegion, useFipsEndpoint: fipsEndpoint });
      const DNSHostLabel = `${accesspointName}-${bucketName.accountId}`;
      validateDNSHostLabel(DNSHostLabel, { tlsCompatible });
      const endpointRegion = useArnRegion ? bucketName.region : clientRegion;
      const signingRegion = useArnRegion ? bucketName.region : clientSigningRegion;
      validateOutpostService(bucketName.service);
      validateDNSHostLabel(outpostId, { tlsCompatible });
      validateNoDualstack(dualstackEndpoint);
      validateNoFIPS(fipsEndpoint);
      const hostnamePrefix = `${DNSHostLabel}.${outpostId}`;
      return {
        bucketEndpoint: true,
        hostname: `${hostnamePrefix}${isCustomEndpoint ? "" : `.s3-outposts.${endpointRegion}`}.${hostnameSuffix}`,
        signingRegion,
        signingService: "s3-outposts"
      };
    }, "getEndpointFromOutpostArn");
    var getEndpointFromAccessPointArn = /* @__PURE__ */ __name(({
      useArnRegion,
      clientRegion,
      clientSigningRegion = clientRegion,
      bucketName,
      dualstackEndpoint = false,
      fipsEndpoint = false,
      tlsCompatible = true,
      accesspointName,
      isCustomEndpoint,
      hostnameSuffix
    }) => {
      validateRegionalClient(clientRegion);
      validateRegion(bucketName.region, {
        useArnRegion,
        clientRegion,
        clientSigningRegion,
        allowFipsRegion: true,
        useFipsEndpoint: fipsEndpoint
      });
      const hostnamePrefix = `${accesspointName}-${bucketName.accountId}`;
      validateDNSHostLabel(hostnamePrefix, { tlsCompatible });
      const endpointRegion = useArnRegion ? bucketName.region : clientRegion;
      const signingRegion = useArnRegion ? bucketName.region : clientSigningRegion;
      validateS3Service(bucketName.service);
      return {
        bucketEndpoint: true,
        hostname: `${hostnamePrefix}${isCustomEndpoint ? "" : `.s3-accesspoint${fipsEndpoint ? "-fips" : ""}${dualstackEndpoint ? ".dualstack" : ""}.${endpointRegion}`}.${hostnameSuffix}`,
        signingRegion
      };
    }, "getEndpointFromAccessPointArn");
    var bucketEndpointMiddleware = /* @__PURE__ */ __name((options) => (next, context) => async (args) => {
      const { Bucket: bucketName } = args.input;
      let replaceBucketInPath = options.bucketEndpoint;
      const request = args.request;
      if (import_protocol_http8.HttpRequest.isInstance(request)) {
        if (options.bucketEndpoint) {
          request.hostname = bucketName;
        } else if ((0, import_util_arn_parser.validate)(bucketName)) {
          const bucketArn = (0, import_util_arn_parser.parse)(bucketName);
          const clientRegion = await options.region();
          const useDualstackEndpoint = await options.useDualstackEndpoint();
          const useFipsEndpoint = await options.useFipsEndpoint();
          const { partition, signingRegion = clientRegion } = await options.regionInfoProvider(clientRegion, { useDualstackEndpoint, useFipsEndpoint }) || {};
          const useArnRegion = await options.useArnRegion();
          const {
            hostname,
            bucketEndpoint,
            signingRegion: modifiedSigningRegion,
            signingService
          } = bucketHostname({
            bucketName: bucketArn,
            baseHostname: request.hostname,
            accelerateEndpoint: options.useAccelerateEndpoint,
            dualstackEndpoint: useDualstackEndpoint,
            fipsEndpoint: useFipsEndpoint,
            pathStyleEndpoint: options.forcePathStyle,
            tlsCompatible: request.protocol === "https:",
            useArnRegion,
            clientPartition: partition,
            clientSigningRegion: signingRegion,
            clientRegion,
            isCustomEndpoint: options.isCustomEndpoint,
            disableMultiregionAccessPoints: await options.disableMultiregionAccessPoints()
          });
          if (modifiedSigningRegion && modifiedSigningRegion !== signingRegion) {
            context["signing_region"] = modifiedSigningRegion;
          }
          if (signingService && signingService !== "s3") {
            context["signing_service"] = signingService;
          }
          request.hostname = hostname;
          replaceBucketInPath = bucketEndpoint;
        } else {
          const clientRegion = await options.region();
          const dualstackEndpoint = await options.useDualstackEndpoint();
          const fipsEndpoint = await options.useFipsEndpoint();
          const { hostname, bucketEndpoint } = bucketHostname({
            bucketName,
            clientRegion,
            baseHostname: request.hostname,
            accelerateEndpoint: options.useAccelerateEndpoint,
            dualstackEndpoint,
            fipsEndpoint,
            pathStyleEndpoint: options.forcePathStyle,
            tlsCompatible: request.protocol === "https:",
            isCustomEndpoint: options.isCustomEndpoint
          });
          request.hostname = hostname;
          replaceBucketInPath = bucketEndpoint;
        }
        if (replaceBucketInPath) {
          request.path = request.path.replace(/^(\/)?[^\/]+/, "");
          if (request.path === "") {
            request.path = "/";
          }
        }
      }
      return next({ ...args, request });
    }, "bucketEndpointMiddleware");
    var bucketEndpointMiddlewareOptions = {
      tags: ["BUCKET_ENDPOINT"],
      name: "bucketEndpointMiddleware",
      relation: "before",
      toMiddleware: "hostHeaderMiddleware",
      override: true
    };
    var getBucketEndpointPlugin = /* @__PURE__ */ __name((options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(bucketEndpointMiddleware(options), bucketEndpointMiddlewareOptions);
      }
    }), "getBucketEndpointPlugin");
    function resolveBucketEndpointConfig(input) {
      const {
        bucketEndpoint = false,
        forcePathStyle = false,
        useAccelerateEndpoint = false,
        useArnRegion = false,
        disableMultiregionAccessPoints = false
      } = input;
      return {
        ...input,
        bucketEndpoint,
        forcePathStyle,
        useAccelerateEndpoint,
        useArnRegion: typeof useArnRegion === "function" ? useArnRegion : () => Promise.resolve(useArnRegion),
        disableMultiregionAccessPoints: typeof disableMultiregionAccessPoints === "function" ? disableMultiregionAccessPoints : () => Promise.resolve(disableMultiregionAccessPoints)
      };
    }
    __name(resolveBucketEndpointConfig, "resolveBucketEndpointConfig");
  }
});

// ../../node_modules/.pnpm/@smithy+eventstream-codec@3.1.10/node_modules/@smithy/eventstream-codec/dist-cjs/index.js
var require_dist_cjs64 = __commonJS({
  "../../node_modules/.pnpm/@smithy+eventstream-codec@3.1.10/node_modules/@smithy/eventstream-codec/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      EventStreamCodec: () => EventStreamCodec,
      HeaderMarshaller: () => HeaderMarshaller,
      Int64: () => Int64,
      MessageDecoderStream: () => MessageDecoderStream,
      MessageEncoderStream: () => MessageEncoderStream,
      SmithyMessageDecoderStream: () => SmithyMessageDecoderStream,
      SmithyMessageEncoderStream: () => SmithyMessageEncoderStream
    });
    module.exports = __toCommonJS2(src_exports);
    var import_crc322 = require_main3();
    var import_util_hex_encoding = require_dist_cjs14();
    var _Int64 = class _Int642 {
      constructor(bytes) {
        this.bytes = bytes;
        if (bytes.byteLength !== 8) {
          throw new Error("Int64 buffers must be exactly 8 bytes");
        }
      }
      static fromNumber(number) {
        if (number > 9223372036854776e3 || number < -9223372036854776e3) {
          throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);
        }
        const bytes = new Uint8Array(8);
        for (let i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {
          bytes[i] = remaining;
        }
        if (number < 0) {
          negate(bytes);
        }
        return new _Int642(bytes);
      }
      /**
       * Called implicitly by infix arithmetic operators.
       */
      valueOf() {
        const bytes = this.bytes.slice(0);
        const negative = bytes[0] & 128;
        if (negative) {
          negate(bytes);
        }
        return parseInt((0, import_util_hex_encoding.toHex)(bytes), 16) * (negative ? -1 : 1);
      }
      toString() {
        return String(this.valueOf());
      }
    };
    __name(_Int64, "Int64");
    var Int64 = _Int64;
    function negate(bytes) {
      for (let i = 0; i < 8; i++) {
        bytes[i] ^= 255;
      }
      for (let i = 7; i > -1; i--) {
        bytes[i]++;
        if (bytes[i] !== 0)
          break;
      }
    }
    __name(negate, "negate");
    var _HeaderMarshaller = class _HeaderMarshaller {
      constructor(toUtf8, fromUtf8) {
        this.toUtf8 = toUtf8;
        this.fromUtf8 = fromUtf8;
      }
      format(headers) {
        const chunks = [];
        for (const headerName of Object.keys(headers)) {
          const bytes = this.fromUtf8(headerName);
          chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));
        }
        const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));
        let position = 0;
        for (const chunk of chunks) {
          out.set(chunk, position);
          position += chunk.byteLength;
        }
        return out;
      }
      formatHeaderValue(header) {
        switch (header.type) {
          case "boolean":
            return Uint8Array.from([
              header.value ? 0 : 1
              /* boolFalse */
            ]);
          case "byte":
            return Uint8Array.from([2, header.value]);
          case "short":
            const shortView = new DataView(new ArrayBuffer(3));
            shortView.setUint8(
              0,
              3
              /* short */
            );
            shortView.setInt16(1, header.value, false);
            return new Uint8Array(shortView.buffer);
          case "integer":
            const intView = new DataView(new ArrayBuffer(5));
            intView.setUint8(
              0,
              4
              /* integer */
            );
            intView.setInt32(1, header.value, false);
            return new Uint8Array(intView.buffer);
          case "long":
            const longBytes = new Uint8Array(9);
            longBytes[0] = 5;
            longBytes.set(header.value.bytes, 1);
            return longBytes;
          case "binary":
            const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));
            binView.setUint8(
              0,
              6
              /* byteArray */
            );
            binView.setUint16(1, header.value.byteLength, false);
            const binBytes = new Uint8Array(binView.buffer);
            binBytes.set(header.value, 3);
            return binBytes;
          case "string":
            const utf8Bytes = this.fromUtf8(header.value);
            const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));
            strView.setUint8(
              0,
              7
              /* string */
            );
            strView.setUint16(1, utf8Bytes.byteLength, false);
            const strBytes = new Uint8Array(strView.buffer);
            strBytes.set(utf8Bytes, 3);
            return strBytes;
          case "timestamp":
            const tsBytes = new Uint8Array(9);
            tsBytes[0] = 8;
            tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);
            return tsBytes;
          case "uuid":
            if (!UUID_PATTERN.test(header.value)) {
              throw new Error(`Invalid UUID received: ${header.value}`);
            }
            const uuidBytes = new Uint8Array(17);
            uuidBytes[0] = 9;
            uuidBytes.set((0, import_util_hex_encoding.fromHex)(header.value.replace(/\-/g, "")), 1);
            return uuidBytes;
        }
      }
      parse(headers) {
        const out = {};
        let position = 0;
        while (position < headers.byteLength) {
          const nameLength = headers.getUint8(position++);
          const name = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));
          position += nameLength;
          switch (headers.getUint8(position++)) {
            case 0:
              out[name] = {
                type: BOOLEAN_TAG,
                value: true
              };
              break;
            case 1:
              out[name] = {
                type: BOOLEAN_TAG,
                value: false
              };
              break;
            case 2:
              out[name] = {
                type: BYTE_TAG,
                value: headers.getInt8(position++)
              };
              break;
            case 3:
              out[name] = {
                type: SHORT_TAG,
                value: headers.getInt16(position, false)
              };
              position += 2;
              break;
            case 4:
              out[name] = {
                type: INT_TAG,
                value: headers.getInt32(position, false)
              };
              position += 4;
              break;
            case 5:
              out[name] = {
                type: LONG_TAG,
                value: new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8))
              };
              position += 8;
              break;
            case 6:
              const binaryLength = headers.getUint16(position, false);
              position += 2;
              out[name] = {
                type: BINARY_TAG,
                value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength)
              };
              position += binaryLength;
              break;
            case 7:
              const stringLength = headers.getUint16(position, false);
              position += 2;
              out[name] = {
                type: STRING_TAG,
                value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength))
              };
              position += stringLength;
              break;
            case 8:
              out[name] = {
                type: TIMESTAMP_TAG,
                value: new Date(new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf())
              };
              position += 8;
              break;
            case 9:
              const uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);
              position += 16;
              out[name] = {
                type: UUID_TAG,
                value: `${(0, import_util_hex_encoding.toHex)(uuidBytes.subarray(0, 4))}-${(0, import_util_hex_encoding.toHex)(uuidBytes.subarray(4, 6))}-${(0, import_util_hex_encoding.toHex)(
                  uuidBytes.subarray(6, 8)
                )}-${(0, import_util_hex_encoding.toHex)(uuidBytes.subarray(8, 10))}-${(0, import_util_hex_encoding.toHex)(uuidBytes.subarray(10))}`
              };
              break;
            default:
              throw new Error(`Unrecognized header type tag`);
          }
        }
        return out;
      }
    };
    __name(_HeaderMarshaller, "HeaderMarshaller");
    var HeaderMarshaller = _HeaderMarshaller;
    var BOOLEAN_TAG = "boolean";
    var BYTE_TAG = "byte";
    var SHORT_TAG = "short";
    var INT_TAG = "integer";
    var LONG_TAG = "long";
    var BINARY_TAG = "binary";
    var STRING_TAG = "string";
    var TIMESTAMP_TAG = "timestamp";
    var UUID_TAG = "uuid";
    var UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
    var import_crc32 = require_main3();
    var PRELUDE_MEMBER_LENGTH = 4;
    var PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;
    var CHECKSUM_LENGTH = 4;
    var MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;
    function splitMessage({ byteLength, byteOffset, buffer }) {
      if (byteLength < MINIMUM_MESSAGE_LENGTH) {
        throw new Error("Provided message too short to accommodate event stream message overhead");
      }
      const view = new DataView(buffer, byteOffset, byteLength);
      const messageLength = view.getUint32(0, false);
      if (byteLength !== messageLength) {
        throw new Error("Reported message length does not match received message length");
      }
      const headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);
      const expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);
      const expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);
      const checksummer = new import_crc32.Crc32().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));
      if (expectedPreludeChecksum !== checksummer.digest()) {
        throw new Error(
          `The prelude checksum specified in the message (${expectedPreludeChecksum}) does not match the calculated CRC32 checksum (${checksummer.digest()})`
        );
      }
      checksummer.update(
        new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH))
      );
      if (expectedMessageChecksum !== checksummer.digest()) {
        throw new Error(
          `The message checksum (${checksummer.digest()}) did not match the expected value of ${expectedMessageChecksum}`
        );
      }
      return {
        headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),
        body: new Uint8Array(
          buffer,
          byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength,
          messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH)
        )
      };
    }
    __name(splitMessage, "splitMessage");
    var _EventStreamCodec = class _EventStreamCodec {
      constructor(toUtf8, fromUtf8) {
        this.headerMarshaller = new HeaderMarshaller(toUtf8, fromUtf8);
        this.messageBuffer = [];
        this.isEndOfStream = false;
      }
      feed(message) {
        this.messageBuffer.push(this.decode(message));
      }
      endOfStream() {
        this.isEndOfStream = true;
      }
      getMessage() {
        const message = this.messageBuffer.pop();
        const isEndOfStream = this.isEndOfStream;
        return {
          getMessage() {
            return message;
          },
          isEndOfStream() {
            return isEndOfStream;
          }
        };
      }
      getAvailableMessages() {
        const messages = this.messageBuffer;
        this.messageBuffer = [];
        const isEndOfStream = this.isEndOfStream;
        return {
          getMessages() {
            return messages;
          },
          isEndOfStream() {
            return isEndOfStream;
          }
        };
      }
      /**
       * Convert a structured JavaScript object with tagged headers into a binary
       * event stream message.
       */
      encode({ headers: rawHeaders, body }) {
        const headers = this.headerMarshaller.format(rawHeaders);
        const length = headers.byteLength + body.byteLength + 16;
        const out = new Uint8Array(length);
        const view = new DataView(out.buffer, out.byteOffset, out.byteLength);
        const checksum = new import_crc322.Crc32();
        view.setUint32(0, length, false);
        view.setUint32(4, headers.byteLength, false);
        view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);
        out.set(headers, 12);
        out.set(body, headers.byteLength + 12);
        view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);
        return out;
      }
      /**
       * Convert a binary event stream message into a JavaScript object with an
       * opaque, binary body and tagged, parsed headers.
       */
      decode(message) {
        const { headers, body } = splitMessage(message);
        return { headers: this.headerMarshaller.parse(headers), body };
      }
      /**
       * Convert a structured JavaScript object with tagged headers into a binary
       * event stream message header.
       */
      formatHeaders(rawHeaders) {
        return this.headerMarshaller.format(rawHeaders);
      }
    };
    __name(_EventStreamCodec, "EventStreamCodec");
    var EventStreamCodec = _EventStreamCodec;
    var _MessageDecoderStream = class _MessageDecoderStream {
      constructor(options) {
        this.options = options;
      }
      [Symbol.asyncIterator]() {
        return this.asyncIterator();
      }
      async *asyncIterator() {
        for await (const bytes of this.options.inputStream) {
          const decoded = this.options.decoder.decode(bytes);
          yield decoded;
        }
      }
    };
    __name(_MessageDecoderStream, "MessageDecoderStream");
    var MessageDecoderStream = _MessageDecoderStream;
    var _MessageEncoderStream = class _MessageEncoderStream {
      constructor(options) {
        this.options = options;
      }
      [Symbol.asyncIterator]() {
        return this.asyncIterator();
      }
      async *asyncIterator() {
        for await (const msg of this.options.messageStream) {
          const encoded = this.options.encoder.encode(msg);
          yield encoded;
        }
        if (this.options.includeEndFrame) {
          yield new Uint8Array(0);
        }
      }
    };
    __name(_MessageEncoderStream, "MessageEncoderStream");
    var MessageEncoderStream = _MessageEncoderStream;
    var _SmithyMessageDecoderStream = class _SmithyMessageDecoderStream {
      constructor(options) {
        this.options = options;
      }
      [Symbol.asyncIterator]() {
        return this.asyncIterator();
      }
      async *asyncIterator() {
        for await (const message of this.options.messageStream) {
          const deserialized = await this.options.deserializer(message);
          if (deserialized === void 0)
            continue;
          yield deserialized;
        }
      }
    };
    __name(_SmithyMessageDecoderStream, "SmithyMessageDecoderStream");
    var SmithyMessageDecoderStream = _SmithyMessageDecoderStream;
    var _SmithyMessageEncoderStream = class _SmithyMessageEncoderStream {
      constructor(options) {
        this.options = options;
      }
      [Symbol.asyncIterator]() {
        return this.asyncIterator();
      }
      async *asyncIterator() {
        for await (const chunk of this.options.inputStream) {
          const payloadBuf = this.options.serializer(chunk);
          yield payloadBuf;
        }
      }
    };
    __name(_SmithyMessageEncoderStream, "SmithyMessageEncoderStream");
    var SmithyMessageEncoderStream = _SmithyMessageEncoderStream;
  }
});

// ../../node_modules/.pnpm/@smithy+eventstream-serde-universal@3.0.13/node_modules/@smithy/eventstream-serde-universal/dist-cjs/index.js
var require_dist_cjs65 = __commonJS({
  "../../node_modules/.pnpm/@smithy+eventstream-serde-universal@3.0.13/node_modules/@smithy/eventstream-serde-universal/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      EventStreamMarshaller: () => EventStreamMarshaller,
      eventStreamSerdeProvider: () => eventStreamSerdeProvider
    });
    module.exports = __toCommonJS2(src_exports);
    var import_eventstream_codec = require_dist_cjs64();
    function getChunkedStream(source) {
      let currentMessageTotalLength = 0;
      let currentMessagePendingLength = 0;
      let currentMessage = null;
      let messageLengthBuffer = null;
      const allocateMessage = /* @__PURE__ */ __name((size) => {
        if (typeof size !== "number") {
          throw new Error("Attempted to allocate an event message where size was not a number: " + size);
        }
        currentMessageTotalLength = size;
        currentMessagePendingLength = 4;
        currentMessage = new Uint8Array(size);
        const currentMessageView = new DataView(currentMessage.buffer);
        currentMessageView.setUint32(0, size, false);
      }, "allocateMessage");
      const iterator = /* @__PURE__ */ __name(async function* () {
        const sourceIterator = source[Symbol.asyncIterator]();
        while (true) {
          const { value, done } = await sourceIterator.next();
          if (done) {
            if (!currentMessageTotalLength) {
              return;
            } else if (currentMessageTotalLength === currentMessagePendingLength) {
              yield currentMessage;
            } else {
              throw new Error("Truncated event message received.");
            }
            return;
          }
          const chunkLength = value.length;
          let currentOffset = 0;
          while (currentOffset < chunkLength) {
            if (!currentMessage) {
              const bytesRemaining = chunkLength - currentOffset;
              if (!messageLengthBuffer) {
                messageLengthBuffer = new Uint8Array(4);
              }
              const numBytesForTotal = Math.min(
                4 - currentMessagePendingLength,
                // remaining bytes to fill the messageLengthBuffer
                bytesRemaining
                // bytes left in chunk
              );
              messageLengthBuffer.set(
                // @ts-ignore error TS2532: Object is possibly 'undefined' for value
                value.slice(currentOffset, currentOffset + numBytesForTotal),
                currentMessagePendingLength
              );
              currentMessagePendingLength += numBytesForTotal;
              currentOffset += numBytesForTotal;
              if (currentMessagePendingLength < 4) {
                break;
              }
              allocateMessage(new DataView(messageLengthBuffer.buffer).getUint32(0, false));
              messageLengthBuffer = null;
            }
            const numBytesToWrite = Math.min(
              currentMessageTotalLength - currentMessagePendingLength,
              // number of bytes left to complete message
              chunkLength - currentOffset
              // number of bytes left in the original chunk
            );
            currentMessage.set(
              // @ts-ignore error TS2532: Object is possibly 'undefined' for value
              value.slice(currentOffset, currentOffset + numBytesToWrite),
              currentMessagePendingLength
            );
            currentMessagePendingLength += numBytesToWrite;
            currentOffset += numBytesToWrite;
            if (currentMessageTotalLength && currentMessageTotalLength === currentMessagePendingLength) {
              yield currentMessage;
              currentMessage = null;
              currentMessageTotalLength = 0;
              currentMessagePendingLength = 0;
            }
          }
        }
      }, "iterator");
      return {
        [Symbol.asyncIterator]: iterator
      };
    }
    __name(getChunkedStream, "getChunkedStream");
    function getMessageUnmarshaller(deserializer, toUtf8) {
      return async function(message) {
        const { value: messageType } = message.headers[":message-type"];
        if (messageType === "error") {
          const unmodeledError = new Error(message.headers[":error-message"].value || "UnknownError");
          unmodeledError.name = message.headers[":error-code"].value;
          throw unmodeledError;
        } else if (messageType === "exception") {
          const code = message.headers[":exception-type"].value;
          const exception = { [code]: message };
          const deserializedException = await deserializer(exception);
          if (deserializedException.$unknown) {
            const error = new Error(toUtf8(message.body));
            error.name = code;
            throw error;
          }
          throw deserializedException[code];
        } else if (messageType === "event") {
          const event = {
            [message.headers[":event-type"].value]: message
          };
          const deserialized = await deserializer(event);
          if (deserialized.$unknown)
            return;
          return deserialized;
        } else {
          throw Error(`Unrecognizable event type: ${message.headers[":event-type"].value}`);
        }
      };
    }
    __name(getMessageUnmarshaller, "getMessageUnmarshaller");
    var _EventStreamMarshaller = class _EventStreamMarshaller {
      constructor({ utf8Encoder, utf8Decoder }) {
        this.eventStreamCodec = new import_eventstream_codec.EventStreamCodec(utf8Encoder, utf8Decoder);
        this.utfEncoder = utf8Encoder;
      }
      deserialize(body, deserializer) {
        const inputStream = getChunkedStream(body);
        return new import_eventstream_codec.SmithyMessageDecoderStream({
          messageStream: new import_eventstream_codec.MessageDecoderStream({ inputStream, decoder: this.eventStreamCodec }),
          // @ts-expect-error Type 'T' is not assignable to type 'Record<string, any>'
          deserializer: getMessageUnmarshaller(deserializer, this.utfEncoder)
        });
      }
      serialize(inputStream, serializer) {
        return new import_eventstream_codec.MessageEncoderStream({
          messageStream: new import_eventstream_codec.SmithyMessageEncoderStream({ inputStream, serializer }),
          encoder: this.eventStreamCodec,
          includeEndFrame: true
        });
      }
    };
    __name(_EventStreamMarshaller, "EventStreamMarshaller");
    var EventStreamMarshaller = _EventStreamMarshaller;
    var eventStreamSerdeProvider = /* @__PURE__ */ __name((options) => new EventStreamMarshaller(options), "eventStreamSerdeProvider");
  }
});

// ../../node_modules/.pnpm/@smithy+eventstream-serde-node@3.0.13/node_modules/@smithy/eventstream-serde-node/dist-cjs/index.js
var require_dist_cjs66 = __commonJS({
  "../../node_modules/.pnpm/@smithy+eventstream-serde-node@3.0.13/node_modules/@smithy/eventstream-serde-node/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      EventStreamMarshaller: () => EventStreamMarshaller,
      eventStreamSerdeProvider: () => eventStreamSerdeProvider
    });
    module.exports = __toCommonJS2(src_exports);
    var import_eventstream_serde_universal = require_dist_cjs65();
    var import_stream = __require("stream");
    async function* readabletoIterable(readStream) {
      let streamEnded = false;
      let generationEnded = false;
      const records = new Array();
      readStream.on("error", (err) => {
        if (!streamEnded) {
          streamEnded = true;
        }
        if (err) {
          throw err;
        }
      });
      readStream.on("data", (data) => {
        records.push(data);
      });
      readStream.on("end", () => {
        streamEnded = true;
      });
      while (!generationEnded) {
        const value = await new Promise((resolve) => setTimeout(() => resolve(records.shift()), 0));
        if (value) {
          yield value;
        }
        generationEnded = streamEnded && records.length === 0;
      }
    }
    __name(readabletoIterable, "readabletoIterable");
    var _EventStreamMarshaller = class _EventStreamMarshaller {
      constructor({ utf8Encoder, utf8Decoder }) {
        this.universalMarshaller = new import_eventstream_serde_universal.EventStreamMarshaller({
          utf8Decoder,
          utf8Encoder
        });
      }
      deserialize(body, deserializer) {
        const bodyIterable = typeof body[Symbol.asyncIterator] === "function" ? body : readabletoIterable(body);
        return this.universalMarshaller.deserialize(bodyIterable, deserializer);
      }
      serialize(input, serializer) {
        return import_stream.Readable.from(this.universalMarshaller.serialize(input, serializer));
      }
    };
    __name(_EventStreamMarshaller, "EventStreamMarshaller");
    var EventStreamMarshaller = _EventStreamMarshaller;
    var eventStreamSerdeProvider = /* @__PURE__ */ __name((options) => new EventStreamMarshaller(options), "eventStreamSerdeProvider");
  }
});

// ../../node_modules/.pnpm/@smithy+hash-stream-node@3.1.10/node_modules/@smithy/hash-stream-node/dist-cjs/index.js
var require_dist_cjs67 = __commonJS({
  "../../node_modules/.pnpm/@smithy+hash-stream-node@3.1.10/node_modules/@smithy/hash-stream-node/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      fileStreamHasher: () => fileStreamHasher,
      readableStreamHasher: () => readableStreamHasher
    });
    module.exports = __toCommonJS2(src_exports);
    var import_fs = __require("fs");
    var import_util_utf8 = require_dist_cjs8();
    var import_stream = __require("stream");
    var _HashCalculator = class _HashCalculator extends import_stream.Writable {
      constructor(hash, options) {
        super(options);
        this.hash = hash;
      }
      _write(chunk, encoding, callback) {
        try {
          this.hash.update((0, import_util_utf8.toUint8Array)(chunk));
        } catch (err) {
          return callback(err);
        }
        callback();
      }
    };
    __name(_HashCalculator, "HashCalculator");
    var HashCalculator = _HashCalculator;
    var fileStreamHasher = /* @__PURE__ */ __name((hashCtor, fileStream) => new Promise((resolve, reject) => {
      if (!isReadStream(fileStream)) {
        reject(new Error("Unable to calculate hash for non-file streams."));
        return;
      }
      const fileStreamTee = (0, import_fs.createReadStream)(fileStream.path, {
        start: fileStream.start,
        end: fileStream.end
      });
      const hash = new hashCtor();
      const hashCalculator = new HashCalculator(hash);
      fileStreamTee.pipe(hashCalculator);
      fileStreamTee.on("error", (err) => {
        hashCalculator.end();
        reject(err);
      });
      hashCalculator.on("error", reject);
      hashCalculator.on("finish", function() {
        hash.digest().then(resolve).catch(reject);
      });
    }), "fileStreamHasher");
    var isReadStream = /* @__PURE__ */ __name((stream) => typeof stream.path === "string", "isReadStream");
    var readableStreamHasher = /* @__PURE__ */ __name((hashCtor, readableStream) => {
      if (readableStream.readableFlowing !== null) {
        throw new Error("Unable to calculate hash for flowing readable stream");
      }
      const hash = new hashCtor();
      const hashCalculator = new HashCalculator(hash);
      readableStream.pipe(hashCalculator);
      return new Promise((resolve, reject) => {
        readableStream.on("error", (err) => {
          hashCalculator.end();
          reject(err);
        });
        hashCalculator.on("error", reject);
        hashCalculator.on("finish", () => {
          hash.digest().then(resolve).catch(reject);
        });
      });
    }, "readableStreamHasher");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-s3@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-s3/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared4 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-s3@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-s3/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var signature_v4_multi_region_1 = require_dist_cjs39();
    var smithy_client_1 = require_dist_cjs19();
    var url_parser_1 = require_dist_cjs43();
    var util_base64_1 = require_dist_cjs9();
    var util_stream_1 = require_dist_cjs15();
    var util_utf8_1 = require_dist_cjs8();
    var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider();
    var endpointResolver_1 = require_endpointResolver();
    var getRuntimeConfig = (config) => {
      return {
        apiVersion: "2006-03-01",
        base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
        base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
        disableHostPrefix: config?.disableHostPrefix ?? false,
        endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
        extensions: config?.extensions ?? [],
        getAwsChunkedEncodingStream: config?.getAwsChunkedEncodingStream ?? util_stream_1.getAwsChunkedEncodingStream,
        httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? httpAuthSchemeProvider_1.defaultS3HttpAuthSchemeProvider,
        httpAuthSchemes: config?.httpAuthSchemes ?? [
          {
            schemeId: "aws.auth#sigv4",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
            signer: new core_1.AwsSdkSigV4Signer()
          },
          {
            schemeId: "aws.auth#sigv4a",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4a"),
            signer: new core_1.AwsSdkSigV4ASigner()
          }
        ],
        logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
        sdkStreamMixin: config?.sdkStreamMixin ?? util_stream_1.sdkStreamMixin,
        serviceId: config?.serviceId ?? "S3",
        signerConstructor: config?.signerConstructor ?? signature_v4_multi_region_1.SignatureV4MultiRegion,
        signingEscapePath: config?.signingEscapePath ?? false,
        urlParser: config?.urlParser ?? url_parser_1.parseUrl,
        useArnRegion: config?.useArnRegion ?? false,
        utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
        utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-s3@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-s3/dist-cjs/runtimeConfig.js
var require_runtimeConfig4 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-s3@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-s3/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package());
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var credential_provider_node_1 = require_dist_cjs62();
    var middleware_bucket_endpoint_1 = require_dist_cjs63();
    var middleware_flexible_checksums_1 = require_dist_cjs23();
    var middleware_sdk_s3_1 = require_dist_cjs29();
    var util_user_agent_node_1 = require_dist_cjs49();
    var config_resolver_1 = require_dist_cjs33();
    var eventstream_serde_node_1 = require_dist_cjs66();
    var hash_node_1 = require_dist_cjs50();
    var hash_stream_node_1 = require_dist_cjs67();
    var middleware_retry_1 = require_dist_cjs38();
    var node_config_provider_1 = require_dist_cjs41();
    var node_http_handler_1 = require_dist_cjs12();
    var util_body_length_node_1 = require_dist_cjs51();
    var util_retry_1 = require_dist_cjs37();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared4();
    var smithy_client_1 = require_dist_cjs19();
    var util_defaults_mode_node_1 = require_dist_cjs52();
    var smithy_client_2 = require_dist_cjs19();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      (0, core_1.emitWarningIfUnsupportedVersion)(process.version);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? credential_provider_node_1.defaultProvider,
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.createDefaultUserAgentProvider)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        disableS3ExpressSessionAuth: config?.disableS3ExpressSessionAuth ?? (0, node_config_provider_1.loadConfig)(middleware_sdk_s3_1.NODE_DISABLE_S3_EXPRESS_SESSION_AUTH_OPTIONS),
        eventStreamSerdeProvider: config?.eventStreamSerdeProvider ?? eventstream_serde_node_1.eventStreamSerdeProvider,
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        md5: config?.md5 ?? hash_node_1.Hash.bind(null, "md5"),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestChecksumCalculation: config?.requestChecksumCalculation ?? (0, node_config_provider_1.loadConfig)(middleware_flexible_checksums_1.NODE_REQUEST_CHECKSUM_CALCULATION_CONFIG_OPTIONS),
        requestHandler: node_http_handler_1.NodeHttpHandler.create(config?.requestHandler ?? defaultConfigProvider),
        responseChecksumValidation: config?.responseChecksumValidation ?? (0, node_config_provider_1.loadConfig)(middleware_flexible_checksums_1.NODE_RESPONSE_CHECKSUM_VALIDATION_CONFIG_OPTIONS),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha1: config?.sha1 ?? hash_node_1.Hash.bind(null, "sha1"),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        sigv4aSigningRegionSet: config?.sigv4aSigningRegionSet ?? (0, node_config_provider_1.loadConfig)(core_1.NODE_SIGV4A_CONFIG_OPTIONS),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        streamHasher: config?.streamHasher ?? hash_stream_node_1.readableStreamHasher,
        useArnRegion: config?.useArnRegion ?? (0, node_config_provider_1.loadConfig)(middleware_bucket_endpoint_1.NODE_USE_ARN_REGION_CONFIG_OPTIONS),
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),
        userAgentAppId: config?.userAgentAppId ?? (0, node_config_provider_1.loadConfig)(util_user_agent_node_1.NODE_APP_ID_CONFIG_OPTIONS)
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-ssec@3.696.0/node_modules/@aws-sdk/middleware-ssec/dist-cjs/index.js
var require_dist_cjs68 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-ssec@3.696.0/node_modules/@aws-sdk/middleware-ssec/dist-cjs/index.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      getSsecPlugin: () => getSsecPlugin,
      isValidBase64EncodedSSECustomerKey: () => isValidBase64EncodedSSECustomerKey,
      ssecMiddleware: () => ssecMiddleware,
      ssecMiddlewareOptions: () => ssecMiddlewareOptions
    });
    module.exports = __toCommonJS2(src_exports);
    function ssecMiddleware(options) {
      return (next) => async (args) => {
        const input = { ...args.input };
        const properties = [
          {
            target: "SSECustomerKey",
            hash: "SSECustomerKeyMD5"
          },
          {
            target: "CopySourceSSECustomerKey",
            hash: "CopySourceSSECustomerKeyMD5"
          }
        ];
        for (const prop of properties) {
          const value = input[prop.target];
          if (value) {
            let valueForHash;
            if (typeof value === "string") {
              if (isValidBase64EncodedSSECustomerKey(value, options)) {
                valueForHash = options.base64Decoder(value);
              } else {
                valueForHash = options.utf8Decoder(value);
                input[prop.target] = options.base64Encoder(valueForHash);
              }
            } else {
              valueForHash = ArrayBuffer.isView(value) ? new Uint8Array(value.buffer, value.byteOffset, value.byteLength) : new Uint8Array(value);
              input[prop.target] = options.base64Encoder(valueForHash);
            }
            const hash = new options.md5();
            hash.update(valueForHash);
            input[prop.hash] = options.base64Encoder(await hash.digest());
          }
        }
        return next({
          ...args,
          input
        });
      };
    }
    __name(ssecMiddleware, "ssecMiddleware");
    var ssecMiddlewareOptions = {
      name: "ssecMiddleware",
      step: "initialize",
      tags: ["SSE"],
      override: true
    };
    var getSsecPlugin = /* @__PURE__ */ __name((config) => ({
      applyToStack: (clientStack) => {
        clientStack.add(ssecMiddleware(config), ssecMiddlewareOptions);
      }
    }), "getSsecPlugin");
    function isValidBase64EncodedSSECustomerKey(str, options) {
      const base64Regex = /^(?:[A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/;
      if (!base64Regex.test(str))
        return false;
      try {
        const decodedBytes = options.base64Decoder(str);
        return decodedBytes.length === 32;
      } catch {
        return false;
      }
    }
    __name(isValidBase64EncodedSSECustomerKey, "isValidBase64EncodedSSECustomerKey");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-location-constraint@3.696.0/node_modules/@aws-sdk/middleware-location-constraint/dist-cjs/index.js
var require_dist_cjs69 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-location-constraint@3.696.0/node_modules/@aws-sdk/middleware-location-constraint/dist-cjs/index.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      getLocationConstraintPlugin: () => getLocationConstraintPlugin,
      locationConstraintMiddleware: () => locationConstraintMiddleware,
      locationConstraintMiddlewareOptions: () => locationConstraintMiddlewareOptions
    });
    module.exports = __toCommonJS2(src_exports);
    function locationConstraintMiddleware(options) {
      return (next) => async (args) => {
        const { CreateBucketConfiguration } = args.input;
        const region = await options.region();
        if (!(CreateBucketConfiguration == null ? void 0 : CreateBucketConfiguration.LocationConstraint) && !(CreateBucketConfiguration == null ? void 0 : CreateBucketConfiguration.Location)) {
          args = {
            ...args,
            input: {
              ...args.input,
              CreateBucketConfiguration: region === "us-east-1" ? void 0 : { LocationConstraint: region }
            }
          };
        }
        return next(args);
      };
    }
    __name(locationConstraintMiddleware, "locationConstraintMiddleware");
    var locationConstraintMiddlewareOptions = {
      step: "initialize",
      tags: ["LOCATION_CONSTRAINT", "CREATE_BUCKET_CONFIGURATION"],
      name: "locationConstraintMiddleware",
      override: true
    };
    var getLocationConstraintPlugin = /* @__PURE__ */ __name((config) => ({
      applyToStack: (clientStack) => {
        clientStack.add(locationConstraintMiddleware(config), locationConstraintMiddlewareOptions);
      }
    }), "getLocationConstraintPlugin");
  }
});

// ../../node_modules/.pnpm/@smithy+util-waiter@3.2.0/node_modules/@smithy/util-waiter/dist-cjs/index.js
var require_dist_cjs70 = __commonJS({
  "../../node_modules/.pnpm/@smithy+util-waiter@3.2.0/node_modules/@smithy/util-waiter/dist-cjs/index.js"(exports, module) {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      WaiterState: () => WaiterState,
      checkExceptions: () => checkExceptions,
      createWaiter: () => createWaiter,
      waiterServiceDefaults: () => waiterServiceDefaults
    });
    module.exports = __toCommonJS2(src_exports);
    var sleep = /* @__PURE__ */ __name((seconds) => {
      return new Promise((resolve) => setTimeout(resolve, seconds * 1e3));
    }, "sleep");
    var waiterServiceDefaults = {
      minDelay: 2,
      maxDelay: 120
    };
    var WaiterState = /* @__PURE__ */ ((WaiterState2) => {
      WaiterState2["ABORTED"] = "ABORTED";
      WaiterState2["FAILURE"] = "FAILURE";
      WaiterState2["SUCCESS"] = "SUCCESS";
      WaiterState2["RETRY"] = "RETRY";
      WaiterState2["TIMEOUT"] = "TIMEOUT";
      return WaiterState2;
    })(WaiterState || {});
    var checkExceptions = /* @__PURE__ */ __name((result) => {
      if (result.state === "ABORTED") {
        const abortError = new Error(
          `${JSON.stringify({
            ...result,
            reason: "Request was aborted"
          })}`
        );
        abortError.name = "AbortError";
        throw abortError;
      } else if (result.state === "TIMEOUT") {
        const timeoutError = new Error(
          `${JSON.stringify({
            ...result,
            reason: "Waiter has timed out"
          })}`
        );
        timeoutError.name = "TimeoutError";
        throw timeoutError;
      } else if (result.state !== "SUCCESS") {
        throw new Error(`${JSON.stringify(result)}`);
      }
      return result;
    }, "checkExceptions");
    var exponentialBackoffWithJitter = /* @__PURE__ */ __name((minDelay, maxDelay, attemptCeiling, attempt) => {
      if (attempt > attemptCeiling)
        return maxDelay;
      const delay = minDelay * 2 ** (attempt - 1);
      return randomInRange(minDelay, delay);
    }, "exponentialBackoffWithJitter");
    var randomInRange = /* @__PURE__ */ __name((min, max) => min + Math.random() * (max - min), "randomInRange");
    var runPolling = /* @__PURE__ */ __name(async ({ minDelay, maxDelay, maxWaitTime, abortController, client, abortSignal }, input, acceptorChecks) => {
      var _a;
      const observedResponses = {};
      const { state: state2, reason } = await acceptorChecks(client, input);
      if (reason) {
        const message = createMessageFromResponse(reason);
        observedResponses[message] |= 0;
        observedResponses[message] += 1;
      }
      if (state2 !== "RETRY") {
        return { state: state2, reason, observedResponses };
      }
      let currentAttempt = 1;
      const waitUntil = Date.now() + maxWaitTime * 1e3;
      const attemptCeiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;
      while (true) {
        if (((_a = abortController == null ? void 0 : abortController.signal) == null ? void 0 : _a.aborted) || (abortSignal == null ? void 0 : abortSignal.aborted)) {
          const message = "AbortController signal aborted.";
          observedResponses[message] |= 0;
          observedResponses[message] += 1;
          return { state: "ABORTED", observedResponses };
        }
        const delay = exponentialBackoffWithJitter(minDelay, maxDelay, attemptCeiling, currentAttempt);
        if (Date.now() + delay * 1e3 > waitUntil) {
          return { state: "TIMEOUT", observedResponses };
        }
        await sleep(delay);
        const { state: state22, reason: reason2 } = await acceptorChecks(client, input);
        if (reason2) {
          const message = createMessageFromResponse(reason2);
          observedResponses[message] |= 0;
          observedResponses[message] += 1;
        }
        if (state22 !== "RETRY") {
          return { state: state22, reason: reason2, observedResponses };
        }
        currentAttempt += 1;
      }
    }, "runPolling");
    var createMessageFromResponse = /* @__PURE__ */ __name((reason) => {
      var _a;
      if (reason == null ? void 0 : reason.$responseBodyText) {
        return `Deserialization error for body: ${reason.$responseBodyText}`;
      }
      if ((_a = reason == null ? void 0 : reason.$metadata) == null ? void 0 : _a.httpStatusCode) {
        if (reason.$response || reason.message) {
          return `${reason.$response.statusCode ?? reason.$metadata.httpStatusCode ?? "Unknown"}: ${reason.message}`;
        }
        return `${reason.$metadata.httpStatusCode}: OK`;
      }
      return String((reason == null ? void 0 : reason.message) ?? JSON.stringify(reason) ?? "Unknown");
    }, "createMessageFromResponse");
    var validateWaiterOptions = /* @__PURE__ */ __name((options) => {
      if (options.maxWaitTime < 1) {
        throw new Error(`WaiterConfiguration.maxWaitTime must be greater than 0`);
      } else if (options.minDelay < 1) {
        throw new Error(`WaiterConfiguration.minDelay must be greater than 0`);
      } else if (options.maxDelay < 1) {
        throw new Error(`WaiterConfiguration.maxDelay must be greater than 0`);
      } else if (options.maxWaitTime <= options.minDelay) {
        throw new Error(
          `WaiterConfiguration.maxWaitTime [${options.maxWaitTime}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`
        );
      } else if (options.maxDelay < options.minDelay) {
        throw new Error(
          `WaiterConfiguration.maxDelay [${options.maxDelay}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`
        );
      }
    }, "validateWaiterOptions");
    var abortTimeout = /* @__PURE__ */ __name(async (abortSignal) => {
      return new Promise((resolve) => {
        const onAbort = /* @__PURE__ */ __name(() => resolve({
          state: "ABORTED"
          /* ABORTED */
        }), "onAbort");
        if (typeof abortSignal.addEventListener === "function") {
          abortSignal.addEventListener("abort", onAbort);
        } else {
          abortSignal.onabort = onAbort;
        }
      });
    }, "abortTimeout");
    var createWaiter = /* @__PURE__ */ __name(async (options, input, acceptorChecks) => {
      const params = {
        ...waiterServiceDefaults,
        ...options
      };
      validateWaiterOptions(params);
      const exitConditions = [runPolling(params, input, acceptorChecks)];
      if (options.abortController) {
        exitConditions.push(abortTimeout(options.abortController.signal));
      }
      if (options.abortSignal) {
        exitConditions.push(abortTimeout(options.abortSignal));
      }
      return Promise.race(exitConditions);
    }, "createWaiter");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-s3@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-s3/dist-cjs/index.js
var require_dist_cjs71 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-s3@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-s3/dist-cjs/index.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      AbortMultipartUploadCommand: () => AbortMultipartUploadCommand,
      AnalyticsFilter: () => AnalyticsFilter,
      AnalyticsS3ExportFileFormat: () => AnalyticsS3ExportFileFormat,
      ArchiveStatus: () => ArchiveStatus,
      BucketAccelerateStatus: () => BucketAccelerateStatus,
      BucketAlreadyExists: () => BucketAlreadyExists,
      BucketAlreadyOwnedByYou: () => BucketAlreadyOwnedByYou,
      BucketCannedACL: () => BucketCannedACL,
      BucketLocationConstraint: () => BucketLocationConstraint,
      BucketLogsPermission: () => BucketLogsPermission,
      BucketType: () => BucketType,
      BucketVersioningStatus: () => BucketVersioningStatus,
      ChecksumAlgorithm: () => ChecksumAlgorithm,
      ChecksumMode: () => ChecksumMode,
      CompleteMultipartUploadCommand: () => CompleteMultipartUploadCommand,
      CompleteMultipartUploadOutputFilterSensitiveLog: () => CompleteMultipartUploadOutputFilterSensitiveLog,
      CompleteMultipartUploadRequestFilterSensitiveLog: () => CompleteMultipartUploadRequestFilterSensitiveLog,
      CompressionType: () => CompressionType,
      CopyObjectCommand: () => CopyObjectCommand,
      CopyObjectOutputFilterSensitiveLog: () => CopyObjectOutputFilterSensitiveLog,
      CopyObjectRequestFilterSensitiveLog: () => CopyObjectRequestFilterSensitiveLog,
      CreateBucketCommand: () => CreateBucketCommand,
      CreateMultipartUploadCommand: () => CreateMultipartUploadCommand,
      CreateMultipartUploadOutputFilterSensitiveLog: () => CreateMultipartUploadOutputFilterSensitiveLog,
      CreateMultipartUploadRequestFilterSensitiveLog: () => CreateMultipartUploadRequestFilterSensitiveLog,
      CreateSessionCommand: () => CreateSessionCommand,
      CreateSessionOutputFilterSensitiveLog: () => CreateSessionOutputFilterSensitiveLog,
      CreateSessionRequestFilterSensitiveLog: () => CreateSessionRequestFilterSensitiveLog,
      DataRedundancy: () => DataRedundancy,
      DeleteBucketAnalyticsConfigurationCommand: () => DeleteBucketAnalyticsConfigurationCommand,
      DeleteBucketCommand: () => DeleteBucketCommand,
      DeleteBucketCorsCommand: () => DeleteBucketCorsCommand,
      DeleteBucketEncryptionCommand: () => DeleteBucketEncryptionCommand,
      DeleteBucketIntelligentTieringConfigurationCommand: () => DeleteBucketIntelligentTieringConfigurationCommand,
      DeleteBucketInventoryConfigurationCommand: () => DeleteBucketInventoryConfigurationCommand,
      DeleteBucketLifecycleCommand: () => DeleteBucketLifecycleCommand,
      DeleteBucketMetricsConfigurationCommand: () => DeleteBucketMetricsConfigurationCommand,
      DeleteBucketOwnershipControlsCommand: () => DeleteBucketOwnershipControlsCommand,
      DeleteBucketPolicyCommand: () => DeleteBucketPolicyCommand,
      DeleteBucketReplicationCommand: () => DeleteBucketReplicationCommand,
      DeleteBucketTaggingCommand: () => DeleteBucketTaggingCommand,
      DeleteBucketWebsiteCommand: () => DeleteBucketWebsiteCommand,
      DeleteMarkerReplicationStatus: () => DeleteMarkerReplicationStatus,
      DeleteObjectCommand: () => DeleteObjectCommand2,
      DeleteObjectTaggingCommand: () => DeleteObjectTaggingCommand,
      DeleteObjectsCommand: () => DeleteObjectsCommand,
      DeletePublicAccessBlockCommand: () => DeletePublicAccessBlockCommand,
      EncodingType: () => EncodingType,
      EncryptionFilterSensitiveLog: () => EncryptionFilterSensitiveLog,
      EncryptionTypeMismatch: () => EncryptionTypeMismatch,
      Event: () => Event,
      ExistingObjectReplicationStatus: () => ExistingObjectReplicationStatus,
      ExpirationStatus: () => ExpirationStatus,
      ExpressionType: () => ExpressionType,
      FileHeaderInfo: () => FileHeaderInfo,
      FilterRuleName: () => FilterRuleName,
      GetBucketAccelerateConfigurationCommand: () => GetBucketAccelerateConfigurationCommand,
      GetBucketAclCommand: () => GetBucketAclCommand,
      GetBucketAnalyticsConfigurationCommand: () => GetBucketAnalyticsConfigurationCommand,
      GetBucketCorsCommand: () => GetBucketCorsCommand,
      GetBucketEncryptionCommand: () => GetBucketEncryptionCommand,
      GetBucketEncryptionOutputFilterSensitiveLog: () => GetBucketEncryptionOutputFilterSensitiveLog,
      GetBucketIntelligentTieringConfigurationCommand: () => GetBucketIntelligentTieringConfigurationCommand,
      GetBucketInventoryConfigurationCommand: () => GetBucketInventoryConfigurationCommand,
      GetBucketInventoryConfigurationOutputFilterSensitiveLog: () => GetBucketInventoryConfigurationOutputFilterSensitiveLog,
      GetBucketLifecycleConfigurationCommand: () => GetBucketLifecycleConfigurationCommand,
      GetBucketLocationCommand: () => GetBucketLocationCommand,
      GetBucketLoggingCommand: () => GetBucketLoggingCommand,
      GetBucketMetricsConfigurationCommand: () => GetBucketMetricsConfigurationCommand,
      GetBucketNotificationConfigurationCommand: () => GetBucketNotificationConfigurationCommand,
      GetBucketOwnershipControlsCommand: () => GetBucketOwnershipControlsCommand,
      GetBucketPolicyCommand: () => GetBucketPolicyCommand,
      GetBucketPolicyStatusCommand: () => GetBucketPolicyStatusCommand,
      GetBucketReplicationCommand: () => GetBucketReplicationCommand,
      GetBucketRequestPaymentCommand: () => GetBucketRequestPaymentCommand,
      GetBucketTaggingCommand: () => GetBucketTaggingCommand,
      GetBucketVersioningCommand: () => GetBucketVersioningCommand,
      GetBucketWebsiteCommand: () => GetBucketWebsiteCommand,
      GetObjectAclCommand: () => GetObjectAclCommand,
      GetObjectAttributesCommand: () => GetObjectAttributesCommand,
      GetObjectAttributesRequestFilterSensitiveLog: () => GetObjectAttributesRequestFilterSensitiveLog,
      GetObjectCommand: () => GetObjectCommand,
      GetObjectLegalHoldCommand: () => GetObjectLegalHoldCommand,
      GetObjectLockConfigurationCommand: () => GetObjectLockConfigurationCommand,
      GetObjectOutputFilterSensitiveLog: () => GetObjectOutputFilterSensitiveLog,
      GetObjectRequestFilterSensitiveLog: () => GetObjectRequestFilterSensitiveLog,
      GetObjectRetentionCommand: () => GetObjectRetentionCommand,
      GetObjectTaggingCommand: () => GetObjectTaggingCommand,
      GetObjectTorrentCommand: () => GetObjectTorrentCommand,
      GetObjectTorrentOutputFilterSensitiveLog: () => GetObjectTorrentOutputFilterSensitiveLog,
      GetPublicAccessBlockCommand: () => GetPublicAccessBlockCommand,
      HeadBucketCommand: () => HeadBucketCommand,
      HeadObjectCommand: () => HeadObjectCommand,
      HeadObjectOutputFilterSensitiveLog: () => HeadObjectOutputFilterSensitiveLog,
      HeadObjectRequestFilterSensitiveLog: () => HeadObjectRequestFilterSensitiveLog,
      IntelligentTieringAccessTier: () => IntelligentTieringAccessTier,
      IntelligentTieringStatus: () => IntelligentTieringStatus,
      InvalidObjectState: () => InvalidObjectState,
      InvalidRequest: () => InvalidRequest,
      InvalidWriteOffset: () => InvalidWriteOffset,
      InventoryConfigurationFilterSensitiveLog: () => InventoryConfigurationFilterSensitiveLog,
      InventoryDestinationFilterSensitiveLog: () => InventoryDestinationFilterSensitiveLog,
      InventoryEncryptionFilterSensitiveLog: () => InventoryEncryptionFilterSensitiveLog,
      InventoryFormat: () => InventoryFormat,
      InventoryFrequency: () => InventoryFrequency,
      InventoryIncludedObjectVersions: () => InventoryIncludedObjectVersions,
      InventoryOptionalField: () => InventoryOptionalField,
      InventoryS3BucketDestinationFilterSensitiveLog: () => InventoryS3BucketDestinationFilterSensitiveLog,
      JSONType: () => JSONType,
      ListBucketAnalyticsConfigurationsCommand: () => ListBucketAnalyticsConfigurationsCommand,
      ListBucketIntelligentTieringConfigurationsCommand: () => ListBucketIntelligentTieringConfigurationsCommand,
      ListBucketInventoryConfigurationsCommand: () => ListBucketInventoryConfigurationsCommand,
      ListBucketInventoryConfigurationsOutputFilterSensitiveLog: () => ListBucketInventoryConfigurationsOutputFilterSensitiveLog,
      ListBucketMetricsConfigurationsCommand: () => ListBucketMetricsConfigurationsCommand,
      ListBucketsCommand: () => ListBucketsCommand,
      ListDirectoryBucketsCommand: () => ListDirectoryBucketsCommand,
      ListMultipartUploadsCommand: () => ListMultipartUploadsCommand,
      ListObjectVersionsCommand: () => ListObjectVersionsCommand,
      ListObjectsCommand: () => ListObjectsCommand,
      ListObjectsV2Command: () => ListObjectsV2Command,
      ListPartsCommand: () => ListPartsCommand,
      ListPartsRequestFilterSensitiveLog: () => ListPartsRequestFilterSensitiveLog,
      LocationType: () => LocationType,
      MFADelete: () => MFADelete,
      MFADeleteStatus: () => MFADeleteStatus,
      MetadataDirective: () => MetadataDirective,
      MetricsFilter: () => MetricsFilter,
      MetricsStatus: () => MetricsStatus,
      NoSuchBucket: () => NoSuchBucket,
      NoSuchKey: () => NoSuchKey,
      NoSuchUpload: () => NoSuchUpload,
      NotFound: () => NotFound,
      ObjectAlreadyInActiveTierError: () => ObjectAlreadyInActiveTierError,
      ObjectAttributes: () => ObjectAttributes,
      ObjectCannedACL: () => ObjectCannedACL,
      ObjectLockEnabled: () => ObjectLockEnabled,
      ObjectLockLegalHoldStatus: () => ObjectLockLegalHoldStatus,
      ObjectLockMode: () => ObjectLockMode,
      ObjectLockRetentionMode: () => ObjectLockRetentionMode,
      ObjectNotInActiveTierError: () => ObjectNotInActiveTierError,
      ObjectOwnership: () => ObjectOwnership,
      ObjectStorageClass: () => ObjectStorageClass,
      ObjectVersionStorageClass: () => ObjectVersionStorageClass,
      OptionalObjectAttributes: () => OptionalObjectAttributes,
      OutputLocationFilterSensitiveLog: () => OutputLocationFilterSensitiveLog,
      OwnerOverride: () => OwnerOverride,
      PartitionDateSource: () => PartitionDateSource,
      Payer: () => Payer,
      Permission: () => Permission,
      Protocol: () => Protocol,
      PutBucketAccelerateConfigurationCommand: () => PutBucketAccelerateConfigurationCommand,
      PutBucketAclCommand: () => PutBucketAclCommand,
      PutBucketAnalyticsConfigurationCommand: () => PutBucketAnalyticsConfigurationCommand,
      PutBucketCorsCommand: () => PutBucketCorsCommand,
      PutBucketEncryptionCommand: () => PutBucketEncryptionCommand,
      PutBucketEncryptionRequestFilterSensitiveLog: () => PutBucketEncryptionRequestFilterSensitiveLog,
      PutBucketIntelligentTieringConfigurationCommand: () => PutBucketIntelligentTieringConfigurationCommand,
      PutBucketInventoryConfigurationCommand: () => PutBucketInventoryConfigurationCommand,
      PutBucketInventoryConfigurationRequestFilterSensitiveLog: () => PutBucketInventoryConfigurationRequestFilterSensitiveLog,
      PutBucketLifecycleConfigurationCommand: () => PutBucketLifecycleConfigurationCommand,
      PutBucketLoggingCommand: () => PutBucketLoggingCommand,
      PutBucketMetricsConfigurationCommand: () => PutBucketMetricsConfigurationCommand,
      PutBucketNotificationConfigurationCommand: () => PutBucketNotificationConfigurationCommand,
      PutBucketOwnershipControlsCommand: () => PutBucketOwnershipControlsCommand,
      PutBucketPolicyCommand: () => PutBucketPolicyCommand,
      PutBucketReplicationCommand: () => PutBucketReplicationCommand,
      PutBucketRequestPaymentCommand: () => PutBucketRequestPaymentCommand,
      PutBucketTaggingCommand: () => PutBucketTaggingCommand,
      PutBucketVersioningCommand: () => PutBucketVersioningCommand,
      PutBucketWebsiteCommand: () => PutBucketWebsiteCommand,
      PutObjectAclCommand: () => PutObjectAclCommand,
      PutObjectCommand: () => PutObjectCommand2,
      PutObjectLegalHoldCommand: () => PutObjectLegalHoldCommand,
      PutObjectLockConfigurationCommand: () => PutObjectLockConfigurationCommand,
      PutObjectOutputFilterSensitiveLog: () => PutObjectOutputFilterSensitiveLog,
      PutObjectRequestFilterSensitiveLog: () => PutObjectRequestFilterSensitiveLog,
      PutObjectRetentionCommand: () => PutObjectRetentionCommand,
      PutObjectTaggingCommand: () => PutObjectTaggingCommand,
      PutPublicAccessBlockCommand: () => PutPublicAccessBlockCommand,
      QuoteFields: () => QuoteFields,
      ReplicaModificationsStatus: () => ReplicaModificationsStatus,
      ReplicationRuleStatus: () => ReplicationRuleStatus,
      ReplicationStatus: () => ReplicationStatus,
      ReplicationTimeStatus: () => ReplicationTimeStatus,
      RequestCharged: () => RequestCharged,
      RequestPayer: () => RequestPayer,
      RestoreObjectCommand: () => RestoreObjectCommand,
      RestoreObjectRequestFilterSensitiveLog: () => RestoreObjectRequestFilterSensitiveLog,
      RestoreRequestFilterSensitiveLog: () => RestoreRequestFilterSensitiveLog,
      RestoreRequestType: () => RestoreRequestType,
      S3: () => S3,
      S3Client: () => S3Client2,
      S3LocationFilterSensitiveLog: () => S3LocationFilterSensitiveLog,
      S3ServiceException: () => S3ServiceException,
      SSEKMSFilterSensitiveLog: () => SSEKMSFilterSensitiveLog,
      SelectObjectContentCommand: () => SelectObjectContentCommand,
      SelectObjectContentEventStream: () => SelectObjectContentEventStream,
      SelectObjectContentEventStreamFilterSensitiveLog: () => SelectObjectContentEventStreamFilterSensitiveLog,
      SelectObjectContentOutputFilterSensitiveLog: () => SelectObjectContentOutputFilterSensitiveLog,
      SelectObjectContentRequestFilterSensitiveLog: () => SelectObjectContentRequestFilterSensitiveLog,
      ServerSideEncryption: () => ServerSideEncryption,
      ServerSideEncryptionByDefaultFilterSensitiveLog: () => ServerSideEncryptionByDefaultFilterSensitiveLog,
      ServerSideEncryptionConfigurationFilterSensitiveLog: () => ServerSideEncryptionConfigurationFilterSensitiveLog,
      ServerSideEncryptionRuleFilterSensitiveLog: () => ServerSideEncryptionRuleFilterSensitiveLog,
      SessionCredentialsFilterSensitiveLog: () => SessionCredentialsFilterSensitiveLog,
      SessionMode: () => SessionMode,
      SseKmsEncryptedObjectsStatus: () => SseKmsEncryptedObjectsStatus,
      StorageClass: () => StorageClass,
      StorageClassAnalysisSchemaVersion: () => StorageClassAnalysisSchemaVersion,
      TaggingDirective: () => TaggingDirective,
      Tier: () => Tier,
      TooManyParts: () => TooManyParts,
      TransitionDefaultMinimumObjectSize: () => TransitionDefaultMinimumObjectSize,
      TransitionStorageClass: () => TransitionStorageClass,
      Type: () => Type,
      UploadPartCommand: () => UploadPartCommand,
      UploadPartCopyCommand: () => UploadPartCopyCommand,
      UploadPartCopyOutputFilterSensitiveLog: () => UploadPartCopyOutputFilterSensitiveLog,
      UploadPartCopyRequestFilterSensitiveLog: () => UploadPartCopyRequestFilterSensitiveLog,
      UploadPartOutputFilterSensitiveLog: () => UploadPartOutputFilterSensitiveLog,
      UploadPartRequestFilterSensitiveLog: () => UploadPartRequestFilterSensitiveLog,
      WriteGetObjectResponseCommand: () => WriteGetObjectResponseCommand,
      WriteGetObjectResponseRequestFilterSensitiveLog: () => WriteGetObjectResponseRequestFilterSensitiveLog,
      __Client: () => import_smithy_client4.Client,
      paginateListBuckets: () => paginateListBuckets,
      paginateListDirectoryBuckets: () => paginateListDirectoryBuckets,
      paginateListObjectsV2: () => paginateListObjectsV2,
      paginateListParts: () => paginateListParts,
      waitForBucketExists: () => waitForBucketExists,
      waitForBucketNotExists: () => waitForBucketNotExists,
      waitForObjectExists: () => waitForObjectExists,
      waitForObjectNotExists: () => waitForObjectNotExists,
      waitUntilBucketExists: () => waitUntilBucketExists,
      waitUntilBucketNotExists: () => waitUntilBucketNotExists,
      waitUntilObjectExists: () => waitUntilObjectExists,
      waitUntilObjectNotExists: () => waitUntilObjectNotExists
    });
    module.exports = __toCommonJS2(src_exports);
    var import_middleware_expect_continue = require_dist_cjs3();
    var import_middleware_flexible_checksums = require_dist_cjs23();
    var import_middleware_host_header = require_dist_cjs24();
    var import_middleware_logger = require_dist_cjs25();
    var import_middleware_recursion_detection = require_dist_cjs26();
    var import_middleware_sdk_s32 = require_dist_cjs29();
    var import_middleware_user_agent = require_dist_cjs32();
    var import_config_resolver = require_dist_cjs33();
    var import_core3 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var import_eventstream_serde_config_resolver = require_dist_cjs34();
    var import_middleware_content_length = require_dist_cjs35();
    var import_middleware_retry = require_dist_cjs38();
    var import_httpAuthSchemeProvider = require_httpAuthSchemeProvider();
    var import_middleware_sdk_s3 = require_dist_cjs29();
    var import_middleware_endpoint = require_dist_cjs44();
    var import_middleware_serde2 = require_dist_cjs5();
    var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
      return {
        ...options,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        forcePathStyle: options.forcePathStyle ?? false,
        useAccelerateEndpoint: options.useAccelerateEndpoint ?? false,
        useGlobalEndpoint: options.useGlobalEndpoint ?? false,
        disableMultiregionAccessPoints: options.disableMultiregionAccessPoints ?? false,
        defaultSigningName: "s3"
      };
    }, "resolveClientEndpointParameters");
    var commonParams = {
      ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
      UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
      DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
      Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
      DisableS3ExpressSessionAuth: { type: "clientContextParams", name: "disableS3ExpressSessionAuth" },
      UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
    var import_smithy_client4 = require_dist_cjs19();
    var _S3ServiceException = class _S3ServiceException2 extends import_smithy_client4.ServiceException {
      /**
       * @internal
       */
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _S3ServiceException2.prototype);
      }
    };
    __name(_S3ServiceException, "S3ServiceException");
    var S3ServiceException = _S3ServiceException;
    var RequestCharged = {
      requester: "requester"
    };
    var RequestPayer = {
      requester: "requester"
    };
    var _NoSuchUpload = class _NoSuchUpload2 extends S3ServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "NoSuchUpload",
          $fault: "client",
          ...opts
        });
        this.name = "NoSuchUpload";
        this.$fault = "client";
        Object.setPrototypeOf(this, _NoSuchUpload2.prototype);
      }
    };
    __name(_NoSuchUpload, "NoSuchUpload");
    var NoSuchUpload = _NoSuchUpload;
    var BucketAccelerateStatus = {
      Enabled: "Enabled",
      Suspended: "Suspended"
    };
    var Type = {
      AmazonCustomerByEmail: "AmazonCustomerByEmail",
      CanonicalUser: "CanonicalUser",
      Group: "Group"
    };
    var Permission = {
      FULL_CONTROL: "FULL_CONTROL",
      READ: "READ",
      READ_ACP: "READ_ACP",
      WRITE: "WRITE",
      WRITE_ACP: "WRITE_ACP"
    };
    var OwnerOverride = {
      Destination: "Destination"
    };
    var ServerSideEncryption = {
      AES256: "AES256",
      aws_kms: "aws:kms",
      aws_kms_dsse: "aws:kms:dsse"
    };
    var ObjectCannedACL = {
      authenticated_read: "authenticated-read",
      aws_exec_read: "aws-exec-read",
      bucket_owner_full_control: "bucket-owner-full-control",
      bucket_owner_read: "bucket-owner-read",
      private: "private",
      public_read: "public-read",
      public_read_write: "public-read-write"
    };
    var ChecksumAlgorithm = {
      CRC32: "CRC32",
      CRC32C: "CRC32C",
      SHA1: "SHA1",
      SHA256: "SHA256"
    };
    var MetadataDirective = {
      COPY: "COPY",
      REPLACE: "REPLACE"
    };
    var ObjectLockLegalHoldStatus = {
      OFF: "OFF",
      ON: "ON"
    };
    var ObjectLockMode = {
      COMPLIANCE: "COMPLIANCE",
      GOVERNANCE: "GOVERNANCE"
    };
    var StorageClass = {
      DEEP_ARCHIVE: "DEEP_ARCHIVE",
      EXPRESS_ONEZONE: "EXPRESS_ONEZONE",
      GLACIER: "GLACIER",
      GLACIER_IR: "GLACIER_IR",
      INTELLIGENT_TIERING: "INTELLIGENT_TIERING",
      ONEZONE_IA: "ONEZONE_IA",
      OUTPOSTS: "OUTPOSTS",
      REDUCED_REDUNDANCY: "REDUCED_REDUNDANCY",
      SNOW: "SNOW",
      STANDARD: "STANDARD",
      STANDARD_IA: "STANDARD_IA"
    };
    var TaggingDirective = {
      COPY: "COPY",
      REPLACE: "REPLACE"
    };
    var _ObjectNotInActiveTierError = class _ObjectNotInActiveTierError2 extends S3ServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ObjectNotInActiveTierError",
          $fault: "client",
          ...opts
        });
        this.name = "ObjectNotInActiveTierError";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ObjectNotInActiveTierError2.prototype);
      }
    };
    __name(_ObjectNotInActiveTierError, "ObjectNotInActiveTierError");
    var ObjectNotInActiveTierError = _ObjectNotInActiveTierError;
    var _BucketAlreadyExists = class _BucketAlreadyExists2 extends S3ServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "BucketAlreadyExists",
          $fault: "client",
          ...opts
        });
        this.name = "BucketAlreadyExists";
        this.$fault = "client";
        Object.setPrototypeOf(this, _BucketAlreadyExists2.prototype);
      }
    };
    __name(_BucketAlreadyExists, "BucketAlreadyExists");
    var BucketAlreadyExists = _BucketAlreadyExists;
    var _BucketAlreadyOwnedByYou = class _BucketAlreadyOwnedByYou2 extends S3ServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "BucketAlreadyOwnedByYou",
          $fault: "client",
          ...opts
        });
        this.name = "BucketAlreadyOwnedByYou";
        this.$fault = "client";
        Object.setPrototypeOf(this, _BucketAlreadyOwnedByYou2.prototype);
      }
    };
    __name(_BucketAlreadyOwnedByYou, "BucketAlreadyOwnedByYou");
    var BucketAlreadyOwnedByYou = _BucketAlreadyOwnedByYou;
    var BucketCannedACL = {
      authenticated_read: "authenticated-read",
      private: "private",
      public_read: "public-read",
      public_read_write: "public-read-write"
    };
    var DataRedundancy = {
      SingleAvailabilityZone: "SingleAvailabilityZone"
    };
    var BucketType = {
      Directory: "Directory"
    };
    var LocationType = {
      AvailabilityZone: "AvailabilityZone"
    };
    var BucketLocationConstraint = {
      EU: "EU",
      af_south_1: "af-south-1",
      ap_east_1: "ap-east-1",
      ap_northeast_1: "ap-northeast-1",
      ap_northeast_2: "ap-northeast-2",
      ap_northeast_3: "ap-northeast-3",
      ap_south_1: "ap-south-1",
      ap_south_2: "ap-south-2",
      ap_southeast_1: "ap-southeast-1",
      ap_southeast_2: "ap-southeast-2",
      ap_southeast_3: "ap-southeast-3",
      ca_central_1: "ca-central-1",
      cn_north_1: "cn-north-1",
      cn_northwest_1: "cn-northwest-1",
      eu_central_1: "eu-central-1",
      eu_north_1: "eu-north-1",
      eu_south_1: "eu-south-1",
      eu_south_2: "eu-south-2",
      eu_west_1: "eu-west-1",
      eu_west_2: "eu-west-2",
      eu_west_3: "eu-west-3",
      me_south_1: "me-south-1",
      sa_east_1: "sa-east-1",
      us_east_2: "us-east-2",
      us_gov_east_1: "us-gov-east-1",
      us_gov_west_1: "us-gov-west-1",
      us_west_1: "us-west-1",
      us_west_2: "us-west-2"
    };
    var ObjectOwnership = {
      BucketOwnerEnforced: "BucketOwnerEnforced",
      BucketOwnerPreferred: "BucketOwnerPreferred",
      ObjectWriter: "ObjectWriter"
    };
    var SessionMode = {
      ReadOnly: "ReadOnly",
      ReadWrite: "ReadWrite"
    };
    var _NoSuchBucket = class _NoSuchBucket2 extends S3ServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "NoSuchBucket",
          $fault: "client",
          ...opts
        });
        this.name = "NoSuchBucket";
        this.$fault = "client";
        Object.setPrototypeOf(this, _NoSuchBucket2.prototype);
      }
    };
    __name(_NoSuchBucket, "NoSuchBucket");
    var NoSuchBucket = _NoSuchBucket;
    var AnalyticsFilter;
    ((AnalyticsFilter2) => {
      AnalyticsFilter2.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.Prefix !== void 0)
          return visitor.Prefix(value.Prefix);
        if (value.Tag !== void 0)
          return visitor.Tag(value.Tag);
        if (value.And !== void 0)
          return visitor.And(value.And);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(AnalyticsFilter || (AnalyticsFilter = {}));
    var AnalyticsS3ExportFileFormat = {
      CSV: "CSV"
    };
    var StorageClassAnalysisSchemaVersion = {
      V_1: "V_1"
    };
    var IntelligentTieringStatus = {
      Disabled: "Disabled",
      Enabled: "Enabled"
    };
    var IntelligentTieringAccessTier = {
      ARCHIVE_ACCESS: "ARCHIVE_ACCESS",
      DEEP_ARCHIVE_ACCESS: "DEEP_ARCHIVE_ACCESS"
    };
    var InventoryFormat = {
      CSV: "CSV",
      ORC: "ORC",
      Parquet: "Parquet"
    };
    var InventoryIncludedObjectVersions = {
      All: "All",
      Current: "Current"
    };
    var InventoryOptionalField = {
      BucketKeyStatus: "BucketKeyStatus",
      ChecksumAlgorithm: "ChecksumAlgorithm",
      ETag: "ETag",
      EncryptionStatus: "EncryptionStatus",
      IntelligentTieringAccessTier: "IntelligentTieringAccessTier",
      IsMultipartUploaded: "IsMultipartUploaded",
      LastModifiedDate: "LastModifiedDate",
      ObjectAccessControlList: "ObjectAccessControlList",
      ObjectLockLegalHoldStatus: "ObjectLockLegalHoldStatus",
      ObjectLockMode: "ObjectLockMode",
      ObjectLockRetainUntilDate: "ObjectLockRetainUntilDate",
      ObjectOwner: "ObjectOwner",
      ReplicationStatus: "ReplicationStatus",
      Size: "Size",
      StorageClass: "StorageClass"
    };
    var InventoryFrequency = {
      Daily: "Daily",
      Weekly: "Weekly"
    };
    var TransitionStorageClass = {
      DEEP_ARCHIVE: "DEEP_ARCHIVE",
      GLACIER: "GLACIER",
      GLACIER_IR: "GLACIER_IR",
      INTELLIGENT_TIERING: "INTELLIGENT_TIERING",
      ONEZONE_IA: "ONEZONE_IA",
      STANDARD_IA: "STANDARD_IA"
    };
    var ExpirationStatus = {
      Disabled: "Disabled",
      Enabled: "Enabled"
    };
    var TransitionDefaultMinimumObjectSize = {
      all_storage_classes_128K: "all_storage_classes_128K",
      varies_by_storage_class: "varies_by_storage_class"
    };
    var BucketLogsPermission = {
      FULL_CONTROL: "FULL_CONTROL",
      READ: "READ",
      WRITE: "WRITE"
    };
    var PartitionDateSource = {
      DeliveryTime: "DeliveryTime",
      EventTime: "EventTime"
    };
    var MetricsFilter;
    ((MetricsFilter2) => {
      MetricsFilter2.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.Prefix !== void 0)
          return visitor.Prefix(value.Prefix);
        if (value.Tag !== void 0)
          return visitor.Tag(value.Tag);
        if (value.AccessPointArn !== void 0)
          return visitor.AccessPointArn(value.AccessPointArn);
        if (value.And !== void 0)
          return visitor.And(value.And);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(MetricsFilter || (MetricsFilter = {}));
    var Event = {
      s3_IntelligentTiering: "s3:IntelligentTiering",
      s3_LifecycleExpiration_: "s3:LifecycleExpiration:*",
      s3_LifecycleExpiration_Delete: "s3:LifecycleExpiration:Delete",
      s3_LifecycleExpiration_DeleteMarkerCreated: "s3:LifecycleExpiration:DeleteMarkerCreated",
      s3_LifecycleTransition: "s3:LifecycleTransition",
      s3_ObjectAcl_Put: "s3:ObjectAcl:Put",
      s3_ObjectCreated_: "s3:ObjectCreated:*",
      s3_ObjectCreated_CompleteMultipartUpload: "s3:ObjectCreated:CompleteMultipartUpload",
      s3_ObjectCreated_Copy: "s3:ObjectCreated:Copy",
      s3_ObjectCreated_Post: "s3:ObjectCreated:Post",
      s3_ObjectCreated_Put: "s3:ObjectCreated:Put",
      s3_ObjectRemoved_: "s3:ObjectRemoved:*",
      s3_ObjectRemoved_Delete: "s3:ObjectRemoved:Delete",
      s3_ObjectRemoved_DeleteMarkerCreated: "s3:ObjectRemoved:DeleteMarkerCreated",
      s3_ObjectRestore_: "s3:ObjectRestore:*",
      s3_ObjectRestore_Completed: "s3:ObjectRestore:Completed",
      s3_ObjectRestore_Delete: "s3:ObjectRestore:Delete",
      s3_ObjectRestore_Post: "s3:ObjectRestore:Post",
      s3_ObjectTagging_: "s3:ObjectTagging:*",
      s3_ObjectTagging_Delete: "s3:ObjectTagging:Delete",
      s3_ObjectTagging_Put: "s3:ObjectTagging:Put",
      s3_ReducedRedundancyLostObject: "s3:ReducedRedundancyLostObject",
      s3_Replication_: "s3:Replication:*",
      s3_Replication_OperationFailedReplication: "s3:Replication:OperationFailedReplication",
      s3_Replication_OperationMissedThreshold: "s3:Replication:OperationMissedThreshold",
      s3_Replication_OperationNotTracked: "s3:Replication:OperationNotTracked",
      s3_Replication_OperationReplicatedAfterThreshold: "s3:Replication:OperationReplicatedAfterThreshold"
    };
    var FilterRuleName = {
      prefix: "prefix",
      suffix: "suffix"
    };
    var DeleteMarkerReplicationStatus = {
      Disabled: "Disabled",
      Enabled: "Enabled"
    };
    var MetricsStatus = {
      Disabled: "Disabled",
      Enabled: "Enabled"
    };
    var ReplicationTimeStatus = {
      Disabled: "Disabled",
      Enabled: "Enabled"
    };
    var ExistingObjectReplicationStatus = {
      Disabled: "Disabled",
      Enabled: "Enabled"
    };
    var ReplicaModificationsStatus = {
      Disabled: "Disabled",
      Enabled: "Enabled"
    };
    var SseKmsEncryptedObjectsStatus = {
      Disabled: "Disabled",
      Enabled: "Enabled"
    };
    var ReplicationRuleStatus = {
      Disabled: "Disabled",
      Enabled: "Enabled"
    };
    var Payer = {
      BucketOwner: "BucketOwner",
      Requester: "Requester"
    };
    var MFADeleteStatus = {
      Disabled: "Disabled",
      Enabled: "Enabled"
    };
    var BucketVersioningStatus = {
      Enabled: "Enabled",
      Suspended: "Suspended"
    };
    var Protocol = {
      http: "http",
      https: "https"
    };
    var ReplicationStatus = {
      COMPLETE: "COMPLETE",
      COMPLETED: "COMPLETED",
      FAILED: "FAILED",
      PENDING: "PENDING",
      REPLICA: "REPLICA"
    };
    var ChecksumMode = {
      ENABLED: "ENABLED"
    };
    var _InvalidObjectState = class _InvalidObjectState2 extends S3ServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidObjectState",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidObjectState";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidObjectState2.prototype);
        this.StorageClass = opts.StorageClass;
        this.AccessTier = opts.AccessTier;
      }
    };
    __name(_InvalidObjectState, "InvalidObjectState");
    var InvalidObjectState = _InvalidObjectState;
    var _NoSuchKey = class _NoSuchKey2 extends S3ServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "NoSuchKey",
          $fault: "client",
          ...opts
        });
        this.name = "NoSuchKey";
        this.$fault = "client";
        Object.setPrototypeOf(this, _NoSuchKey2.prototype);
      }
    };
    __name(_NoSuchKey, "NoSuchKey");
    var NoSuchKey = _NoSuchKey;
    var ObjectAttributes = {
      CHECKSUM: "Checksum",
      ETAG: "ETag",
      OBJECT_PARTS: "ObjectParts",
      OBJECT_SIZE: "ObjectSize",
      STORAGE_CLASS: "StorageClass"
    };
    var ObjectLockEnabled = {
      Enabled: "Enabled"
    };
    var ObjectLockRetentionMode = {
      COMPLIANCE: "COMPLIANCE",
      GOVERNANCE: "GOVERNANCE"
    };
    var _NotFound = class _NotFound2 extends S3ServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "NotFound",
          $fault: "client",
          ...opts
        });
        this.name = "NotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, _NotFound2.prototype);
      }
    };
    __name(_NotFound, "NotFound");
    var NotFound = _NotFound;
    var ArchiveStatus = {
      ARCHIVE_ACCESS: "ARCHIVE_ACCESS",
      DEEP_ARCHIVE_ACCESS: "DEEP_ARCHIVE_ACCESS"
    };
    var EncodingType = {
      url: "url"
    };
    var ObjectStorageClass = {
      DEEP_ARCHIVE: "DEEP_ARCHIVE",
      EXPRESS_ONEZONE: "EXPRESS_ONEZONE",
      GLACIER: "GLACIER",
      GLACIER_IR: "GLACIER_IR",
      INTELLIGENT_TIERING: "INTELLIGENT_TIERING",
      ONEZONE_IA: "ONEZONE_IA",
      OUTPOSTS: "OUTPOSTS",
      REDUCED_REDUNDANCY: "REDUCED_REDUNDANCY",
      SNOW: "SNOW",
      STANDARD: "STANDARD",
      STANDARD_IA: "STANDARD_IA"
    };
    var OptionalObjectAttributes = {
      RESTORE_STATUS: "RestoreStatus"
    };
    var ObjectVersionStorageClass = {
      STANDARD: "STANDARD"
    };
    var CompleteMultipartUploadOutputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: import_smithy_client4.SENSITIVE_STRING }
    }), "CompleteMultipartUploadOutputFilterSensitiveLog");
    var CompleteMultipartUploadRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: import_smithy_client4.SENSITIVE_STRING }
    }), "CompleteMultipartUploadRequestFilterSensitiveLog");
    var CopyObjectOutputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: import_smithy_client4.SENSITIVE_STRING },
      ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: import_smithy_client4.SENSITIVE_STRING }
    }), "CopyObjectOutputFilterSensitiveLog");
    var CopyObjectRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: import_smithy_client4.SENSITIVE_STRING },
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: import_smithy_client4.SENSITIVE_STRING },
      ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: import_smithy_client4.SENSITIVE_STRING },
      ...obj.CopySourceSSECustomerKey && { CopySourceSSECustomerKey: import_smithy_client4.SENSITIVE_STRING }
    }), "CopyObjectRequestFilterSensitiveLog");
    var CreateMultipartUploadOutputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: import_smithy_client4.SENSITIVE_STRING },
      ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: import_smithy_client4.SENSITIVE_STRING }
    }), "CreateMultipartUploadOutputFilterSensitiveLog");
    var CreateMultipartUploadRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: import_smithy_client4.SENSITIVE_STRING },
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: import_smithy_client4.SENSITIVE_STRING },
      ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: import_smithy_client4.SENSITIVE_STRING }
    }), "CreateMultipartUploadRequestFilterSensitiveLog");
    var SessionCredentialsFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.SecretAccessKey && { SecretAccessKey: import_smithy_client4.SENSITIVE_STRING },
      ...obj.SessionToken && { SessionToken: import_smithy_client4.SENSITIVE_STRING }
    }), "SessionCredentialsFilterSensitiveLog");
    var CreateSessionOutputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: import_smithy_client4.SENSITIVE_STRING },
      ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: import_smithy_client4.SENSITIVE_STRING },
      ...obj.Credentials && { Credentials: SessionCredentialsFilterSensitiveLog(obj.Credentials) }
    }), "CreateSessionOutputFilterSensitiveLog");
    var CreateSessionRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: import_smithy_client4.SENSITIVE_STRING },
      ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: import_smithy_client4.SENSITIVE_STRING }
    }), "CreateSessionRequestFilterSensitiveLog");
    var ServerSideEncryptionByDefaultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.KMSMasterKeyID && { KMSMasterKeyID: import_smithy_client4.SENSITIVE_STRING }
    }), "ServerSideEncryptionByDefaultFilterSensitiveLog");
    var ServerSideEncryptionRuleFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.ApplyServerSideEncryptionByDefault && {
        ApplyServerSideEncryptionByDefault: ServerSideEncryptionByDefaultFilterSensitiveLog(
          obj.ApplyServerSideEncryptionByDefault
        )
      }
    }), "ServerSideEncryptionRuleFilterSensitiveLog");
    var ServerSideEncryptionConfigurationFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Rules && { Rules: obj.Rules.map((item) => ServerSideEncryptionRuleFilterSensitiveLog(item)) }
    }), "ServerSideEncryptionConfigurationFilterSensitiveLog");
    var GetBucketEncryptionOutputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.ServerSideEncryptionConfiguration && {
        ServerSideEncryptionConfiguration: ServerSideEncryptionConfigurationFilterSensitiveLog(
          obj.ServerSideEncryptionConfiguration
        )
      }
    }), "GetBucketEncryptionOutputFilterSensitiveLog");
    var SSEKMSFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.KeyId && { KeyId: import_smithy_client4.SENSITIVE_STRING }
    }), "SSEKMSFilterSensitiveLog");
    var InventoryEncryptionFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.SSEKMS && { SSEKMS: SSEKMSFilterSensitiveLog(obj.SSEKMS) }
    }), "InventoryEncryptionFilterSensitiveLog");
    var InventoryS3BucketDestinationFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Encryption && { Encryption: InventoryEncryptionFilterSensitiveLog(obj.Encryption) }
    }), "InventoryS3BucketDestinationFilterSensitiveLog");
    var InventoryDestinationFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.S3BucketDestination && {
        S3BucketDestination: InventoryS3BucketDestinationFilterSensitiveLog(obj.S3BucketDestination)
      }
    }), "InventoryDestinationFilterSensitiveLog");
    var InventoryConfigurationFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Destination && { Destination: InventoryDestinationFilterSensitiveLog(obj.Destination) }
    }), "InventoryConfigurationFilterSensitiveLog");
    var GetBucketInventoryConfigurationOutputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.InventoryConfiguration && {
        InventoryConfiguration: InventoryConfigurationFilterSensitiveLog(obj.InventoryConfiguration)
      }
    }), "GetBucketInventoryConfigurationOutputFilterSensitiveLog");
    var GetObjectOutputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: import_smithy_client4.SENSITIVE_STRING }
    }), "GetObjectOutputFilterSensitiveLog");
    var GetObjectRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: import_smithy_client4.SENSITIVE_STRING }
    }), "GetObjectRequestFilterSensitiveLog");
    var GetObjectAttributesRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: import_smithy_client4.SENSITIVE_STRING }
    }), "GetObjectAttributesRequestFilterSensitiveLog");
    var GetObjectTorrentOutputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj
    }), "GetObjectTorrentOutputFilterSensitiveLog");
    var HeadObjectOutputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: import_smithy_client4.SENSITIVE_STRING }
    }), "HeadObjectOutputFilterSensitiveLog");
    var HeadObjectRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: import_smithy_client4.SENSITIVE_STRING }
    }), "HeadObjectRequestFilterSensitiveLog");
    var ListBucketInventoryConfigurationsOutputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.InventoryConfigurationList && {
        InventoryConfigurationList: obj.InventoryConfigurationList.map(
          (item) => InventoryConfigurationFilterSensitiveLog(item)
        )
      }
    }), "ListBucketInventoryConfigurationsOutputFilterSensitiveLog");
    var ListPartsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: import_smithy_client4.SENSITIVE_STRING }
    }), "ListPartsRequestFilterSensitiveLog");
    var PutBucketEncryptionRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.ServerSideEncryptionConfiguration && {
        ServerSideEncryptionConfiguration: ServerSideEncryptionConfigurationFilterSensitiveLog(
          obj.ServerSideEncryptionConfiguration
        )
      }
    }), "PutBucketEncryptionRequestFilterSensitiveLog");
    var PutBucketInventoryConfigurationRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.InventoryConfiguration && {
        InventoryConfiguration: InventoryConfigurationFilterSensitiveLog(obj.InventoryConfiguration)
      }
    }), "PutBucketInventoryConfigurationRequestFilterSensitiveLog");
    var import_core4 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var import_xml_builder = require_dist_cjs45();
    var import_core22 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var import_protocol_http8 = require_dist_cjs2();
    var MFADelete = {
      Disabled: "Disabled",
      Enabled: "Enabled"
    };
    var _EncryptionTypeMismatch = class _EncryptionTypeMismatch2 extends S3ServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "EncryptionTypeMismatch",
          $fault: "client",
          ...opts
        });
        this.name = "EncryptionTypeMismatch";
        this.$fault = "client";
        Object.setPrototypeOf(this, _EncryptionTypeMismatch2.prototype);
      }
    };
    __name(_EncryptionTypeMismatch, "EncryptionTypeMismatch");
    var EncryptionTypeMismatch = _EncryptionTypeMismatch;
    var _InvalidRequest = class _InvalidRequest2 extends S3ServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidRequest",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRequest";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidRequest2.prototype);
      }
    };
    __name(_InvalidRequest, "InvalidRequest");
    var InvalidRequest = _InvalidRequest;
    var _InvalidWriteOffset = class _InvalidWriteOffset2 extends S3ServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidWriteOffset",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidWriteOffset";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidWriteOffset2.prototype);
      }
    };
    __name(_InvalidWriteOffset, "InvalidWriteOffset");
    var InvalidWriteOffset = _InvalidWriteOffset;
    var _TooManyParts = class _TooManyParts2 extends S3ServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "TooManyParts",
          $fault: "client",
          ...opts
        });
        this.name = "TooManyParts";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TooManyParts2.prototype);
      }
    };
    __name(_TooManyParts, "TooManyParts");
    var TooManyParts = _TooManyParts;
    var _ObjectAlreadyInActiveTierError = class _ObjectAlreadyInActiveTierError2 extends S3ServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ObjectAlreadyInActiveTierError",
          $fault: "client",
          ...opts
        });
        this.name = "ObjectAlreadyInActiveTierError";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ObjectAlreadyInActiveTierError2.prototype);
      }
    };
    __name(_ObjectAlreadyInActiveTierError, "ObjectAlreadyInActiveTierError");
    var ObjectAlreadyInActiveTierError = _ObjectAlreadyInActiveTierError;
    var Tier = {
      Bulk: "Bulk",
      Expedited: "Expedited",
      Standard: "Standard"
    };
    var ExpressionType = {
      SQL: "SQL"
    };
    var CompressionType = {
      BZIP2: "BZIP2",
      GZIP: "GZIP",
      NONE: "NONE"
    };
    var FileHeaderInfo = {
      IGNORE: "IGNORE",
      NONE: "NONE",
      USE: "USE"
    };
    var JSONType = {
      DOCUMENT: "DOCUMENT",
      LINES: "LINES"
    };
    var QuoteFields = {
      ALWAYS: "ALWAYS",
      ASNEEDED: "ASNEEDED"
    };
    var RestoreRequestType = {
      SELECT: "SELECT"
    };
    var SelectObjectContentEventStream;
    ((SelectObjectContentEventStream3) => {
      SelectObjectContentEventStream3.visit = /* @__PURE__ */ __name((value, visitor) => {
        if (value.Records !== void 0)
          return visitor.Records(value.Records);
        if (value.Stats !== void 0)
          return visitor.Stats(value.Stats);
        if (value.Progress !== void 0)
          return visitor.Progress(value.Progress);
        if (value.Cont !== void 0)
          return visitor.Cont(value.Cont);
        if (value.End !== void 0)
          return visitor.End(value.End);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      }, "visit");
    })(SelectObjectContentEventStream || (SelectObjectContentEventStream = {}));
    var PutObjectOutputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: import_smithy_client4.SENSITIVE_STRING },
      ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: import_smithy_client4.SENSITIVE_STRING }
    }), "PutObjectOutputFilterSensitiveLog");
    var PutObjectRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: import_smithy_client4.SENSITIVE_STRING },
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: import_smithy_client4.SENSITIVE_STRING },
      ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: import_smithy_client4.SENSITIVE_STRING }
    }), "PutObjectRequestFilterSensitiveLog");
    var EncryptionFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.KMSKeyId && { KMSKeyId: import_smithy_client4.SENSITIVE_STRING }
    }), "EncryptionFilterSensitiveLog");
    var S3LocationFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Encryption && { Encryption: EncryptionFilterSensitiveLog(obj.Encryption) }
    }), "S3LocationFilterSensitiveLog");
    var OutputLocationFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.S3 && { S3: S3LocationFilterSensitiveLog(obj.S3) }
    }), "OutputLocationFilterSensitiveLog");
    var RestoreRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.OutputLocation && { OutputLocation: OutputLocationFilterSensitiveLog(obj.OutputLocation) }
    }), "RestoreRequestFilterSensitiveLog");
    var RestoreObjectRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.RestoreRequest && { RestoreRequest: RestoreRequestFilterSensitiveLog(obj.RestoreRequest) }
    }), "RestoreObjectRequestFilterSensitiveLog");
    var SelectObjectContentEventStreamFilterSensitiveLog = /* @__PURE__ */ __name((obj) => {
      if (obj.Records !== void 0)
        return { Records: obj.Records };
      if (obj.Stats !== void 0)
        return { Stats: obj.Stats };
      if (obj.Progress !== void 0)
        return { Progress: obj.Progress };
      if (obj.Cont !== void 0)
        return { Cont: obj.Cont };
      if (obj.End !== void 0)
        return { End: obj.End };
      if (obj.$unknown !== void 0)
        return { [obj.$unknown[0]]: "UNKNOWN" };
    }, "SelectObjectContentEventStreamFilterSensitiveLog");
    var SelectObjectContentOutputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.Payload && { Payload: "STREAMING_CONTENT" }
    }), "SelectObjectContentOutputFilterSensitiveLog");
    var SelectObjectContentRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: import_smithy_client4.SENSITIVE_STRING }
    }), "SelectObjectContentRequestFilterSensitiveLog");
    var UploadPartOutputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: import_smithy_client4.SENSITIVE_STRING }
    }), "UploadPartOutputFilterSensitiveLog");
    var UploadPartRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: import_smithy_client4.SENSITIVE_STRING }
    }), "UploadPartRequestFilterSensitiveLog");
    var UploadPartCopyOutputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: import_smithy_client4.SENSITIVE_STRING }
    }), "UploadPartCopyOutputFilterSensitiveLog");
    var UploadPartCopyRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: import_smithy_client4.SENSITIVE_STRING },
      ...obj.CopySourceSSECustomerKey && { CopySourceSSECustomerKey: import_smithy_client4.SENSITIVE_STRING }
    }), "UploadPartCopyRequestFilterSensitiveLog");
    var WriteGetObjectResponseRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: import_smithy_client4.SENSITIVE_STRING }
    }), "WriteGetObjectResponseRequestFilterSensitiveLog");
    var se_AbortMultipartUploadCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO],
        [_xaimit]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_IMIT]), () => (0, import_smithy_client4.dateToUtcString)(input[_IMIT]).toString()]
      });
      b.bp("/{Key+}");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b.p("Key", () => input.Key, "{Key+}", true);
      const query = (0, import_smithy_client4.map)({
        [_xi]: [, "AbortMultipartUpload"],
        [_uI]: [, (0, import_smithy_client4.expectNonNull)(input[_UI], `UploadId`)]
      });
      let body;
      b.m("DELETE").h(headers).q(query).b(body);
      return b.build();
    }, "se_AbortMultipartUploadCommand");
    var se_CompleteMultipartUploadCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xacc]: input[_CCRC],
        [_xacc_]: input[_CCRCC],
        [_xacs]: input[_CSHA],
        [_xacs_]: input[_CSHAh],
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO],
        [_inm]: input[_INM],
        [_xasseca]: input[_SSECA],
        [_xasseck]: input[_SSECK],
        [_xasseckm]: input[_SSECKMD]
      });
      b.bp("/{Key+}");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b.p("Key", () => input.Key, "{Key+}", true);
      const query = (0, import_smithy_client4.map)({
        [_uI]: [, (0, import_smithy_client4.expectNonNull)(input[_UI], `UploadId`)]
      });
      let body;
      let contents;
      if (input.MultipartUpload !== void 0) {
        contents = se_CompletedMultipartUpload(input.MultipartUpload, context);
        contents = contents.n("CompleteMultipartUpload");
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b.m("POST").h(headers).q(query).b(body);
      return b.build();
    }, "se_CompleteMultipartUploadCommand");
    var se_CopyObjectCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaa]: input[_ACL],
        [_cc]: input[_CC],
        [_xaca]: input[_CA],
        [_cd]: input[_CD],
        [_ce]: input[_CE],
        [_cl]: input[_CL],
        [_ct]: input[_CT],
        [_xacs__]: input[_CS],
        [_xacsim]: input[_CSIM],
        [_xacsims]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_CSIMS]), () => (0, import_smithy_client4.dateToUtcString)(input[_CSIMS]).toString()],
        [_xacsinm]: input[_CSINM],
        [_xacsius]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_CSIUS]), () => (0, import_smithy_client4.dateToUtcString)(input[_CSIUS]).toString()],
        [_e]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_E]), () => (0, import_smithy_client4.dateToUtcString)(input[_E]).toString()],
        [_xagfc]: input[_GFC],
        [_xagr]: input[_GR],
        [_xagra]: input[_GRACP],
        [_xagwa]: input[_GWACP],
        [_xamd]: input[_MD],
        [_xatd]: input[_TD],
        [_xasse]: input[_SSE],
        [_xasc]: input[_SC],
        [_xawrl]: input[_WRL],
        [_xasseca]: input[_SSECA],
        [_xasseck]: input[_SSECK],
        [_xasseckm]: input[_SSECKMD],
        [_xasseakki]: input[_SSEKMSKI],
        [_xassec]: input[_SSEKMSEC],
        [_xassebke]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_BKE]), () => input[_BKE].toString()],
        [_xacssseca]: input[_CSSSECA],
        [_xacssseck]: input[_CSSSECK],
        [_xacssseckm]: input[_CSSSECKMD],
        [_xarp]: input[_RP],
        [_xat]: input[_T],
        [_xaolm]: input[_OLM],
        [_xaolrud]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_OLRUD]), () => (0, import_smithy_client4.serializeDateTime)(input[_OLRUD]).toString()],
        [_xaollh]: input[_OLLHS],
        [_xaebo]: input[_EBO],
        [_xasebo]: input[_ESBO],
        ...input.Metadata !== void 0 && Object.keys(input.Metadata).reduce((acc, suffix) => {
          acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];
          return acc;
        }, {})
      });
      b.bp("/{Key+}");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b.p("Key", () => input.Key, "{Key+}", true);
      const query = (0, import_smithy_client4.map)({
        [_xi]: [, "CopyObject"]
      });
      let body;
      b.m("PUT").h(headers).q(query).b(body);
      return b.build();
    }, "se_CopyObjectCommand");
    var se_CreateBucketCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xaa]: input[_ACL],
        [_xagfc]: input[_GFC],
        [_xagr]: input[_GR],
        [_xagra]: input[_GRACP],
        [_xagw]: input[_GW],
        [_xagwa]: input[_GWACP],
        [_xabole]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_OLEFB]), () => input[_OLEFB].toString()],
        [_xaoo]: input[_OO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      let body;
      let contents;
      if (input.CreateBucketConfiguration !== void 0) {
        contents = se_CreateBucketConfiguration(input.CreateBucketConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b.m("PUT").h(headers).b(body);
      return b.build();
    }, "se_CreateBucketCommand");
    var se_CreateMultipartUploadCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaa]: input[_ACL],
        [_cc]: input[_CC],
        [_cd]: input[_CD],
        [_ce]: input[_CE],
        [_cl]: input[_CL],
        [_ct]: input[_CT],
        [_e]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_E]), () => (0, import_smithy_client4.dateToUtcString)(input[_E]).toString()],
        [_xagfc]: input[_GFC],
        [_xagr]: input[_GR],
        [_xagra]: input[_GRACP],
        [_xagwa]: input[_GWACP],
        [_xasse]: input[_SSE],
        [_xasc]: input[_SC],
        [_xawrl]: input[_WRL],
        [_xasseca]: input[_SSECA],
        [_xasseck]: input[_SSECK],
        [_xasseckm]: input[_SSECKMD],
        [_xasseakki]: input[_SSEKMSKI],
        [_xassec]: input[_SSEKMSEC],
        [_xassebke]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_BKE]), () => input[_BKE].toString()],
        [_xarp]: input[_RP],
        [_xat]: input[_T],
        [_xaolm]: input[_OLM],
        [_xaolrud]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_OLRUD]), () => (0, import_smithy_client4.serializeDateTime)(input[_OLRUD]).toString()],
        [_xaollh]: input[_OLLHS],
        [_xaebo]: input[_EBO],
        [_xaca]: input[_CA],
        ...input.Metadata !== void 0 && Object.keys(input.Metadata).reduce((acc, suffix) => {
          acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];
          return acc;
        }, {})
      });
      b.bp("/{Key+}");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b.p("Key", () => input.Key, "{Key+}", true);
      const query = (0, import_smithy_client4.map)({
        [_u]: [, ""]
      });
      let body;
      b.m("POST").h(headers).q(query).b(body);
      return b.build();
    }, "se_CreateMultipartUploadCommand");
    var se_CreateSessionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xacsm]: input[_SM],
        [_xasse]: input[_SSE],
        [_xasseakki]: input[_SSEKMSKI],
        [_xassec]: input[_SSEKMSEC],
        [_xassebke]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_BKE]), () => input[_BKE].toString()]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_s]: [, ""]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_CreateSessionCommand");
    var se_DeleteBucketCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      let body;
      b.m("DELETE").h(headers).b(body);
      return b.build();
    }, "se_DeleteBucketCommand");
    var se_DeleteBucketAnalyticsConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_a]: [, ""],
        [_i]: [, (0, import_smithy_client4.expectNonNull)(input[_I], `Id`)]
      });
      let body;
      b.m("DELETE").h(headers).q(query).b(body);
      return b.build();
    }, "se_DeleteBucketAnalyticsConfigurationCommand");
    var se_DeleteBucketCorsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_c]: [, ""]
      });
      let body;
      b.m("DELETE").h(headers).q(query).b(body);
      return b.build();
    }, "se_DeleteBucketCorsCommand");
    var se_DeleteBucketEncryptionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_en]: [, ""]
      });
      let body;
      b.m("DELETE").h(headers).q(query).b(body);
      return b.build();
    }, "se_DeleteBucketEncryptionCommand");
    var se_DeleteBucketIntelligentTieringConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = {};
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_it]: [, ""],
        [_i]: [, (0, import_smithy_client4.expectNonNull)(input[_I], `Id`)]
      });
      let body;
      b.m("DELETE").h(headers).q(query).b(body);
      return b.build();
    }, "se_DeleteBucketIntelligentTieringConfigurationCommand");
    var se_DeleteBucketInventoryConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_in]: [, ""],
        [_i]: [, (0, import_smithy_client4.expectNonNull)(input[_I], `Id`)]
      });
      let body;
      b.m("DELETE").h(headers).q(query).b(body);
      return b.build();
    }, "se_DeleteBucketInventoryConfigurationCommand");
    var se_DeleteBucketLifecycleCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_l]: [, ""]
      });
      let body;
      b.m("DELETE").h(headers).q(query).b(body);
      return b.build();
    }, "se_DeleteBucketLifecycleCommand");
    var se_DeleteBucketMetricsConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_m]: [, ""],
        [_i]: [, (0, import_smithy_client4.expectNonNull)(input[_I], `Id`)]
      });
      let body;
      b.m("DELETE").h(headers).q(query).b(body);
      return b.build();
    }, "se_DeleteBucketMetricsConfigurationCommand");
    var se_DeleteBucketOwnershipControlsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_oC]: [, ""]
      });
      let body;
      b.m("DELETE").h(headers).q(query).b(body);
      return b.build();
    }, "se_DeleteBucketOwnershipControlsCommand");
    var se_DeleteBucketPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_p]: [, ""]
      });
      let body;
      b.m("DELETE").h(headers).q(query).b(body);
      return b.build();
    }, "se_DeleteBucketPolicyCommand");
    var se_DeleteBucketReplicationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_r]: [, ""]
      });
      let body;
      b.m("DELETE").h(headers).q(query).b(body);
      return b.build();
    }, "se_DeleteBucketReplicationCommand");
    var se_DeleteBucketTaggingCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_t]: [, ""]
      });
      let body;
      b.m("DELETE").h(headers).q(query).b(body);
      return b.build();
    }, "se_DeleteBucketTaggingCommand");
    var se_DeleteBucketWebsiteCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_w]: [, ""]
      });
      let body;
      b.m("DELETE").h(headers).q(query).b(body);
      return b.build();
    }, "se_DeleteBucketWebsiteCommand");
    var se_DeleteObjectCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xam]: input[_MFA],
        [_xarp]: input[_RP],
        [_xabgr]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_BGR]), () => input[_BGR].toString()],
        [_xaebo]: input[_EBO],
        [_im]: input[_IM],
        [_xaimlmt]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_IMLMT]), () => (0, import_smithy_client4.dateToUtcString)(input[_IMLMT]).toString()],
        [_xaims]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_IMS]), () => input[_IMS].toString()]
      });
      b.bp("/{Key+}");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b.p("Key", () => input.Key, "{Key+}", true);
      const query = (0, import_smithy_client4.map)({
        [_xi]: [, "DeleteObject"],
        [_vI]: [, input[_VI]]
      });
      let body;
      b.m("DELETE").h(headers).q(query).b(body);
      return b.build();
    }, "se_DeleteObjectCommand");
    var se_DeleteObjectsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xam]: input[_MFA],
        [_xarp]: input[_RP],
        [_xabgr]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_BGR]), () => input[_BGR].toString()],
        [_xaebo]: input[_EBO],
        [_xasca]: input[_CA]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_d]: [, ""]
      });
      let body;
      let contents;
      if (input.Delete !== void 0) {
        contents = se_Delete(input.Delete, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b.m("POST").h(headers).q(query).b(body);
      return b.build();
    }, "se_DeleteObjectsCommand");
    var se_DeleteObjectTaggingCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b.bp("/{Key+}");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b.p("Key", () => input.Key, "{Key+}", true);
      const query = (0, import_smithy_client4.map)({
        [_t]: [, ""],
        [_vI]: [, input[_VI]]
      });
      let body;
      b.m("DELETE").h(headers).q(query).b(body);
      return b.build();
    }, "se_DeleteObjectTaggingCommand");
    var se_DeletePublicAccessBlockCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_pAB]: [, ""]
      });
      let body;
      b.m("DELETE").h(headers).q(query).b(body);
      return b.build();
    }, "se_DeletePublicAccessBlockCommand");
    var se_GetBucketAccelerateConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO],
        [_xarp]: input[_RP]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_ac]: [, ""]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_GetBucketAccelerateConfigurationCommand");
    var se_GetBucketAclCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_acl]: [, ""]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_GetBucketAclCommand");
    var se_GetBucketAnalyticsConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_a]: [, ""],
        [_xi]: [, "GetBucketAnalyticsConfiguration"],
        [_i]: [, (0, import_smithy_client4.expectNonNull)(input[_I], `Id`)]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_GetBucketAnalyticsConfigurationCommand");
    var se_GetBucketCorsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_c]: [, ""]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_GetBucketCorsCommand");
    var se_GetBucketEncryptionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_en]: [, ""]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_GetBucketEncryptionCommand");
    var se_GetBucketIntelligentTieringConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = {};
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_it]: [, ""],
        [_xi]: [, "GetBucketIntelligentTieringConfiguration"],
        [_i]: [, (0, import_smithy_client4.expectNonNull)(input[_I], `Id`)]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_GetBucketIntelligentTieringConfigurationCommand");
    var se_GetBucketInventoryConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_in]: [, ""],
        [_xi]: [, "GetBucketInventoryConfiguration"],
        [_i]: [, (0, import_smithy_client4.expectNonNull)(input[_I], `Id`)]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_GetBucketInventoryConfigurationCommand");
    var se_GetBucketLifecycleConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_l]: [, ""]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_GetBucketLifecycleConfigurationCommand");
    var se_GetBucketLocationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_lo]: [, ""]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_GetBucketLocationCommand");
    var se_GetBucketLoggingCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_log]: [, ""]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_GetBucketLoggingCommand");
    var se_GetBucketMetricsConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_m]: [, ""],
        [_xi]: [, "GetBucketMetricsConfiguration"],
        [_i]: [, (0, import_smithy_client4.expectNonNull)(input[_I], `Id`)]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_GetBucketMetricsConfigurationCommand");
    var se_GetBucketNotificationConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_n]: [, ""]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_GetBucketNotificationConfigurationCommand");
    var se_GetBucketOwnershipControlsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_oC]: [, ""]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_GetBucketOwnershipControlsCommand");
    var se_GetBucketPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_p]: [, ""]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_GetBucketPolicyCommand");
    var se_GetBucketPolicyStatusCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_pS]: [, ""]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_GetBucketPolicyStatusCommand");
    var se_GetBucketReplicationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_r]: [, ""]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_GetBucketReplicationCommand");
    var se_GetBucketRequestPaymentCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_rP]: [, ""]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_GetBucketRequestPaymentCommand");
    var se_GetBucketTaggingCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_t]: [, ""]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_GetBucketTaggingCommand");
    var se_GetBucketVersioningCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_v]: [, ""]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_GetBucketVersioningCommand");
    var se_GetBucketWebsiteCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_w]: [, ""]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_GetBucketWebsiteCommand");
    var se_GetObjectCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_im]: input[_IM],
        [_ims]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_IMSf]), () => (0, import_smithy_client4.dateToUtcString)(input[_IMSf]).toString()],
        [_inm]: input[_INM],
        [_ius]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_IUS]), () => (0, import_smithy_client4.dateToUtcString)(input[_IUS]).toString()],
        [_ra]: input[_R],
        [_xasseca]: input[_SSECA],
        [_xasseck]: input[_SSECK],
        [_xasseckm]: input[_SSECKMD],
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO],
        [_xacm]: input[_CM]
      });
      b.bp("/{Key+}");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b.p("Key", () => input.Key, "{Key+}", true);
      const query = (0, import_smithy_client4.map)({
        [_xi]: [, "GetObject"],
        [_rcc]: [, input[_RCC]],
        [_rcd]: [, input[_RCD]],
        [_rce]: [, input[_RCE]],
        [_rcl]: [, input[_RCL]],
        [_rct]: [, input[_RCT]],
        [_re]: [() => input.ResponseExpires !== void 0, () => (0, import_smithy_client4.dateToUtcString)(input[_RE]).toString()],
        [_vI]: [, input[_VI]],
        [_pN]: [() => input.PartNumber !== void 0, () => input[_PN].toString()]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_GetObjectCommand");
    var se_GetObjectAclCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO]
      });
      b.bp("/{Key+}");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b.p("Key", () => input.Key, "{Key+}", true);
      const query = (0, import_smithy_client4.map)({
        [_acl]: [, ""],
        [_vI]: [, input[_VI]]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_GetObjectAclCommand");
    var se_GetObjectAttributesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xamp]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_MP]), () => input[_MP].toString()],
        [_xapnm]: input[_PNM],
        [_xasseca]: input[_SSECA],
        [_xasseck]: input[_SSECK],
        [_xasseckm]: input[_SSECKMD],
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO],
        [_xaoa]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_OA]), () => (input[_OA] || []).map(import_smithy_client4.quoteHeader).join(", ")]
      });
      b.bp("/{Key+}");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b.p("Key", () => input.Key, "{Key+}", true);
      const query = (0, import_smithy_client4.map)({
        [_at]: [, ""],
        [_vI]: [, input[_VI]]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_GetObjectAttributesCommand");
    var se_GetObjectLegalHoldCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO]
      });
      b.bp("/{Key+}");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b.p("Key", () => input.Key, "{Key+}", true);
      const query = (0, import_smithy_client4.map)({
        [_lh]: [, ""],
        [_vI]: [, input[_VI]]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_GetObjectLegalHoldCommand");
    var se_GetObjectLockConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_ol]: [, ""]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_GetObjectLockConfigurationCommand");
    var se_GetObjectRetentionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO]
      });
      b.bp("/{Key+}");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b.p("Key", () => input.Key, "{Key+}", true);
      const query = (0, import_smithy_client4.map)({
        [_ret]: [, ""],
        [_vI]: [, input[_VI]]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_GetObjectRetentionCommand");
    var se_GetObjectTaggingCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO],
        [_xarp]: input[_RP]
      });
      b.bp("/{Key+}");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b.p("Key", () => input.Key, "{Key+}", true);
      const query = (0, import_smithy_client4.map)({
        [_t]: [, ""],
        [_vI]: [, input[_VI]]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_GetObjectTaggingCommand");
    var se_GetObjectTorrentCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO]
      });
      b.bp("/{Key+}");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b.p("Key", () => input.Key, "{Key+}", true);
      const query = (0, import_smithy_client4.map)({
        [_to]: [, ""]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_GetObjectTorrentCommand");
    var se_GetPublicAccessBlockCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_pAB]: [, ""]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_GetPublicAccessBlockCommand");
    var se_HeadBucketCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      let body;
      b.m("HEAD").h(headers).b(body);
      return b.build();
    }, "se_HeadBucketCommand");
    var se_HeadObjectCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_im]: input[_IM],
        [_ims]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_IMSf]), () => (0, import_smithy_client4.dateToUtcString)(input[_IMSf]).toString()],
        [_inm]: input[_INM],
        [_ius]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_IUS]), () => (0, import_smithy_client4.dateToUtcString)(input[_IUS]).toString()],
        [_ra]: input[_R],
        [_xasseca]: input[_SSECA],
        [_xasseck]: input[_SSECK],
        [_xasseckm]: input[_SSECKMD],
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO],
        [_xacm]: input[_CM]
      });
      b.bp("/{Key+}");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b.p("Key", () => input.Key, "{Key+}", true);
      const query = (0, import_smithy_client4.map)({
        [_rcc]: [, input[_RCC]],
        [_rcd]: [, input[_RCD]],
        [_rce]: [, input[_RCE]],
        [_rcl]: [, input[_RCL]],
        [_rct]: [, input[_RCT]],
        [_re]: [() => input.ResponseExpires !== void 0, () => (0, import_smithy_client4.dateToUtcString)(input[_RE]).toString()],
        [_vI]: [, input[_VI]],
        [_pN]: [() => input.PartNumber !== void 0, () => input[_PN].toString()]
      });
      let body;
      b.m("HEAD").h(headers).q(query).b(body);
      return b.build();
    }, "se_HeadObjectCommand");
    var se_ListBucketAnalyticsConfigurationsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_a]: [, ""],
        [_xi]: [, "ListBucketAnalyticsConfigurations"],
        [_ct_]: [, input[_CTo]]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_ListBucketAnalyticsConfigurationsCommand");
    var se_ListBucketIntelligentTieringConfigurationsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = {};
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_it]: [, ""],
        [_xi]: [, "ListBucketIntelligentTieringConfigurations"],
        [_ct_]: [, input[_CTo]]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_ListBucketIntelligentTieringConfigurationsCommand");
    var se_ListBucketInventoryConfigurationsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_in]: [, ""],
        [_xi]: [, "ListBucketInventoryConfigurations"],
        [_ct_]: [, input[_CTo]]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_ListBucketInventoryConfigurationsCommand");
    var se_ListBucketMetricsConfigurationsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_m]: [, ""],
        [_xi]: [, "ListBucketMetricsConfigurations"],
        [_ct_]: [, input[_CTo]]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_ListBucketMetricsConfigurationsCommand");
    var se_ListBucketsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = {};
      b.bp("/");
      const query = (0, import_smithy_client4.map)({
        [_xi]: [, "ListBuckets"],
        [_mb]: [() => input.MaxBuckets !== void 0, () => input[_MB].toString()],
        [_ct_]: [, input[_CTo]],
        [_pr]: [, input[_P]],
        [_br]: [, input[_BR]]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_ListBucketsCommand");
    var se_ListDirectoryBucketsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = {};
      b.bp("/");
      const query = (0, import_smithy_client4.map)({
        [_xi]: [, "ListDirectoryBuckets"],
        [_ct_]: [, input[_CTo]],
        [_mdb]: [() => input.MaxDirectoryBuckets !== void 0, () => input[_MDB].toString()]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_ListDirectoryBucketsCommand");
    var se_ListMultipartUploadsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO],
        [_xarp]: input[_RP]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_u]: [, ""],
        [_de]: [, input[_D]],
        [_et]: [, input[_ET]],
        [_km]: [, input[_KM]],
        [_mu]: [() => input.MaxUploads !== void 0, () => input[_MU].toString()],
        [_pr]: [, input[_P]],
        [_uim]: [, input[_UIM]]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_ListMultipartUploadsCommand");
    var se_ListObjectsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO],
        [_xaooa]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_OOA]), () => (input[_OOA] || []).map(import_smithy_client4.quoteHeader).join(", ")]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_de]: [, input[_D]],
        [_et]: [, input[_ET]],
        [_ma]: [, input[_M]],
        [_mk]: [() => input.MaxKeys !== void 0, () => input[_MK].toString()],
        [_pr]: [, input[_P]]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_ListObjectsCommand");
    var se_ListObjectsV2Command = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO],
        [_xaooa]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_OOA]), () => (input[_OOA] || []).map(import_smithy_client4.quoteHeader).join(", ")]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_lt]: [, "2"],
        [_de]: [, input[_D]],
        [_et]: [, input[_ET]],
        [_mk]: [() => input.MaxKeys !== void 0, () => input[_MK].toString()],
        [_pr]: [, input[_P]],
        [_ct_]: [, input[_CTo]],
        [_fo]: [() => input.FetchOwner !== void 0, () => input[_FO].toString()],
        [_sa]: [, input[_SA]]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_ListObjectsV2Command");
    var se_ListObjectVersionsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xaebo]: input[_EBO],
        [_xarp]: input[_RP],
        [_xaooa]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_OOA]), () => (input[_OOA] || []).map(import_smithy_client4.quoteHeader).join(", ")]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_ver]: [, ""],
        [_de]: [, input[_D]],
        [_et]: [, input[_ET]],
        [_km]: [, input[_KM]],
        [_mk]: [() => input.MaxKeys !== void 0, () => input[_MK].toString()],
        [_pr]: [, input[_P]],
        [_vim]: [, input[_VIM]]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_ListObjectVersionsCommand");
    var se_ListPartsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO],
        [_xasseca]: input[_SSECA],
        [_xasseck]: input[_SSECK],
        [_xasseckm]: input[_SSECKMD]
      });
      b.bp("/{Key+}");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b.p("Key", () => input.Key, "{Key+}", true);
      const query = (0, import_smithy_client4.map)({
        [_xi]: [, "ListParts"],
        [_mp]: [() => input.MaxParts !== void 0, () => input[_MP].toString()],
        [_pnm]: [, input[_PNM]],
        [_uI]: [, (0, import_smithy_client4.expectNonNull)(input[_UI], `UploadId`)]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_ListPartsCommand");
    var se_PutBucketAccelerateConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xaebo]: input[_EBO],
        [_xasca]: input[_CA]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_ac]: [, ""]
      });
      let body;
      let contents;
      if (input.AccelerateConfiguration !== void 0) {
        contents = se_AccelerateConfiguration(input.AccelerateConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b.m("PUT").h(headers).q(query).b(body);
      return b.build();
    }, "se_PutBucketAccelerateConfigurationCommand");
    var se_PutBucketAclCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xaa]: input[_ACL],
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xagfc]: input[_GFC],
        [_xagr]: input[_GR],
        [_xagra]: input[_GRACP],
        [_xagw]: input[_GW],
        [_xagwa]: input[_GWACP],
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_acl]: [, ""]
      });
      let body;
      let contents;
      if (input.AccessControlPolicy !== void 0) {
        contents = se_AccessControlPolicy(input.AccessControlPolicy, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b.m("PUT").h(headers).q(query).b(body);
      return b.build();
    }, "se_PutBucketAclCommand");
    var se_PutBucketAnalyticsConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_a]: [, ""],
        [_i]: [, (0, import_smithy_client4.expectNonNull)(input[_I], `Id`)]
      });
      let body;
      let contents;
      if (input.AnalyticsConfiguration !== void 0) {
        contents = se_AnalyticsConfiguration(input.AnalyticsConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b.m("PUT").h(headers).q(query).b(body);
      return b.build();
    }, "se_PutBucketAnalyticsConfigurationCommand");
    var se_PutBucketCorsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_c]: [, ""]
      });
      let body;
      let contents;
      if (input.CORSConfiguration !== void 0) {
        contents = se_CORSConfiguration(input.CORSConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b.m("PUT").h(headers).q(query).b(body);
      return b.build();
    }, "se_PutBucketCorsCommand");
    var se_PutBucketEncryptionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_en]: [, ""]
      });
      let body;
      let contents;
      if (input.ServerSideEncryptionConfiguration !== void 0) {
        contents = se_ServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b.m("PUT").h(headers).q(query).b(body);
      return b.build();
    }, "se_PutBucketEncryptionCommand");
    var se_PutBucketIntelligentTieringConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/xml"
      };
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_it]: [, ""],
        [_i]: [, (0, import_smithy_client4.expectNonNull)(input[_I], `Id`)]
      });
      let body;
      let contents;
      if (input.IntelligentTieringConfiguration !== void 0) {
        contents = se_IntelligentTieringConfiguration(input.IntelligentTieringConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b.m("PUT").h(headers).q(query).b(body);
      return b.build();
    }, "se_PutBucketIntelligentTieringConfigurationCommand");
    var se_PutBucketInventoryConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_in]: [, ""],
        [_i]: [, (0, import_smithy_client4.expectNonNull)(input[_I], `Id`)]
      });
      let body;
      let contents;
      if (input.InventoryConfiguration !== void 0) {
        contents = se_InventoryConfiguration(input.InventoryConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b.m("PUT").h(headers).q(query).b(body);
      return b.build();
    }, "se_PutBucketInventoryConfigurationCommand");
    var se_PutBucketLifecycleConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO],
        [_xatdmos]: input[_TDMOS]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_l]: [, ""]
      });
      let body;
      let contents;
      if (input.LifecycleConfiguration !== void 0) {
        contents = se_BucketLifecycleConfiguration(input.LifecycleConfiguration, context);
        contents = contents.n("LifecycleConfiguration");
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b.m("PUT").h(headers).q(query).b(body);
      return b.build();
    }, "se_PutBucketLifecycleConfigurationCommand");
    var se_PutBucketLoggingCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_log]: [, ""]
      });
      let body;
      let contents;
      if (input.BucketLoggingStatus !== void 0) {
        contents = se_BucketLoggingStatus(input.BucketLoggingStatus, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b.m("PUT").h(headers).q(query).b(body);
      return b.build();
    }, "se_PutBucketLoggingCommand");
    var se_PutBucketMetricsConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_m]: [, ""],
        [_i]: [, (0, import_smithy_client4.expectNonNull)(input[_I], `Id`)]
      });
      let body;
      let contents;
      if (input.MetricsConfiguration !== void 0) {
        contents = se_MetricsConfiguration(input.MetricsConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b.m("PUT").h(headers).q(query).b(body);
      return b.build();
    }, "se_PutBucketMetricsConfigurationCommand");
    var se_PutBucketNotificationConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xaebo]: input[_EBO],
        [_xasdv]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_SDV]), () => input[_SDV].toString()]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_n]: [, ""]
      });
      let body;
      let contents;
      if (input.NotificationConfiguration !== void 0) {
        contents = se_NotificationConfiguration(input.NotificationConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b.m("PUT").h(headers).q(query).b(body);
      return b.build();
    }, "se_PutBucketNotificationConfigurationCommand");
    var se_PutBucketOwnershipControlsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_oC]: [, ""]
      });
      let body;
      let contents;
      if (input.OwnershipControls !== void 0) {
        contents = se_OwnershipControls(input.OwnershipControls, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b.m("PUT").h(headers).q(query).b(body);
      return b.build();
    }, "se_PutBucketOwnershipControlsCommand");
    var se_PutBucketPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        "content-type": "text/plain",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xacrsba]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_CRSBA]), () => input[_CRSBA].toString()],
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_p]: [, ""]
      });
      let body;
      let contents;
      if (input.Policy !== void 0) {
        contents = input.Policy;
        body = contents;
      }
      b.m("PUT").h(headers).q(query).b(body);
      return b.build();
    }, "se_PutBucketPolicyCommand");
    var se_PutBucketReplicationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xabolt]: input[_To],
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_r]: [, ""]
      });
      let body;
      let contents;
      if (input.ReplicationConfiguration !== void 0) {
        contents = se_ReplicationConfiguration(input.ReplicationConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b.m("PUT").h(headers).q(query).b(body);
      return b.build();
    }, "se_PutBucketReplicationCommand");
    var se_PutBucketRequestPaymentCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_rP]: [, ""]
      });
      let body;
      let contents;
      if (input.RequestPaymentConfiguration !== void 0) {
        contents = se_RequestPaymentConfiguration(input.RequestPaymentConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b.m("PUT").h(headers).q(query).b(body);
      return b.build();
    }, "se_PutBucketRequestPaymentCommand");
    var se_PutBucketTaggingCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_t]: [, ""]
      });
      let body;
      let contents;
      if (input.Tagging !== void 0) {
        contents = se_Tagging(input.Tagging, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b.m("PUT").h(headers).q(query).b(body);
      return b.build();
    }, "se_PutBucketTaggingCommand");
    var se_PutBucketVersioningCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xam]: input[_MFA],
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_v]: [, ""]
      });
      let body;
      let contents;
      if (input.VersioningConfiguration !== void 0) {
        contents = se_VersioningConfiguration(input.VersioningConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b.m("PUT").h(headers).q(query).b(body);
      return b.build();
    }, "se_PutBucketVersioningCommand");
    var se_PutBucketWebsiteCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_w]: [, ""]
      });
      let body;
      let contents;
      if (input.WebsiteConfiguration !== void 0) {
        contents = se_WebsiteConfiguration(input.WebsiteConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b.m("PUT").h(headers).q(query).b(body);
      return b.build();
    }, "se_PutBucketWebsiteCommand");
    var se_PutObjectCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_ct]: input[_CT] || "application/octet-stream",
        [_xaa]: input[_ACL],
        [_cc]: input[_CC],
        [_cd]: input[_CD],
        [_ce]: input[_CE],
        [_cl]: input[_CL],
        [_cl_]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_CLo]), () => input[_CLo].toString()],
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xacc]: input[_CCRC],
        [_xacc_]: input[_CCRCC],
        [_xacs]: input[_CSHA],
        [_xacs_]: input[_CSHAh],
        [_e]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_E]), () => (0, import_smithy_client4.dateToUtcString)(input[_E]).toString()],
        [_inm]: input[_INM],
        [_xagfc]: input[_GFC],
        [_xagr]: input[_GR],
        [_xagra]: input[_GRACP],
        [_xagwa]: input[_GWACP],
        [_xawob]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_WOB]), () => input[_WOB].toString()],
        [_xasse]: input[_SSE],
        [_xasc]: input[_SC],
        [_xawrl]: input[_WRL],
        [_xasseca]: input[_SSECA],
        [_xasseck]: input[_SSECK],
        [_xasseckm]: input[_SSECKMD],
        [_xasseakki]: input[_SSEKMSKI],
        [_xassec]: input[_SSEKMSEC],
        [_xassebke]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_BKE]), () => input[_BKE].toString()],
        [_xarp]: input[_RP],
        [_xat]: input[_T],
        [_xaolm]: input[_OLM],
        [_xaolrud]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_OLRUD]), () => (0, import_smithy_client4.serializeDateTime)(input[_OLRUD]).toString()],
        [_xaollh]: input[_OLLHS],
        [_xaebo]: input[_EBO],
        ...input.Metadata !== void 0 && Object.keys(input.Metadata).reduce((acc, suffix) => {
          acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];
          return acc;
        }, {})
      });
      b.bp("/{Key+}");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b.p("Key", () => input.Key, "{Key+}", true);
      const query = (0, import_smithy_client4.map)({
        [_xi]: [, "PutObject"]
      });
      let body;
      let contents;
      if (input.Body !== void 0) {
        contents = input.Body;
        body = contents;
      }
      b.m("PUT").h(headers).q(query).b(body);
      return b.build();
    }, "se_PutObjectCommand");
    var se_PutObjectAclCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xaa]: input[_ACL],
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xagfc]: input[_GFC],
        [_xagr]: input[_GR],
        [_xagra]: input[_GRACP],
        [_xagw]: input[_GW],
        [_xagwa]: input[_GWACP],
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO]
      });
      b.bp("/{Key+}");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b.p("Key", () => input.Key, "{Key+}", true);
      const query = (0, import_smithy_client4.map)({
        [_acl]: [, ""],
        [_vI]: [, input[_VI]]
      });
      let body;
      let contents;
      if (input.AccessControlPolicy !== void 0) {
        contents = se_AccessControlPolicy(input.AccessControlPolicy, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b.m("PUT").h(headers).q(query).b(body);
      return b.build();
    }, "se_PutObjectAclCommand");
    var se_PutObjectLegalHoldCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xarp]: input[_RP],
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b.bp("/{Key+}");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b.p("Key", () => input.Key, "{Key+}", true);
      const query = (0, import_smithy_client4.map)({
        [_lh]: [, ""],
        [_vI]: [, input[_VI]]
      });
      let body;
      let contents;
      if (input.LegalHold !== void 0) {
        contents = se_ObjectLockLegalHold(input.LegalHold, context);
        contents = contents.n("LegalHold");
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b.m("PUT").h(headers).q(query).b(body);
      return b.build();
    }, "se_PutObjectLegalHoldCommand");
    var se_PutObjectLockConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xarp]: input[_RP],
        [_xabolt]: input[_To],
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_ol]: [, ""]
      });
      let body;
      let contents;
      if (input.ObjectLockConfiguration !== void 0) {
        contents = se_ObjectLockConfiguration(input.ObjectLockConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b.m("PUT").h(headers).q(query).b(body);
      return b.build();
    }, "se_PutObjectLockConfigurationCommand");
    var se_PutObjectRetentionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xarp]: input[_RP],
        [_xabgr]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_BGR]), () => input[_BGR].toString()],
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b.bp("/{Key+}");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b.p("Key", () => input.Key, "{Key+}", true);
      const query = (0, import_smithy_client4.map)({
        [_ret]: [, ""],
        [_vI]: [, input[_VI]]
      });
      let body;
      let contents;
      if (input.Retention !== void 0) {
        contents = se_ObjectLockRetention(input.Retention, context);
        contents = contents.n("Retention");
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b.m("PUT").h(headers).q(query).b(body);
      return b.build();
    }, "se_PutObjectRetentionCommand");
    var se_PutObjectTaggingCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO],
        [_xarp]: input[_RP]
      });
      b.bp("/{Key+}");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b.p("Key", () => input.Key, "{Key+}", true);
      const query = (0, import_smithy_client4.map)({
        [_t]: [, ""],
        [_vI]: [, input[_VI]]
      });
      let body;
      let contents;
      if (input.Tagging !== void 0) {
        contents = se_Tagging(input.Tagging, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b.m("PUT").h(headers).q(query).b(body);
      return b.build();
    }, "se_PutObjectTaggingCommand");
    var se_PutPublicAccessBlockCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b.bp("/");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      const query = (0, import_smithy_client4.map)({
        [_pAB]: [, ""]
      });
      let body;
      let contents;
      if (input.PublicAccessBlockConfiguration !== void 0) {
        contents = se_PublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b.m("PUT").h(headers).q(query).b(body);
      return b.build();
    }, "se_PutPublicAccessBlockCommand");
    var se_RestoreObjectCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xarp]: input[_RP],
        [_xasca]: input[_CA],
        [_xaebo]: input[_EBO]
      });
      b.bp("/{Key+}");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b.p("Key", () => input.Key, "{Key+}", true);
      const query = (0, import_smithy_client4.map)({
        [_res]: [, ""],
        [_vI]: [, input[_VI]]
      });
      let body;
      let contents;
      if (input.RestoreRequest !== void 0) {
        contents = se_RestoreRequest(input.RestoreRequest, context);
        body = _ve;
        contents.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      b.m("POST").h(headers).q(query).b(body);
      return b.build();
    }, "se_RestoreObjectCommand");
    var se_SelectObjectContentCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        "content-type": "application/xml",
        [_xasseca]: input[_SSECA],
        [_xasseck]: input[_SSECK],
        [_xasseckm]: input[_SSECKMD],
        [_xaebo]: input[_EBO]
      });
      b.bp("/{Key+}");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b.p("Key", () => input.Key, "{Key+}", true);
      const query = (0, import_smithy_client4.map)({
        [_se]: [, ""],
        [_st]: [, "2"]
      });
      let body;
      body = _ve;
      const bn = new import_xml_builder.XmlNode(_SOCR);
      bn.a("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      bn.cc(input, _Ex);
      bn.cc(input, _ETx);
      if (input[_IS] != null) {
        bn.c(se_InputSerialization(input[_IS], context).n(_IS));
      }
      if (input[_OS] != null) {
        bn.c(se_OutputSerialization(input[_OS], context).n(_OS));
      }
      if (input[_RPe] != null) {
        bn.c(se_RequestProgress(input[_RPe], context).n(_RPe));
      }
      if (input[_SR] != null) {
        bn.c(se_ScanRange(input[_SR], context).n(_SR));
      }
      body += bn.toString();
      b.m("POST").h(headers).q(query).b(body);
      return b.build();
    }, "se_SelectObjectContentCommand");
    var se_UploadPartCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        "content-type": "application/octet-stream",
        [_cl_]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_CLo]), () => input[_CLo].toString()],
        [_cm]: input[_CMD],
        [_xasca]: input[_CA],
        [_xacc]: input[_CCRC],
        [_xacc_]: input[_CCRCC],
        [_xacs]: input[_CSHA],
        [_xacs_]: input[_CSHAh],
        [_xasseca]: input[_SSECA],
        [_xasseck]: input[_SSECK],
        [_xasseckm]: input[_SSECKMD],
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO]
      });
      b.bp("/{Key+}");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b.p("Key", () => input.Key, "{Key+}", true);
      const query = (0, import_smithy_client4.map)({
        [_xi]: [, "UploadPart"],
        [_pN]: [(0, import_smithy_client4.expectNonNull)(input.PartNumber, `PartNumber`) != null, () => input[_PN].toString()],
        [_uI]: [, (0, import_smithy_client4.expectNonNull)(input[_UI], `UploadId`)]
      });
      let body;
      let contents;
      if (input.Body !== void 0) {
        contents = input.Body;
        body = contents;
      }
      b.m("PUT").h(headers).q(query).b(body);
      return b.build();
    }, "se_UploadPartCommand");
    var se_UploadPartCopyCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        [_xacs__]: input[_CS],
        [_xacsim]: input[_CSIM],
        [_xacsims]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_CSIMS]), () => (0, import_smithy_client4.dateToUtcString)(input[_CSIMS]).toString()],
        [_xacsinm]: input[_CSINM],
        [_xacsius]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_CSIUS]), () => (0, import_smithy_client4.dateToUtcString)(input[_CSIUS]).toString()],
        [_xacsr]: input[_CSR],
        [_xasseca]: input[_SSECA],
        [_xasseck]: input[_SSECK],
        [_xasseckm]: input[_SSECKMD],
        [_xacssseca]: input[_CSSSECA],
        [_xacssseck]: input[_CSSSECK],
        [_xacssseckm]: input[_CSSSECKMD],
        [_xarp]: input[_RP],
        [_xaebo]: input[_EBO],
        [_xasebo]: input[_ESBO]
      });
      b.bp("/{Key+}");
      b.p("Bucket", () => input.Bucket, "{Bucket}", false);
      b.p("Key", () => input.Key, "{Key+}", true);
      const query = (0, import_smithy_client4.map)({
        [_xi]: [, "UploadPartCopy"],
        [_pN]: [(0, import_smithy_client4.expectNonNull)(input.PartNumber, `PartNumber`) != null, () => input[_PN].toString()],
        [_uI]: [, (0, import_smithy_client4.expectNonNull)(input[_UI], `UploadId`)]
      });
      let body;
      b.m("PUT").h(headers).q(query).b(body);
      return b.build();
    }, "se_UploadPartCopyCommand");
    var se_WriteGetObjectResponseCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core22.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        "x-amz-content-sha256": "UNSIGNED-PAYLOAD",
        "content-type": "application/octet-stream",
        [_xarr]: input[_RR],
        [_xart]: input[_RT],
        [_xafs]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_SCt]), () => input[_SCt].toString()],
        [_xafec]: input[_EC],
        [_xafem]: input[_EM],
        [_xafhar]: input[_AR],
        [_xafhcc]: input[_CC],
        [_xafhcd]: input[_CD],
        [_xafhce]: input[_CE],
        [_xafhcl]: input[_CL],
        [_cl_]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_CLo]), () => input[_CLo].toString()],
        [_xafhcr]: input[_CR],
        [_xafhct]: input[_CT],
        [_xafhxacc]: input[_CCRC],
        [_xafhxacc_]: input[_CCRCC],
        [_xafhxacs]: input[_CSHA],
        [_xafhxacs_]: input[_CSHAh],
        [_xafhxadm]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_DM]), () => input[_DM].toString()],
        [_xafhe]: input[_ETa],
        [_xafhe_]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_E]), () => (0, import_smithy_client4.dateToUtcString)(input[_E]).toString()],
        [_xafhxae]: input[_Exp],
        [_xafhlm]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_LM]), () => (0, import_smithy_client4.dateToUtcString)(input[_LM]).toString()],
        [_xafhxamm]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_MM]), () => input[_MM].toString()],
        [_xafhxaolm]: input[_OLM],
        [_xafhxaollh]: input[_OLLHS],
        [_xafhxaolrud]: [
          () => (0, import_smithy_client4.isSerializableHeaderValue)(input[_OLRUD]),
          () => (0, import_smithy_client4.serializeDateTime)(input[_OLRUD]).toString()
        ],
        [_xafhxampc]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_PC]), () => input[_PC].toString()],
        [_xafhxars]: input[_RS],
        [_xafhxarc]: input[_RC],
        [_xafhxar]: input[_Re],
        [_xafhxasse]: input[_SSE],
        [_xafhxasseca]: input[_SSECA],
        [_xafhxasseakki]: input[_SSEKMSKI],
        [_xafhxasseckm]: input[_SSECKMD],
        [_xafhxasc]: input[_SC],
        [_xafhxatc]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_TC]), () => input[_TC].toString()],
        [_xafhxavi]: input[_VI],
        [_xafhxassebke]: [() => (0, import_smithy_client4.isSerializableHeaderValue)(input[_BKE]), () => input[_BKE].toString()],
        ...input.Metadata !== void 0 && Object.keys(input.Metadata).reduce((acc, suffix) => {
          acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];
          return acc;
        }, {})
      });
      b.bp("/WriteGetObjectResponse");
      let body;
      let contents;
      if (input.Body !== void 0) {
        contents = input.Body;
        body = contents;
      }
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "{RequestRoute}." + resolvedHostname;
        if (input.RequestRoute === void 0) {
          throw new Error("Empty value provided for input host prefix: RequestRoute.");
        }
        resolvedHostname = resolvedHostname.replace("{RequestRoute}", input.RequestRoute);
        if (!(0, import_protocol_http8.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      b.hn(resolvedHostname);
      b.m("POST").h(headers).b(body);
      return b.build();
    }, "se_WriteGetObjectResponseCommand");
    var de_AbortMultipartUploadCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output),
        [_RC]: [, output.headers[_xarc]]
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_AbortMultipartUploadCommand");
    var de_CompleteMultipartUploadCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output),
        [_Exp]: [, output.headers[_xae]],
        [_SSE]: [, output.headers[_xasse]],
        [_VI]: [, output.headers[_xavi]],
        [_SSEKMSKI]: [, output.headers[_xasseakki]],
        [_BKE]: [() => void 0 !== output.headers[_xassebke], () => (0, import_smithy_client4.parseBoolean)(output.headers[_xassebke])],
        [_RC]: [, output.headers[_xarc]]
      });
      const data = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context)), "body");
      if (data[_B] != null) {
        contents[_B] = (0, import_smithy_client4.expectString)(data[_B]);
      }
      if (data[_CCRC] != null) {
        contents[_CCRC] = (0, import_smithy_client4.expectString)(data[_CCRC]);
      }
      if (data[_CCRCC] != null) {
        contents[_CCRCC] = (0, import_smithy_client4.expectString)(data[_CCRCC]);
      }
      if (data[_CSHA] != null) {
        contents[_CSHA] = (0, import_smithy_client4.expectString)(data[_CSHA]);
      }
      if (data[_CSHAh] != null) {
        contents[_CSHAh] = (0, import_smithy_client4.expectString)(data[_CSHAh]);
      }
      if (data[_ETa] != null) {
        contents[_ETa] = (0, import_smithy_client4.expectString)(data[_ETa]);
      }
      if (data[_K] != null) {
        contents[_K] = (0, import_smithy_client4.expectString)(data[_K]);
      }
      if (data[_L] != null) {
        contents[_L] = (0, import_smithy_client4.expectString)(data[_L]);
      }
      return contents;
    }, "de_CompleteMultipartUploadCommand");
    var de_CopyObjectCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output),
        [_Exp]: [, output.headers[_xae]],
        [_CSVI]: [, output.headers[_xacsvi]],
        [_VI]: [, output.headers[_xavi]],
        [_SSE]: [, output.headers[_xasse]],
        [_SSECA]: [, output.headers[_xasseca]],
        [_SSECKMD]: [, output.headers[_xasseckm]],
        [_SSEKMSKI]: [, output.headers[_xasseakki]],
        [_SSEKMSEC]: [, output.headers[_xassec]],
        [_BKE]: [() => void 0 !== output.headers[_xassebke], () => (0, import_smithy_client4.parseBoolean)(output.headers[_xassebke])],
        [_RC]: [, output.headers[_xarc]]
      });
      const data = (0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context));
      contents.CopyObjectResult = de_CopyObjectResult(data, context);
      return contents;
    }, "de_CopyObjectCommand");
    var de_CreateBucketCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output),
        [_L]: [, output.headers[_lo]]
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_CreateBucketCommand");
    var de_CreateMultipartUploadCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output),
        [_AD]: [
          () => void 0 !== output.headers[_xaad],
          () => (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc7231DateTime)(output.headers[_xaad]))
        ],
        [_ARI]: [, output.headers[_xaari]],
        [_SSE]: [, output.headers[_xasse]],
        [_SSECA]: [, output.headers[_xasseca]],
        [_SSECKMD]: [, output.headers[_xasseckm]],
        [_SSEKMSKI]: [, output.headers[_xasseakki]],
        [_SSEKMSEC]: [, output.headers[_xassec]],
        [_BKE]: [() => void 0 !== output.headers[_xassebke], () => (0, import_smithy_client4.parseBoolean)(output.headers[_xassebke])],
        [_RC]: [, output.headers[_xarc]],
        [_CA]: [, output.headers[_xaca]]
      });
      const data = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context)), "body");
      if (data[_B] != null) {
        contents[_B] = (0, import_smithy_client4.expectString)(data[_B]);
      }
      if (data[_K] != null) {
        contents[_K] = (0, import_smithy_client4.expectString)(data[_K]);
      }
      if (data[_UI] != null) {
        contents[_UI] = (0, import_smithy_client4.expectString)(data[_UI]);
      }
      return contents;
    }, "de_CreateMultipartUploadCommand");
    var de_CreateSessionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output),
        [_SSE]: [, output.headers[_xasse]],
        [_SSEKMSKI]: [, output.headers[_xasseakki]],
        [_SSEKMSEC]: [, output.headers[_xassec]],
        [_BKE]: [() => void 0 !== output.headers[_xassebke], () => (0, import_smithy_client4.parseBoolean)(output.headers[_xassebke])]
      });
      const data = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context)), "body");
      if (data[_C] != null) {
        contents[_C] = de_SessionCredentials(data[_C], context);
      }
      return contents;
    }, "de_CreateSessionCommand");
    var de_DeleteBucketCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_DeleteBucketCommand");
    var de_DeleteBucketAnalyticsConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_DeleteBucketAnalyticsConfigurationCommand");
    var de_DeleteBucketCorsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_DeleteBucketCorsCommand");
    var de_DeleteBucketEncryptionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_DeleteBucketEncryptionCommand");
    var de_DeleteBucketIntelligentTieringConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_DeleteBucketIntelligentTieringConfigurationCommand");
    var de_DeleteBucketInventoryConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_DeleteBucketInventoryConfigurationCommand");
    var de_DeleteBucketLifecycleCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_DeleteBucketLifecycleCommand");
    var de_DeleteBucketMetricsConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_DeleteBucketMetricsConfigurationCommand");
    var de_DeleteBucketOwnershipControlsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_DeleteBucketOwnershipControlsCommand");
    var de_DeleteBucketPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_DeleteBucketPolicyCommand");
    var de_DeleteBucketReplicationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_DeleteBucketReplicationCommand");
    var de_DeleteBucketTaggingCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_DeleteBucketTaggingCommand");
    var de_DeleteBucketWebsiteCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_DeleteBucketWebsiteCommand");
    var de_DeleteObjectCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output),
        [_DM]: [() => void 0 !== output.headers[_xadm], () => (0, import_smithy_client4.parseBoolean)(output.headers[_xadm])],
        [_VI]: [, output.headers[_xavi]],
        [_RC]: [, output.headers[_xarc]]
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_DeleteObjectCommand");
    var de_DeleteObjectsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output),
        [_RC]: [, output.headers[_xarc]]
      });
      const data = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context)), "body");
      if (data.Deleted === "") {
        contents[_De] = [];
      } else if (data[_De] != null) {
        contents[_De] = de_DeletedObjects((0, import_smithy_client4.getArrayIfSingleItem)(data[_De]), context);
      }
      if (data.Error === "") {
        contents[_Err] = [];
      } else if (data[_Er] != null) {
        contents[_Err] = de_Errors((0, import_smithy_client4.getArrayIfSingleItem)(data[_Er]), context);
      }
      return contents;
    }, "de_DeleteObjectsCommand");
    var de_DeleteObjectTaggingCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output),
        [_VI]: [, output.headers[_xavi]]
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_DeleteObjectTaggingCommand");
    var de_DeletePublicAccessBlockCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_DeletePublicAccessBlockCommand");
    var de_GetBucketAccelerateConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output),
        [_RC]: [, output.headers[_xarc]]
      });
      const data = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context)), "body");
      if (data[_S] != null) {
        contents[_S] = (0, import_smithy_client4.expectString)(data[_S]);
      }
      return contents;
    }, "de_GetBucketAccelerateConfigurationCommand");
    var de_GetBucketAclCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context)), "body");
      if (data.AccessControlList === "") {
        contents[_Gr] = [];
      } else if (data[_ACLc] != null && data[_ACLc][_G] != null) {
        contents[_Gr] = de_Grants((0, import_smithy_client4.getArrayIfSingleItem)(data[_ACLc][_G]), context);
      }
      if (data[_O] != null) {
        contents[_O] = de_Owner(data[_O], context);
      }
      return contents;
    }, "de_GetBucketAclCommand");
    var de_GetBucketAnalyticsConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context));
      contents.AnalyticsConfiguration = de_AnalyticsConfiguration(data, context);
      return contents;
    }, "de_GetBucketAnalyticsConfigurationCommand");
    var de_GetBucketCorsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context)), "body");
      if (data.CORSRule === "") {
        contents[_CORSRu] = [];
      } else if (data[_CORSR] != null) {
        contents[_CORSRu] = de_CORSRules((0, import_smithy_client4.getArrayIfSingleItem)(data[_CORSR]), context);
      }
      return contents;
    }, "de_GetBucketCorsCommand");
    var de_GetBucketEncryptionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context));
      contents.ServerSideEncryptionConfiguration = de_ServerSideEncryptionConfiguration(data, context);
      return contents;
    }, "de_GetBucketEncryptionCommand");
    var de_GetBucketIntelligentTieringConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context));
      contents.IntelligentTieringConfiguration = de_IntelligentTieringConfiguration(data, context);
      return contents;
    }, "de_GetBucketIntelligentTieringConfigurationCommand");
    var de_GetBucketInventoryConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context));
      contents.InventoryConfiguration = de_InventoryConfiguration(data, context);
      return contents;
    }, "de_GetBucketInventoryConfigurationCommand");
    var de_GetBucketLifecycleConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output),
        [_TDMOS]: [, output.headers[_xatdmos]]
      });
      const data = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context)), "body");
      if (data.Rule === "") {
        contents[_Rul] = [];
      } else if (data[_Ru] != null) {
        contents[_Rul] = de_LifecycleRules((0, import_smithy_client4.getArrayIfSingleItem)(data[_Ru]), context);
      }
      return contents;
    }, "de_GetBucketLifecycleConfigurationCommand");
    var de_GetBucketLocationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context)), "body");
      if (data[_LC] != null) {
        contents[_LC] = (0, import_smithy_client4.expectString)(data[_LC]);
      }
      return contents;
    }, "de_GetBucketLocationCommand");
    var de_GetBucketLoggingCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context)), "body");
      if (data[_LE] != null) {
        contents[_LE] = de_LoggingEnabled(data[_LE], context);
      }
      return contents;
    }, "de_GetBucketLoggingCommand");
    var de_GetBucketMetricsConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context));
      contents.MetricsConfiguration = de_MetricsConfiguration(data, context);
      return contents;
    }, "de_GetBucketMetricsConfigurationCommand");
    var de_GetBucketNotificationConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context)), "body");
      if (data[_EBC] != null) {
        contents[_EBC] = de_EventBridgeConfiguration(data[_EBC], context);
      }
      if (data.CloudFunctionConfiguration === "") {
        contents[_LFC] = [];
      } else if (data[_CFC] != null) {
        contents[_LFC] = de_LambdaFunctionConfigurationList((0, import_smithy_client4.getArrayIfSingleItem)(data[_CFC]), context);
      }
      if (data.QueueConfiguration === "") {
        contents[_QCu] = [];
      } else if (data[_QC] != null) {
        contents[_QCu] = de_QueueConfigurationList((0, import_smithy_client4.getArrayIfSingleItem)(data[_QC]), context);
      }
      if (data.TopicConfiguration === "") {
        contents[_TCop] = [];
      } else if (data[_TCo] != null) {
        contents[_TCop] = de_TopicConfigurationList((0, import_smithy_client4.getArrayIfSingleItem)(data[_TCo]), context);
      }
      return contents;
    }, "de_GetBucketNotificationConfigurationCommand");
    var de_GetBucketOwnershipControlsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context));
      contents.OwnershipControls = de_OwnershipControls(data, context);
      return contents;
    }, "de_GetBucketOwnershipControlsCommand");
    var de_GetBucketPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = await collectBodyString2(output.body, context);
      contents.Policy = (0, import_smithy_client4.expectString)(data);
      return contents;
    }, "de_GetBucketPolicyCommand");
    var de_GetBucketPolicyStatusCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context));
      contents.PolicyStatus = de_PolicyStatus(data, context);
      return contents;
    }, "de_GetBucketPolicyStatusCommand");
    var de_GetBucketReplicationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context));
      contents.ReplicationConfiguration = de_ReplicationConfiguration(data, context);
      return contents;
    }, "de_GetBucketReplicationCommand");
    var de_GetBucketRequestPaymentCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context)), "body");
      if (data[_Pa] != null) {
        contents[_Pa] = (0, import_smithy_client4.expectString)(data[_Pa]);
      }
      return contents;
    }, "de_GetBucketRequestPaymentCommand");
    var de_GetBucketTaggingCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context)), "body");
      if (data.TagSet === "") {
        contents[_TS] = [];
      } else if (data[_TS] != null && data[_TS][_Ta] != null) {
        contents[_TS] = de_TagSet((0, import_smithy_client4.getArrayIfSingleItem)(data[_TS][_Ta]), context);
      }
      return contents;
    }, "de_GetBucketTaggingCommand");
    var de_GetBucketVersioningCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context)), "body");
      if (data[_MDf] != null) {
        contents[_MFAD] = (0, import_smithy_client4.expectString)(data[_MDf]);
      }
      if (data[_S] != null) {
        contents[_S] = (0, import_smithy_client4.expectString)(data[_S]);
      }
      return contents;
    }, "de_GetBucketVersioningCommand");
    var de_GetBucketWebsiteCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context)), "body");
      if (data[_ED] != null) {
        contents[_ED] = de_ErrorDocument(data[_ED], context);
      }
      if (data[_ID] != null) {
        contents[_ID] = de_IndexDocument(data[_ID], context);
      }
      if (data[_RART] != null) {
        contents[_RART] = de_RedirectAllRequestsTo(data[_RART], context);
      }
      if (data.RoutingRules === "") {
        contents[_RRo] = [];
      } else if (data[_RRo] != null && data[_RRo][_RRou] != null) {
        contents[_RRo] = de_RoutingRules((0, import_smithy_client4.getArrayIfSingleItem)(data[_RRo][_RRou]), context);
      }
      return contents;
    }, "de_GetBucketWebsiteCommand");
    var de_GetObjectCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output),
        [_DM]: [() => void 0 !== output.headers[_xadm], () => (0, import_smithy_client4.parseBoolean)(output.headers[_xadm])],
        [_AR]: [, output.headers[_ar]],
        [_Exp]: [, output.headers[_xae]],
        [_Re]: [, output.headers[_xar]],
        [_LM]: [() => void 0 !== output.headers[_lm], () => (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc7231DateTime)(output.headers[_lm]))],
        [_CLo]: [() => void 0 !== output.headers[_cl_], () => (0, import_smithy_client4.strictParseLong)(output.headers[_cl_])],
        [_ETa]: [, output.headers[_eta]],
        [_CCRC]: [, output.headers[_xacc]],
        [_CCRCC]: [, output.headers[_xacc_]],
        [_CSHA]: [, output.headers[_xacs]],
        [_CSHAh]: [, output.headers[_xacs_]],
        [_MM]: [() => void 0 !== output.headers[_xamm], () => (0, import_smithy_client4.strictParseInt32)(output.headers[_xamm])],
        [_VI]: [, output.headers[_xavi]],
        [_CC]: [, output.headers[_cc]],
        [_CD]: [, output.headers[_cd]],
        [_CE]: [, output.headers[_ce]],
        [_CL]: [, output.headers[_cl]],
        [_CR]: [, output.headers[_cr]],
        [_CT]: [, output.headers[_ct]],
        [_E]: [() => void 0 !== output.headers[_e], () => (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc7231DateTime)(output.headers[_e]))],
        [_ES]: [, output.headers[_ex]],
        [_WRL]: [, output.headers[_xawrl]],
        [_SSE]: [, output.headers[_xasse]],
        [_SSECA]: [, output.headers[_xasseca]],
        [_SSECKMD]: [, output.headers[_xasseckm]],
        [_SSEKMSKI]: [, output.headers[_xasseakki]],
        [_BKE]: [() => void 0 !== output.headers[_xassebke], () => (0, import_smithy_client4.parseBoolean)(output.headers[_xassebke])],
        [_SC]: [, output.headers[_xasc]],
        [_RC]: [, output.headers[_xarc]],
        [_RS]: [, output.headers[_xars]],
        [_PC]: [() => void 0 !== output.headers[_xampc], () => (0, import_smithy_client4.strictParseInt32)(output.headers[_xampc])],
        [_TC]: [() => void 0 !== output.headers[_xatc], () => (0, import_smithy_client4.strictParseInt32)(output.headers[_xatc])],
        [_OLM]: [, output.headers[_xaolm]],
        [_OLRUD]: [
          () => void 0 !== output.headers[_xaolrud],
          () => (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output.headers[_xaolrud]))
        ],
        [_OLLHS]: [, output.headers[_xaollh]],
        Metadata: [
          ,
          Object.keys(output.headers).filter((header) => header.startsWith("x-amz-meta-")).reduce((acc, header) => {
            acc[header.substring(11)] = output.headers[header];
            return acc;
          }, {})
        ]
      });
      const data = output.body;
      context.sdkStreamMixin(data);
      contents.Body = data;
      return contents;
    }, "de_GetObjectCommand");
    var de_GetObjectAclCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output),
        [_RC]: [, output.headers[_xarc]]
      });
      const data = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context)), "body");
      if (data.AccessControlList === "") {
        contents[_Gr] = [];
      } else if (data[_ACLc] != null && data[_ACLc][_G] != null) {
        contents[_Gr] = de_Grants((0, import_smithy_client4.getArrayIfSingleItem)(data[_ACLc][_G]), context);
      }
      if (data[_O] != null) {
        contents[_O] = de_Owner(data[_O], context);
      }
      return contents;
    }, "de_GetObjectAclCommand");
    var de_GetObjectAttributesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output),
        [_DM]: [() => void 0 !== output.headers[_xadm], () => (0, import_smithy_client4.parseBoolean)(output.headers[_xadm])],
        [_LM]: [() => void 0 !== output.headers[_lm], () => (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc7231DateTime)(output.headers[_lm]))],
        [_VI]: [, output.headers[_xavi]],
        [_RC]: [, output.headers[_xarc]]
      });
      const data = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context)), "body");
      if (data[_Ch] != null) {
        contents[_Ch] = de_Checksum(data[_Ch], context);
      }
      if (data[_ETa] != null) {
        contents[_ETa] = (0, import_smithy_client4.expectString)(data[_ETa]);
      }
      if (data[_OP] != null) {
        contents[_OP] = de_GetObjectAttributesParts(data[_OP], context);
      }
      if (data[_OSb] != null) {
        contents[_OSb] = (0, import_smithy_client4.strictParseLong)(data[_OSb]);
      }
      if (data[_SC] != null) {
        contents[_SC] = (0, import_smithy_client4.expectString)(data[_SC]);
      }
      return contents;
    }, "de_GetObjectAttributesCommand");
    var de_GetObjectLegalHoldCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context));
      contents.LegalHold = de_ObjectLockLegalHold(data, context);
      return contents;
    }, "de_GetObjectLegalHoldCommand");
    var de_GetObjectLockConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context));
      contents.ObjectLockConfiguration = de_ObjectLockConfiguration(data, context);
      return contents;
    }, "de_GetObjectLockConfigurationCommand");
    var de_GetObjectRetentionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context));
      contents.Retention = de_ObjectLockRetention(data, context);
      return contents;
    }, "de_GetObjectRetentionCommand");
    var de_GetObjectTaggingCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output),
        [_VI]: [, output.headers[_xavi]]
      });
      const data = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context)), "body");
      if (data.TagSet === "") {
        contents[_TS] = [];
      } else if (data[_TS] != null && data[_TS][_Ta] != null) {
        contents[_TS] = de_TagSet((0, import_smithy_client4.getArrayIfSingleItem)(data[_TS][_Ta]), context);
      }
      return contents;
    }, "de_GetObjectTaggingCommand");
    var de_GetObjectTorrentCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output),
        [_RC]: [, output.headers[_xarc]]
      });
      const data = output.body;
      context.sdkStreamMixin(data);
      contents.Body = data;
      return contents;
    }, "de_GetObjectTorrentCommand");
    var de_GetPublicAccessBlockCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context));
      contents.PublicAccessBlockConfiguration = de_PublicAccessBlockConfiguration(data, context);
      return contents;
    }, "de_GetPublicAccessBlockCommand");
    var de_HeadBucketCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output),
        [_BLT]: [, output.headers[_xablt]],
        [_BLN]: [, output.headers[_xabln]],
        [_BR]: [, output.headers[_xabr]],
        [_APA]: [() => void 0 !== output.headers[_xaapa], () => (0, import_smithy_client4.parseBoolean)(output.headers[_xaapa])]
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_HeadBucketCommand");
    var de_HeadObjectCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output),
        [_DM]: [() => void 0 !== output.headers[_xadm], () => (0, import_smithy_client4.parseBoolean)(output.headers[_xadm])],
        [_AR]: [, output.headers[_ar]],
        [_Exp]: [, output.headers[_xae]],
        [_Re]: [, output.headers[_xar]],
        [_AS]: [, output.headers[_xaas]],
        [_LM]: [() => void 0 !== output.headers[_lm], () => (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc7231DateTime)(output.headers[_lm]))],
        [_CLo]: [() => void 0 !== output.headers[_cl_], () => (0, import_smithy_client4.strictParseLong)(output.headers[_cl_])],
        [_CCRC]: [, output.headers[_xacc]],
        [_CCRCC]: [, output.headers[_xacc_]],
        [_CSHA]: [, output.headers[_xacs]],
        [_CSHAh]: [, output.headers[_xacs_]],
        [_ETa]: [, output.headers[_eta]],
        [_MM]: [() => void 0 !== output.headers[_xamm], () => (0, import_smithy_client4.strictParseInt32)(output.headers[_xamm])],
        [_VI]: [, output.headers[_xavi]],
        [_CC]: [, output.headers[_cc]],
        [_CD]: [, output.headers[_cd]],
        [_CE]: [, output.headers[_ce]],
        [_CL]: [, output.headers[_cl]],
        [_CT]: [, output.headers[_ct]],
        [_E]: [() => void 0 !== output.headers[_e], () => (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc7231DateTime)(output.headers[_e]))],
        [_ES]: [, output.headers[_ex]],
        [_WRL]: [, output.headers[_xawrl]],
        [_SSE]: [, output.headers[_xasse]],
        [_SSECA]: [, output.headers[_xasseca]],
        [_SSECKMD]: [, output.headers[_xasseckm]],
        [_SSEKMSKI]: [, output.headers[_xasseakki]],
        [_BKE]: [() => void 0 !== output.headers[_xassebke], () => (0, import_smithy_client4.parseBoolean)(output.headers[_xassebke])],
        [_SC]: [, output.headers[_xasc]],
        [_RC]: [, output.headers[_xarc]],
        [_RS]: [, output.headers[_xars]],
        [_PC]: [() => void 0 !== output.headers[_xampc], () => (0, import_smithy_client4.strictParseInt32)(output.headers[_xampc])],
        [_OLM]: [, output.headers[_xaolm]],
        [_OLRUD]: [
          () => void 0 !== output.headers[_xaolrud],
          () => (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output.headers[_xaolrud]))
        ],
        [_OLLHS]: [, output.headers[_xaollh]],
        Metadata: [
          ,
          Object.keys(output.headers).filter((header) => header.startsWith("x-amz-meta-")).reduce((acc, header) => {
            acc[header.substring(11)] = output.headers[header];
            return acc;
          }, {})
        ]
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_HeadObjectCommand");
    var de_ListBucketAnalyticsConfigurationsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context)), "body");
      if (data.AnalyticsConfiguration === "") {
        contents[_ACLn] = [];
      } else if (data[_AC] != null) {
        contents[_ACLn] = de_AnalyticsConfigurationList((0, import_smithy_client4.getArrayIfSingleItem)(data[_AC]), context);
      }
      if (data[_CTo] != null) {
        contents[_CTo] = (0, import_smithy_client4.expectString)(data[_CTo]);
      }
      if (data[_IT] != null) {
        contents[_IT] = (0, import_smithy_client4.parseBoolean)(data[_IT]);
      }
      if (data[_NCT] != null) {
        contents[_NCT] = (0, import_smithy_client4.expectString)(data[_NCT]);
      }
      return contents;
    }, "de_ListBucketAnalyticsConfigurationsCommand");
    var de_ListBucketIntelligentTieringConfigurationsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context)), "body");
      if (data[_CTo] != null) {
        contents[_CTo] = (0, import_smithy_client4.expectString)(data[_CTo]);
      }
      if (data.IntelligentTieringConfiguration === "") {
        contents[_ITCL] = [];
      } else if (data[_ITC] != null) {
        contents[_ITCL] = de_IntelligentTieringConfigurationList((0, import_smithy_client4.getArrayIfSingleItem)(data[_ITC]), context);
      }
      if (data[_IT] != null) {
        contents[_IT] = (0, import_smithy_client4.parseBoolean)(data[_IT]);
      }
      if (data[_NCT] != null) {
        contents[_NCT] = (0, import_smithy_client4.expectString)(data[_NCT]);
      }
      return contents;
    }, "de_ListBucketIntelligentTieringConfigurationsCommand");
    var de_ListBucketInventoryConfigurationsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context)), "body");
      if (data[_CTo] != null) {
        contents[_CTo] = (0, import_smithy_client4.expectString)(data[_CTo]);
      }
      if (data.InventoryConfiguration === "") {
        contents[_ICL] = [];
      } else if (data[_IC] != null) {
        contents[_ICL] = de_InventoryConfigurationList((0, import_smithy_client4.getArrayIfSingleItem)(data[_IC]), context);
      }
      if (data[_IT] != null) {
        contents[_IT] = (0, import_smithy_client4.parseBoolean)(data[_IT]);
      }
      if (data[_NCT] != null) {
        contents[_NCT] = (0, import_smithy_client4.expectString)(data[_NCT]);
      }
      return contents;
    }, "de_ListBucketInventoryConfigurationsCommand");
    var de_ListBucketMetricsConfigurationsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context)), "body");
      if (data[_CTo] != null) {
        contents[_CTo] = (0, import_smithy_client4.expectString)(data[_CTo]);
      }
      if (data[_IT] != null) {
        contents[_IT] = (0, import_smithy_client4.parseBoolean)(data[_IT]);
      }
      if (data.MetricsConfiguration === "") {
        contents[_MCL] = [];
      } else if (data[_MC] != null) {
        contents[_MCL] = de_MetricsConfigurationList((0, import_smithy_client4.getArrayIfSingleItem)(data[_MC]), context);
      }
      if (data[_NCT] != null) {
        contents[_NCT] = (0, import_smithy_client4.expectString)(data[_NCT]);
      }
      return contents;
    }, "de_ListBucketMetricsConfigurationsCommand");
    var de_ListBucketsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context)), "body");
      if (data.Buckets === "") {
        contents[_Bu] = [];
      } else if (data[_Bu] != null && data[_Bu][_B] != null) {
        contents[_Bu] = de_Buckets((0, import_smithy_client4.getArrayIfSingleItem)(data[_Bu][_B]), context);
      }
      if (data[_CTo] != null) {
        contents[_CTo] = (0, import_smithy_client4.expectString)(data[_CTo]);
      }
      if (data[_O] != null) {
        contents[_O] = de_Owner(data[_O], context);
      }
      if (data[_P] != null) {
        contents[_P] = (0, import_smithy_client4.expectString)(data[_P]);
      }
      return contents;
    }, "de_ListBucketsCommand");
    var de_ListDirectoryBucketsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context)), "body");
      if (data.Buckets === "") {
        contents[_Bu] = [];
      } else if (data[_Bu] != null && data[_Bu][_B] != null) {
        contents[_Bu] = de_Buckets((0, import_smithy_client4.getArrayIfSingleItem)(data[_Bu][_B]), context);
      }
      if (data[_CTo] != null) {
        contents[_CTo] = (0, import_smithy_client4.expectString)(data[_CTo]);
      }
      return contents;
    }, "de_ListDirectoryBucketsCommand");
    var de_ListMultipartUploadsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output),
        [_RC]: [, output.headers[_xarc]]
      });
      const data = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context)), "body");
      if (data[_B] != null) {
        contents[_B] = (0, import_smithy_client4.expectString)(data[_B]);
      }
      if (data.CommonPrefixes === "") {
        contents[_CP] = [];
      } else if (data[_CP] != null) {
        contents[_CP] = de_CommonPrefixList((0, import_smithy_client4.getArrayIfSingleItem)(data[_CP]), context);
      }
      if (data[_D] != null) {
        contents[_D] = (0, import_smithy_client4.expectString)(data[_D]);
      }
      if (data[_ET] != null) {
        contents[_ET] = (0, import_smithy_client4.expectString)(data[_ET]);
      }
      if (data[_IT] != null) {
        contents[_IT] = (0, import_smithy_client4.parseBoolean)(data[_IT]);
      }
      if (data[_KM] != null) {
        contents[_KM] = (0, import_smithy_client4.expectString)(data[_KM]);
      }
      if (data[_MU] != null) {
        contents[_MU] = (0, import_smithy_client4.strictParseInt32)(data[_MU]);
      }
      if (data[_NKM] != null) {
        contents[_NKM] = (0, import_smithy_client4.expectString)(data[_NKM]);
      }
      if (data[_NUIM] != null) {
        contents[_NUIM] = (0, import_smithy_client4.expectString)(data[_NUIM]);
      }
      if (data[_P] != null) {
        contents[_P] = (0, import_smithy_client4.expectString)(data[_P]);
      }
      if (data[_UIM] != null) {
        contents[_UIM] = (0, import_smithy_client4.expectString)(data[_UIM]);
      }
      if (data.Upload === "") {
        contents[_Up] = [];
      } else if (data[_U] != null) {
        contents[_Up] = de_MultipartUploadList((0, import_smithy_client4.getArrayIfSingleItem)(data[_U]), context);
      }
      return contents;
    }, "de_ListMultipartUploadsCommand");
    var de_ListObjectsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output),
        [_RC]: [, output.headers[_xarc]]
      });
      const data = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context)), "body");
      if (data.CommonPrefixes === "") {
        contents[_CP] = [];
      } else if (data[_CP] != null) {
        contents[_CP] = de_CommonPrefixList((0, import_smithy_client4.getArrayIfSingleItem)(data[_CP]), context);
      }
      if (data.Contents === "") {
        contents[_Co] = [];
      } else if (data[_Co] != null) {
        contents[_Co] = de_ObjectList((0, import_smithy_client4.getArrayIfSingleItem)(data[_Co]), context);
      }
      if (data[_D] != null) {
        contents[_D] = (0, import_smithy_client4.expectString)(data[_D]);
      }
      if (data[_ET] != null) {
        contents[_ET] = (0, import_smithy_client4.expectString)(data[_ET]);
      }
      if (data[_IT] != null) {
        contents[_IT] = (0, import_smithy_client4.parseBoolean)(data[_IT]);
      }
      if (data[_M] != null) {
        contents[_M] = (0, import_smithy_client4.expectString)(data[_M]);
      }
      if (data[_MK] != null) {
        contents[_MK] = (0, import_smithy_client4.strictParseInt32)(data[_MK]);
      }
      if (data[_N] != null) {
        contents[_N] = (0, import_smithy_client4.expectString)(data[_N]);
      }
      if (data[_NM] != null) {
        contents[_NM] = (0, import_smithy_client4.expectString)(data[_NM]);
      }
      if (data[_P] != null) {
        contents[_P] = (0, import_smithy_client4.expectString)(data[_P]);
      }
      return contents;
    }, "de_ListObjectsCommand");
    var de_ListObjectsV2Command = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output),
        [_RC]: [, output.headers[_xarc]]
      });
      const data = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context)), "body");
      if (data.CommonPrefixes === "") {
        contents[_CP] = [];
      } else if (data[_CP] != null) {
        contents[_CP] = de_CommonPrefixList((0, import_smithy_client4.getArrayIfSingleItem)(data[_CP]), context);
      }
      if (data.Contents === "") {
        contents[_Co] = [];
      } else if (data[_Co] != null) {
        contents[_Co] = de_ObjectList((0, import_smithy_client4.getArrayIfSingleItem)(data[_Co]), context);
      }
      if (data[_CTo] != null) {
        contents[_CTo] = (0, import_smithy_client4.expectString)(data[_CTo]);
      }
      if (data[_D] != null) {
        contents[_D] = (0, import_smithy_client4.expectString)(data[_D]);
      }
      if (data[_ET] != null) {
        contents[_ET] = (0, import_smithy_client4.expectString)(data[_ET]);
      }
      if (data[_IT] != null) {
        contents[_IT] = (0, import_smithy_client4.parseBoolean)(data[_IT]);
      }
      if (data[_KC] != null) {
        contents[_KC] = (0, import_smithy_client4.strictParseInt32)(data[_KC]);
      }
      if (data[_MK] != null) {
        contents[_MK] = (0, import_smithy_client4.strictParseInt32)(data[_MK]);
      }
      if (data[_N] != null) {
        contents[_N] = (0, import_smithy_client4.expectString)(data[_N]);
      }
      if (data[_NCT] != null) {
        contents[_NCT] = (0, import_smithy_client4.expectString)(data[_NCT]);
      }
      if (data[_P] != null) {
        contents[_P] = (0, import_smithy_client4.expectString)(data[_P]);
      }
      if (data[_SA] != null) {
        contents[_SA] = (0, import_smithy_client4.expectString)(data[_SA]);
      }
      return contents;
    }, "de_ListObjectsV2Command");
    var de_ListObjectVersionsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output),
        [_RC]: [, output.headers[_xarc]]
      });
      const data = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context)), "body");
      if (data.CommonPrefixes === "") {
        contents[_CP] = [];
      } else if (data[_CP] != null) {
        contents[_CP] = de_CommonPrefixList((0, import_smithy_client4.getArrayIfSingleItem)(data[_CP]), context);
      }
      if (data.DeleteMarker === "") {
        contents[_DMe] = [];
      } else if (data[_DM] != null) {
        contents[_DMe] = de_DeleteMarkers((0, import_smithy_client4.getArrayIfSingleItem)(data[_DM]), context);
      }
      if (data[_D] != null) {
        contents[_D] = (0, import_smithy_client4.expectString)(data[_D]);
      }
      if (data[_ET] != null) {
        contents[_ET] = (0, import_smithy_client4.expectString)(data[_ET]);
      }
      if (data[_IT] != null) {
        contents[_IT] = (0, import_smithy_client4.parseBoolean)(data[_IT]);
      }
      if (data[_KM] != null) {
        contents[_KM] = (0, import_smithy_client4.expectString)(data[_KM]);
      }
      if (data[_MK] != null) {
        contents[_MK] = (0, import_smithy_client4.strictParseInt32)(data[_MK]);
      }
      if (data[_N] != null) {
        contents[_N] = (0, import_smithy_client4.expectString)(data[_N]);
      }
      if (data[_NKM] != null) {
        contents[_NKM] = (0, import_smithy_client4.expectString)(data[_NKM]);
      }
      if (data[_NVIM] != null) {
        contents[_NVIM] = (0, import_smithy_client4.expectString)(data[_NVIM]);
      }
      if (data[_P] != null) {
        contents[_P] = (0, import_smithy_client4.expectString)(data[_P]);
      }
      if (data[_VIM] != null) {
        contents[_VIM] = (0, import_smithy_client4.expectString)(data[_VIM]);
      }
      if (data.Version === "") {
        contents[_Ve] = [];
      } else if (data[_V] != null) {
        contents[_Ve] = de_ObjectVersionList((0, import_smithy_client4.getArrayIfSingleItem)(data[_V]), context);
      }
      return contents;
    }, "de_ListObjectVersionsCommand");
    var de_ListPartsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output),
        [_AD]: [
          () => void 0 !== output.headers[_xaad],
          () => (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc7231DateTime)(output.headers[_xaad]))
        ],
        [_ARI]: [, output.headers[_xaari]],
        [_RC]: [, output.headers[_xarc]]
      });
      const data = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context)), "body");
      if (data[_B] != null) {
        contents[_B] = (0, import_smithy_client4.expectString)(data[_B]);
      }
      if (data[_CA] != null) {
        contents[_CA] = (0, import_smithy_client4.expectString)(data[_CA]);
      }
      if (data[_In] != null) {
        contents[_In] = de_Initiator(data[_In], context);
      }
      if (data[_IT] != null) {
        contents[_IT] = (0, import_smithy_client4.parseBoolean)(data[_IT]);
      }
      if (data[_K] != null) {
        contents[_K] = (0, import_smithy_client4.expectString)(data[_K]);
      }
      if (data[_MP] != null) {
        contents[_MP] = (0, import_smithy_client4.strictParseInt32)(data[_MP]);
      }
      if (data[_NPNM] != null) {
        contents[_NPNM] = (0, import_smithy_client4.expectString)(data[_NPNM]);
      }
      if (data[_O] != null) {
        contents[_O] = de_Owner(data[_O], context);
      }
      if (data[_PNM] != null) {
        contents[_PNM] = (0, import_smithy_client4.expectString)(data[_PNM]);
      }
      if (data.Part === "") {
        contents[_Part] = [];
      } else if (data[_Par] != null) {
        contents[_Part] = de_Parts((0, import_smithy_client4.getArrayIfSingleItem)(data[_Par]), context);
      }
      if (data[_SC] != null) {
        contents[_SC] = (0, import_smithy_client4.expectString)(data[_SC]);
      }
      if (data[_UI] != null) {
        contents[_UI] = (0, import_smithy_client4.expectString)(data[_UI]);
      }
      return contents;
    }, "de_ListPartsCommand");
    var de_PutBucketAccelerateConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_PutBucketAccelerateConfigurationCommand");
    var de_PutBucketAclCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_PutBucketAclCommand");
    var de_PutBucketAnalyticsConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_PutBucketAnalyticsConfigurationCommand");
    var de_PutBucketCorsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_PutBucketCorsCommand");
    var de_PutBucketEncryptionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_PutBucketEncryptionCommand");
    var de_PutBucketIntelligentTieringConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_PutBucketIntelligentTieringConfigurationCommand");
    var de_PutBucketInventoryConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_PutBucketInventoryConfigurationCommand");
    var de_PutBucketLifecycleConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output),
        [_TDMOS]: [, output.headers[_xatdmos]]
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_PutBucketLifecycleConfigurationCommand");
    var de_PutBucketLoggingCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_PutBucketLoggingCommand");
    var de_PutBucketMetricsConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_PutBucketMetricsConfigurationCommand");
    var de_PutBucketNotificationConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_PutBucketNotificationConfigurationCommand");
    var de_PutBucketOwnershipControlsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_PutBucketOwnershipControlsCommand");
    var de_PutBucketPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_PutBucketPolicyCommand");
    var de_PutBucketReplicationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_PutBucketReplicationCommand");
    var de_PutBucketRequestPaymentCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_PutBucketRequestPaymentCommand");
    var de_PutBucketTaggingCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_PutBucketTaggingCommand");
    var de_PutBucketVersioningCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_PutBucketVersioningCommand");
    var de_PutBucketWebsiteCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_PutBucketWebsiteCommand");
    var de_PutObjectCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output),
        [_Exp]: [, output.headers[_xae]],
        [_ETa]: [, output.headers[_eta]],
        [_CCRC]: [, output.headers[_xacc]],
        [_CCRCC]: [, output.headers[_xacc_]],
        [_CSHA]: [, output.headers[_xacs]],
        [_CSHAh]: [, output.headers[_xacs_]],
        [_SSE]: [, output.headers[_xasse]],
        [_VI]: [, output.headers[_xavi]],
        [_SSECA]: [, output.headers[_xasseca]],
        [_SSECKMD]: [, output.headers[_xasseckm]],
        [_SSEKMSKI]: [, output.headers[_xasseakki]],
        [_SSEKMSEC]: [, output.headers[_xassec]],
        [_BKE]: [() => void 0 !== output.headers[_xassebke], () => (0, import_smithy_client4.parseBoolean)(output.headers[_xassebke])],
        [_Si]: [() => void 0 !== output.headers[_xaos], () => (0, import_smithy_client4.strictParseLong)(output.headers[_xaos])],
        [_RC]: [, output.headers[_xarc]]
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_PutObjectCommand");
    var de_PutObjectAclCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output),
        [_RC]: [, output.headers[_xarc]]
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_PutObjectAclCommand");
    var de_PutObjectLegalHoldCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output),
        [_RC]: [, output.headers[_xarc]]
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_PutObjectLegalHoldCommand");
    var de_PutObjectLockConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output),
        [_RC]: [, output.headers[_xarc]]
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_PutObjectLockConfigurationCommand");
    var de_PutObjectRetentionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output),
        [_RC]: [, output.headers[_xarc]]
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_PutObjectRetentionCommand");
    var de_PutObjectTaggingCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output),
        [_VI]: [, output.headers[_xavi]]
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_PutObjectTaggingCommand");
    var de_PutPublicAccessBlockCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_PutPublicAccessBlockCommand");
    var de_RestoreObjectCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output),
        [_RC]: [, output.headers[_xarc]],
        [_ROP]: [, output.headers[_xarop]]
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_RestoreObjectCommand");
    var de_SelectObjectContentCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = output.body;
      contents.Payload = de_SelectObjectContentEventStream(data, context);
      return contents;
    }, "de_SelectObjectContentCommand");
    var de_UploadPartCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output),
        [_SSE]: [, output.headers[_xasse]],
        [_ETa]: [, output.headers[_eta]],
        [_CCRC]: [, output.headers[_xacc]],
        [_CCRCC]: [, output.headers[_xacc_]],
        [_CSHA]: [, output.headers[_xacs]],
        [_CSHAh]: [, output.headers[_xacs_]],
        [_SSECA]: [, output.headers[_xasseca]],
        [_SSECKMD]: [, output.headers[_xasseckm]],
        [_SSEKMSKI]: [, output.headers[_xasseakki]],
        [_BKE]: [() => void 0 !== output.headers[_xassebke], () => (0, import_smithy_client4.parseBoolean)(output.headers[_xassebke])],
        [_RC]: [, output.headers[_xarc]]
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_UploadPartCommand");
    var de_UploadPartCopyCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output),
        [_CSVI]: [, output.headers[_xacsvi]],
        [_SSE]: [, output.headers[_xasse]],
        [_SSECA]: [, output.headers[_xasseca]],
        [_SSECKMD]: [, output.headers[_xasseckm]],
        [_SSEKMSKI]: [, output.headers[_xasseakki]],
        [_BKE]: [() => void 0 !== output.headers[_xassebke], () => (0, import_smithy_client4.parseBoolean)(output.headers[_xassebke])],
        [_RC]: [, output.headers[_xarc]]
      });
      const data = (0, import_smithy_client4.expectObject)(await (0, import_core4.parseXmlBody)(output.body, context));
      contents.CopyPartResult = de_CopyPartResult(data, context);
      return contents;
    }, "de_UploadPartCopyCommand");
    var de_WriteGetObjectResponseCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_WriteGetObjectResponseCommand");
    var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await (0, import_core4.parseXmlErrorBody)(output.body, context)
      };
      const errorCode = (0, import_core4.loadRestXmlErrorCode)(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchUpload":
        case "com.amazonaws.s3#NoSuchUpload":
          throw await de_NoSuchUploadRes(parsedOutput, context);
        case "ObjectNotInActiveTierError":
        case "com.amazonaws.s3#ObjectNotInActiveTierError":
          throw await de_ObjectNotInActiveTierErrorRes(parsedOutput, context);
        case "BucketAlreadyExists":
        case "com.amazonaws.s3#BucketAlreadyExists":
          throw await de_BucketAlreadyExistsRes(parsedOutput, context);
        case "BucketAlreadyOwnedByYou":
        case "com.amazonaws.s3#BucketAlreadyOwnedByYou":
          throw await de_BucketAlreadyOwnedByYouRes(parsedOutput, context);
        case "NoSuchBucket":
        case "com.amazonaws.s3#NoSuchBucket":
          throw await de_NoSuchBucketRes(parsedOutput, context);
        case "InvalidObjectState":
        case "com.amazonaws.s3#InvalidObjectState":
          throw await de_InvalidObjectStateRes(parsedOutput, context);
        case "NoSuchKey":
        case "com.amazonaws.s3#NoSuchKey":
          throw await de_NoSuchKeyRes(parsedOutput, context);
        case "NotFound":
        case "com.amazonaws.s3#NotFound":
          throw await de_NotFoundRes(parsedOutput, context);
        case "EncryptionTypeMismatch":
        case "com.amazonaws.s3#EncryptionTypeMismatch":
          throw await de_EncryptionTypeMismatchRes(parsedOutput, context);
        case "InvalidRequest":
        case "com.amazonaws.s3#InvalidRequest":
          throw await de_InvalidRequestRes(parsedOutput, context);
        case "InvalidWriteOffset":
        case "com.amazonaws.s3#InvalidWriteOffset":
          throw await de_InvalidWriteOffsetRes(parsedOutput, context);
        case "TooManyParts":
        case "com.amazonaws.s3#TooManyParts":
          throw await de_TooManyPartsRes(parsedOutput, context);
        case "ObjectAlreadyInActiveTierError":
        case "com.amazonaws.s3#ObjectAlreadyInActiveTierError":
          throw await de_ObjectAlreadyInActiveTierErrorRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    }, "de_CommandError");
    var throwDefaultError = (0, import_smithy_client4.withBaseException)(S3ServiceException);
    var de_BucketAlreadyExistsRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      const exception = new BucketAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_BucketAlreadyExistsRes");
    var de_BucketAlreadyOwnedByYouRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      const exception = new BucketAlreadyOwnedByYou({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_BucketAlreadyOwnedByYouRes");
    var de_EncryptionTypeMismatchRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      const exception = new EncryptionTypeMismatch({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_EncryptionTypeMismatchRes");
    var de_InvalidObjectStateRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      if (data[_AT] != null) {
        contents[_AT] = (0, import_smithy_client4.expectString)(data[_AT]);
      }
      if (data[_SC] != null) {
        contents[_SC] = (0, import_smithy_client4.expectString)(data[_SC]);
      }
      const exception = new InvalidObjectState({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InvalidObjectStateRes");
    var de_InvalidRequestRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      const exception = new InvalidRequest({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InvalidRequestRes");
    var de_InvalidWriteOffsetRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      const exception = new InvalidWriteOffset({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InvalidWriteOffsetRes");
    var de_NoSuchBucketRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      const exception = new NoSuchBucket({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_NoSuchBucketRes");
    var de_NoSuchKeyRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      const exception = new NoSuchKey({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_NoSuchKeyRes");
    var de_NoSuchUploadRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      const exception = new NoSuchUpload({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_NoSuchUploadRes");
    var de_NotFoundRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      const exception = new NotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_NotFoundRes");
    var de_ObjectAlreadyInActiveTierErrorRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      const exception = new ObjectAlreadyInActiveTierError({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_ObjectAlreadyInActiveTierErrorRes");
    var de_ObjectNotInActiveTierErrorRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      const exception = new ObjectNotInActiveTierError({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_ObjectNotInActiveTierErrorRes");
    var de_TooManyPartsRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      const exception = new TooManyParts({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_TooManyPartsRes");
    var de_SelectObjectContentEventStream = /* @__PURE__ */ __name((output, context) => {
      return context.eventStreamMarshaller.deserialize(output, async (event) => {
        if (event["Records"] != null) {
          return {
            Records: await de_RecordsEvent_event(event["Records"], context)
          };
        }
        if (event["Stats"] != null) {
          return {
            Stats: await de_StatsEvent_event(event["Stats"], context)
          };
        }
        if (event["Progress"] != null) {
          return {
            Progress: await de_ProgressEvent_event(event["Progress"], context)
          };
        }
        if (event["Cont"] != null) {
          return {
            Cont: await de_ContinuationEvent_event(event["Cont"], context)
          };
        }
        if (event["End"] != null) {
          return {
            End: await de_EndEvent_event(event["End"], context)
          };
        }
        return { $unknown: output };
      });
    }, "de_SelectObjectContentEventStream");
    var de_ContinuationEvent_event = /* @__PURE__ */ __name(async (output, context) => {
      const contents = {};
      const data = await (0, import_core4.parseXmlBody)(output.body, context);
      Object.assign(contents, de_ContinuationEvent(data, context));
      return contents;
    }, "de_ContinuationEvent_event");
    var de_EndEvent_event = /* @__PURE__ */ __name(async (output, context) => {
      const contents = {};
      const data = await (0, import_core4.parseXmlBody)(output.body, context);
      Object.assign(contents, de_EndEvent(data, context));
      return contents;
    }, "de_EndEvent_event");
    var de_ProgressEvent_event = /* @__PURE__ */ __name(async (output, context) => {
      const contents = {};
      const data = await (0, import_core4.parseXmlBody)(output.body, context);
      contents.Details = de_Progress(data, context);
      return contents;
    }, "de_ProgressEvent_event");
    var de_RecordsEvent_event = /* @__PURE__ */ __name(async (output, context) => {
      const contents = {};
      contents.Payload = output.body;
      return contents;
    }, "de_RecordsEvent_event");
    var de_StatsEvent_event = /* @__PURE__ */ __name(async (output, context) => {
      const contents = {};
      const data = await (0, import_core4.parseXmlBody)(output.body, context);
      contents.Details = de_Stats(data, context);
      return contents;
    }, "de_StatsEvent_event");
    var se_AbortIncompleteMultipartUpload = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_AIMU);
      if (input[_DAI] != null) {
        bn.c(import_xml_builder.XmlNode.of(_DAI, String(input[_DAI])).n(_DAI));
      }
      return bn;
    }, "se_AbortIncompleteMultipartUpload");
    var se_AccelerateConfiguration = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_ACc);
      if (input[_S] != null) {
        bn.c(import_xml_builder.XmlNode.of(_BAS, input[_S]).n(_S));
      }
      return bn;
    }, "se_AccelerateConfiguration");
    var se_AccessControlPolicy = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_ACP);
      bn.lc(input, "Grants", "AccessControlList", () => se_Grants(input[_Gr], context));
      if (input[_O] != null) {
        bn.c(se_Owner(input[_O], context).n(_O));
      }
      return bn;
    }, "se_AccessControlPolicy");
    var se_AccessControlTranslation = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_ACT);
      if (input[_O] != null) {
        bn.c(import_xml_builder.XmlNode.of(_OOw, input[_O]).n(_O));
      }
      return bn;
    }, "se_AccessControlTranslation");
    var se_AllowedHeaders = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const n = import_xml_builder.XmlNode.of(_AH, entry);
        return n.n(_me);
      });
    }, "se_AllowedHeaders");
    var se_AllowedMethods = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const n = import_xml_builder.XmlNode.of(_AM, entry);
        return n.n(_me);
      });
    }, "se_AllowedMethods");
    var se_AllowedOrigins = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const n = import_xml_builder.XmlNode.of(_AO, entry);
        return n.n(_me);
      });
    }, "se_AllowedOrigins");
    var se_AnalyticsAndOperator = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_AAO);
      bn.cc(input, _P);
      bn.l(input, "Tags", "Tag", () => se_TagSet(input[_Tag], context));
      return bn;
    }, "se_AnalyticsAndOperator");
    var se_AnalyticsConfiguration = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_AC);
      if (input[_I] != null) {
        bn.c(import_xml_builder.XmlNode.of(_AI, input[_I]).n(_I));
      }
      if (input[_F] != null) {
        bn.c(se_AnalyticsFilter(input[_F], context).n(_F));
      }
      if (input[_SCA] != null) {
        bn.c(se_StorageClassAnalysis(input[_SCA], context).n(_SCA));
      }
      return bn;
    }, "se_AnalyticsConfiguration");
    var se_AnalyticsExportDestination = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_AED);
      if (input[_SBD] != null) {
        bn.c(se_AnalyticsS3BucketDestination(input[_SBD], context).n(_SBD));
      }
      return bn;
    }, "se_AnalyticsExportDestination");
    var se_AnalyticsFilter = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_AF);
      AnalyticsFilter.visit(input, {
        Prefix: (value) => {
          if (input[_P] != null) {
            bn.c(import_xml_builder.XmlNode.of(_P, value).n(_P));
          }
        },
        Tag: (value) => {
          if (input[_Ta] != null) {
            bn.c(se_Tag(value, context).n(_Ta));
          }
        },
        And: (value) => {
          if (input[_A] != null) {
            bn.c(se_AnalyticsAndOperator(value, context).n(_A));
          }
        },
        _: (name, value) => {
          if (!(value instanceof import_xml_builder.XmlNode || value instanceof import_xml_builder.XmlText)) {
            throw new Error("Unable to serialize unknown union members in XML.");
          }
          bn.c(new import_xml_builder.XmlNode(name).c(value));
        }
      });
      return bn;
    }, "se_AnalyticsFilter");
    var se_AnalyticsS3BucketDestination = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_ASBD);
      if (input[_Fo] != null) {
        bn.c(import_xml_builder.XmlNode.of(_ASEFF, input[_Fo]).n(_Fo));
      }
      if (input[_BAI] != null) {
        bn.c(import_xml_builder.XmlNode.of(_AIc, input[_BAI]).n(_BAI));
      }
      if (input[_B] != null) {
        bn.c(import_xml_builder.XmlNode.of(_BN, input[_B]).n(_B));
      }
      bn.cc(input, _P);
      return bn;
    }, "se_AnalyticsS3BucketDestination");
    var se_BucketInfo = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_BI);
      bn.cc(input, _DR);
      if (input[_Ty] != null) {
        bn.c(import_xml_builder.XmlNode.of(_BT, input[_Ty]).n(_Ty));
      }
      return bn;
    }, "se_BucketInfo");
    var se_BucketLifecycleConfiguration = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_BLC);
      bn.l(input, "Rules", "Rule", () => se_LifecycleRules(input[_Rul], context));
      return bn;
    }, "se_BucketLifecycleConfiguration");
    var se_BucketLoggingStatus = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_BLS);
      if (input[_LE] != null) {
        bn.c(se_LoggingEnabled(input[_LE], context).n(_LE));
      }
      return bn;
    }, "se_BucketLoggingStatus");
    var se_CompletedMultipartUpload = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_CMU);
      bn.l(input, "Parts", "Part", () => se_CompletedPartList(input[_Part], context));
      return bn;
    }, "se_CompletedMultipartUpload");
    var se_CompletedPart = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_CPo);
      bn.cc(input, _ETa);
      bn.cc(input, _CCRC);
      bn.cc(input, _CCRCC);
      bn.cc(input, _CSHA);
      bn.cc(input, _CSHAh);
      if (input[_PN] != null) {
        bn.c(import_xml_builder.XmlNode.of(_PN, String(input[_PN])).n(_PN));
      }
      return bn;
    }, "se_CompletedPart");
    var se_CompletedPartList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const n = se_CompletedPart(entry, context);
        return n.n(_me);
      });
    }, "se_CompletedPartList");
    var se_Condition = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_Con);
      bn.cc(input, _HECRE);
      bn.cc(input, _KPE);
      return bn;
    }, "se_Condition");
    var se_CORSConfiguration = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_CORSC);
      bn.l(input, "CORSRules", "CORSRule", () => se_CORSRules(input[_CORSRu], context));
      return bn;
    }, "se_CORSConfiguration");
    var se_CORSRule = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_CORSR);
      bn.cc(input, _ID_);
      bn.l(input, "AllowedHeaders", "AllowedHeader", () => se_AllowedHeaders(input[_AHl], context));
      bn.l(input, "AllowedMethods", "AllowedMethod", () => se_AllowedMethods(input[_AMl], context));
      bn.l(input, "AllowedOrigins", "AllowedOrigin", () => se_AllowedOrigins(input[_AOl], context));
      bn.l(input, "ExposeHeaders", "ExposeHeader", () => se_ExposeHeaders(input[_EH], context));
      if (input[_MAS] != null) {
        bn.c(import_xml_builder.XmlNode.of(_MAS, String(input[_MAS])).n(_MAS));
      }
      return bn;
    }, "se_CORSRule");
    var se_CORSRules = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const n = se_CORSRule(entry, context);
        return n.n(_me);
      });
    }, "se_CORSRules");
    var se_CreateBucketConfiguration = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_CBC);
      if (input[_LC] != null) {
        bn.c(import_xml_builder.XmlNode.of(_BLCu, input[_LC]).n(_LC));
      }
      if (input[_L] != null) {
        bn.c(se_LocationInfo(input[_L], context).n(_L));
      }
      if (input[_B] != null) {
        bn.c(se_BucketInfo(input[_B], context).n(_B));
      }
      return bn;
    }, "se_CreateBucketConfiguration");
    var se_CSVInput = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_CSVIn);
      bn.cc(input, _FHI);
      bn.cc(input, _Com);
      bn.cc(input, _QEC);
      bn.cc(input, _RD);
      bn.cc(input, _FD);
      bn.cc(input, _QCuo);
      if (input[_AQRD] != null) {
        bn.c(import_xml_builder.XmlNode.of(_AQRD, String(input[_AQRD])).n(_AQRD));
      }
      return bn;
    }, "se_CSVInput");
    var se_CSVOutput = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_CSVO);
      bn.cc(input, _QF);
      bn.cc(input, _QEC);
      bn.cc(input, _RD);
      bn.cc(input, _FD);
      bn.cc(input, _QCuo);
      return bn;
    }, "se_CSVOutput");
    var se_DefaultRetention = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_DRe);
      if (input[_Mo] != null) {
        bn.c(import_xml_builder.XmlNode.of(_OLRM, input[_Mo]).n(_Mo));
      }
      if (input[_Da] != null) {
        bn.c(import_xml_builder.XmlNode.of(_Da, String(input[_Da])).n(_Da));
      }
      if (input[_Y] != null) {
        bn.c(import_xml_builder.XmlNode.of(_Y, String(input[_Y])).n(_Y));
      }
      return bn;
    }, "se_DefaultRetention");
    var se_Delete = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_Del);
      bn.l(input, "Objects", "Object", () => se_ObjectIdentifierList(input[_Ob], context));
      if (input[_Q] != null) {
        bn.c(import_xml_builder.XmlNode.of(_Q, String(input[_Q])).n(_Q));
      }
      return bn;
    }, "se_Delete");
    var se_DeleteMarkerReplication = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_DMR);
      if (input[_S] != null) {
        bn.c(import_xml_builder.XmlNode.of(_DMRS, input[_S]).n(_S));
      }
      return bn;
    }, "se_DeleteMarkerReplication");
    var se_Destination = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_Des);
      if (input[_B] != null) {
        bn.c(import_xml_builder.XmlNode.of(_BN, input[_B]).n(_B));
      }
      if (input[_Ac] != null) {
        bn.c(import_xml_builder.XmlNode.of(_AIc, input[_Ac]).n(_Ac));
      }
      bn.cc(input, _SC);
      if (input[_ACT] != null) {
        bn.c(se_AccessControlTranslation(input[_ACT], context).n(_ACT));
      }
      if (input[_ECn] != null) {
        bn.c(se_EncryptionConfiguration(input[_ECn], context).n(_ECn));
      }
      if (input[_RTe] != null) {
        bn.c(se_ReplicationTime(input[_RTe], context).n(_RTe));
      }
      if (input[_Me] != null) {
        bn.c(se_Metrics(input[_Me], context).n(_Me));
      }
      return bn;
    }, "se_Destination");
    var se_Encryption = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_En);
      if (input[_ETn] != null) {
        bn.c(import_xml_builder.XmlNode.of(_SSE, input[_ETn]).n(_ETn));
      }
      if (input[_KMSKI] != null) {
        bn.c(import_xml_builder.XmlNode.of(_SSEKMSKI, input[_KMSKI]).n(_KMSKI));
      }
      bn.cc(input, _KMSC);
      return bn;
    }, "se_Encryption");
    var se_EncryptionConfiguration = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_ECn);
      bn.cc(input, _RKKID);
      return bn;
    }, "se_EncryptionConfiguration");
    var se_ErrorDocument = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_ED);
      if (input[_K] != null) {
        bn.c(import_xml_builder.XmlNode.of(_OK, input[_K]).n(_K));
      }
      return bn;
    }, "se_ErrorDocument");
    var se_EventBridgeConfiguration = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_EBC);
      return bn;
    }, "se_EventBridgeConfiguration");
    var se_EventList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const n = import_xml_builder.XmlNode.of(_Ev, entry);
        return n.n(_me);
      });
    }, "se_EventList");
    var se_ExistingObjectReplication = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_EOR);
      if (input[_S] != null) {
        bn.c(import_xml_builder.XmlNode.of(_EORS, input[_S]).n(_S));
      }
      return bn;
    }, "se_ExistingObjectReplication");
    var se_ExposeHeaders = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const n = import_xml_builder.XmlNode.of(_EHx, entry);
        return n.n(_me);
      });
    }, "se_ExposeHeaders");
    var se_FilterRule = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_FR);
      if (input[_N] != null) {
        bn.c(import_xml_builder.XmlNode.of(_FRN, input[_N]).n(_N));
      }
      if (input[_Va] != null) {
        bn.c(import_xml_builder.XmlNode.of(_FRV, input[_Va]).n(_Va));
      }
      return bn;
    }, "se_FilterRule");
    var se_FilterRuleList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const n = se_FilterRule(entry, context);
        return n.n(_me);
      });
    }, "se_FilterRuleList");
    var se_GlacierJobParameters = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_GJP);
      bn.cc(input, _Ti);
      return bn;
    }, "se_GlacierJobParameters");
    var se_Grant = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_G);
      if (input[_Gra] != null) {
        const n = se_Grantee(input[_Gra], context).n(_Gra);
        n.a("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
        bn.c(n);
      }
      bn.cc(input, _Pe);
      return bn;
    }, "se_Grant");
    var se_Grantee = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_Gra);
      bn.cc(input, _DN);
      bn.cc(input, _EA);
      bn.cc(input, _ID_);
      bn.cc(input, _URI);
      bn.a("xsi:type", input[_Ty]);
      return bn;
    }, "se_Grantee");
    var se_Grants = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const n = se_Grant(entry, context);
        return n.n(_G);
      });
    }, "se_Grants");
    var se_IndexDocument = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_ID);
      bn.cc(input, _Su);
      return bn;
    }, "se_IndexDocument");
    var se_InputSerialization = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_IS);
      if (input[_CSV] != null) {
        bn.c(se_CSVInput(input[_CSV], context).n(_CSV));
      }
      bn.cc(input, _CTom);
      if (input[_JSON] != null) {
        bn.c(se_JSONInput(input[_JSON], context).n(_JSON));
      }
      if (input[_Parq] != null) {
        bn.c(se_ParquetInput(input[_Parq], context).n(_Parq));
      }
      return bn;
    }, "se_InputSerialization");
    var se_IntelligentTieringAndOperator = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_ITAO);
      bn.cc(input, _P);
      bn.l(input, "Tags", "Tag", () => se_TagSet(input[_Tag], context));
      return bn;
    }, "se_IntelligentTieringAndOperator");
    var se_IntelligentTieringConfiguration = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_ITC);
      if (input[_I] != null) {
        bn.c(import_xml_builder.XmlNode.of(_ITI, input[_I]).n(_I));
      }
      if (input[_F] != null) {
        bn.c(se_IntelligentTieringFilter(input[_F], context).n(_F));
      }
      if (input[_S] != null) {
        bn.c(import_xml_builder.XmlNode.of(_ITS, input[_S]).n(_S));
      }
      bn.l(input, "Tierings", "Tiering", () => se_TieringList(input[_Tie], context));
      return bn;
    }, "se_IntelligentTieringConfiguration");
    var se_IntelligentTieringFilter = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_ITF);
      bn.cc(input, _P);
      if (input[_Ta] != null) {
        bn.c(se_Tag(input[_Ta], context).n(_Ta));
      }
      if (input[_A] != null) {
        bn.c(se_IntelligentTieringAndOperator(input[_A], context).n(_A));
      }
      return bn;
    }, "se_IntelligentTieringFilter");
    var se_InventoryConfiguration = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_IC);
      if (input[_Des] != null) {
        bn.c(se_InventoryDestination(input[_Des], context).n(_Des));
      }
      if (input[_IE] != null) {
        bn.c(import_xml_builder.XmlNode.of(_IE, String(input[_IE])).n(_IE));
      }
      if (input[_F] != null) {
        bn.c(se_InventoryFilter(input[_F], context).n(_F));
      }
      if (input[_I] != null) {
        bn.c(import_xml_builder.XmlNode.of(_II, input[_I]).n(_I));
      }
      if (input[_IOV] != null) {
        bn.c(import_xml_builder.XmlNode.of(_IIOV, input[_IOV]).n(_IOV));
      }
      bn.lc(input, "OptionalFields", "OptionalFields", () => se_InventoryOptionalFields(input[_OF], context));
      if (input[_Sc] != null) {
        bn.c(se_InventorySchedule(input[_Sc], context).n(_Sc));
      }
      return bn;
    }, "se_InventoryConfiguration");
    var se_InventoryDestination = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_IDn);
      if (input[_SBD] != null) {
        bn.c(se_InventoryS3BucketDestination(input[_SBD], context).n(_SBD));
      }
      return bn;
    }, "se_InventoryDestination");
    var se_InventoryEncryption = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_IEn);
      if (input[_SSES] != null) {
        bn.c(se_SSES3(input[_SSES], context).n(_SS));
      }
      if (input[_SSEKMS] != null) {
        bn.c(se_SSEKMS(input[_SSEKMS], context).n(_SK));
      }
      return bn;
    }, "se_InventoryEncryption");
    var se_InventoryFilter = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_IF);
      bn.cc(input, _P);
      return bn;
    }, "se_InventoryFilter");
    var se_InventoryOptionalFields = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const n = import_xml_builder.XmlNode.of(_IOF, entry);
        return n.n(_Fi);
      });
    }, "se_InventoryOptionalFields");
    var se_InventoryS3BucketDestination = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_ISBD);
      bn.cc(input, _AIc);
      if (input[_B] != null) {
        bn.c(import_xml_builder.XmlNode.of(_BN, input[_B]).n(_B));
      }
      if (input[_Fo] != null) {
        bn.c(import_xml_builder.XmlNode.of(_IFn, input[_Fo]).n(_Fo));
      }
      bn.cc(input, _P);
      if (input[_En] != null) {
        bn.c(se_InventoryEncryption(input[_En], context).n(_En));
      }
      return bn;
    }, "se_InventoryS3BucketDestination");
    var se_InventorySchedule = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_ISn);
      if (input[_Fr] != null) {
        bn.c(import_xml_builder.XmlNode.of(_IFnv, input[_Fr]).n(_Fr));
      }
      return bn;
    }, "se_InventorySchedule");
    var se_JSONInput = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_JSONI);
      if (input[_Ty] != null) {
        bn.c(import_xml_builder.XmlNode.of(_JSONT, input[_Ty]).n(_Ty));
      }
      return bn;
    }, "se_JSONInput");
    var se_JSONOutput = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_JSONO);
      bn.cc(input, _RD);
      return bn;
    }, "se_JSONOutput");
    var se_LambdaFunctionConfiguration = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_LFCa);
      if (input[_I] != null) {
        bn.c(import_xml_builder.XmlNode.of(_NI, input[_I]).n(_I));
      }
      if (input[_LFA] != null) {
        bn.c(import_xml_builder.XmlNode.of(_LFA, input[_LFA]).n(_CF));
      }
      bn.l(input, "Events", "Event", () => se_EventList(input[_Eve], context));
      if (input[_F] != null) {
        bn.c(se_NotificationConfigurationFilter(input[_F], context).n(_F));
      }
      return bn;
    }, "se_LambdaFunctionConfiguration");
    var se_LambdaFunctionConfigurationList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const n = se_LambdaFunctionConfiguration(entry, context);
        return n.n(_me);
      });
    }, "se_LambdaFunctionConfigurationList");
    var se_LifecycleExpiration = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_LEi);
      if (input[_Dat] != null) {
        bn.c(import_xml_builder.XmlNode.of(_Dat, (0, import_smithy_client4.serializeDateTime)(input[_Dat]).toString()).n(_Dat));
      }
      if (input[_Da] != null) {
        bn.c(import_xml_builder.XmlNode.of(_Da, String(input[_Da])).n(_Da));
      }
      if (input[_EODM] != null) {
        bn.c(import_xml_builder.XmlNode.of(_EODM, String(input[_EODM])).n(_EODM));
      }
      return bn;
    }, "se_LifecycleExpiration");
    var se_LifecycleRule = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_LR);
      if (input[_Exp] != null) {
        bn.c(se_LifecycleExpiration(input[_Exp], context).n(_Exp));
      }
      bn.cc(input, _ID_);
      bn.cc(input, _P);
      if (input[_F] != null) {
        bn.c(se_LifecycleRuleFilter(input[_F], context).n(_F));
      }
      if (input[_S] != null) {
        bn.c(import_xml_builder.XmlNode.of(_ESx, input[_S]).n(_S));
      }
      bn.l(input, "Transitions", "Transition", () => se_TransitionList(input[_Tr], context));
      bn.l(
        input,
        "NoncurrentVersionTransitions",
        "NoncurrentVersionTransition",
        () => se_NoncurrentVersionTransitionList(input[_NVT], context)
      );
      if (input[_NVE] != null) {
        bn.c(se_NoncurrentVersionExpiration(input[_NVE], context).n(_NVE));
      }
      if (input[_AIMU] != null) {
        bn.c(se_AbortIncompleteMultipartUpload(input[_AIMU], context).n(_AIMU));
      }
      return bn;
    }, "se_LifecycleRule");
    var se_LifecycleRuleAndOperator = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_LRAO);
      bn.cc(input, _P);
      bn.l(input, "Tags", "Tag", () => se_TagSet(input[_Tag], context));
      if (input[_OSGT] != null) {
        bn.c(import_xml_builder.XmlNode.of(_OSGTB, String(input[_OSGT])).n(_OSGT));
      }
      if (input[_OSLT] != null) {
        bn.c(import_xml_builder.XmlNode.of(_OSLTB, String(input[_OSLT])).n(_OSLT));
      }
      return bn;
    }, "se_LifecycleRuleAndOperator");
    var se_LifecycleRuleFilter = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_LRF);
      bn.cc(input, _P);
      if (input[_Ta] != null) {
        bn.c(se_Tag(input[_Ta], context).n(_Ta));
      }
      if (input[_OSGT] != null) {
        bn.c(import_xml_builder.XmlNode.of(_OSGTB, String(input[_OSGT])).n(_OSGT));
      }
      if (input[_OSLT] != null) {
        bn.c(import_xml_builder.XmlNode.of(_OSLTB, String(input[_OSLT])).n(_OSLT));
      }
      if (input[_A] != null) {
        bn.c(se_LifecycleRuleAndOperator(input[_A], context).n(_A));
      }
      return bn;
    }, "se_LifecycleRuleFilter");
    var se_LifecycleRules = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const n = se_LifecycleRule(entry, context);
        return n.n(_me);
      });
    }, "se_LifecycleRules");
    var se_LocationInfo = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_LI);
      if (input[_Ty] != null) {
        bn.c(import_xml_builder.XmlNode.of(_LT, input[_Ty]).n(_Ty));
      }
      if (input[_N] != null) {
        bn.c(import_xml_builder.XmlNode.of(_LNAS, input[_N]).n(_N));
      }
      return bn;
    }, "se_LocationInfo");
    var se_LoggingEnabled = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_LE);
      bn.cc(input, _TB);
      bn.lc(input, "TargetGrants", "TargetGrants", () => se_TargetGrants(input[_TG], context));
      bn.cc(input, _TP);
      if (input[_TOKF] != null) {
        bn.c(se_TargetObjectKeyFormat(input[_TOKF], context).n(_TOKF));
      }
      return bn;
    }, "se_LoggingEnabled");
    var se_MetadataEntry = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_ME);
      if (input[_N] != null) {
        bn.c(import_xml_builder.XmlNode.of(_MKe, input[_N]).n(_N));
      }
      if (input[_Va] != null) {
        bn.c(import_xml_builder.XmlNode.of(_MV, input[_Va]).n(_Va));
      }
      return bn;
    }, "se_MetadataEntry");
    var se_Metrics = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_Me);
      if (input[_S] != null) {
        bn.c(import_xml_builder.XmlNode.of(_MS, input[_S]).n(_S));
      }
      if (input[_ETv] != null) {
        bn.c(se_ReplicationTimeValue(input[_ETv], context).n(_ETv));
      }
      return bn;
    }, "se_Metrics");
    var se_MetricsAndOperator = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_MAO);
      bn.cc(input, _P);
      bn.l(input, "Tags", "Tag", () => se_TagSet(input[_Tag], context));
      bn.cc(input, _APAc);
      return bn;
    }, "se_MetricsAndOperator");
    var se_MetricsConfiguration = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_MC);
      if (input[_I] != null) {
        bn.c(import_xml_builder.XmlNode.of(_MI, input[_I]).n(_I));
      }
      if (input[_F] != null) {
        bn.c(se_MetricsFilter(input[_F], context).n(_F));
      }
      return bn;
    }, "se_MetricsConfiguration");
    var se_MetricsFilter = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_MF);
      MetricsFilter.visit(input, {
        Prefix: (value) => {
          if (input[_P] != null) {
            bn.c(import_xml_builder.XmlNode.of(_P, value).n(_P));
          }
        },
        Tag: (value) => {
          if (input[_Ta] != null) {
            bn.c(se_Tag(value, context).n(_Ta));
          }
        },
        AccessPointArn: (value) => {
          if (input[_APAc] != null) {
            bn.c(import_xml_builder.XmlNode.of(_APAc, value).n(_APAc));
          }
        },
        And: (value) => {
          if (input[_A] != null) {
            bn.c(se_MetricsAndOperator(value, context).n(_A));
          }
        },
        _: (name, value) => {
          if (!(value instanceof import_xml_builder.XmlNode || value instanceof import_xml_builder.XmlText)) {
            throw new Error("Unable to serialize unknown union members in XML.");
          }
          bn.c(new import_xml_builder.XmlNode(name).c(value));
        }
      });
      return bn;
    }, "se_MetricsFilter");
    var se_NoncurrentVersionExpiration = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_NVE);
      if (input[_ND] != null) {
        bn.c(import_xml_builder.XmlNode.of(_Da, String(input[_ND])).n(_ND));
      }
      if (input[_NNV] != null) {
        bn.c(import_xml_builder.XmlNode.of(_VC, String(input[_NNV])).n(_NNV));
      }
      return bn;
    }, "se_NoncurrentVersionExpiration");
    var se_NoncurrentVersionTransition = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_NVTo);
      if (input[_ND] != null) {
        bn.c(import_xml_builder.XmlNode.of(_Da, String(input[_ND])).n(_ND));
      }
      if (input[_SC] != null) {
        bn.c(import_xml_builder.XmlNode.of(_TSC, input[_SC]).n(_SC));
      }
      if (input[_NNV] != null) {
        bn.c(import_xml_builder.XmlNode.of(_VC, String(input[_NNV])).n(_NNV));
      }
      return bn;
    }, "se_NoncurrentVersionTransition");
    var se_NoncurrentVersionTransitionList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const n = se_NoncurrentVersionTransition(entry, context);
        return n.n(_me);
      });
    }, "se_NoncurrentVersionTransitionList");
    var se_NotificationConfiguration = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_NC);
      bn.l(input, "TopicConfigurations", "TopicConfiguration", () => se_TopicConfigurationList(input[_TCop], context));
      bn.l(input, "QueueConfigurations", "QueueConfiguration", () => se_QueueConfigurationList(input[_QCu], context));
      bn.l(
        input,
        "LambdaFunctionConfigurations",
        "CloudFunctionConfiguration",
        () => se_LambdaFunctionConfigurationList(input[_LFC], context)
      );
      if (input[_EBC] != null) {
        bn.c(se_EventBridgeConfiguration(input[_EBC], context).n(_EBC));
      }
      return bn;
    }, "se_NotificationConfiguration");
    var se_NotificationConfigurationFilter = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_NCF);
      if (input[_K] != null) {
        bn.c(se_S3KeyFilter(input[_K], context).n(_SKe));
      }
      return bn;
    }, "se_NotificationConfigurationFilter");
    var se_ObjectIdentifier = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_OI);
      if (input[_K] != null) {
        bn.c(import_xml_builder.XmlNode.of(_OK, input[_K]).n(_K));
      }
      if (input[_VI] != null) {
        bn.c(import_xml_builder.XmlNode.of(_OVI, input[_VI]).n(_VI));
      }
      bn.cc(input, _ETa);
      if (input[_LMT] != null) {
        bn.c(import_xml_builder.XmlNode.of(_LMT, (0, import_smithy_client4.dateToUtcString)(input[_LMT]).toString()).n(_LMT));
      }
      if (input[_Si] != null) {
        bn.c(import_xml_builder.XmlNode.of(_Si, String(input[_Si])).n(_Si));
      }
      return bn;
    }, "se_ObjectIdentifier");
    var se_ObjectIdentifierList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const n = se_ObjectIdentifier(entry, context);
        return n.n(_me);
      });
    }, "se_ObjectIdentifierList");
    var se_ObjectLockConfiguration = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_OLC);
      bn.cc(input, _OLE);
      if (input[_Ru] != null) {
        bn.c(se_ObjectLockRule(input[_Ru], context).n(_Ru));
      }
      return bn;
    }, "se_ObjectLockConfiguration");
    var se_ObjectLockLegalHold = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_OLLH);
      if (input[_S] != null) {
        bn.c(import_xml_builder.XmlNode.of(_OLLHS, input[_S]).n(_S));
      }
      return bn;
    }, "se_ObjectLockLegalHold");
    var se_ObjectLockRetention = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_OLR);
      if (input[_Mo] != null) {
        bn.c(import_xml_builder.XmlNode.of(_OLRM, input[_Mo]).n(_Mo));
      }
      if (input[_RUD] != null) {
        bn.c(import_xml_builder.XmlNode.of(_Dat, (0, import_smithy_client4.serializeDateTime)(input[_RUD]).toString()).n(_RUD));
      }
      return bn;
    }, "se_ObjectLockRetention");
    var se_ObjectLockRule = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_OLRb);
      if (input[_DRe] != null) {
        bn.c(se_DefaultRetention(input[_DRe], context).n(_DRe));
      }
      return bn;
    }, "se_ObjectLockRule");
    var se_OutputLocation = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_OL);
      if (input[_S_] != null) {
        bn.c(se_S3Location(input[_S_], context).n(_S_));
      }
      return bn;
    }, "se_OutputLocation");
    var se_OutputSerialization = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_OS);
      if (input[_CSV] != null) {
        bn.c(se_CSVOutput(input[_CSV], context).n(_CSV));
      }
      if (input[_JSON] != null) {
        bn.c(se_JSONOutput(input[_JSON], context).n(_JSON));
      }
      return bn;
    }, "se_OutputSerialization");
    var se_Owner = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_O);
      bn.cc(input, _DN);
      bn.cc(input, _ID_);
      return bn;
    }, "se_Owner");
    var se_OwnershipControls = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_OC);
      bn.l(input, "Rules", "Rule", () => se_OwnershipControlsRules(input[_Rul], context));
      return bn;
    }, "se_OwnershipControls");
    var se_OwnershipControlsRule = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_OCR);
      bn.cc(input, _OO);
      return bn;
    }, "se_OwnershipControlsRule");
    var se_OwnershipControlsRules = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const n = se_OwnershipControlsRule(entry, context);
        return n.n(_me);
      });
    }, "se_OwnershipControlsRules");
    var se_ParquetInput = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_PI);
      return bn;
    }, "se_ParquetInput");
    var se_PartitionedPrefix = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_PP);
      bn.cc(input, _PDS);
      return bn;
    }, "se_PartitionedPrefix");
    var se_PublicAccessBlockConfiguration = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_PABC);
      if (input[_BPA] != null) {
        bn.c(import_xml_builder.XmlNode.of(_Se, String(input[_BPA])).n(_BPA));
      }
      if (input[_IPA] != null) {
        bn.c(import_xml_builder.XmlNode.of(_Se, String(input[_IPA])).n(_IPA));
      }
      if (input[_BPP] != null) {
        bn.c(import_xml_builder.XmlNode.of(_Se, String(input[_BPP])).n(_BPP));
      }
      if (input[_RPB] != null) {
        bn.c(import_xml_builder.XmlNode.of(_Se, String(input[_RPB])).n(_RPB));
      }
      return bn;
    }, "se_PublicAccessBlockConfiguration");
    var se_QueueConfiguration = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_QC);
      if (input[_I] != null) {
        bn.c(import_xml_builder.XmlNode.of(_NI, input[_I]).n(_I));
      }
      if (input[_QA] != null) {
        bn.c(import_xml_builder.XmlNode.of(_QA, input[_QA]).n(_Qu));
      }
      bn.l(input, "Events", "Event", () => se_EventList(input[_Eve], context));
      if (input[_F] != null) {
        bn.c(se_NotificationConfigurationFilter(input[_F], context).n(_F));
      }
      return bn;
    }, "se_QueueConfiguration");
    var se_QueueConfigurationList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const n = se_QueueConfiguration(entry, context);
        return n.n(_me);
      });
    }, "se_QueueConfigurationList");
    var se_Redirect = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_Red);
      bn.cc(input, _HN);
      bn.cc(input, _HRC);
      bn.cc(input, _Pr);
      bn.cc(input, _RKPW);
      bn.cc(input, _RKW);
      return bn;
    }, "se_Redirect");
    var se_RedirectAllRequestsTo = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_RART);
      bn.cc(input, _HN);
      bn.cc(input, _Pr);
      return bn;
    }, "se_RedirectAllRequestsTo");
    var se_ReplicaModifications = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_RM);
      if (input[_S] != null) {
        bn.c(import_xml_builder.XmlNode.of(_RMS, input[_S]).n(_S));
      }
      return bn;
    }, "se_ReplicaModifications");
    var se_ReplicationConfiguration = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_RCe);
      bn.cc(input, _Ro);
      bn.l(input, "Rules", "Rule", () => se_ReplicationRules(input[_Rul], context));
      return bn;
    }, "se_ReplicationConfiguration");
    var se_ReplicationRule = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_RRe);
      bn.cc(input, _ID_);
      if (input[_Pri] != null) {
        bn.c(import_xml_builder.XmlNode.of(_Pri, String(input[_Pri])).n(_Pri));
      }
      bn.cc(input, _P);
      if (input[_F] != null) {
        bn.c(se_ReplicationRuleFilter(input[_F], context).n(_F));
      }
      if (input[_S] != null) {
        bn.c(import_xml_builder.XmlNode.of(_RRS, input[_S]).n(_S));
      }
      if (input[_SSC] != null) {
        bn.c(se_SourceSelectionCriteria(input[_SSC], context).n(_SSC));
      }
      if (input[_EOR] != null) {
        bn.c(se_ExistingObjectReplication(input[_EOR], context).n(_EOR));
      }
      if (input[_Des] != null) {
        bn.c(se_Destination(input[_Des], context).n(_Des));
      }
      if (input[_DMR] != null) {
        bn.c(se_DeleteMarkerReplication(input[_DMR], context).n(_DMR));
      }
      return bn;
    }, "se_ReplicationRule");
    var se_ReplicationRuleAndOperator = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_RRAO);
      bn.cc(input, _P);
      bn.l(input, "Tags", "Tag", () => se_TagSet(input[_Tag], context));
      return bn;
    }, "se_ReplicationRuleAndOperator");
    var se_ReplicationRuleFilter = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_RRF);
      bn.cc(input, _P);
      if (input[_Ta] != null) {
        bn.c(se_Tag(input[_Ta], context).n(_Ta));
      }
      if (input[_A] != null) {
        bn.c(se_ReplicationRuleAndOperator(input[_A], context).n(_A));
      }
      return bn;
    }, "se_ReplicationRuleFilter");
    var se_ReplicationRules = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const n = se_ReplicationRule(entry, context);
        return n.n(_me);
      });
    }, "se_ReplicationRules");
    var se_ReplicationTime = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_RTe);
      if (input[_S] != null) {
        bn.c(import_xml_builder.XmlNode.of(_RTS, input[_S]).n(_S));
      }
      if (input[_Tim] != null) {
        bn.c(se_ReplicationTimeValue(input[_Tim], context).n(_Tim));
      }
      return bn;
    }, "se_ReplicationTime");
    var se_ReplicationTimeValue = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_RTV);
      if (input[_Mi] != null) {
        bn.c(import_xml_builder.XmlNode.of(_Mi, String(input[_Mi])).n(_Mi));
      }
      return bn;
    }, "se_ReplicationTimeValue");
    var se_RequestPaymentConfiguration = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_RPC);
      bn.cc(input, _Pa);
      return bn;
    }, "se_RequestPaymentConfiguration");
    var se_RequestProgress = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_RPe);
      if (input[_Ena] != null) {
        bn.c(import_xml_builder.XmlNode.of(_ERP, String(input[_Ena])).n(_Ena));
      }
      return bn;
    }, "se_RequestProgress");
    var se_RestoreRequest = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_RRes);
      if (input[_Da] != null) {
        bn.c(import_xml_builder.XmlNode.of(_Da, String(input[_Da])).n(_Da));
      }
      if (input[_GJP] != null) {
        bn.c(se_GlacierJobParameters(input[_GJP], context).n(_GJP));
      }
      if (input[_Ty] != null) {
        bn.c(import_xml_builder.XmlNode.of(_RRT, input[_Ty]).n(_Ty));
      }
      bn.cc(input, _Ti);
      bn.cc(input, _Desc);
      if (input[_SP] != null) {
        bn.c(se_SelectParameters(input[_SP], context).n(_SP));
      }
      if (input[_OL] != null) {
        bn.c(se_OutputLocation(input[_OL], context).n(_OL));
      }
      return bn;
    }, "se_RestoreRequest");
    var se_RoutingRule = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_RRou);
      if (input[_Con] != null) {
        bn.c(se_Condition(input[_Con], context).n(_Con));
      }
      if (input[_Red] != null) {
        bn.c(se_Redirect(input[_Red], context).n(_Red));
      }
      return bn;
    }, "se_RoutingRule");
    var se_RoutingRules = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const n = se_RoutingRule(entry, context);
        return n.n(_RRou);
      });
    }, "se_RoutingRules");
    var se_S3KeyFilter = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_SKF);
      bn.l(input, "FilterRules", "FilterRule", () => se_FilterRuleList(input[_FRi], context));
      return bn;
    }, "se_S3KeyFilter");
    var se_S3Location = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_SL);
      bn.cc(input, _BN);
      if (input[_P] != null) {
        bn.c(import_xml_builder.XmlNode.of(_LP, input[_P]).n(_P));
      }
      if (input[_En] != null) {
        bn.c(se_Encryption(input[_En], context).n(_En));
      }
      if (input[_CACL] != null) {
        bn.c(import_xml_builder.XmlNode.of(_OCACL, input[_CACL]).n(_CACL));
      }
      bn.lc(input, "AccessControlList", "AccessControlList", () => se_Grants(input[_ACLc], context));
      if (input[_T] != null) {
        bn.c(se_Tagging(input[_T], context).n(_T));
      }
      bn.lc(input, "UserMetadata", "UserMetadata", () => se_UserMetadata(input[_UM], context));
      bn.cc(input, _SC);
      return bn;
    }, "se_S3Location");
    var se_ScanRange = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_SR);
      if (input[_St] != null) {
        bn.c(import_xml_builder.XmlNode.of(_St, String(input[_St])).n(_St));
      }
      if (input[_End] != null) {
        bn.c(import_xml_builder.XmlNode.of(_End, String(input[_End])).n(_End));
      }
      return bn;
    }, "se_ScanRange");
    var se_SelectParameters = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_SP);
      if (input[_IS] != null) {
        bn.c(se_InputSerialization(input[_IS], context).n(_IS));
      }
      bn.cc(input, _ETx);
      bn.cc(input, _Ex);
      if (input[_OS] != null) {
        bn.c(se_OutputSerialization(input[_OS], context).n(_OS));
      }
      return bn;
    }, "se_SelectParameters");
    var se_ServerSideEncryptionByDefault = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_SSEBD);
      if (input[_SSEA] != null) {
        bn.c(import_xml_builder.XmlNode.of(_SSE, input[_SSEA]).n(_SSEA));
      }
      if (input[_KMSMKID] != null) {
        bn.c(import_xml_builder.XmlNode.of(_SSEKMSKI, input[_KMSMKID]).n(_KMSMKID));
      }
      return bn;
    }, "se_ServerSideEncryptionByDefault");
    var se_ServerSideEncryptionConfiguration = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_SSEC);
      bn.l(input, "Rules", "Rule", () => se_ServerSideEncryptionRules(input[_Rul], context));
      return bn;
    }, "se_ServerSideEncryptionConfiguration");
    var se_ServerSideEncryptionRule = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_SSER);
      if (input[_ASSEBD] != null) {
        bn.c(se_ServerSideEncryptionByDefault(input[_ASSEBD], context).n(_ASSEBD));
      }
      if (input[_BKE] != null) {
        bn.c(import_xml_builder.XmlNode.of(_BKE, String(input[_BKE])).n(_BKE));
      }
      return bn;
    }, "se_ServerSideEncryptionRule");
    var se_ServerSideEncryptionRules = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const n = se_ServerSideEncryptionRule(entry, context);
        return n.n(_me);
      });
    }, "se_ServerSideEncryptionRules");
    var se_SimplePrefix = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_SPi);
      return bn;
    }, "se_SimplePrefix");
    var se_SourceSelectionCriteria = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_SSC);
      if (input[_SKEO] != null) {
        bn.c(se_SseKmsEncryptedObjects(input[_SKEO], context).n(_SKEO));
      }
      if (input[_RM] != null) {
        bn.c(se_ReplicaModifications(input[_RM], context).n(_RM));
      }
      return bn;
    }, "se_SourceSelectionCriteria");
    var se_SSEKMS = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_SK);
      if (input[_KI] != null) {
        bn.c(import_xml_builder.XmlNode.of(_SSEKMSKI, input[_KI]).n(_KI));
      }
      return bn;
    }, "se_SSEKMS");
    var se_SseKmsEncryptedObjects = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_SKEO);
      if (input[_S] != null) {
        bn.c(import_xml_builder.XmlNode.of(_SKEOS, input[_S]).n(_S));
      }
      return bn;
    }, "se_SseKmsEncryptedObjects");
    var se_SSES3 = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_SS);
      return bn;
    }, "se_SSES3");
    var se_StorageClassAnalysis = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_SCA);
      if (input[_DE] != null) {
        bn.c(se_StorageClassAnalysisDataExport(input[_DE], context).n(_DE));
      }
      return bn;
    }, "se_StorageClassAnalysis");
    var se_StorageClassAnalysisDataExport = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_SCADE);
      if (input[_OSV] != null) {
        bn.c(import_xml_builder.XmlNode.of(_SCASV, input[_OSV]).n(_OSV));
      }
      if (input[_Des] != null) {
        bn.c(se_AnalyticsExportDestination(input[_Des], context).n(_Des));
      }
      return bn;
    }, "se_StorageClassAnalysisDataExport");
    var se_Tag = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_Ta);
      if (input[_K] != null) {
        bn.c(import_xml_builder.XmlNode.of(_OK, input[_K]).n(_K));
      }
      bn.cc(input, _Va);
      return bn;
    }, "se_Tag");
    var se_Tagging = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_T);
      bn.lc(input, "TagSet", "TagSet", () => se_TagSet(input[_TS], context));
      return bn;
    }, "se_Tagging");
    var se_TagSet = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const n = se_Tag(entry, context);
        return n.n(_Ta);
      });
    }, "se_TagSet");
    var se_TargetGrant = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_TGa);
      if (input[_Gra] != null) {
        const n = se_Grantee(input[_Gra], context).n(_Gra);
        n.a("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
        bn.c(n);
      }
      if (input[_Pe] != null) {
        bn.c(import_xml_builder.XmlNode.of(_BLP, input[_Pe]).n(_Pe));
      }
      return bn;
    }, "se_TargetGrant");
    var se_TargetGrants = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const n = se_TargetGrant(entry, context);
        return n.n(_G);
      });
    }, "se_TargetGrants");
    var se_TargetObjectKeyFormat = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_TOKF);
      if (input[_SPi] != null) {
        bn.c(se_SimplePrefix(input[_SPi], context).n(_SPi));
      }
      if (input[_PP] != null) {
        bn.c(se_PartitionedPrefix(input[_PP], context).n(_PP));
      }
      return bn;
    }, "se_TargetObjectKeyFormat");
    var se_Tiering = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_Tier);
      if (input[_Da] != null) {
        bn.c(import_xml_builder.XmlNode.of(_ITD, String(input[_Da])).n(_Da));
      }
      if (input[_AT] != null) {
        bn.c(import_xml_builder.XmlNode.of(_ITAT, input[_AT]).n(_AT));
      }
      return bn;
    }, "se_Tiering");
    var se_TieringList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const n = se_Tiering(entry, context);
        return n.n(_me);
      });
    }, "se_TieringList");
    var se_TopicConfiguration = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_TCo);
      if (input[_I] != null) {
        bn.c(import_xml_builder.XmlNode.of(_NI, input[_I]).n(_I));
      }
      if (input[_TA] != null) {
        bn.c(import_xml_builder.XmlNode.of(_TA, input[_TA]).n(_Top));
      }
      bn.l(input, "Events", "Event", () => se_EventList(input[_Eve], context));
      if (input[_F] != null) {
        bn.c(se_NotificationConfigurationFilter(input[_F], context).n(_F));
      }
      return bn;
    }, "se_TopicConfiguration");
    var se_TopicConfigurationList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const n = se_TopicConfiguration(entry, context);
        return n.n(_me);
      });
    }, "se_TopicConfigurationList");
    var se_Transition = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_Tra);
      if (input[_Dat] != null) {
        bn.c(import_xml_builder.XmlNode.of(_Dat, (0, import_smithy_client4.serializeDateTime)(input[_Dat]).toString()).n(_Dat));
      }
      if (input[_Da] != null) {
        bn.c(import_xml_builder.XmlNode.of(_Da, String(input[_Da])).n(_Da));
      }
      if (input[_SC] != null) {
        bn.c(import_xml_builder.XmlNode.of(_TSC, input[_SC]).n(_SC));
      }
      return bn;
    }, "se_Transition");
    var se_TransitionList = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const n = se_Transition(entry, context);
        return n.n(_me);
      });
    }, "se_TransitionList");
    var se_UserMetadata = /* @__PURE__ */ __name((input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const n = se_MetadataEntry(entry, context);
        return n.n(_ME);
      });
    }, "se_UserMetadata");
    var se_VersioningConfiguration = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_VCe);
      if (input[_MFAD] != null) {
        bn.c(import_xml_builder.XmlNode.of(_MFAD, input[_MFAD]).n(_MDf));
      }
      if (input[_S] != null) {
        bn.c(import_xml_builder.XmlNode.of(_BVS, input[_S]).n(_S));
      }
      return bn;
    }, "se_VersioningConfiguration");
    var se_WebsiteConfiguration = /* @__PURE__ */ __name((input, context) => {
      const bn = new import_xml_builder.XmlNode(_WC);
      if (input[_ED] != null) {
        bn.c(se_ErrorDocument(input[_ED], context).n(_ED));
      }
      if (input[_ID] != null) {
        bn.c(se_IndexDocument(input[_ID], context).n(_ID));
      }
      if (input[_RART] != null) {
        bn.c(se_RedirectAllRequestsTo(input[_RART], context).n(_RART));
      }
      bn.lc(input, "RoutingRules", "RoutingRules", () => se_RoutingRules(input[_RRo], context));
      return bn;
    }, "se_WebsiteConfiguration");
    var de_AbortIncompleteMultipartUpload = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_DAI] != null) {
        contents[_DAI] = (0, import_smithy_client4.strictParseInt32)(output[_DAI]);
      }
      return contents;
    }, "de_AbortIncompleteMultipartUpload");
    var de_AccessControlTranslation = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_O] != null) {
        contents[_O] = (0, import_smithy_client4.expectString)(output[_O]);
      }
      return contents;
    }, "de_AccessControlTranslation");
    var de_AllowedHeaders = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, import_smithy_client4.expectString)(entry);
      });
    }, "de_AllowedHeaders");
    var de_AllowedMethods = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, import_smithy_client4.expectString)(entry);
      });
    }, "de_AllowedMethods");
    var de_AllowedOrigins = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, import_smithy_client4.expectString)(entry);
      });
    }, "de_AllowedOrigins");
    var de_AnalyticsAndOperator = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_P] != null) {
        contents[_P] = (0, import_smithy_client4.expectString)(output[_P]);
      }
      if (output.Tag === "") {
        contents[_Tag] = [];
      } else if (output[_Ta] != null) {
        contents[_Tag] = de_TagSet((0, import_smithy_client4.getArrayIfSingleItem)(output[_Ta]), context);
      }
      return contents;
    }, "de_AnalyticsAndOperator");
    var de_AnalyticsConfiguration = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_I] != null) {
        contents[_I] = (0, import_smithy_client4.expectString)(output[_I]);
      }
      if (output.Filter === "") {
      } else if (output[_F] != null) {
        contents[_F] = de_AnalyticsFilter((0, import_smithy_client4.expectUnion)(output[_F]), context);
      }
      if (output[_SCA] != null) {
        contents[_SCA] = de_StorageClassAnalysis(output[_SCA], context);
      }
      return contents;
    }, "de_AnalyticsConfiguration");
    var de_AnalyticsConfigurationList = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_AnalyticsConfiguration(entry, context);
      });
    }, "de_AnalyticsConfigurationList");
    var de_AnalyticsExportDestination = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_SBD] != null) {
        contents[_SBD] = de_AnalyticsS3BucketDestination(output[_SBD], context);
      }
      return contents;
    }, "de_AnalyticsExportDestination");
    var de_AnalyticsFilter = /* @__PURE__ */ __name((output, context) => {
      if (output[_P] != null) {
        return {
          Prefix: (0, import_smithy_client4.expectString)(output[_P])
        };
      }
      if (output[_Ta] != null) {
        return {
          Tag: de_Tag(output[_Ta], context)
        };
      }
      if (output[_A] != null) {
        return {
          And: de_AnalyticsAndOperator(output[_A], context)
        };
      }
      return { $unknown: Object.entries(output)[0] };
    }, "de_AnalyticsFilter");
    var de_AnalyticsS3BucketDestination = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_Fo] != null) {
        contents[_Fo] = (0, import_smithy_client4.expectString)(output[_Fo]);
      }
      if (output[_BAI] != null) {
        contents[_BAI] = (0, import_smithy_client4.expectString)(output[_BAI]);
      }
      if (output[_B] != null) {
        contents[_B] = (0, import_smithy_client4.expectString)(output[_B]);
      }
      if (output[_P] != null) {
        contents[_P] = (0, import_smithy_client4.expectString)(output[_P]);
      }
      return contents;
    }, "de_AnalyticsS3BucketDestination");
    var de_Bucket = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_N] != null) {
        contents[_N] = (0, import_smithy_client4.expectString)(output[_N]);
      }
      if (output[_CDr] != null) {
        contents[_CDr] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_CDr]));
      }
      if (output[_BR] != null) {
        contents[_BR] = (0, import_smithy_client4.expectString)(output[_BR]);
      }
      return contents;
    }, "de_Bucket");
    var de_Buckets = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_Bucket(entry, context);
      });
    }, "de_Buckets");
    var de_Checksum = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_CCRC] != null) {
        contents[_CCRC] = (0, import_smithy_client4.expectString)(output[_CCRC]);
      }
      if (output[_CCRCC] != null) {
        contents[_CCRCC] = (0, import_smithy_client4.expectString)(output[_CCRCC]);
      }
      if (output[_CSHA] != null) {
        contents[_CSHA] = (0, import_smithy_client4.expectString)(output[_CSHA]);
      }
      if (output[_CSHAh] != null) {
        contents[_CSHAh] = (0, import_smithy_client4.expectString)(output[_CSHAh]);
      }
      return contents;
    }, "de_Checksum");
    var de_ChecksumAlgorithmList = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, import_smithy_client4.expectString)(entry);
      });
    }, "de_ChecksumAlgorithmList");
    var de_CommonPrefix = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_P] != null) {
        contents[_P] = (0, import_smithy_client4.expectString)(output[_P]);
      }
      return contents;
    }, "de_CommonPrefix");
    var de_CommonPrefixList = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_CommonPrefix(entry, context);
      });
    }, "de_CommonPrefixList");
    var de_Condition = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_HECRE] != null) {
        contents[_HECRE] = (0, import_smithy_client4.expectString)(output[_HECRE]);
      }
      if (output[_KPE] != null) {
        contents[_KPE] = (0, import_smithy_client4.expectString)(output[_KPE]);
      }
      return contents;
    }, "de_Condition");
    var de_ContinuationEvent = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      return contents;
    }, "de_ContinuationEvent");
    var de_CopyObjectResult = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_ETa] != null) {
        contents[_ETa] = (0, import_smithy_client4.expectString)(output[_ETa]);
      }
      if (output[_LM] != null) {
        contents[_LM] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_LM]));
      }
      if (output[_CCRC] != null) {
        contents[_CCRC] = (0, import_smithy_client4.expectString)(output[_CCRC]);
      }
      if (output[_CCRCC] != null) {
        contents[_CCRCC] = (0, import_smithy_client4.expectString)(output[_CCRCC]);
      }
      if (output[_CSHA] != null) {
        contents[_CSHA] = (0, import_smithy_client4.expectString)(output[_CSHA]);
      }
      if (output[_CSHAh] != null) {
        contents[_CSHAh] = (0, import_smithy_client4.expectString)(output[_CSHAh]);
      }
      return contents;
    }, "de_CopyObjectResult");
    var de_CopyPartResult = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_ETa] != null) {
        contents[_ETa] = (0, import_smithy_client4.expectString)(output[_ETa]);
      }
      if (output[_LM] != null) {
        contents[_LM] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_LM]));
      }
      if (output[_CCRC] != null) {
        contents[_CCRC] = (0, import_smithy_client4.expectString)(output[_CCRC]);
      }
      if (output[_CCRCC] != null) {
        contents[_CCRCC] = (0, import_smithy_client4.expectString)(output[_CCRCC]);
      }
      if (output[_CSHA] != null) {
        contents[_CSHA] = (0, import_smithy_client4.expectString)(output[_CSHA]);
      }
      if (output[_CSHAh] != null) {
        contents[_CSHAh] = (0, import_smithy_client4.expectString)(output[_CSHAh]);
      }
      return contents;
    }, "de_CopyPartResult");
    var de_CORSRule = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_ID_] != null) {
        contents[_ID_] = (0, import_smithy_client4.expectString)(output[_ID_]);
      }
      if (output.AllowedHeader === "") {
        contents[_AHl] = [];
      } else if (output[_AH] != null) {
        contents[_AHl] = de_AllowedHeaders((0, import_smithy_client4.getArrayIfSingleItem)(output[_AH]), context);
      }
      if (output.AllowedMethod === "") {
        contents[_AMl] = [];
      } else if (output[_AM] != null) {
        contents[_AMl] = de_AllowedMethods((0, import_smithy_client4.getArrayIfSingleItem)(output[_AM]), context);
      }
      if (output.AllowedOrigin === "") {
        contents[_AOl] = [];
      } else if (output[_AO] != null) {
        contents[_AOl] = de_AllowedOrigins((0, import_smithy_client4.getArrayIfSingleItem)(output[_AO]), context);
      }
      if (output.ExposeHeader === "") {
        contents[_EH] = [];
      } else if (output[_EHx] != null) {
        contents[_EH] = de_ExposeHeaders((0, import_smithy_client4.getArrayIfSingleItem)(output[_EHx]), context);
      }
      if (output[_MAS] != null) {
        contents[_MAS] = (0, import_smithy_client4.strictParseInt32)(output[_MAS]);
      }
      return contents;
    }, "de_CORSRule");
    var de_CORSRules = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_CORSRule(entry, context);
      });
    }, "de_CORSRules");
    var de_DefaultRetention = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_Mo] != null) {
        contents[_Mo] = (0, import_smithy_client4.expectString)(output[_Mo]);
      }
      if (output[_Da] != null) {
        contents[_Da] = (0, import_smithy_client4.strictParseInt32)(output[_Da]);
      }
      if (output[_Y] != null) {
        contents[_Y] = (0, import_smithy_client4.strictParseInt32)(output[_Y]);
      }
      return contents;
    }, "de_DefaultRetention");
    var de_DeletedObject = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_K] != null) {
        contents[_K] = (0, import_smithy_client4.expectString)(output[_K]);
      }
      if (output[_VI] != null) {
        contents[_VI] = (0, import_smithy_client4.expectString)(output[_VI]);
      }
      if (output[_DM] != null) {
        contents[_DM] = (0, import_smithy_client4.parseBoolean)(output[_DM]);
      }
      if (output[_DMVI] != null) {
        contents[_DMVI] = (0, import_smithy_client4.expectString)(output[_DMVI]);
      }
      return contents;
    }, "de_DeletedObject");
    var de_DeletedObjects = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_DeletedObject(entry, context);
      });
    }, "de_DeletedObjects");
    var de_DeleteMarkerEntry = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_O] != null) {
        contents[_O] = de_Owner(output[_O], context);
      }
      if (output[_K] != null) {
        contents[_K] = (0, import_smithy_client4.expectString)(output[_K]);
      }
      if (output[_VI] != null) {
        contents[_VI] = (0, import_smithy_client4.expectString)(output[_VI]);
      }
      if (output[_IL] != null) {
        contents[_IL] = (0, import_smithy_client4.parseBoolean)(output[_IL]);
      }
      if (output[_LM] != null) {
        contents[_LM] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_LM]));
      }
      return contents;
    }, "de_DeleteMarkerEntry");
    var de_DeleteMarkerReplication = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_S] != null) {
        contents[_S] = (0, import_smithy_client4.expectString)(output[_S]);
      }
      return contents;
    }, "de_DeleteMarkerReplication");
    var de_DeleteMarkers = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_DeleteMarkerEntry(entry, context);
      });
    }, "de_DeleteMarkers");
    var de_Destination = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_B] != null) {
        contents[_B] = (0, import_smithy_client4.expectString)(output[_B]);
      }
      if (output[_Ac] != null) {
        contents[_Ac] = (0, import_smithy_client4.expectString)(output[_Ac]);
      }
      if (output[_SC] != null) {
        contents[_SC] = (0, import_smithy_client4.expectString)(output[_SC]);
      }
      if (output[_ACT] != null) {
        contents[_ACT] = de_AccessControlTranslation(output[_ACT], context);
      }
      if (output[_ECn] != null) {
        contents[_ECn] = de_EncryptionConfiguration(output[_ECn], context);
      }
      if (output[_RTe] != null) {
        contents[_RTe] = de_ReplicationTime(output[_RTe], context);
      }
      if (output[_Me] != null) {
        contents[_Me] = de_Metrics(output[_Me], context);
      }
      return contents;
    }, "de_Destination");
    var de_EncryptionConfiguration = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_RKKID] != null) {
        contents[_RKKID] = (0, import_smithy_client4.expectString)(output[_RKKID]);
      }
      return contents;
    }, "de_EncryptionConfiguration");
    var de_EndEvent = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      return contents;
    }, "de_EndEvent");
    var de__Error = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_K] != null) {
        contents[_K] = (0, import_smithy_client4.expectString)(output[_K]);
      }
      if (output[_VI] != null) {
        contents[_VI] = (0, import_smithy_client4.expectString)(output[_VI]);
      }
      if (output[_Cod] != null) {
        contents[_Cod] = (0, import_smithy_client4.expectString)(output[_Cod]);
      }
      if (output[_Mes] != null) {
        contents[_Mes] = (0, import_smithy_client4.expectString)(output[_Mes]);
      }
      return contents;
    }, "de__Error");
    var de_ErrorDocument = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_K] != null) {
        contents[_K] = (0, import_smithy_client4.expectString)(output[_K]);
      }
      return contents;
    }, "de_ErrorDocument");
    var de_Errors = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de__Error(entry, context);
      });
    }, "de_Errors");
    var de_EventBridgeConfiguration = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      return contents;
    }, "de_EventBridgeConfiguration");
    var de_EventList = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, import_smithy_client4.expectString)(entry);
      });
    }, "de_EventList");
    var de_ExistingObjectReplication = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_S] != null) {
        contents[_S] = (0, import_smithy_client4.expectString)(output[_S]);
      }
      return contents;
    }, "de_ExistingObjectReplication");
    var de_ExposeHeaders = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, import_smithy_client4.expectString)(entry);
      });
    }, "de_ExposeHeaders");
    var de_FilterRule = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_N] != null) {
        contents[_N] = (0, import_smithy_client4.expectString)(output[_N]);
      }
      if (output[_Va] != null) {
        contents[_Va] = (0, import_smithy_client4.expectString)(output[_Va]);
      }
      return contents;
    }, "de_FilterRule");
    var de_FilterRuleList = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_FilterRule(entry, context);
      });
    }, "de_FilterRuleList");
    var de_GetObjectAttributesParts = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_PC] != null) {
        contents[_TPC] = (0, import_smithy_client4.strictParseInt32)(output[_PC]);
      }
      if (output[_PNM] != null) {
        contents[_PNM] = (0, import_smithy_client4.expectString)(output[_PNM]);
      }
      if (output[_NPNM] != null) {
        contents[_NPNM] = (0, import_smithy_client4.expectString)(output[_NPNM]);
      }
      if (output[_MP] != null) {
        contents[_MP] = (0, import_smithy_client4.strictParseInt32)(output[_MP]);
      }
      if (output[_IT] != null) {
        contents[_IT] = (0, import_smithy_client4.parseBoolean)(output[_IT]);
      }
      if (output.Part === "") {
        contents[_Part] = [];
      } else if (output[_Par] != null) {
        contents[_Part] = de_PartsList((0, import_smithy_client4.getArrayIfSingleItem)(output[_Par]), context);
      }
      return contents;
    }, "de_GetObjectAttributesParts");
    var de_Grant = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_Gra] != null) {
        contents[_Gra] = de_Grantee(output[_Gra], context);
      }
      if (output[_Pe] != null) {
        contents[_Pe] = (0, import_smithy_client4.expectString)(output[_Pe]);
      }
      return contents;
    }, "de_Grant");
    var de_Grantee = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_DN] != null) {
        contents[_DN] = (0, import_smithy_client4.expectString)(output[_DN]);
      }
      if (output[_EA] != null) {
        contents[_EA] = (0, import_smithy_client4.expectString)(output[_EA]);
      }
      if (output[_ID_] != null) {
        contents[_ID_] = (0, import_smithy_client4.expectString)(output[_ID_]);
      }
      if (output[_URI] != null) {
        contents[_URI] = (0, import_smithy_client4.expectString)(output[_URI]);
      }
      if (output[_x] != null) {
        contents[_Ty] = (0, import_smithy_client4.expectString)(output[_x]);
      }
      return contents;
    }, "de_Grantee");
    var de_Grants = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_Grant(entry, context);
      });
    }, "de_Grants");
    var de_IndexDocument = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_Su] != null) {
        contents[_Su] = (0, import_smithy_client4.expectString)(output[_Su]);
      }
      return contents;
    }, "de_IndexDocument");
    var de_Initiator = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_ID_] != null) {
        contents[_ID_] = (0, import_smithy_client4.expectString)(output[_ID_]);
      }
      if (output[_DN] != null) {
        contents[_DN] = (0, import_smithy_client4.expectString)(output[_DN]);
      }
      return contents;
    }, "de_Initiator");
    var de_IntelligentTieringAndOperator = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_P] != null) {
        contents[_P] = (0, import_smithy_client4.expectString)(output[_P]);
      }
      if (output.Tag === "") {
        contents[_Tag] = [];
      } else if (output[_Ta] != null) {
        contents[_Tag] = de_TagSet((0, import_smithy_client4.getArrayIfSingleItem)(output[_Ta]), context);
      }
      return contents;
    }, "de_IntelligentTieringAndOperator");
    var de_IntelligentTieringConfiguration = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_I] != null) {
        contents[_I] = (0, import_smithy_client4.expectString)(output[_I]);
      }
      if (output[_F] != null) {
        contents[_F] = de_IntelligentTieringFilter(output[_F], context);
      }
      if (output[_S] != null) {
        contents[_S] = (0, import_smithy_client4.expectString)(output[_S]);
      }
      if (output.Tiering === "") {
        contents[_Tie] = [];
      } else if (output[_Tier] != null) {
        contents[_Tie] = de_TieringList((0, import_smithy_client4.getArrayIfSingleItem)(output[_Tier]), context);
      }
      return contents;
    }, "de_IntelligentTieringConfiguration");
    var de_IntelligentTieringConfigurationList = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_IntelligentTieringConfiguration(entry, context);
      });
    }, "de_IntelligentTieringConfigurationList");
    var de_IntelligentTieringFilter = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_P] != null) {
        contents[_P] = (0, import_smithy_client4.expectString)(output[_P]);
      }
      if (output[_Ta] != null) {
        contents[_Ta] = de_Tag(output[_Ta], context);
      }
      if (output[_A] != null) {
        contents[_A] = de_IntelligentTieringAndOperator(output[_A], context);
      }
      return contents;
    }, "de_IntelligentTieringFilter");
    var de_InventoryConfiguration = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_Des] != null) {
        contents[_Des] = de_InventoryDestination(output[_Des], context);
      }
      if (output[_IE] != null) {
        contents[_IE] = (0, import_smithy_client4.parseBoolean)(output[_IE]);
      }
      if (output[_F] != null) {
        contents[_F] = de_InventoryFilter(output[_F], context);
      }
      if (output[_I] != null) {
        contents[_I] = (0, import_smithy_client4.expectString)(output[_I]);
      }
      if (output[_IOV] != null) {
        contents[_IOV] = (0, import_smithy_client4.expectString)(output[_IOV]);
      }
      if (output.OptionalFields === "") {
        contents[_OF] = [];
      } else if (output[_OF] != null && output[_OF][_Fi] != null) {
        contents[_OF] = de_InventoryOptionalFields((0, import_smithy_client4.getArrayIfSingleItem)(output[_OF][_Fi]), context);
      }
      if (output[_Sc] != null) {
        contents[_Sc] = de_InventorySchedule(output[_Sc], context);
      }
      return contents;
    }, "de_InventoryConfiguration");
    var de_InventoryConfigurationList = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_InventoryConfiguration(entry, context);
      });
    }, "de_InventoryConfigurationList");
    var de_InventoryDestination = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_SBD] != null) {
        contents[_SBD] = de_InventoryS3BucketDestination(output[_SBD], context);
      }
      return contents;
    }, "de_InventoryDestination");
    var de_InventoryEncryption = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_SS] != null) {
        contents[_SSES] = de_SSES3(output[_SS], context);
      }
      if (output[_SK] != null) {
        contents[_SSEKMS] = de_SSEKMS(output[_SK], context);
      }
      return contents;
    }, "de_InventoryEncryption");
    var de_InventoryFilter = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_P] != null) {
        contents[_P] = (0, import_smithy_client4.expectString)(output[_P]);
      }
      return contents;
    }, "de_InventoryFilter");
    var de_InventoryOptionalFields = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, import_smithy_client4.expectString)(entry);
      });
    }, "de_InventoryOptionalFields");
    var de_InventoryS3BucketDestination = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_AIc] != null) {
        contents[_AIc] = (0, import_smithy_client4.expectString)(output[_AIc]);
      }
      if (output[_B] != null) {
        contents[_B] = (0, import_smithy_client4.expectString)(output[_B]);
      }
      if (output[_Fo] != null) {
        contents[_Fo] = (0, import_smithy_client4.expectString)(output[_Fo]);
      }
      if (output[_P] != null) {
        contents[_P] = (0, import_smithy_client4.expectString)(output[_P]);
      }
      if (output[_En] != null) {
        contents[_En] = de_InventoryEncryption(output[_En], context);
      }
      return contents;
    }, "de_InventoryS3BucketDestination");
    var de_InventorySchedule = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_Fr] != null) {
        contents[_Fr] = (0, import_smithy_client4.expectString)(output[_Fr]);
      }
      return contents;
    }, "de_InventorySchedule");
    var de_LambdaFunctionConfiguration = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_I] != null) {
        contents[_I] = (0, import_smithy_client4.expectString)(output[_I]);
      }
      if (output[_CF] != null) {
        contents[_LFA] = (0, import_smithy_client4.expectString)(output[_CF]);
      }
      if (output.Event === "") {
        contents[_Eve] = [];
      } else if (output[_Ev] != null) {
        contents[_Eve] = de_EventList((0, import_smithy_client4.getArrayIfSingleItem)(output[_Ev]), context);
      }
      if (output[_F] != null) {
        contents[_F] = de_NotificationConfigurationFilter(output[_F], context);
      }
      return contents;
    }, "de_LambdaFunctionConfiguration");
    var de_LambdaFunctionConfigurationList = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_LambdaFunctionConfiguration(entry, context);
      });
    }, "de_LambdaFunctionConfigurationList");
    var de_LifecycleExpiration = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_Dat] != null) {
        contents[_Dat] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_Dat]));
      }
      if (output[_Da] != null) {
        contents[_Da] = (0, import_smithy_client4.strictParseInt32)(output[_Da]);
      }
      if (output[_EODM] != null) {
        contents[_EODM] = (0, import_smithy_client4.parseBoolean)(output[_EODM]);
      }
      return contents;
    }, "de_LifecycleExpiration");
    var de_LifecycleRule = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_Exp] != null) {
        contents[_Exp] = de_LifecycleExpiration(output[_Exp], context);
      }
      if (output[_ID_] != null) {
        contents[_ID_] = (0, import_smithy_client4.expectString)(output[_ID_]);
      }
      if (output[_P] != null) {
        contents[_P] = (0, import_smithy_client4.expectString)(output[_P]);
      }
      if (output[_F] != null) {
        contents[_F] = de_LifecycleRuleFilter(output[_F], context);
      }
      if (output[_S] != null) {
        contents[_S] = (0, import_smithy_client4.expectString)(output[_S]);
      }
      if (output.Transition === "") {
        contents[_Tr] = [];
      } else if (output[_Tra] != null) {
        contents[_Tr] = de_TransitionList((0, import_smithy_client4.getArrayIfSingleItem)(output[_Tra]), context);
      }
      if (output.NoncurrentVersionTransition === "") {
        contents[_NVT] = [];
      } else if (output[_NVTo] != null) {
        contents[_NVT] = de_NoncurrentVersionTransitionList((0, import_smithy_client4.getArrayIfSingleItem)(output[_NVTo]), context);
      }
      if (output[_NVE] != null) {
        contents[_NVE] = de_NoncurrentVersionExpiration(output[_NVE], context);
      }
      if (output[_AIMU] != null) {
        contents[_AIMU] = de_AbortIncompleteMultipartUpload(output[_AIMU], context);
      }
      return contents;
    }, "de_LifecycleRule");
    var de_LifecycleRuleAndOperator = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_P] != null) {
        contents[_P] = (0, import_smithy_client4.expectString)(output[_P]);
      }
      if (output.Tag === "") {
        contents[_Tag] = [];
      } else if (output[_Ta] != null) {
        contents[_Tag] = de_TagSet((0, import_smithy_client4.getArrayIfSingleItem)(output[_Ta]), context);
      }
      if (output[_OSGT] != null) {
        contents[_OSGT] = (0, import_smithy_client4.strictParseLong)(output[_OSGT]);
      }
      if (output[_OSLT] != null) {
        contents[_OSLT] = (0, import_smithy_client4.strictParseLong)(output[_OSLT]);
      }
      return contents;
    }, "de_LifecycleRuleAndOperator");
    var de_LifecycleRuleFilter = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_P] != null) {
        contents[_P] = (0, import_smithy_client4.expectString)(output[_P]);
      }
      if (output[_Ta] != null) {
        contents[_Ta] = de_Tag(output[_Ta], context);
      }
      if (output[_OSGT] != null) {
        contents[_OSGT] = (0, import_smithy_client4.strictParseLong)(output[_OSGT]);
      }
      if (output[_OSLT] != null) {
        contents[_OSLT] = (0, import_smithy_client4.strictParseLong)(output[_OSLT]);
      }
      if (output[_A] != null) {
        contents[_A] = de_LifecycleRuleAndOperator(output[_A], context);
      }
      return contents;
    }, "de_LifecycleRuleFilter");
    var de_LifecycleRules = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_LifecycleRule(entry, context);
      });
    }, "de_LifecycleRules");
    var de_LoggingEnabled = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_TB] != null) {
        contents[_TB] = (0, import_smithy_client4.expectString)(output[_TB]);
      }
      if (output.TargetGrants === "") {
        contents[_TG] = [];
      } else if (output[_TG] != null && output[_TG][_G] != null) {
        contents[_TG] = de_TargetGrants((0, import_smithy_client4.getArrayIfSingleItem)(output[_TG][_G]), context);
      }
      if (output[_TP] != null) {
        contents[_TP] = (0, import_smithy_client4.expectString)(output[_TP]);
      }
      if (output[_TOKF] != null) {
        contents[_TOKF] = de_TargetObjectKeyFormat(output[_TOKF], context);
      }
      return contents;
    }, "de_LoggingEnabled");
    var de_Metrics = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_S] != null) {
        contents[_S] = (0, import_smithy_client4.expectString)(output[_S]);
      }
      if (output[_ETv] != null) {
        contents[_ETv] = de_ReplicationTimeValue(output[_ETv], context);
      }
      return contents;
    }, "de_Metrics");
    var de_MetricsAndOperator = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_P] != null) {
        contents[_P] = (0, import_smithy_client4.expectString)(output[_P]);
      }
      if (output.Tag === "") {
        contents[_Tag] = [];
      } else if (output[_Ta] != null) {
        contents[_Tag] = de_TagSet((0, import_smithy_client4.getArrayIfSingleItem)(output[_Ta]), context);
      }
      if (output[_APAc] != null) {
        contents[_APAc] = (0, import_smithy_client4.expectString)(output[_APAc]);
      }
      return contents;
    }, "de_MetricsAndOperator");
    var de_MetricsConfiguration = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_I] != null) {
        contents[_I] = (0, import_smithy_client4.expectString)(output[_I]);
      }
      if (output.Filter === "") {
      } else if (output[_F] != null) {
        contents[_F] = de_MetricsFilter((0, import_smithy_client4.expectUnion)(output[_F]), context);
      }
      return contents;
    }, "de_MetricsConfiguration");
    var de_MetricsConfigurationList = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_MetricsConfiguration(entry, context);
      });
    }, "de_MetricsConfigurationList");
    var de_MetricsFilter = /* @__PURE__ */ __name((output, context) => {
      if (output[_P] != null) {
        return {
          Prefix: (0, import_smithy_client4.expectString)(output[_P])
        };
      }
      if (output[_Ta] != null) {
        return {
          Tag: de_Tag(output[_Ta], context)
        };
      }
      if (output[_APAc] != null) {
        return {
          AccessPointArn: (0, import_smithy_client4.expectString)(output[_APAc])
        };
      }
      if (output[_A] != null) {
        return {
          And: de_MetricsAndOperator(output[_A], context)
        };
      }
      return { $unknown: Object.entries(output)[0] };
    }, "de_MetricsFilter");
    var de_MultipartUpload = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_UI] != null) {
        contents[_UI] = (0, import_smithy_client4.expectString)(output[_UI]);
      }
      if (output[_K] != null) {
        contents[_K] = (0, import_smithy_client4.expectString)(output[_K]);
      }
      if (output[_Ini] != null) {
        contents[_Ini] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_Ini]));
      }
      if (output[_SC] != null) {
        contents[_SC] = (0, import_smithy_client4.expectString)(output[_SC]);
      }
      if (output[_O] != null) {
        contents[_O] = de_Owner(output[_O], context);
      }
      if (output[_In] != null) {
        contents[_In] = de_Initiator(output[_In], context);
      }
      if (output[_CA] != null) {
        contents[_CA] = (0, import_smithy_client4.expectString)(output[_CA]);
      }
      return contents;
    }, "de_MultipartUpload");
    var de_MultipartUploadList = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_MultipartUpload(entry, context);
      });
    }, "de_MultipartUploadList");
    var de_NoncurrentVersionExpiration = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_ND] != null) {
        contents[_ND] = (0, import_smithy_client4.strictParseInt32)(output[_ND]);
      }
      if (output[_NNV] != null) {
        contents[_NNV] = (0, import_smithy_client4.strictParseInt32)(output[_NNV]);
      }
      return contents;
    }, "de_NoncurrentVersionExpiration");
    var de_NoncurrentVersionTransition = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_ND] != null) {
        contents[_ND] = (0, import_smithy_client4.strictParseInt32)(output[_ND]);
      }
      if (output[_SC] != null) {
        contents[_SC] = (0, import_smithy_client4.expectString)(output[_SC]);
      }
      if (output[_NNV] != null) {
        contents[_NNV] = (0, import_smithy_client4.strictParseInt32)(output[_NNV]);
      }
      return contents;
    }, "de_NoncurrentVersionTransition");
    var de_NoncurrentVersionTransitionList = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_NoncurrentVersionTransition(entry, context);
      });
    }, "de_NoncurrentVersionTransitionList");
    var de_NotificationConfigurationFilter = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_SKe] != null) {
        contents[_K] = de_S3KeyFilter(output[_SKe], context);
      }
      return contents;
    }, "de_NotificationConfigurationFilter");
    var de__Object = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_K] != null) {
        contents[_K] = (0, import_smithy_client4.expectString)(output[_K]);
      }
      if (output[_LM] != null) {
        contents[_LM] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_LM]));
      }
      if (output[_ETa] != null) {
        contents[_ETa] = (0, import_smithy_client4.expectString)(output[_ETa]);
      }
      if (output.ChecksumAlgorithm === "") {
        contents[_CA] = [];
      } else if (output[_CA] != null) {
        contents[_CA] = de_ChecksumAlgorithmList((0, import_smithy_client4.getArrayIfSingleItem)(output[_CA]), context);
      }
      if (output[_Si] != null) {
        contents[_Si] = (0, import_smithy_client4.strictParseLong)(output[_Si]);
      }
      if (output[_SC] != null) {
        contents[_SC] = (0, import_smithy_client4.expectString)(output[_SC]);
      }
      if (output[_O] != null) {
        contents[_O] = de_Owner(output[_O], context);
      }
      if (output[_RSe] != null) {
        contents[_RSe] = de_RestoreStatus(output[_RSe], context);
      }
      return contents;
    }, "de__Object");
    var de_ObjectList = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de__Object(entry, context);
      });
    }, "de_ObjectList");
    var de_ObjectLockConfiguration = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_OLE] != null) {
        contents[_OLE] = (0, import_smithy_client4.expectString)(output[_OLE]);
      }
      if (output[_Ru] != null) {
        contents[_Ru] = de_ObjectLockRule(output[_Ru], context);
      }
      return contents;
    }, "de_ObjectLockConfiguration");
    var de_ObjectLockLegalHold = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_S] != null) {
        contents[_S] = (0, import_smithy_client4.expectString)(output[_S]);
      }
      return contents;
    }, "de_ObjectLockLegalHold");
    var de_ObjectLockRetention = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_Mo] != null) {
        contents[_Mo] = (0, import_smithy_client4.expectString)(output[_Mo]);
      }
      if (output[_RUD] != null) {
        contents[_RUD] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_RUD]));
      }
      return contents;
    }, "de_ObjectLockRetention");
    var de_ObjectLockRule = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_DRe] != null) {
        contents[_DRe] = de_DefaultRetention(output[_DRe], context);
      }
      return contents;
    }, "de_ObjectLockRule");
    var de_ObjectPart = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_PN] != null) {
        contents[_PN] = (0, import_smithy_client4.strictParseInt32)(output[_PN]);
      }
      if (output[_Si] != null) {
        contents[_Si] = (0, import_smithy_client4.strictParseLong)(output[_Si]);
      }
      if (output[_CCRC] != null) {
        contents[_CCRC] = (0, import_smithy_client4.expectString)(output[_CCRC]);
      }
      if (output[_CCRCC] != null) {
        contents[_CCRCC] = (0, import_smithy_client4.expectString)(output[_CCRCC]);
      }
      if (output[_CSHA] != null) {
        contents[_CSHA] = (0, import_smithy_client4.expectString)(output[_CSHA]);
      }
      if (output[_CSHAh] != null) {
        contents[_CSHAh] = (0, import_smithy_client4.expectString)(output[_CSHAh]);
      }
      return contents;
    }, "de_ObjectPart");
    var de_ObjectVersion = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_ETa] != null) {
        contents[_ETa] = (0, import_smithy_client4.expectString)(output[_ETa]);
      }
      if (output.ChecksumAlgorithm === "") {
        contents[_CA] = [];
      } else if (output[_CA] != null) {
        contents[_CA] = de_ChecksumAlgorithmList((0, import_smithy_client4.getArrayIfSingleItem)(output[_CA]), context);
      }
      if (output[_Si] != null) {
        contents[_Si] = (0, import_smithy_client4.strictParseLong)(output[_Si]);
      }
      if (output[_SC] != null) {
        contents[_SC] = (0, import_smithy_client4.expectString)(output[_SC]);
      }
      if (output[_K] != null) {
        contents[_K] = (0, import_smithy_client4.expectString)(output[_K]);
      }
      if (output[_VI] != null) {
        contents[_VI] = (0, import_smithy_client4.expectString)(output[_VI]);
      }
      if (output[_IL] != null) {
        contents[_IL] = (0, import_smithy_client4.parseBoolean)(output[_IL]);
      }
      if (output[_LM] != null) {
        contents[_LM] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_LM]));
      }
      if (output[_O] != null) {
        contents[_O] = de_Owner(output[_O], context);
      }
      if (output[_RSe] != null) {
        contents[_RSe] = de_RestoreStatus(output[_RSe], context);
      }
      return contents;
    }, "de_ObjectVersion");
    var de_ObjectVersionList = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_ObjectVersion(entry, context);
      });
    }, "de_ObjectVersionList");
    var de_Owner = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_DN] != null) {
        contents[_DN] = (0, import_smithy_client4.expectString)(output[_DN]);
      }
      if (output[_ID_] != null) {
        contents[_ID_] = (0, import_smithy_client4.expectString)(output[_ID_]);
      }
      return contents;
    }, "de_Owner");
    var de_OwnershipControls = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.Rule === "") {
        contents[_Rul] = [];
      } else if (output[_Ru] != null) {
        contents[_Rul] = de_OwnershipControlsRules((0, import_smithy_client4.getArrayIfSingleItem)(output[_Ru]), context);
      }
      return contents;
    }, "de_OwnershipControls");
    var de_OwnershipControlsRule = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_OO] != null) {
        contents[_OO] = (0, import_smithy_client4.expectString)(output[_OO]);
      }
      return contents;
    }, "de_OwnershipControlsRule");
    var de_OwnershipControlsRules = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_OwnershipControlsRule(entry, context);
      });
    }, "de_OwnershipControlsRules");
    var de_Part = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_PN] != null) {
        contents[_PN] = (0, import_smithy_client4.strictParseInt32)(output[_PN]);
      }
      if (output[_LM] != null) {
        contents[_LM] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_LM]));
      }
      if (output[_ETa] != null) {
        contents[_ETa] = (0, import_smithy_client4.expectString)(output[_ETa]);
      }
      if (output[_Si] != null) {
        contents[_Si] = (0, import_smithy_client4.strictParseLong)(output[_Si]);
      }
      if (output[_CCRC] != null) {
        contents[_CCRC] = (0, import_smithy_client4.expectString)(output[_CCRC]);
      }
      if (output[_CCRCC] != null) {
        contents[_CCRCC] = (0, import_smithy_client4.expectString)(output[_CCRCC]);
      }
      if (output[_CSHA] != null) {
        contents[_CSHA] = (0, import_smithy_client4.expectString)(output[_CSHA]);
      }
      if (output[_CSHAh] != null) {
        contents[_CSHAh] = (0, import_smithy_client4.expectString)(output[_CSHAh]);
      }
      return contents;
    }, "de_Part");
    var de_PartitionedPrefix = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_PDS] != null) {
        contents[_PDS] = (0, import_smithy_client4.expectString)(output[_PDS]);
      }
      return contents;
    }, "de_PartitionedPrefix");
    var de_Parts = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_Part(entry, context);
      });
    }, "de_Parts");
    var de_PartsList = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_ObjectPart(entry, context);
      });
    }, "de_PartsList");
    var de_PolicyStatus = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_IP] != null) {
        contents[_IP] = (0, import_smithy_client4.parseBoolean)(output[_IP]);
      }
      return contents;
    }, "de_PolicyStatus");
    var de_Progress = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_BS] != null) {
        contents[_BS] = (0, import_smithy_client4.strictParseLong)(output[_BS]);
      }
      if (output[_BP] != null) {
        contents[_BP] = (0, import_smithy_client4.strictParseLong)(output[_BP]);
      }
      if (output[_BRy] != null) {
        contents[_BRy] = (0, import_smithy_client4.strictParseLong)(output[_BRy]);
      }
      return contents;
    }, "de_Progress");
    var de_PublicAccessBlockConfiguration = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_BPA] != null) {
        contents[_BPA] = (0, import_smithy_client4.parseBoolean)(output[_BPA]);
      }
      if (output[_IPA] != null) {
        contents[_IPA] = (0, import_smithy_client4.parseBoolean)(output[_IPA]);
      }
      if (output[_BPP] != null) {
        contents[_BPP] = (0, import_smithy_client4.parseBoolean)(output[_BPP]);
      }
      if (output[_RPB] != null) {
        contents[_RPB] = (0, import_smithy_client4.parseBoolean)(output[_RPB]);
      }
      return contents;
    }, "de_PublicAccessBlockConfiguration");
    var de_QueueConfiguration = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_I] != null) {
        contents[_I] = (0, import_smithy_client4.expectString)(output[_I]);
      }
      if (output[_Qu] != null) {
        contents[_QA] = (0, import_smithy_client4.expectString)(output[_Qu]);
      }
      if (output.Event === "") {
        contents[_Eve] = [];
      } else if (output[_Ev] != null) {
        contents[_Eve] = de_EventList((0, import_smithy_client4.getArrayIfSingleItem)(output[_Ev]), context);
      }
      if (output[_F] != null) {
        contents[_F] = de_NotificationConfigurationFilter(output[_F], context);
      }
      return contents;
    }, "de_QueueConfiguration");
    var de_QueueConfigurationList = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_QueueConfiguration(entry, context);
      });
    }, "de_QueueConfigurationList");
    var de_Redirect = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_HN] != null) {
        contents[_HN] = (0, import_smithy_client4.expectString)(output[_HN]);
      }
      if (output[_HRC] != null) {
        contents[_HRC] = (0, import_smithy_client4.expectString)(output[_HRC]);
      }
      if (output[_Pr] != null) {
        contents[_Pr] = (0, import_smithy_client4.expectString)(output[_Pr]);
      }
      if (output[_RKPW] != null) {
        contents[_RKPW] = (0, import_smithy_client4.expectString)(output[_RKPW]);
      }
      if (output[_RKW] != null) {
        contents[_RKW] = (0, import_smithy_client4.expectString)(output[_RKW]);
      }
      return contents;
    }, "de_Redirect");
    var de_RedirectAllRequestsTo = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_HN] != null) {
        contents[_HN] = (0, import_smithy_client4.expectString)(output[_HN]);
      }
      if (output[_Pr] != null) {
        contents[_Pr] = (0, import_smithy_client4.expectString)(output[_Pr]);
      }
      return contents;
    }, "de_RedirectAllRequestsTo");
    var de_ReplicaModifications = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_S] != null) {
        contents[_S] = (0, import_smithy_client4.expectString)(output[_S]);
      }
      return contents;
    }, "de_ReplicaModifications");
    var de_ReplicationConfiguration = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_Ro] != null) {
        contents[_Ro] = (0, import_smithy_client4.expectString)(output[_Ro]);
      }
      if (output.Rule === "") {
        contents[_Rul] = [];
      } else if (output[_Ru] != null) {
        contents[_Rul] = de_ReplicationRules((0, import_smithy_client4.getArrayIfSingleItem)(output[_Ru]), context);
      }
      return contents;
    }, "de_ReplicationConfiguration");
    var de_ReplicationRule = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_ID_] != null) {
        contents[_ID_] = (0, import_smithy_client4.expectString)(output[_ID_]);
      }
      if (output[_Pri] != null) {
        contents[_Pri] = (0, import_smithy_client4.strictParseInt32)(output[_Pri]);
      }
      if (output[_P] != null) {
        contents[_P] = (0, import_smithy_client4.expectString)(output[_P]);
      }
      if (output[_F] != null) {
        contents[_F] = de_ReplicationRuleFilter(output[_F], context);
      }
      if (output[_S] != null) {
        contents[_S] = (0, import_smithy_client4.expectString)(output[_S]);
      }
      if (output[_SSC] != null) {
        contents[_SSC] = de_SourceSelectionCriteria(output[_SSC], context);
      }
      if (output[_EOR] != null) {
        contents[_EOR] = de_ExistingObjectReplication(output[_EOR], context);
      }
      if (output[_Des] != null) {
        contents[_Des] = de_Destination(output[_Des], context);
      }
      if (output[_DMR] != null) {
        contents[_DMR] = de_DeleteMarkerReplication(output[_DMR], context);
      }
      return contents;
    }, "de_ReplicationRule");
    var de_ReplicationRuleAndOperator = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_P] != null) {
        contents[_P] = (0, import_smithy_client4.expectString)(output[_P]);
      }
      if (output.Tag === "") {
        contents[_Tag] = [];
      } else if (output[_Ta] != null) {
        contents[_Tag] = de_TagSet((0, import_smithy_client4.getArrayIfSingleItem)(output[_Ta]), context);
      }
      return contents;
    }, "de_ReplicationRuleAndOperator");
    var de_ReplicationRuleFilter = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_P] != null) {
        contents[_P] = (0, import_smithy_client4.expectString)(output[_P]);
      }
      if (output[_Ta] != null) {
        contents[_Ta] = de_Tag(output[_Ta], context);
      }
      if (output[_A] != null) {
        contents[_A] = de_ReplicationRuleAndOperator(output[_A], context);
      }
      return contents;
    }, "de_ReplicationRuleFilter");
    var de_ReplicationRules = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_ReplicationRule(entry, context);
      });
    }, "de_ReplicationRules");
    var de_ReplicationTime = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_S] != null) {
        contents[_S] = (0, import_smithy_client4.expectString)(output[_S]);
      }
      if (output[_Tim] != null) {
        contents[_Tim] = de_ReplicationTimeValue(output[_Tim], context);
      }
      return contents;
    }, "de_ReplicationTime");
    var de_ReplicationTimeValue = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_Mi] != null) {
        contents[_Mi] = (0, import_smithy_client4.strictParseInt32)(output[_Mi]);
      }
      return contents;
    }, "de_ReplicationTimeValue");
    var de_RestoreStatus = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_IRIP] != null) {
        contents[_IRIP] = (0, import_smithy_client4.parseBoolean)(output[_IRIP]);
      }
      if (output[_RED] != null) {
        contents[_RED] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_RED]));
      }
      return contents;
    }, "de_RestoreStatus");
    var de_RoutingRule = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_Con] != null) {
        contents[_Con] = de_Condition(output[_Con], context);
      }
      if (output[_Red] != null) {
        contents[_Red] = de_Redirect(output[_Red], context);
      }
      return contents;
    }, "de_RoutingRule");
    var de_RoutingRules = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_RoutingRule(entry, context);
      });
    }, "de_RoutingRules");
    var de_S3KeyFilter = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.FilterRule === "") {
        contents[_FRi] = [];
      } else if (output[_FR] != null) {
        contents[_FRi] = de_FilterRuleList((0, import_smithy_client4.getArrayIfSingleItem)(output[_FR]), context);
      }
      return contents;
    }, "de_S3KeyFilter");
    var de_ServerSideEncryptionByDefault = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_SSEA] != null) {
        contents[_SSEA] = (0, import_smithy_client4.expectString)(output[_SSEA]);
      }
      if (output[_KMSMKID] != null) {
        contents[_KMSMKID] = (0, import_smithy_client4.expectString)(output[_KMSMKID]);
      }
      return contents;
    }, "de_ServerSideEncryptionByDefault");
    var de_ServerSideEncryptionConfiguration = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.Rule === "") {
        contents[_Rul] = [];
      } else if (output[_Ru] != null) {
        contents[_Rul] = de_ServerSideEncryptionRules((0, import_smithy_client4.getArrayIfSingleItem)(output[_Ru]), context);
      }
      return contents;
    }, "de_ServerSideEncryptionConfiguration");
    var de_ServerSideEncryptionRule = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_ASSEBD] != null) {
        contents[_ASSEBD] = de_ServerSideEncryptionByDefault(output[_ASSEBD], context);
      }
      if (output[_BKE] != null) {
        contents[_BKE] = (0, import_smithy_client4.parseBoolean)(output[_BKE]);
      }
      return contents;
    }, "de_ServerSideEncryptionRule");
    var de_ServerSideEncryptionRules = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_ServerSideEncryptionRule(entry, context);
      });
    }, "de_ServerSideEncryptionRules");
    var de_SessionCredentials = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_AKI] != null) {
        contents[_AKI] = (0, import_smithy_client4.expectString)(output[_AKI]);
      }
      if (output[_SAK] != null) {
        contents[_SAK] = (0, import_smithy_client4.expectString)(output[_SAK]);
      }
      if (output[_ST] != null) {
        contents[_ST] = (0, import_smithy_client4.expectString)(output[_ST]);
      }
      if (output[_Exp] != null) {
        contents[_Exp] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_Exp]));
      }
      return contents;
    }, "de_SessionCredentials");
    var de_SimplePrefix = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      return contents;
    }, "de_SimplePrefix");
    var de_SourceSelectionCriteria = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_SKEO] != null) {
        contents[_SKEO] = de_SseKmsEncryptedObjects(output[_SKEO], context);
      }
      if (output[_RM] != null) {
        contents[_RM] = de_ReplicaModifications(output[_RM], context);
      }
      return contents;
    }, "de_SourceSelectionCriteria");
    var de_SSEKMS = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_KI] != null) {
        contents[_KI] = (0, import_smithy_client4.expectString)(output[_KI]);
      }
      return contents;
    }, "de_SSEKMS");
    var de_SseKmsEncryptedObjects = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_S] != null) {
        contents[_S] = (0, import_smithy_client4.expectString)(output[_S]);
      }
      return contents;
    }, "de_SseKmsEncryptedObjects");
    var de_SSES3 = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      return contents;
    }, "de_SSES3");
    var de_Stats = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_BS] != null) {
        contents[_BS] = (0, import_smithy_client4.strictParseLong)(output[_BS]);
      }
      if (output[_BP] != null) {
        contents[_BP] = (0, import_smithy_client4.strictParseLong)(output[_BP]);
      }
      if (output[_BRy] != null) {
        contents[_BRy] = (0, import_smithy_client4.strictParseLong)(output[_BRy]);
      }
      return contents;
    }, "de_Stats");
    var de_StorageClassAnalysis = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_DE] != null) {
        contents[_DE] = de_StorageClassAnalysisDataExport(output[_DE], context);
      }
      return contents;
    }, "de_StorageClassAnalysis");
    var de_StorageClassAnalysisDataExport = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_OSV] != null) {
        contents[_OSV] = (0, import_smithy_client4.expectString)(output[_OSV]);
      }
      if (output[_Des] != null) {
        contents[_Des] = de_AnalyticsExportDestination(output[_Des], context);
      }
      return contents;
    }, "de_StorageClassAnalysisDataExport");
    var de_Tag = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_K] != null) {
        contents[_K] = (0, import_smithy_client4.expectString)(output[_K]);
      }
      if (output[_Va] != null) {
        contents[_Va] = (0, import_smithy_client4.expectString)(output[_Va]);
      }
      return contents;
    }, "de_Tag");
    var de_TagSet = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_Tag(entry, context);
      });
    }, "de_TagSet");
    var de_TargetGrant = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_Gra] != null) {
        contents[_Gra] = de_Grantee(output[_Gra], context);
      }
      if (output[_Pe] != null) {
        contents[_Pe] = (0, import_smithy_client4.expectString)(output[_Pe]);
      }
      return contents;
    }, "de_TargetGrant");
    var de_TargetGrants = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_TargetGrant(entry, context);
      });
    }, "de_TargetGrants");
    var de_TargetObjectKeyFormat = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_SPi] != null) {
        contents[_SPi] = de_SimplePrefix(output[_SPi], context);
      }
      if (output[_PP] != null) {
        contents[_PP] = de_PartitionedPrefix(output[_PP], context);
      }
      return contents;
    }, "de_TargetObjectKeyFormat");
    var de_Tiering = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_Da] != null) {
        contents[_Da] = (0, import_smithy_client4.strictParseInt32)(output[_Da]);
      }
      if (output[_AT] != null) {
        contents[_AT] = (0, import_smithy_client4.expectString)(output[_AT]);
      }
      return contents;
    }, "de_Tiering");
    var de_TieringList = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_Tiering(entry, context);
      });
    }, "de_TieringList");
    var de_TopicConfiguration = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_I] != null) {
        contents[_I] = (0, import_smithy_client4.expectString)(output[_I]);
      }
      if (output[_Top] != null) {
        contents[_TA] = (0, import_smithy_client4.expectString)(output[_Top]);
      }
      if (output.Event === "") {
        contents[_Eve] = [];
      } else if (output[_Ev] != null) {
        contents[_Eve] = de_EventList((0, import_smithy_client4.getArrayIfSingleItem)(output[_Ev]), context);
      }
      if (output[_F] != null) {
        contents[_F] = de_NotificationConfigurationFilter(output[_F], context);
      }
      return contents;
    }, "de_TopicConfiguration");
    var de_TopicConfigurationList = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_TopicConfiguration(entry, context);
      });
    }, "de_TopicConfigurationList");
    var de_Transition = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_Dat] != null) {
        contents[_Dat] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_Dat]));
      }
      if (output[_Da] != null) {
        contents[_Da] = (0, import_smithy_client4.strictParseInt32)(output[_Da]);
      }
      if (output[_SC] != null) {
        contents[_SC] = (0, import_smithy_client4.expectString)(output[_SC]);
      }
      return contents;
    }, "de_Transition");
    var de_TransitionList = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_Transition(entry, context);
      });
    }, "de_TransitionList");
    var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    }), "deserializeMetadata");
    var collectBodyString2 = /* @__PURE__ */ __name((streamBody, context) => (0, import_smithy_client4.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body)), "collectBodyString");
    var _A = "And";
    var _AAO = "AnalyticsAndOperator";
    var _AC = "AnalyticsConfiguration";
    var _ACL = "ACL";
    var _ACLc = "AccessControlList";
    var _ACLn = "AnalyticsConfigurationList";
    var _ACP = "AccessControlPolicy";
    var _ACT = "AccessControlTranslation";
    var _ACc = "AccelerateConfiguration";
    var _AD = "AbortDate";
    var _AED = "AnalyticsExportDestination";
    var _AF = "AnalyticsFilter";
    var _AH = "AllowedHeader";
    var _AHl = "AllowedHeaders";
    var _AI = "AnalyticsId";
    var _AIMU = "AbortIncompleteMultipartUpload";
    var _AIc = "AccountId";
    var _AKI = "AccessKeyId";
    var _AM = "AllowedMethod";
    var _AMl = "AllowedMethods";
    var _AO = "AllowedOrigin";
    var _AOl = "AllowedOrigins";
    var _APA = "AccessPointAlias";
    var _APAc = "AccessPointArn";
    var _AQRD = "AllowQuotedRecordDelimiter";
    var _AR = "AcceptRanges";
    var _ARI = "AbortRuleId";
    var _AS = "ArchiveStatus";
    var _ASBD = "AnalyticsS3BucketDestination";
    var _ASEFF = "AnalyticsS3ExportFileFormat";
    var _ASSEBD = "ApplyServerSideEncryptionByDefault";
    var _AT = "AccessTier";
    var _Ac = "Account";
    var _B = "Bucket";
    var _BAI = "BucketAccountId";
    var _BAS = "BucketAccelerateStatus";
    var _BGR = "BypassGovernanceRetention";
    var _BI = "BucketInfo";
    var _BKE = "BucketKeyEnabled";
    var _BLC = "BucketLifecycleConfiguration";
    var _BLCu = "BucketLocationConstraint";
    var _BLN = "BucketLocationName";
    var _BLP = "BucketLogsPermission";
    var _BLS = "BucketLoggingStatus";
    var _BLT = "BucketLocationType";
    var _BN = "BucketName";
    var _BP = "BytesProcessed";
    var _BPA = "BlockPublicAcls";
    var _BPP = "BlockPublicPolicy";
    var _BR = "BucketRegion";
    var _BRy = "BytesReturned";
    var _BS = "BytesScanned";
    var _BT = "BucketType";
    var _BVS = "BucketVersioningStatus";
    var _Bu = "Buckets";
    var _C = "Credentials";
    var _CA = "ChecksumAlgorithm";
    var _CACL = "CannedACL";
    var _CBC = "CreateBucketConfiguration";
    var _CC = "CacheControl";
    var _CCRC = "ChecksumCRC32";
    var _CCRCC = "ChecksumCRC32C";
    var _CD = "ContentDisposition";
    var _CDr = "CreationDate";
    var _CE = "ContentEncoding";
    var _CF = "CloudFunction";
    var _CFC = "CloudFunctionConfiguration";
    var _CL = "ContentLanguage";
    var _CLo = "ContentLength";
    var _CM = "ChecksumMode";
    var _CMD = "ContentMD5";
    var _CMU = "CompletedMultipartUpload";
    var _CORSC = "CORSConfiguration";
    var _CORSR = "CORSRule";
    var _CORSRu = "CORSRules";
    var _CP = "CommonPrefixes";
    var _CPo = "CompletedPart";
    var _CR = "ContentRange";
    var _CRSBA = "ConfirmRemoveSelfBucketAccess";
    var _CS = "CopySource";
    var _CSHA = "ChecksumSHA1";
    var _CSHAh = "ChecksumSHA256";
    var _CSIM = "CopySourceIfMatch";
    var _CSIMS = "CopySourceIfModifiedSince";
    var _CSINM = "CopySourceIfNoneMatch";
    var _CSIUS = "CopySourceIfUnmodifiedSince";
    var _CSR = "CopySourceRange";
    var _CSSSECA = "CopySourceSSECustomerAlgorithm";
    var _CSSSECK = "CopySourceSSECustomerKey";
    var _CSSSECKMD = "CopySourceSSECustomerKeyMD5";
    var _CSV = "CSV";
    var _CSVI = "CopySourceVersionId";
    var _CSVIn = "CSVInput";
    var _CSVO = "CSVOutput";
    var _CT = "ContentType";
    var _CTo = "ContinuationToken";
    var _CTom = "CompressionType";
    var _Ch = "Checksum";
    var _Co = "Contents";
    var _Cod = "Code";
    var _Com = "Comments";
    var _Con = "Condition";
    var _D = "Delimiter";
    var _DAI = "DaysAfterInitiation";
    var _DE = "DataExport";
    var _DM = "DeleteMarker";
    var _DMR = "DeleteMarkerReplication";
    var _DMRS = "DeleteMarkerReplicationStatus";
    var _DMVI = "DeleteMarkerVersionId";
    var _DMe = "DeleteMarkers";
    var _DN = "DisplayName";
    var _DR = "DataRedundancy";
    var _DRe = "DefaultRetention";
    var _Da = "Days";
    var _Dat = "Date";
    var _De = "Deleted";
    var _Del = "Delete";
    var _Des = "Destination";
    var _Desc = "Description";
    var _E = "Expires";
    var _EA = "EmailAddress";
    var _EBC = "EventBridgeConfiguration";
    var _EBO = "ExpectedBucketOwner";
    var _EC = "ErrorCode";
    var _ECn = "EncryptionConfiguration";
    var _ED = "ErrorDocument";
    var _EH = "ExposeHeaders";
    var _EHx = "ExposeHeader";
    var _EM = "ErrorMessage";
    var _EODM = "ExpiredObjectDeleteMarker";
    var _EOR = "ExistingObjectReplication";
    var _EORS = "ExistingObjectReplicationStatus";
    var _ERP = "EnableRequestProgress";
    var _ES = "ExpiresString";
    var _ESBO = "ExpectedSourceBucketOwner";
    var _ESx = "ExpirationStatus";
    var _ET = "EncodingType";
    var _ETa = "ETag";
    var _ETn = "EncryptionType";
    var _ETv = "EventThreshold";
    var _ETx = "ExpressionType";
    var _En = "Encryption";
    var _Ena = "Enabled";
    var _End = "End";
    var _Er = "Error";
    var _Err = "Errors";
    var _Ev = "Event";
    var _Eve = "Events";
    var _Ex = "Expression";
    var _Exp = "Expiration";
    var _F = "Filter";
    var _FD = "FieldDelimiter";
    var _FHI = "FileHeaderInfo";
    var _FO = "FetchOwner";
    var _FR = "FilterRule";
    var _FRN = "FilterRuleName";
    var _FRV = "FilterRuleValue";
    var _FRi = "FilterRules";
    var _Fi = "Field";
    var _Fo = "Format";
    var _Fr = "Frequency";
    var _G = "Grant";
    var _GFC = "GrantFullControl";
    var _GJP = "GlacierJobParameters";
    var _GR = "GrantRead";
    var _GRACP = "GrantReadACP";
    var _GW = "GrantWrite";
    var _GWACP = "GrantWriteACP";
    var _Gr = "Grants";
    var _Gra = "Grantee";
    var _HECRE = "HttpErrorCodeReturnedEquals";
    var _HN = "HostName";
    var _HRC = "HttpRedirectCode";
    var _I = "Id";
    var _IC = "InventoryConfiguration";
    var _ICL = "InventoryConfigurationList";
    var _ID = "IndexDocument";
    var _ID_ = "ID";
    var _IDn = "InventoryDestination";
    var _IE = "IsEnabled";
    var _IEn = "InventoryEncryption";
    var _IF = "InventoryFilter";
    var _IFn = "InventoryFormat";
    var _IFnv = "InventoryFrequency";
    var _II = "InventoryId";
    var _IIOV = "InventoryIncludedObjectVersions";
    var _IL = "IsLatest";
    var _IM = "IfMatch";
    var _IMIT = "IfMatchInitiatedTime";
    var _IMLMT = "IfMatchLastModifiedTime";
    var _IMS = "IfMatchSize";
    var _IMSf = "IfModifiedSince";
    var _INM = "IfNoneMatch";
    var _IOF = "InventoryOptionalField";
    var _IOV = "IncludedObjectVersions";
    var _IP = "IsPublic";
    var _IPA = "IgnorePublicAcls";
    var _IRIP = "IsRestoreInProgress";
    var _IS = "InputSerialization";
    var _ISBD = "InventoryS3BucketDestination";
    var _ISn = "InventorySchedule";
    var _IT = "IsTruncated";
    var _ITAO = "IntelligentTieringAndOperator";
    var _ITAT = "IntelligentTieringAccessTier";
    var _ITC = "IntelligentTieringConfiguration";
    var _ITCL = "IntelligentTieringConfigurationList";
    var _ITD = "IntelligentTieringDays";
    var _ITF = "IntelligentTieringFilter";
    var _ITI = "IntelligentTieringId";
    var _ITS = "IntelligentTieringStatus";
    var _IUS = "IfUnmodifiedSince";
    var _In = "Initiator";
    var _Ini = "Initiated";
    var _JSON = "JSON";
    var _JSONI = "JSONInput";
    var _JSONO = "JSONOutput";
    var _JSONT = "JSONType";
    var _K = "Key";
    var _KC = "KeyCount";
    var _KI = "KeyId";
    var _KM = "KeyMarker";
    var _KMSC = "KMSContext";
    var _KMSKI = "KMSKeyId";
    var _KMSMKID = "KMSMasterKeyID";
    var _KPE = "KeyPrefixEquals";
    var _L = "Location";
    var _LC = "LocationConstraint";
    var _LE = "LoggingEnabled";
    var _LEi = "LifecycleExpiration";
    var _LFA = "LambdaFunctionArn";
    var _LFC = "LambdaFunctionConfigurations";
    var _LFCa = "LambdaFunctionConfiguration";
    var _LI = "LocationInfo";
    var _LM = "LastModified";
    var _LMT = "LastModifiedTime";
    var _LNAS = "LocationNameAsString";
    var _LP = "LocationPrefix";
    var _LR = "LifecycleRule";
    var _LRAO = "LifecycleRuleAndOperator";
    var _LRF = "LifecycleRuleFilter";
    var _LT = "LocationType";
    var _M = "Marker";
    var _MAO = "MetricsAndOperator";
    var _MAS = "MaxAgeSeconds";
    var _MB = "MaxBuckets";
    var _MC = "MetricsConfiguration";
    var _MCL = "MetricsConfigurationList";
    var _MD = "MetadataDirective";
    var _MDB = "MaxDirectoryBuckets";
    var _MDf = "MfaDelete";
    var _ME = "MetadataEntry";
    var _MF = "MetricsFilter";
    var _MFA = "MFA";
    var _MFAD = "MFADelete";
    var _MI = "MetricsId";
    var _MK = "MaxKeys";
    var _MKe = "MetadataKey";
    var _MM = "MissingMeta";
    var _MP = "MaxParts";
    var _MS = "MetricsStatus";
    var _MU = "MaxUploads";
    var _MV = "MetadataValue";
    var _Me = "Metrics";
    var _Mes = "Message";
    var _Mi = "Minutes";
    var _Mo = "Mode";
    var _N = "Name";
    var _NC = "NotificationConfiguration";
    var _NCF = "NotificationConfigurationFilter";
    var _NCT = "NextContinuationToken";
    var _ND = "NoncurrentDays";
    var _NI = "NotificationId";
    var _NKM = "NextKeyMarker";
    var _NM = "NextMarker";
    var _NNV = "NewerNoncurrentVersions";
    var _NPNM = "NextPartNumberMarker";
    var _NUIM = "NextUploadIdMarker";
    var _NVE = "NoncurrentVersionExpiration";
    var _NVIM = "NextVersionIdMarker";
    var _NVT = "NoncurrentVersionTransitions";
    var _NVTo = "NoncurrentVersionTransition";
    var _O = "Owner";
    var _OA = "ObjectAttributes";
    var _OC = "OwnershipControls";
    var _OCACL = "ObjectCannedACL";
    var _OCR = "OwnershipControlsRule";
    var _OF = "OptionalFields";
    var _OI = "ObjectIdentifier";
    var _OK = "ObjectKey";
    var _OL = "OutputLocation";
    var _OLC = "ObjectLockConfiguration";
    var _OLE = "ObjectLockEnabled";
    var _OLEFB = "ObjectLockEnabledForBucket";
    var _OLLH = "ObjectLockLegalHold";
    var _OLLHS = "ObjectLockLegalHoldStatus";
    var _OLM = "ObjectLockMode";
    var _OLR = "ObjectLockRetention";
    var _OLRM = "ObjectLockRetentionMode";
    var _OLRUD = "ObjectLockRetainUntilDate";
    var _OLRb = "ObjectLockRule";
    var _OO = "ObjectOwnership";
    var _OOA = "OptionalObjectAttributes";
    var _OOw = "OwnerOverride";
    var _OP = "ObjectParts";
    var _OS = "OutputSerialization";
    var _OSGT = "ObjectSizeGreaterThan";
    var _OSGTB = "ObjectSizeGreaterThanBytes";
    var _OSLT = "ObjectSizeLessThan";
    var _OSLTB = "ObjectSizeLessThanBytes";
    var _OSV = "OutputSchemaVersion";
    var _OSb = "ObjectSize";
    var _OVI = "ObjectVersionId";
    var _Ob = "Objects";
    var _P = "Prefix";
    var _PABC = "PublicAccessBlockConfiguration";
    var _PC = "PartsCount";
    var _PDS = "PartitionDateSource";
    var _PI = "ParquetInput";
    var _PN = "PartNumber";
    var _PNM = "PartNumberMarker";
    var _PP = "PartitionedPrefix";
    var _Pa = "Payer";
    var _Par = "Part";
    var _Parq = "Parquet";
    var _Part = "Parts";
    var _Pe = "Permission";
    var _Pr = "Protocol";
    var _Pri = "Priority";
    var _Q = "Quiet";
    var _QA = "QueueArn";
    var _QC = "QueueConfiguration";
    var _QCu = "QueueConfigurations";
    var _QCuo = "QuoteCharacter";
    var _QEC = "QuoteEscapeCharacter";
    var _QF = "QuoteFields";
    var _Qu = "Queue";
    var _R = "Range";
    var _RART = "RedirectAllRequestsTo";
    var _RC = "RequestCharged";
    var _RCC = "ResponseCacheControl";
    var _RCD = "ResponseContentDisposition";
    var _RCE = "ResponseContentEncoding";
    var _RCL = "ResponseContentLanguage";
    var _RCT = "ResponseContentType";
    var _RCe = "ReplicationConfiguration";
    var _RD = "RecordDelimiter";
    var _RE = "ResponseExpires";
    var _RED = "RestoreExpiryDate";
    var _RKKID = "ReplicaKmsKeyID";
    var _RKPW = "ReplaceKeyPrefixWith";
    var _RKW = "ReplaceKeyWith";
    var _RM = "ReplicaModifications";
    var _RMS = "ReplicaModificationsStatus";
    var _ROP = "RestoreOutputPath";
    var _RP = "RequestPayer";
    var _RPB = "RestrictPublicBuckets";
    var _RPC = "RequestPaymentConfiguration";
    var _RPe = "RequestProgress";
    var _RR = "RequestRoute";
    var _RRAO = "ReplicationRuleAndOperator";
    var _RRF = "ReplicationRuleFilter";
    var _RRS = "ReplicationRuleStatus";
    var _RRT = "RestoreRequestType";
    var _RRe = "ReplicationRule";
    var _RRes = "RestoreRequest";
    var _RRo = "RoutingRules";
    var _RRou = "RoutingRule";
    var _RS = "ReplicationStatus";
    var _RSe = "RestoreStatus";
    var _RT = "RequestToken";
    var _RTS = "ReplicationTimeStatus";
    var _RTV = "ReplicationTimeValue";
    var _RTe = "ReplicationTime";
    var _RUD = "RetainUntilDate";
    var _Re = "Restore";
    var _Red = "Redirect";
    var _Ro = "Role";
    var _Ru = "Rule";
    var _Rul = "Rules";
    var _S = "Status";
    var _SA = "StartAfter";
    var _SAK = "SecretAccessKey";
    var _SBD = "S3BucketDestination";
    var _SC = "StorageClass";
    var _SCA = "StorageClassAnalysis";
    var _SCADE = "StorageClassAnalysisDataExport";
    var _SCASV = "StorageClassAnalysisSchemaVersion";
    var _SCt = "StatusCode";
    var _SDV = "SkipDestinationValidation";
    var _SK = "SSE-KMS";
    var _SKEO = "SseKmsEncryptedObjects";
    var _SKEOS = "SseKmsEncryptedObjectsStatus";
    var _SKF = "S3KeyFilter";
    var _SKe = "S3Key";
    var _SL = "S3Location";
    var _SM = "SessionMode";
    var _SOCR = "SelectObjectContentRequest";
    var _SP = "SelectParameters";
    var _SPi = "SimplePrefix";
    var _SR = "ScanRange";
    var _SS = "SSE-S3";
    var _SSC = "SourceSelectionCriteria";
    var _SSE = "ServerSideEncryption";
    var _SSEA = "SSEAlgorithm";
    var _SSEBD = "ServerSideEncryptionByDefault";
    var _SSEC = "ServerSideEncryptionConfiguration";
    var _SSECA = "SSECustomerAlgorithm";
    var _SSECK = "SSECustomerKey";
    var _SSECKMD = "SSECustomerKeyMD5";
    var _SSEKMS = "SSEKMS";
    var _SSEKMSEC = "SSEKMSEncryptionContext";
    var _SSEKMSKI = "SSEKMSKeyId";
    var _SSER = "ServerSideEncryptionRule";
    var _SSES = "SSES3";
    var _ST = "SessionToken";
    var _S_ = "S3";
    var _Sc = "Schedule";
    var _Se = "Setting";
    var _Si = "Size";
    var _St = "Start";
    var _Su = "Suffix";
    var _T = "Tagging";
    var _TA = "TopicArn";
    var _TB = "TargetBucket";
    var _TC = "TagCount";
    var _TCo = "TopicConfiguration";
    var _TCop = "TopicConfigurations";
    var _TD = "TaggingDirective";
    var _TDMOS = "TransitionDefaultMinimumObjectSize";
    var _TG = "TargetGrants";
    var _TGa = "TargetGrant";
    var _TOKF = "TargetObjectKeyFormat";
    var _TP = "TargetPrefix";
    var _TPC = "TotalPartsCount";
    var _TS = "TagSet";
    var _TSC = "TransitionStorageClass";
    var _Ta = "Tag";
    var _Tag = "Tags";
    var _Ti = "Tier";
    var _Tie = "Tierings";
    var _Tier = "Tiering";
    var _Tim = "Time";
    var _To = "Token";
    var _Top = "Topic";
    var _Tr = "Transitions";
    var _Tra = "Transition";
    var _Ty = "Type";
    var _U = "Upload";
    var _UI = "UploadId";
    var _UIM = "UploadIdMarker";
    var _UM = "UserMetadata";
    var _URI = "URI";
    var _Up = "Uploads";
    var _V = "Version";
    var _VC = "VersionCount";
    var _VCe = "VersioningConfiguration";
    var _VI = "VersionId";
    var _VIM = "VersionIdMarker";
    var _Va = "Value";
    var _Ve = "Versions";
    var _WC = "WebsiteConfiguration";
    var _WOB = "WriteOffsetBytes";
    var _WRL = "WebsiteRedirectLocation";
    var _Y = "Years";
    var _a = "analytics";
    var _ac = "accelerate";
    var _acl = "acl";
    var _ar = "accept-ranges";
    var _at = "attributes";
    var _br = "bucket-region";
    var _c = "cors";
    var _cc = "cache-control";
    var _cd = "content-disposition";
    var _ce = "content-encoding";
    var _cl = "content-language";
    var _cl_ = "content-length";
    var _cm = "content-md5";
    var _cr = "content-range";
    var _ct = "content-type";
    var _ct_ = "continuation-token";
    var _d = "delete";
    var _de = "delimiter";
    var _e = "expires";
    var _en = "encryption";
    var _et = "encoding-type";
    var _eta = "etag";
    var _ex = "expiresstring";
    var _fo = "fetch-owner";
    var _i = "id";
    var _im = "if-match";
    var _ims = "if-modified-since";
    var _in = "inventory";
    var _inm = "if-none-match";
    var _it = "intelligent-tiering";
    var _ius = "if-unmodified-since";
    var _km = "key-marker";
    var _l = "lifecycle";
    var _lh = "legal-hold";
    var _lm = "last-modified";
    var _lo = "location";
    var _log = "logging";
    var _lt = "list-type";
    var _m = "metrics";
    var _ma = "marker";
    var _mb = "max-buckets";
    var _mdb = "max-directory-buckets";
    var _me = "member";
    var _mk = "max-keys";
    var _mp = "max-parts";
    var _mu = "max-uploads";
    var _n = "notification";
    var _oC = "ownershipControls";
    var _ol = "object-lock";
    var _p = "policy";
    var _pAB = "publicAccessBlock";
    var _pN = "partNumber";
    var _pS = "policyStatus";
    var _pnm = "part-number-marker";
    var _pr = "prefix";
    var _r = "replication";
    var _rP = "requestPayment";
    var _ra = "range";
    var _rcc = "response-cache-control";
    var _rcd = "response-content-disposition";
    var _rce = "response-content-encoding";
    var _rcl = "response-content-language";
    var _rct = "response-content-type";
    var _re = "response-expires";
    var _res = "restore";
    var _ret = "retention";
    var _s = "session";
    var _sa = "start-after";
    var _se = "select";
    var _st = "select-type";
    var _t = "tagging";
    var _to = "torrent";
    var _u = "uploads";
    var _uI = "uploadId";
    var _uim = "upload-id-marker";
    var _v = "versioning";
    var _vI = "versionId";
    var _ve = '<?xml version="1.0" encoding="UTF-8"?>';
    var _ver = "versions";
    var _vim = "version-id-marker";
    var _w = "website";
    var _x = "xsi:type";
    var _xaa = "x-amz-acl";
    var _xaad = "x-amz-abort-date";
    var _xaapa = "x-amz-access-point-alias";
    var _xaari = "x-amz-abort-rule-id";
    var _xaas = "x-amz-archive-status";
    var _xabgr = "x-amz-bypass-governance-retention";
    var _xabln = "x-amz-bucket-location-name";
    var _xablt = "x-amz-bucket-location-type";
    var _xabole = "x-amz-bucket-object-lock-enabled";
    var _xabolt = "x-amz-bucket-object-lock-token";
    var _xabr = "x-amz-bucket-region";
    var _xaca = "x-amz-checksum-algorithm";
    var _xacc = "x-amz-checksum-crc32";
    var _xacc_ = "x-amz-checksum-crc32c";
    var _xacm = "x-amz-checksum-mode";
    var _xacrsba = "x-amz-confirm-remove-self-bucket-access";
    var _xacs = "x-amz-checksum-sha1";
    var _xacs_ = "x-amz-checksum-sha256";
    var _xacs__ = "x-amz-copy-source";
    var _xacsim = "x-amz-copy-source-if-match";
    var _xacsims = "x-amz-copy-source-if-modified-since";
    var _xacsinm = "x-amz-copy-source-if-none-match";
    var _xacsius = "x-amz-copy-source-if-unmodified-since";
    var _xacsm = "x-amz-create-session-mode";
    var _xacsr = "x-amz-copy-source-range";
    var _xacssseca = "x-amz-copy-source-server-side-encryption-customer-algorithm";
    var _xacssseck = "x-amz-copy-source-server-side-encryption-customer-key";
    var _xacssseckm = "x-amz-copy-source-server-side-encryption-customer-key-md5";
    var _xacsvi = "x-amz-copy-source-version-id";
    var _xadm = "x-amz-delete-marker";
    var _xae = "x-amz-expiration";
    var _xaebo = "x-amz-expected-bucket-owner";
    var _xafec = "x-amz-fwd-error-code";
    var _xafem = "x-amz-fwd-error-message";
    var _xafhar = "x-amz-fwd-header-accept-ranges";
    var _xafhcc = "x-amz-fwd-header-cache-control";
    var _xafhcd = "x-amz-fwd-header-content-disposition";
    var _xafhce = "x-amz-fwd-header-content-encoding";
    var _xafhcl = "x-amz-fwd-header-content-language";
    var _xafhcr = "x-amz-fwd-header-content-range";
    var _xafhct = "x-amz-fwd-header-content-type";
    var _xafhe = "x-amz-fwd-header-etag";
    var _xafhe_ = "x-amz-fwd-header-expires";
    var _xafhlm = "x-amz-fwd-header-last-modified";
    var _xafhxacc = "x-amz-fwd-header-x-amz-checksum-crc32";
    var _xafhxacc_ = "x-amz-fwd-header-x-amz-checksum-crc32c";
    var _xafhxacs = "x-amz-fwd-header-x-amz-checksum-sha1";
    var _xafhxacs_ = "x-amz-fwd-header-x-amz-checksum-sha256";
    var _xafhxadm = "x-amz-fwd-header-x-amz-delete-marker";
    var _xafhxae = "x-amz-fwd-header-x-amz-expiration";
    var _xafhxamm = "x-amz-fwd-header-x-amz-missing-meta";
    var _xafhxampc = "x-amz-fwd-header-x-amz-mp-parts-count";
    var _xafhxaollh = "x-amz-fwd-header-x-amz-object-lock-legal-hold";
    var _xafhxaolm = "x-amz-fwd-header-x-amz-object-lock-mode";
    var _xafhxaolrud = "x-amz-fwd-header-x-amz-object-lock-retain-until-date";
    var _xafhxar = "x-amz-fwd-header-x-amz-restore";
    var _xafhxarc = "x-amz-fwd-header-x-amz-request-charged";
    var _xafhxars = "x-amz-fwd-header-x-amz-replication-status";
    var _xafhxasc = "x-amz-fwd-header-x-amz-storage-class";
    var _xafhxasse = "x-amz-fwd-header-x-amz-server-side-encryption";
    var _xafhxasseakki = "x-amz-fwd-header-x-amz-server-side-encryption-aws-kms-key-id";
    var _xafhxassebke = "x-amz-fwd-header-x-amz-server-side-encryption-bucket-key-enabled";
    var _xafhxasseca = "x-amz-fwd-header-x-amz-server-side-encryption-customer-algorithm";
    var _xafhxasseckm = "x-amz-fwd-header-x-amz-server-side-encryption-customer-key-md5";
    var _xafhxatc = "x-amz-fwd-header-x-amz-tagging-count";
    var _xafhxavi = "x-amz-fwd-header-x-amz-version-id";
    var _xafs = "x-amz-fwd-status";
    var _xagfc = "x-amz-grant-full-control";
    var _xagr = "x-amz-grant-read";
    var _xagra = "x-amz-grant-read-acp";
    var _xagw = "x-amz-grant-write";
    var _xagwa = "x-amz-grant-write-acp";
    var _xaimit = "x-amz-if-match-initiated-time";
    var _xaimlmt = "x-amz-if-match-last-modified-time";
    var _xaims = "x-amz-if-match-size";
    var _xam = "x-amz-mfa";
    var _xamd = "x-amz-metadata-directive";
    var _xamm = "x-amz-missing-meta";
    var _xamp = "x-amz-max-parts";
    var _xampc = "x-amz-mp-parts-count";
    var _xaoa = "x-amz-object-attributes";
    var _xaollh = "x-amz-object-lock-legal-hold";
    var _xaolm = "x-amz-object-lock-mode";
    var _xaolrud = "x-amz-object-lock-retain-until-date";
    var _xaoo = "x-amz-object-ownership";
    var _xaooa = "x-amz-optional-object-attributes";
    var _xaos = "x-amz-object-size";
    var _xapnm = "x-amz-part-number-marker";
    var _xar = "x-amz-restore";
    var _xarc = "x-amz-request-charged";
    var _xarop = "x-amz-restore-output-path";
    var _xarp = "x-amz-request-payer";
    var _xarr = "x-amz-request-route";
    var _xars = "x-amz-replication-status";
    var _xart = "x-amz-request-token";
    var _xasc = "x-amz-storage-class";
    var _xasca = "x-amz-sdk-checksum-algorithm";
    var _xasdv = "x-amz-skip-destination-validation";
    var _xasebo = "x-amz-source-expected-bucket-owner";
    var _xasse = "x-amz-server-side-encryption";
    var _xasseakki = "x-amz-server-side-encryption-aws-kms-key-id";
    var _xassebke = "x-amz-server-side-encryption-bucket-key-enabled";
    var _xassec = "x-amz-server-side-encryption-context";
    var _xasseca = "x-amz-server-side-encryption-customer-algorithm";
    var _xasseck = "x-amz-server-side-encryption-customer-key";
    var _xasseckm = "x-amz-server-side-encryption-customer-key-md5";
    var _xat = "x-amz-tagging";
    var _xatc = "x-amz-tagging-count";
    var _xatd = "x-amz-tagging-directive";
    var _xatdmos = "x-amz-transition-default-minimum-object-size";
    var _xavi = "x-amz-version-id";
    var _xawob = "x-amz-write-offset-bytes";
    var _xawrl = "x-amz-website-redirect-location";
    var _xi = "x-id";
    var _CreateSessionCommand = class _CreateSessionCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      DisableS3ExpressSessionAuth: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s3.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "CreateSession", {}).n("S3Client", "CreateSessionCommand").f(CreateSessionRequestFilterSensitiveLog, CreateSessionOutputFilterSensitiveLog).ser(se_CreateSessionCommand).de(de_CreateSessionCommand).build() {
    };
    __name(_CreateSessionCommand, "CreateSessionCommand");
    var CreateSessionCommand = _CreateSessionCommand;
    var import_runtimeConfig = require_runtimeConfig4();
    var import_region_config_resolver = require_dist_cjs53();
    var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
      let _credentials = runtimeConfig.credentials;
      return {
        setHttpAuthScheme(httpAuthScheme) {
          const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
          if (index === -1) {
            _httpAuthSchemes.push(httpAuthScheme);
          } else {
            _httpAuthSchemes.splice(index, 1, httpAuthScheme);
          }
        },
        httpAuthSchemes() {
          return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
          _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
          return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
          _credentials = credentials;
        },
        credentials() {
          return _credentials;
        }
      };
    }, "getHttpAuthExtensionConfiguration");
    var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
      return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials()
      };
    }, "resolveHttpAuthRuntimeConfig");
    var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
    var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
      const extensionConfiguration = {
        ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, import_smithy_client4.getDefaultExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, import_protocol_http8.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
        ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
      };
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return {
        ...runtimeConfig,
        ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
        ...(0, import_smithy_client4.resolveDefaultRuntimeConfig)(extensionConfiguration),
        ...(0, import_protocol_http8.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
        ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
      };
    }, "resolveRuntimeExtensions");
    var _S3Client = class _S3Client extends import_smithy_client4.Client {
      constructor(...[configuration]) {
        const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_1);
        const _config_3 = (0, import_middleware_flexible_checksums.resolveFlexibleChecksumsConfig)(_config_2);
        const _config_4 = (0, import_middleware_retry.resolveRetryConfig)(_config_3);
        const _config_5 = (0, import_config_resolver.resolveRegionConfig)(_config_4);
        const _config_6 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_5);
        const _config_7 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_6);
        const _config_8 = (0, import_eventstream_serde_config_resolver.resolveEventStreamSerdeConfig)(_config_7);
        const _config_9 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_8);
        const _config_10 = (0, import_middleware_sdk_s32.resolveS3Config)(_config_9, { session: [() => this, CreateSessionCommand] });
        const _config_11 = resolveRuntimeExtensions(_config_10, (configuration == null ? void 0 : configuration.extensions) || []);
        super(_config_11);
        this.config = _config_11;
        this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use(
          (0, import_core3.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
            httpAuthSchemeParametersProvider: import_httpAuthSchemeProvider.defaultS3HttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new import_core3.DefaultIdentityProviderConfig({
              "aws.auth#sigv4": config.credentials,
              "aws.auth#sigv4a": config.credentials
            })
          })
        );
        this.middlewareStack.use((0, import_core3.getHttpSigningPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_sdk_s32.getValidateBucketNamePlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_expect_continue.getAddExpectContinuePlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_sdk_s32.getRegionRedirectMiddlewarePlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_sdk_s32.getS3ExpressPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_sdk_s32.getS3ExpressHttpSigningPlugin)(this.config));
      }
      /**
       * Destroy underlying resources, like sockets. It's usually not necessary to do this.
       * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
       * Otherwise, sockets might stay open for quite a long time before the server terminates them.
       */
      destroy() {
        super.destroy();
      }
    };
    __name(_S3Client, "S3Client");
    var S3Client2 = _S3Client;
    var import_middleware_sdk_s33 = require_dist_cjs29();
    var _AbortMultipartUploadCommand = class _AbortMultipartUploadCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Key: { type: "contextParams", name: "Key" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s33.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "AbortMultipartUpload", {}).n("S3Client", "AbortMultipartUploadCommand").f(void 0, void 0).ser(se_AbortMultipartUploadCommand).de(de_AbortMultipartUploadCommand).build() {
    };
    __name(_AbortMultipartUploadCommand, "AbortMultipartUploadCommand");
    var AbortMultipartUploadCommand = _AbortMultipartUploadCommand;
    var import_middleware_sdk_s34 = require_dist_cjs29();
    var import_middleware_ssec = require_dist_cjs68();
    var _CompleteMultipartUploadCommand = class _CompleteMultipartUploadCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Key: { type: "contextParams", name: "Key" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s34.getThrow200ExceptionsPlugin)(config),
        (0, import_middleware_ssec.getSsecPlugin)(config)
      ];
    }).s("AmazonS3", "CompleteMultipartUpload", {}).n("S3Client", "CompleteMultipartUploadCommand").f(CompleteMultipartUploadRequestFilterSensitiveLog, CompleteMultipartUploadOutputFilterSensitiveLog).ser(se_CompleteMultipartUploadCommand).de(de_CompleteMultipartUploadCommand).build() {
    };
    __name(_CompleteMultipartUploadCommand, "CompleteMultipartUploadCommand");
    var CompleteMultipartUploadCommand = _CompleteMultipartUploadCommand;
    var import_middleware_sdk_s35 = require_dist_cjs29();
    var _CopyObjectCommand = class _CopyObjectCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      DisableS3ExpressSessionAuth: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" },
      Key: { type: "contextParams", name: "Key" },
      CopySource: { type: "contextParams", name: "CopySource" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s35.getThrow200ExceptionsPlugin)(config),
        (0, import_middleware_ssec.getSsecPlugin)(config)
      ];
    }).s("AmazonS3", "CopyObject", {}).n("S3Client", "CopyObjectCommand").f(CopyObjectRequestFilterSensitiveLog, CopyObjectOutputFilterSensitiveLog).ser(se_CopyObjectCommand).de(de_CopyObjectCommand).build() {
    };
    __name(_CopyObjectCommand, "CopyObjectCommand");
    var CopyObjectCommand = _CopyObjectCommand;
    var import_middleware_location_constraint = require_dist_cjs69();
    var import_middleware_sdk_s36 = require_dist_cjs29();
    var _CreateBucketCommand = class _CreateBucketCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      DisableAccessPoints: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s36.getThrow200ExceptionsPlugin)(config),
        (0, import_middleware_location_constraint.getLocationConstraintPlugin)(config)
      ];
    }).s("AmazonS3", "CreateBucket", {}).n("S3Client", "CreateBucketCommand").f(void 0, void 0).ser(se_CreateBucketCommand).de(de_CreateBucketCommand).build() {
    };
    __name(_CreateBucketCommand, "CreateBucketCommand");
    var CreateBucketCommand = _CreateBucketCommand;
    var import_middleware_sdk_s37 = require_dist_cjs29();
    var _CreateMultipartUploadCommand = class _CreateMultipartUploadCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Key: { type: "contextParams", name: "Key" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s37.getThrow200ExceptionsPlugin)(config),
        (0, import_middleware_ssec.getSsecPlugin)(config)
      ];
    }).s("AmazonS3", "CreateMultipartUpload", {}).n("S3Client", "CreateMultipartUploadCommand").f(CreateMultipartUploadRequestFilterSensitiveLog, CreateMultipartUploadOutputFilterSensitiveLog).ser(se_CreateMultipartUploadCommand).de(de_CreateMultipartUploadCommand).build() {
    };
    __name(_CreateMultipartUploadCommand, "CreateMultipartUploadCommand");
    var CreateMultipartUploadCommand = _CreateMultipartUploadCommand;
    var _DeleteBucketAnalyticsConfigurationCommand = class _DeleteBucketAnalyticsConfigurationCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucketAnalyticsConfiguration", {}).n("S3Client", "DeleteBucketAnalyticsConfigurationCommand").f(void 0, void 0).ser(se_DeleteBucketAnalyticsConfigurationCommand).de(de_DeleteBucketAnalyticsConfigurationCommand).build() {
    };
    __name(_DeleteBucketAnalyticsConfigurationCommand, "DeleteBucketAnalyticsConfigurationCommand");
    var DeleteBucketAnalyticsConfigurationCommand = _DeleteBucketAnalyticsConfigurationCommand;
    var _DeleteBucketCommand = class _DeleteBucketCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucket", {}).n("S3Client", "DeleteBucketCommand").f(void 0, void 0).ser(se_DeleteBucketCommand).de(de_DeleteBucketCommand).build() {
    };
    __name(_DeleteBucketCommand, "DeleteBucketCommand");
    var DeleteBucketCommand = _DeleteBucketCommand;
    var _DeleteBucketCorsCommand = class _DeleteBucketCorsCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucketCors", {}).n("S3Client", "DeleteBucketCorsCommand").f(void 0, void 0).ser(se_DeleteBucketCorsCommand).de(de_DeleteBucketCorsCommand).build() {
    };
    __name(_DeleteBucketCorsCommand, "DeleteBucketCorsCommand");
    var DeleteBucketCorsCommand = _DeleteBucketCorsCommand;
    var _DeleteBucketEncryptionCommand = class _DeleteBucketEncryptionCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucketEncryption", {}).n("S3Client", "DeleteBucketEncryptionCommand").f(void 0, void 0).ser(se_DeleteBucketEncryptionCommand).de(de_DeleteBucketEncryptionCommand).build() {
    };
    __name(_DeleteBucketEncryptionCommand, "DeleteBucketEncryptionCommand");
    var DeleteBucketEncryptionCommand = _DeleteBucketEncryptionCommand;
    var _DeleteBucketIntelligentTieringConfigurationCommand = class _DeleteBucketIntelligentTieringConfigurationCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucketIntelligentTieringConfiguration", {}).n("S3Client", "DeleteBucketIntelligentTieringConfigurationCommand").f(void 0, void 0).ser(se_DeleteBucketIntelligentTieringConfigurationCommand).de(de_DeleteBucketIntelligentTieringConfigurationCommand).build() {
    };
    __name(_DeleteBucketIntelligentTieringConfigurationCommand, "DeleteBucketIntelligentTieringConfigurationCommand");
    var DeleteBucketIntelligentTieringConfigurationCommand = _DeleteBucketIntelligentTieringConfigurationCommand;
    var _DeleteBucketInventoryConfigurationCommand = class _DeleteBucketInventoryConfigurationCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucketInventoryConfiguration", {}).n("S3Client", "DeleteBucketInventoryConfigurationCommand").f(void 0, void 0).ser(se_DeleteBucketInventoryConfigurationCommand).de(de_DeleteBucketInventoryConfigurationCommand).build() {
    };
    __name(_DeleteBucketInventoryConfigurationCommand, "DeleteBucketInventoryConfigurationCommand");
    var DeleteBucketInventoryConfigurationCommand = _DeleteBucketInventoryConfigurationCommand;
    var _DeleteBucketLifecycleCommand = class _DeleteBucketLifecycleCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucketLifecycle", {}).n("S3Client", "DeleteBucketLifecycleCommand").f(void 0, void 0).ser(se_DeleteBucketLifecycleCommand).de(de_DeleteBucketLifecycleCommand).build() {
    };
    __name(_DeleteBucketLifecycleCommand, "DeleteBucketLifecycleCommand");
    var DeleteBucketLifecycleCommand = _DeleteBucketLifecycleCommand;
    var _DeleteBucketMetricsConfigurationCommand = class _DeleteBucketMetricsConfigurationCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucketMetricsConfiguration", {}).n("S3Client", "DeleteBucketMetricsConfigurationCommand").f(void 0, void 0).ser(se_DeleteBucketMetricsConfigurationCommand).de(de_DeleteBucketMetricsConfigurationCommand).build() {
    };
    __name(_DeleteBucketMetricsConfigurationCommand, "DeleteBucketMetricsConfigurationCommand");
    var DeleteBucketMetricsConfigurationCommand = _DeleteBucketMetricsConfigurationCommand;
    var _DeleteBucketOwnershipControlsCommand = class _DeleteBucketOwnershipControlsCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucketOwnershipControls", {}).n("S3Client", "DeleteBucketOwnershipControlsCommand").f(void 0, void 0).ser(se_DeleteBucketOwnershipControlsCommand).de(de_DeleteBucketOwnershipControlsCommand).build() {
    };
    __name(_DeleteBucketOwnershipControlsCommand, "DeleteBucketOwnershipControlsCommand");
    var DeleteBucketOwnershipControlsCommand = _DeleteBucketOwnershipControlsCommand;
    var _DeleteBucketPolicyCommand = class _DeleteBucketPolicyCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucketPolicy", {}).n("S3Client", "DeleteBucketPolicyCommand").f(void 0, void 0).ser(se_DeleteBucketPolicyCommand).de(de_DeleteBucketPolicyCommand).build() {
    };
    __name(_DeleteBucketPolicyCommand, "DeleteBucketPolicyCommand");
    var DeleteBucketPolicyCommand = _DeleteBucketPolicyCommand;
    var _DeleteBucketReplicationCommand = class _DeleteBucketReplicationCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucketReplication", {}).n("S3Client", "DeleteBucketReplicationCommand").f(void 0, void 0).ser(se_DeleteBucketReplicationCommand).de(de_DeleteBucketReplicationCommand).build() {
    };
    __name(_DeleteBucketReplicationCommand, "DeleteBucketReplicationCommand");
    var DeleteBucketReplicationCommand = _DeleteBucketReplicationCommand;
    var _DeleteBucketTaggingCommand = class _DeleteBucketTaggingCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucketTagging", {}).n("S3Client", "DeleteBucketTaggingCommand").f(void 0, void 0).ser(se_DeleteBucketTaggingCommand).de(de_DeleteBucketTaggingCommand).build() {
    };
    __name(_DeleteBucketTaggingCommand, "DeleteBucketTaggingCommand");
    var DeleteBucketTaggingCommand = _DeleteBucketTaggingCommand;
    var _DeleteBucketWebsiteCommand = class _DeleteBucketWebsiteCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeleteBucketWebsite", {}).n("S3Client", "DeleteBucketWebsiteCommand").f(void 0, void 0).ser(se_DeleteBucketWebsiteCommand).de(de_DeleteBucketWebsiteCommand).build() {
    };
    __name(_DeleteBucketWebsiteCommand, "DeleteBucketWebsiteCommand");
    var DeleteBucketWebsiteCommand = _DeleteBucketWebsiteCommand;
    var import_middleware_sdk_s38 = require_dist_cjs29();
    var _DeleteObjectCommand = class _DeleteObjectCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Key: { type: "contextParams", name: "Key" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s38.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "DeleteObject", {}).n("S3Client", "DeleteObjectCommand").f(void 0, void 0).ser(se_DeleteObjectCommand).de(de_DeleteObjectCommand).build() {
    };
    __name(_DeleteObjectCommand, "DeleteObjectCommand");
    var DeleteObjectCommand2 = _DeleteObjectCommand;
    var import_middleware_sdk_s39 = require_dist_cjs29();
    var _DeleteObjectsCommand = class _DeleteObjectsCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }),
        (0, import_middleware_sdk_s39.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "DeleteObjects", {}).n("S3Client", "DeleteObjectsCommand").f(void 0, void 0).ser(se_DeleteObjectsCommand).de(de_DeleteObjectsCommand).build() {
    };
    __name(_DeleteObjectsCommand, "DeleteObjectsCommand");
    var DeleteObjectsCommand = _DeleteObjectsCommand;
    var import_middleware_sdk_s310 = require_dist_cjs29();
    var _DeleteObjectTaggingCommand = class _DeleteObjectTaggingCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s310.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "DeleteObjectTagging", {}).n("S3Client", "DeleteObjectTaggingCommand").f(void 0, void 0).ser(se_DeleteObjectTaggingCommand).de(de_DeleteObjectTaggingCommand).build() {
    };
    __name(_DeleteObjectTaggingCommand, "DeleteObjectTaggingCommand");
    var DeleteObjectTaggingCommand = _DeleteObjectTaggingCommand;
    var _DeletePublicAccessBlockCommand = class _DeletePublicAccessBlockCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "DeletePublicAccessBlock", {}).n("S3Client", "DeletePublicAccessBlockCommand").f(void 0, void 0).ser(se_DeletePublicAccessBlockCommand).de(de_DeletePublicAccessBlockCommand).build() {
    };
    __name(_DeletePublicAccessBlockCommand, "DeletePublicAccessBlockCommand");
    var DeletePublicAccessBlockCommand = _DeletePublicAccessBlockCommand;
    var import_middleware_sdk_s311 = require_dist_cjs29();
    var _GetBucketAccelerateConfigurationCommand = class _GetBucketAccelerateConfigurationCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s311.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "GetBucketAccelerateConfiguration", {}).n("S3Client", "GetBucketAccelerateConfigurationCommand").f(void 0, void 0).ser(se_GetBucketAccelerateConfigurationCommand).de(de_GetBucketAccelerateConfigurationCommand).build() {
    };
    __name(_GetBucketAccelerateConfigurationCommand, "GetBucketAccelerateConfigurationCommand");
    var GetBucketAccelerateConfigurationCommand = _GetBucketAccelerateConfigurationCommand;
    var import_middleware_sdk_s312 = require_dist_cjs29();
    var _GetBucketAclCommand = class _GetBucketAclCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s312.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "GetBucketAcl", {}).n("S3Client", "GetBucketAclCommand").f(void 0, void 0).ser(se_GetBucketAclCommand).de(de_GetBucketAclCommand).build() {
    };
    __name(_GetBucketAclCommand, "GetBucketAclCommand");
    var GetBucketAclCommand = _GetBucketAclCommand;
    var import_middleware_sdk_s313 = require_dist_cjs29();
    var _GetBucketAnalyticsConfigurationCommand = class _GetBucketAnalyticsConfigurationCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s313.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "GetBucketAnalyticsConfiguration", {}).n("S3Client", "GetBucketAnalyticsConfigurationCommand").f(void 0, void 0).ser(se_GetBucketAnalyticsConfigurationCommand).de(de_GetBucketAnalyticsConfigurationCommand).build() {
    };
    __name(_GetBucketAnalyticsConfigurationCommand, "GetBucketAnalyticsConfigurationCommand");
    var GetBucketAnalyticsConfigurationCommand = _GetBucketAnalyticsConfigurationCommand;
    var import_middleware_sdk_s314 = require_dist_cjs29();
    var _GetBucketCorsCommand = class _GetBucketCorsCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s314.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "GetBucketCors", {}).n("S3Client", "GetBucketCorsCommand").f(void 0, void 0).ser(se_GetBucketCorsCommand).de(de_GetBucketCorsCommand).build() {
    };
    __name(_GetBucketCorsCommand, "GetBucketCorsCommand");
    var GetBucketCorsCommand = _GetBucketCorsCommand;
    var import_middleware_sdk_s315 = require_dist_cjs29();
    var _GetBucketEncryptionCommand = class _GetBucketEncryptionCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s315.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "GetBucketEncryption", {}).n("S3Client", "GetBucketEncryptionCommand").f(void 0, GetBucketEncryptionOutputFilterSensitiveLog).ser(se_GetBucketEncryptionCommand).de(de_GetBucketEncryptionCommand).build() {
    };
    __name(_GetBucketEncryptionCommand, "GetBucketEncryptionCommand");
    var GetBucketEncryptionCommand = _GetBucketEncryptionCommand;
    var import_middleware_sdk_s316 = require_dist_cjs29();
    var _GetBucketIntelligentTieringConfigurationCommand = class _GetBucketIntelligentTieringConfigurationCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s316.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "GetBucketIntelligentTieringConfiguration", {}).n("S3Client", "GetBucketIntelligentTieringConfigurationCommand").f(void 0, void 0).ser(se_GetBucketIntelligentTieringConfigurationCommand).de(de_GetBucketIntelligentTieringConfigurationCommand).build() {
    };
    __name(_GetBucketIntelligentTieringConfigurationCommand, "GetBucketIntelligentTieringConfigurationCommand");
    var GetBucketIntelligentTieringConfigurationCommand = _GetBucketIntelligentTieringConfigurationCommand;
    var import_middleware_sdk_s317 = require_dist_cjs29();
    var _GetBucketInventoryConfigurationCommand = class _GetBucketInventoryConfigurationCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s317.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "GetBucketInventoryConfiguration", {}).n("S3Client", "GetBucketInventoryConfigurationCommand").f(void 0, GetBucketInventoryConfigurationOutputFilterSensitiveLog).ser(se_GetBucketInventoryConfigurationCommand).de(de_GetBucketInventoryConfigurationCommand).build() {
    };
    __name(_GetBucketInventoryConfigurationCommand, "GetBucketInventoryConfigurationCommand");
    var GetBucketInventoryConfigurationCommand = _GetBucketInventoryConfigurationCommand;
    var import_middleware_sdk_s318 = require_dist_cjs29();
    var _GetBucketLifecycleConfigurationCommand = class _GetBucketLifecycleConfigurationCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s318.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "GetBucketLifecycleConfiguration", {}).n("S3Client", "GetBucketLifecycleConfigurationCommand").f(void 0, void 0).ser(se_GetBucketLifecycleConfigurationCommand).de(de_GetBucketLifecycleConfigurationCommand).build() {
    };
    __name(_GetBucketLifecycleConfigurationCommand, "GetBucketLifecycleConfigurationCommand");
    var GetBucketLifecycleConfigurationCommand = _GetBucketLifecycleConfigurationCommand;
    var import_middleware_sdk_s319 = require_dist_cjs29();
    var _GetBucketLocationCommand = class _GetBucketLocationCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s319.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "GetBucketLocation", {}).n("S3Client", "GetBucketLocationCommand").f(void 0, void 0).ser(se_GetBucketLocationCommand).de(de_GetBucketLocationCommand).build() {
    };
    __name(_GetBucketLocationCommand, "GetBucketLocationCommand");
    var GetBucketLocationCommand = _GetBucketLocationCommand;
    var import_middleware_sdk_s320 = require_dist_cjs29();
    var _GetBucketLoggingCommand = class _GetBucketLoggingCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s320.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "GetBucketLogging", {}).n("S3Client", "GetBucketLoggingCommand").f(void 0, void 0).ser(se_GetBucketLoggingCommand).de(de_GetBucketLoggingCommand).build() {
    };
    __name(_GetBucketLoggingCommand, "GetBucketLoggingCommand");
    var GetBucketLoggingCommand = _GetBucketLoggingCommand;
    var import_middleware_sdk_s321 = require_dist_cjs29();
    var _GetBucketMetricsConfigurationCommand = class _GetBucketMetricsConfigurationCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s321.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "GetBucketMetricsConfiguration", {}).n("S3Client", "GetBucketMetricsConfigurationCommand").f(void 0, void 0).ser(se_GetBucketMetricsConfigurationCommand).de(de_GetBucketMetricsConfigurationCommand).build() {
    };
    __name(_GetBucketMetricsConfigurationCommand, "GetBucketMetricsConfigurationCommand");
    var GetBucketMetricsConfigurationCommand = _GetBucketMetricsConfigurationCommand;
    var import_middleware_sdk_s322 = require_dist_cjs29();
    var _GetBucketNotificationConfigurationCommand = class _GetBucketNotificationConfigurationCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s322.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "GetBucketNotificationConfiguration", {}).n("S3Client", "GetBucketNotificationConfigurationCommand").f(void 0, void 0).ser(se_GetBucketNotificationConfigurationCommand).de(de_GetBucketNotificationConfigurationCommand).build() {
    };
    __name(_GetBucketNotificationConfigurationCommand, "GetBucketNotificationConfigurationCommand");
    var GetBucketNotificationConfigurationCommand = _GetBucketNotificationConfigurationCommand;
    var import_middleware_sdk_s323 = require_dist_cjs29();
    var _GetBucketOwnershipControlsCommand = class _GetBucketOwnershipControlsCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s323.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "GetBucketOwnershipControls", {}).n("S3Client", "GetBucketOwnershipControlsCommand").f(void 0, void 0).ser(se_GetBucketOwnershipControlsCommand).de(de_GetBucketOwnershipControlsCommand).build() {
    };
    __name(_GetBucketOwnershipControlsCommand, "GetBucketOwnershipControlsCommand");
    var GetBucketOwnershipControlsCommand = _GetBucketOwnershipControlsCommand;
    var import_middleware_sdk_s324 = require_dist_cjs29();
    var _GetBucketPolicyCommand = class _GetBucketPolicyCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s324.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "GetBucketPolicy", {}).n("S3Client", "GetBucketPolicyCommand").f(void 0, void 0).ser(se_GetBucketPolicyCommand).de(de_GetBucketPolicyCommand).build() {
    };
    __name(_GetBucketPolicyCommand, "GetBucketPolicyCommand");
    var GetBucketPolicyCommand = _GetBucketPolicyCommand;
    var import_middleware_sdk_s325 = require_dist_cjs29();
    var _GetBucketPolicyStatusCommand = class _GetBucketPolicyStatusCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s325.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "GetBucketPolicyStatus", {}).n("S3Client", "GetBucketPolicyStatusCommand").f(void 0, void 0).ser(se_GetBucketPolicyStatusCommand).de(de_GetBucketPolicyStatusCommand).build() {
    };
    __name(_GetBucketPolicyStatusCommand, "GetBucketPolicyStatusCommand");
    var GetBucketPolicyStatusCommand = _GetBucketPolicyStatusCommand;
    var import_middleware_sdk_s326 = require_dist_cjs29();
    var _GetBucketReplicationCommand = class _GetBucketReplicationCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s326.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "GetBucketReplication", {}).n("S3Client", "GetBucketReplicationCommand").f(void 0, void 0).ser(se_GetBucketReplicationCommand).de(de_GetBucketReplicationCommand).build() {
    };
    __name(_GetBucketReplicationCommand, "GetBucketReplicationCommand");
    var GetBucketReplicationCommand = _GetBucketReplicationCommand;
    var import_middleware_sdk_s327 = require_dist_cjs29();
    var _GetBucketRequestPaymentCommand = class _GetBucketRequestPaymentCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s327.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "GetBucketRequestPayment", {}).n("S3Client", "GetBucketRequestPaymentCommand").f(void 0, void 0).ser(se_GetBucketRequestPaymentCommand).de(de_GetBucketRequestPaymentCommand).build() {
    };
    __name(_GetBucketRequestPaymentCommand, "GetBucketRequestPaymentCommand");
    var GetBucketRequestPaymentCommand = _GetBucketRequestPaymentCommand;
    var import_middleware_sdk_s328 = require_dist_cjs29();
    var _GetBucketTaggingCommand = class _GetBucketTaggingCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s328.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "GetBucketTagging", {}).n("S3Client", "GetBucketTaggingCommand").f(void 0, void 0).ser(se_GetBucketTaggingCommand).de(de_GetBucketTaggingCommand).build() {
    };
    __name(_GetBucketTaggingCommand, "GetBucketTaggingCommand");
    var GetBucketTaggingCommand = _GetBucketTaggingCommand;
    var import_middleware_sdk_s329 = require_dist_cjs29();
    var _GetBucketVersioningCommand = class _GetBucketVersioningCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s329.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "GetBucketVersioning", {}).n("S3Client", "GetBucketVersioningCommand").f(void 0, void 0).ser(se_GetBucketVersioningCommand).de(de_GetBucketVersioningCommand).build() {
    };
    __name(_GetBucketVersioningCommand, "GetBucketVersioningCommand");
    var GetBucketVersioningCommand = _GetBucketVersioningCommand;
    var import_middleware_sdk_s330 = require_dist_cjs29();
    var _GetBucketWebsiteCommand = class _GetBucketWebsiteCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s330.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "GetBucketWebsite", {}).n("S3Client", "GetBucketWebsiteCommand").f(void 0, void 0).ser(se_GetBucketWebsiteCommand).de(de_GetBucketWebsiteCommand).build() {
    };
    __name(_GetBucketWebsiteCommand, "GetBucketWebsiteCommand");
    var GetBucketWebsiteCommand = _GetBucketWebsiteCommand;
    var import_middleware_sdk_s331 = require_dist_cjs29();
    var _GetObjectAclCommand = class _GetObjectAclCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Key: { type: "contextParams", name: "Key" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s331.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "GetObjectAcl", {}).n("S3Client", "GetObjectAclCommand").f(void 0, void 0).ser(se_GetObjectAclCommand).de(de_GetObjectAclCommand).build() {
    };
    __name(_GetObjectAclCommand, "GetObjectAclCommand");
    var GetObjectAclCommand = _GetObjectAclCommand;
    var import_middleware_sdk_s332 = require_dist_cjs29();
    var _GetObjectAttributesCommand = class _GetObjectAttributesCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s332.getThrow200ExceptionsPlugin)(config),
        (0, import_middleware_ssec.getSsecPlugin)(config)
      ];
    }).s("AmazonS3", "GetObjectAttributes", {}).n("S3Client", "GetObjectAttributesCommand").f(GetObjectAttributesRequestFilterSensitiveLog, void 0).ser(se_GetObjectAttributesCommand).de(de_GetObjectAttributesCommand).build() {
    };
    __name(_GetObjectAttributesCommand, "GetObjectAttributesCommand");
    var GetObjectAttributesCommand = _GetObjectAttributesCommand;
    var import_middleware_sdk_s333 = require_dist_cjs29();
    var _GetObjectCommand = class _GetObjectCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Key: { type: "contextParams", name: "Key" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
          requestChecksumRequired: false,
          requestValidationModeMember: "ChecksumMode",
          responseAlgorithms: ["CRC32", "CRC32C", "SHA256", "SHA1"]
        }),
        (0, import_middleware_ssec.getSsecPlugin)(config),
        (0, import_middleware_sdk_s333.getS3ExpiresMiddlewarePlugin)(config)
      ];
    }).s("AmazonS3", "GetObject", {}).n("S3Client", "GetObjectCommand").f(GetObjectRequestFilterSensitiveLog, GetObjectOutputFilterSensitiveLog).ser(se_GetObjectCommand).de(de_GetObjectCommand).build() {
    };
    __name(_GetObjectCommand, "GetObjectCommand");
    var GetObjectCommand = _GetObjectCommand;
    var import_middleware_sdk_s334 = require_dist_cjs29();
    var _GetObjectLegalHoldCommand = class _GetObjectLegalHoldCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s334.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "GetObjectLegalHold", {}).n("S3Client", "GetObjectLegalHoldCommand").f(void 0, void 0).ser(se_GetObjectLegalHoldCommand).de(de_GetObjectLegalHoldCommand).build() {
    };
    __name(_GetObjectLegalHoldCommand, "GetObjectLegalHoldCommand");
    var GetObjectLegalHoldCommand = _GetObjectLegalHoldCommand;
    var import_middleware_sdk_s335 = require_dist_cjs29();
    var _GetObjectLockConfigurationCommand = class _GetObjectLockConfigurationCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s335.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "GetObjectLockConfiguration", {}).n("S3Client", "GetObjectLockConfigurationCommand").f(void 0, void 0).ser(se_GetObjectLockConfigurationCommand).de(de_GetObjectLockConfigurationCommand).build() {
    };
    __name(_GetObjectLockConfigurationCommand, "GetObjectLockConfigurationCommand");
    var GetObjectLockConfigurationCommand = _GetObjectLockConfigurationCommand;
    var import_middleware_sdk_s336 = require_dist_cjs29();
    var _GetObjectRetentionCommand = class _GetObjectRetentionCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s336.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "GetObjectRetention", {}).n("S3Client", "GetObjectRetentionCommand").f(void 0, void 0).ser(se_GetObjectRetentionCommand).de(de_GetObjectRetentionCommand).build() {
    };
    __name(_GetObjectRetentionCommand, "GetObjectRetentionCommand");
    var GetObjectRetentionCommand = _GetObjectRetentionCommand;
    var import_middleware_sdk_s337 = require_dist_cjs29();
    var _GetObjectTaggingCommand = class _GetObjectTaggingCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s337.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "GetObjectTagging", {}).n("S3Client", "GetObjectTaggingCommand").f(void 0, void 0).ser(se_GetObjectTaggingCommand).de(de_GetObjectTaggingCommand).build() {
    };
    __name(_GetObjectTaggingCommand, "GetObjectTaggingCommand");
    var GetObjectTaggingCommand = _GetObjectTaggingCommand;
    var _GetObjectTorrentCommand = class _GetObjectTorrentCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "GetObjectTorrent", {}).n("S3Client", "GetObjectTorrentCommand").f(void 0, GetObjectTorrentOutputFilterSensitiveLog).ser(se_GetObjectTorrentCommand).de(de_GetObjectTorrentCommand).build() {
    };
    __name(_GetObjectTorrentCommand, "GetObjectTorrentCommand");
    var GetObjectTorrentCommand = _GetObjectTorrentCommand;
    var import_middleware_sdk_s338 = require_dist_cjs29();
    var _GetPublicAccessBlockCommand = class _GetPublicAccessBlockCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s338.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "GetPublicAccessBlock", {}).n("S3Client", "GetPublicAccessBlockCommand").f(void 0, void 0).ser(se_GetPublicAccessBlockCommand).de(de_GetPublicAccessBlockCommand).build() {
    };
    __name(_GetPublicAccessBlockCommand, "GetPublicAccessBlockCommand");
    var GetPublicAccessBlockCommand = _GetPublicAccessBlockCommand;
    var import_middleware_sdk_s339 = require_dist_cjs29();
    var _HeadBucketCommand = class _HeadBucketCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s339.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "HeadBucket", {}).n("S3Client", "HeadBucketCommand").f(void 0, void 0).ser(se_HeadBucketCommand).de(de_HeadBucketCommand).build() {
    };
    __name(_HeadBucketCommand, "HeadBucketCommand");
    var HeadBucketCommand = _HeadBucketCommand;
    var import_middleware_sdk_s340 = require_dist_cjs29();
    var _HeadObjectCommand = class _HeadObjectCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Key: { type: "contextParams", name: "Key" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s340.getThrow200ExceptionsPlugin)(config),
        (0, import_middleware_ssec.getSsecPlugin)(config),
        (0, import_middleware_sdk_s340.getS3ExpiresMiddlewarePlugin)(config)
      ];
    }).s("AmazonS3", "HeadObject", {}).n("S3Client", "HeadObjectCommand").f(HeadObjectRequestFilterSensitiveLog, HeadObjectOutputFilterSensitiveLog).ser(se_HeadObjectCommand).de(de_HeadObjectCommand).build() {
    };
    __name(_HeadObjectCommand, "HeadObjectCommand");
    var HeadObjectCommand = _HeadObjectCommand;
    var import_middleware_sdk_s341 = require_dist_cjs29();
    var _ListBucketAnalyticsConfigurationsCommand = class _ListBucketAnalyticsConfigurationsCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s341.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "ListBucketAnalyticsConfigurations", {}).n("S3Client", "ListBucketAnalyticsConfigurationsCommand").f(void 0, void 0).ser(se_ListBucketAnalyticsConfigurationsCommand).de(de_ListBucketAnalyticsConfigurationsCommand).build() {
    };
    __name(_ListBucketAnalyticsConfigurationsCommand, "ListBucketAnalyticsConfigurationsCommand");
    var ListBucketAnalyticsConfigurationsCommand = _ListBucketAnalyticsConfigurationsCommand;
    var import_middleware_sdk_s342 = require_dist_cjs29();
    var _ListBucketIntelligentTieringConfigurationsCommand = class _ListBucketIntelligentTieringConfigurationsCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s342.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "ListBucketIntelligentTieringConfigurations", {}).n("S3Client", "ListBucketIntelligentTieringConfigurationsCommand").f(void 0, void 0).ser(se_ListBucketIntelligentTieringConfigurationsCommand).de(de_ListBucketIntelligentTieringConfigurationsCommand).build() {
    };
    __name(_ListBucketIntelligentTieringConfigurationsCommand, "ListBucketIntelligentTieringConfigurationsCommand");
    var ListBucketIntelligentTieringConfigurationsCommand = _ListBucketIntelligentTieringConfigurationsCommand;
    var import_middleware_sdk_s343 = require_dist_cjs29();
    var _ListBucketInventoryConfigurationsCommand = class _ListBucketInventoryConfigurationsCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s343.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "ListBucketInventoryConfigurations", {}).n("S3Client", "ListBucketInventoryConfigurationsCommand").f(void 0, ListBucketInventoryConfigurationsOutputFilterSensitiveLog).ser(se_ListBucketInventoryConfigurationsCommand).de(de_ListBucketInventoryConfigurationsCommand).build() {
    };
    __name(_ListBucketInventoryConfigurationsCommand, "ListBucketInventoryConfigurationsCommand");
    var ListBucketInventoryConfigurationsCommand = _ListBucketInventoryConfigurationsCommand;
    var import_middleware_sdk_s344 = require_dist_cjs29();
    var _ListBucketMetricsConfigurationsCommand = class _ListBucketMetricsConfigurationsCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s344.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "ListBucketMetricsConfigurations", {}).n("S3Client", "ListBucketMetricsConfigurationsCommand").f(void 0, void 0).ser(se_ListBucketMetricsConfigurationsCommand).de(de_ListBucketMetricsConfigurationsCommand).build() {
    };
    __name(_ListBucketMetricsConfigurationsCommand, "ListBucketMetricsConfigurationsCommand");
    var ListBucketMetricsConfigurationsCommand = _ListBucketMetricsConfigurationsCommand;
    var import_middleware_sdk_s345 = require_dist_cjs29();
    var _ListBucketsCommand = class _ListBucketsCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s345.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "ListBuckets", {}).n("S3Client", "ListBucketsCommand").f(void 0, void 0).ser(se_ListBucketsCommand).de(de_ListBucketsCommand).build() {
    };
    __name(_ListBucketsCommand, "ListBucketsCommand");
    var ListBucketsCommand = _ListBucketsCommand;
    var import_middleware_sdk_s346 = require_dist_cjs29();
    var _ListDirectoryBucketsCommand = class _ListDirectoryBucketsCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s346.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "ListDirectoryBuckets", {}).n("S3Client", "ListDirectoryBucketsCommand").f(void 0, void 0).ser(se_ListDirectoryBucketsCommand).de(de_ListDirectoryBucketsCommand).build() {
    };
    __name(_ListDirectoryBucketsCommand, "ListDirectoryBucketsCommand");
    var ListDirectoryBucketsCommand = _ListDirectoryBucketsCommand;
    var import_middleware_sdk_s347 = require_dist_cjs29();
    var _ListMultipartUploadsCommand = class _ListMultipartUploadsCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Prefix: { type: "contextParams", name: "Prefix" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s347.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "ListMultipartUploads", {}).n("S3Client", "ListMultipartUploadsCommand").f(void 0, void 0).ser(se_ListMultipartUploadsCommand).de(de_ListMultipartUploadsCommand).build() {
    };
    __name(_ListMultipartUploadsCommand, "ListMultipartUploadsCommand");
    var ListMultipartUploadsCommand = _ListMultipartUploadsCommand;
    var import_middleware_sdk_s348 = require_dist_cjs29();
    var _ListObjectsCommand = class _ListObjectsCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Prefix: { type: "contextParams", name: "Prefix" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s348.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "ListObjects", {}).n("S3Client", "ListObjectsCommand").f(void 0, void 0).ser(se_ListObjectsCommand).de(de_ListObjectsCommand).build() {
    };
    __name(_ListObjectsCommand, "ListObjectsCommand");
    var ListObjectsCommand = _ListObjectsCommand;
    var import_middleware_sdk_s349 = require_dist_cjs29();
    var _ListObjectsV2Command = class _ListObjectsV2Command extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Prefix: { type: "contextParams", name: "Prefix" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s349.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "ListObjectsV2", {}).n("S3Client", "ListObjectsV2Command").f(void 0, void 0).ser(se_ListObjectsV2Command).de(de_ListObjectsV2Command).build() {
    };
    __name(_ListObjectsV2Command, "ListObjectsV2Command");
    var ListObjectsV2Command = _ListObjectsV2Command;
    var import_middleware_sdk_s350 = require_dist_cjs29();
    var _ListObjectVersionsCommand = class _ListObjectVersionsCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Prefix: { type: "contextParams", name: "Prefix" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s350.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "ListObjectVersions", {}).n("S3Client", "ListObjectVersionsCommand").f(void 0, void 0).ser(se_ListObjectVersionsCommand).de(de_ListObjectVersionsCommand).build() {
    };
    __name(_ListObjectVersionsCommand, "ListObjectVersionsCommand");
    var ListObjectVersionsCommand = _ListObjectVersionsCommand;
    var import_middleware_sdk_s351 = require_dist_cjs29();
    var _ListPartsCommand = class _ListPartsCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Key: { type: "contextParams", name: "Key" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s351.getThrow200ExceptionsPlugin)(config),
        (0, import_middleware_ssec.getSsecPlugin)(config)
      ];
    }).s("AmazonS3", "ListParts", {}).n("S3Client", "ListPartsCommand").f(ListPartsRequestFilterSensitiveLog, void 0).ser(se_ListPartsCommand).de(de_ListPartsCommand).build() {
    };
    __name(_ListPartsCommand, "ListPartsCommand");
    var ListPartsCommand = _ListPartsCommand;
    var _PutBucketAccelerateConfigurationCommand = class _PutBucketAccelerateConfigurationCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: false
        })
      ];
    }).s("AmazonS3", "PutBucketAccelerateConfiguration", {}).n("S3Client", "PutBucketAccelerateConfigurationCommand").f(void 0, void 0).ser(se_PutBucketAccelerateConfigurationCommand).de(de_PutBucketAccelerateConfigurationCommand).build() {
    };
    __name(_PutBucketAccelerateConfigurationCommand, "PutBucketAccelerateConfigurationCommand");
    var PutBucketAccelerateConfigurationCommand = _PutBucketAccelerateConfigurationCommand;
    var _PutBucketAclCommand = class _PutBucketAclCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "PutBucketAcl", {}).n("S3Client", "PutBucketAclCommand").f(void 0, void 0).ser(se_PutBucketAclCommand).de(de_PutBucketAclCommand).build() {
    };
    __name(_PutBucketAclCommand, "PutBucketAclCommand");
    var PutBucketAclCommand = _PutBucketAclCommand;
    var _PutBucketAnalyticsConfigurationCommand = class _PutBucketAnalyticsConfigurationCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "PutBucketAnalyticsConfiguration", {}).n("S3Client", "PutBucketAnalyticsConfigurationCommand").f(void 0, void 0).ser(se_PutBucketAnalyticsConfigurationCommand).de(de_PutBucketAnalyticsConfigurationCommand).build() {
    };
    __name(_PutBucketAnalyticsConfigurationCommand, "PutBucketAnalyticsConfigurationCommand");
    var PutBucketAnalyticsConfigurationCommand = _PutBucketAnalyticsConfigurationCommand;
    var _PutBucketCorsCommand = class _PutBucketCorsCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "PutBucketCors", {}).n("S3Client", "PutBucketCorsCommand").f(void 0, void 0).ser(se_PutBucketCorsCommand).de(de_PutBucketCorsCommand).build() {
    };
    __name(_PutBucketCorsCommand, "PutBucketCorsCommand");
    var PutBucketCorsCommand = _PutBucketCorsCommand;
    var _PutBucketEncryptionCommand = class _PutBucketEncryptionCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "PutBucketEncryption", {}).n("S3Client", "PutBucketEncryptionCommand").f(PutBucketEncryptionRequestFilterSensitiveLog, void 0).ser(se_PutBucketEncryptionCommand).de(de_PutBucketEncryptionCommand).build() {
    };
    __name(_PutBucketEncryptionCommand, "PutBucketEncryptionCommand");
    var PutBucketEncryptionCommand = _PutBucketEncryptionCommand;
    var _PutBucketIntelligentTieringConfigurationCommand = class _PutBucketIntelligentTieringConfigurationCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "PutBucketIntelligentTieringConfiguration", {}).n("S3Client", "PutBucketIntelligentTieringConfigurationCommand").f(void 0, void 0).ser(se_PutBucketIntelligentTieringConfigurationCommand).de(de_PutBucketIntelligentTieringConfigurationCommand).build() {
    };
    __name(_PutBucketIntelligentTieringConfigurationCommand, "PutBucketIntelligentTieringConfigurationCommand");
    var PutBucketIntelligentTieringConfigurationCommand = _PutBucketIntelligentTieringConfigurationCommand;
    var _PutBucketInventoryConfigurationCommand = class _PutBucketInventoryConfigurationCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "PutBucketInventoryConfiguration", {}).n("S3Client", "PutBucketInventoryConfigurationCommand").f(PutBucketInventoryConfigurationRequestFilterSensitiveLog, void 0).ser(se_PutBucketInventoryConfigurationCommand).de(de_PutBucketInventoryConfigurationCommand).build() {
    };
    __name(_PutBucketInventoryConfigurationCommand, "PutBucketInventoryConfigurationCommand");
    var PutBucketInventoryConfigurationCommand = _PutBucketInventoryConfigurationCommand;
    var import_middleware_sdk_s352 = require_dist_cjs29();
    var _PutBucketLifecycleConfigurationCommand = class _PutBucketLifecycleConfigurationCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }),
        (0, import_middleware_sdk_s352.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "PutBucketLifecycleConfiguration", {}).n("S3Client", "PutBucketLifecycleConfigurationCommand").f(void 0, void 0).ser(se_PutBucketLifecycleConfigurationCommand).de(de_PutBucketLifecycleConfigurationCommand).build() {
    };
    __name(_PutBucketLifecycleConfigurationCommand, "PutBucketLifecycleConfigurationCommand");
    var PutBucketLifecycleConfigurationCommand = _PutBucketLifecycleConfigurationCommand;
    var _PutBucketLoggingCommand = class _PutBucketLoggingCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "PutBucketLogging", {}).n("S3Client", "PutBucketLoggingCommand").f(void 0, void 0).ser(se_PutBucketLoggingCommand).de(de_PutBucketLoggingCommand).build() {
    };
    __name(_PutBucketLoggingCommand, "PutBucketLoggingCommand");
    var PutBucketLoggingCommand = _PutBucketLoggingCommand;
    var _PutBucketMetricsConfigurationCommand = class _PutBucketMetricsConfigurationCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "PutBucketMetricsConfiguration", {}).n("S3Client", "PutBucketMetricsConfigurationCommand").f(void 0, void 0).ser(se_PutBucketMetricsConfigurationCommand).de(de_PutBucketMetricsConfigurationCommand).build() {
    };
    __name(_PutBucketMetricsConfigurationCommand, "PutBucketMetricsConfigurationCommand");
    var PutBucketMetricsConfigurationCommand = _PutBucketMetricsConfigurationCommand;
    var _PutBucketNotificationConfigurationCommand = class _PutBucketNotificationConfigurationCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "PutBucketNotificationConfiguration", {}).n("S3Client", "PutBucketNotificationConfigurationCommand").f(void 0, void 0).ser(se_PutBucketNotificationConfigurationCommand).de(de_PutBucketNotificationConfigurationCommand).build() {
    };
    __name(_PutBucketNotificationConfigurationCommand, "PutBucketNotificationConfigurationCommand");
    var PutBucketNotificationConfigurationCommand = _PutBucketNotificationConfigurationCommand;
    var _PutBucketOwnershipControlsCommand = class _PutBucketOwnershipControlsCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "PutBucketOwnershipControls", {}).n("S3Client", "PutBucketOwnershipControlsCommand").f(void 0, void 0).ser(se_PutBucketOwnershipControlsCommand).de(de_PutBucketOwnershipControlsCommand).build() {
    };
    __name(_PutBucketOwnershipControlsCommand, "PutBucketOwnershipControlsCommand");
    var PutBucketOwnershipControlsCommand = _PutBucketOwnershipControlsCommand;
    var _PutBucketPolicyCommand = class _PutBucketPolicyCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "PutBucketPolicy", {}).n("S3Client", "PutBucketPolicyCommand").f(void 0, void 0).ser(se_PutBucketPolicyCommand).de(de_PutBucketPolicyCommand).build() {
    };
    __name(_PutBucketPolicyCommand, "PutBucketPolicyCommand");
    var PutBucketPolicyCommand = _PutBucketPolicyCommand;
    var _PutBucketReplicationCommand = class _PutBucketReplicationCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "PutBucketReplication", {}).n("S3Client", "PutBucketReplicationCommand").f(void 0, void 0).ser(se_PutBucketReplicationCommand).de(de_PutBucketReplicationCommand).build() {
    };
    __name(_PutBucketReplicationCommand, "PutBucketReplicationCommand");
    var PutBucketReplicationCommand = _PutBucketReplicationCommand;
    var _PutBucketRequestPaymentCommand = class _PutBucketRequestPaymentCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "PutBucketRequestPayment", {}).n("S3Client", "PutBucketRequestPaymentCommand").f(void 0, void 0).ser(se_PutBucketRequestPaymentCommand).de(de_PutBucketRequestPaymentCommand).build() {
    };
    __name(_PutBucketRequestPaymentCommand, "PutBucketRequestPaymentCommand");
    var PutBucketRequestPaymentCommand = _PutBucketRequestPaymentCommand;
    var _PutBucketTaggingCommand = class _PutBucketTaggingCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "PutBucketTagging", {}).n("S3Client", "PutBucketTaggingCommand").f(void 0, void 0).ser(se_PutBucketTaggingCommand).de(de_PutBucketTaggingCommand).build() {
    };
    __name(_PutBucketTaggingCommand, "PutBucketTaggingCommand");
    var PutBucketTaggingCommand = _PutBucketTaggingCommand;
    var _PutBucketVersioningCommand = class _PutBucketVersioningCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "PutBucketVersioning", {}).n("S3Client", "PutBucketVersioningCommand").f(void 0, void 0).ser(se_PutBucketVersioningCommand).de(de_PutBucketVersioningCommand).build() {
    };
    __name(_PutBucketVersioningCommand, "PutBucketVersioningCommand");
    var PutBucketVersioningCommand = _PutBucketVersioningCommand;
    var _PutBucketWebsiteCommand = class _PutBucketWebsiteCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "PutBucketWebsite", {}).n("S3Client", "PutBucketWebsiteCommand").f(void 0, void 0).ser(se_PutBucketWebsiteCommand).de(de_PutBucketWebsiteCommand).build() {
    };
    __name(_PutBucketWebsiteCommand, "PutBucketWebsiteCommand");
    var PutBucketWebsiteCommand = _PutBucketWebsiteCommand;
    var import_middleware_sdk_s353 = require_dist_cjs29();
    var _PutObjectAclCommand = class _PutObjectAclCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Key: { type: "contextParams", name: "Key" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }),
        (0, import_middleware_sdk_s353.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "PutObjectAcl", {}).n("S3Client", "PutObjectAclCommand").f(void 0, void 0).ser(se_PutObjectAclCommand).de(de_PutObjectAclCommand).build() {
    };
    __name(_PutObjectAclCommand, "PutObjectAclCommand");
    var PutObjectAclCommand = _PutObjectAclCommand;
    var import_middleware_sdk_s354 = require_dist_cjs29();
    var _PutObjectCommand = class _PutObjectCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Key: { type: "contextParams", name: "Key" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: false
        }),
        (0, import_middleware_sdk_s354.getCheckContentLengthHeaderPlugin)(config),
        (0, import_middleware_sdk_s354.getThrow200ExceptionsPlugin)(config),
        (0, import_middleware_ssec.getSsecPlugin)(config)
      ];
    }).s("AmazonS3", "PutObject", {}).n("S3Client", "PutObjectCommand").f(PutObjectRequestFilterSensitiveLog, PutObjectOutputFilterSensitiveLog).ser(se_PutObjectCommand).de(de_PutObjectCommand).build() {
    };
    __name(_PutObjectCommand, "PutObjectCommand");
    var PutObjectCommand2 = _PutObjectCommand;
    var import_middleware_sdk_s355 = require_dist_cjs29();
    var _PutObjectLegalHoldCommand = class _PutObjectLegalHoldCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }),
        (0, import_middleware_sdk_s355.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "PutObjectLegalHold", {}).n("S3Client", "PutObjectLegalHoldCommand").f(void 0, void 0).ser(se_PutObjectLegalHoldCommand).de(de_PutObjectLegalHoldCommand).build() {
    };
    __name(_PutObjectLegalHoldCommand, "PutObjectLegalHoldCommand");
    var PutObjectLegalHoldCommand = _PutObjectLegalHoldCommand;
    var import_middleware_sdk_s356 = require_dist_cjs29();
    var _PutObjectLockConfigurationCommand = class _PutObjectLockConfigurationCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }),
        (0, import_middleware_sdk_s356.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "PutObjectLockConfiguration", {}).n("S3Client", "PutObjectLockConfigurationCommand").f(void 0, void 0).ser(se_PutObjectLockConfigurationCommand).de(de_PutObjectLockConfigurationCommand).build() {
    };
    __name(_PutObjectLockConfigurationCommand, "PutObjectLockConfigurationCommand");
    var PutObjectLockConfigurationCommand = _PutObjectLockConfigurationCommand;
    var import_middleware_sdk_s357 = require_dist_cjs29();
    var _PutObjectRetentionCommand = class _PutObjectRetentionCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }),
        (0, import_middleware_sdk_s357.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "PutObjectRetention", {}).n("S3Client", "PutObjectRetentionCommand").f(void 0, void 0).ser(se_PutObjectRetentionCommand).de(de_PutObjectRetentionCommand).build() {
    };
    __name(_PutObjectRetentionCommand, "PutObjectRetentionCommand");
    var PutObjectRetentionCommand = _PutObjectRetentionCommand;
    var import_middleware_sdk_s358 = require_dist_cjs29();
    var _PutObjectTaggingCommand = class _PutObjectTaggingCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }),
        (0, import_middleware_sdk_s358.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "PutObjectTagging", {}).n("S3Client", "PutObjectTaggingCommand").f(void 0, void 0).ser(se_PutObjectTaggingCommand).de(de_PutObjectTaggingCommand).build() {
    };
    __name(_PutObjectTaggingCommand, "PutObjectTaggingCommand");
    var PutObjectTaggingCommand = _PutObjectTaggingCommand;
    var _PutPublicAccessBlockCommand = class _PutPublicAccessBlockCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseS3ExpressControlEndpoint: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        })
      ];
    }).s("AmazonS3", "PutPublicAccessBlock", {}).n("S3Client", "PutPublicAccessBlockCommand").f(void 0, void 0).ser(se_PutPublicAccessBlockCommand).de(de_PutPublicAccessBlockCommand).build() {
    };
    __name(_PutPublicAccessBlockCommand, "PutPublicAccessBlockCommand");
    var PutPublicAccessBlockCommand = _PutPublicAccessBlockCommand;
    var import_middleware_sdk_s359 = require_dist_cjs29();
    var _RestoreObjectCommand = class _RestoreObjectCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: false
        }),
        (0, import_middleware_sdk_s359.getThrow200ExceptionsPlugin)(config)
      ];
    }).s("AmazonS3", "RestoreObject", {}).n("S3Client", "RestoreObjectCommand").f(RestoreObjectRequestFilterSensitiveLog, void 0).ser(se_RestoreObjectCommand).de(de_RestoreObjectCommand).build() {
    };
    __name(_RestoreObjectCommand, "RestoreObjectCommand");
    var RestoreObjectCommand = _RestoreObjectCommand;
    var import_middleware_sdk_s360 = require_dist_cjs29();
    var _SelectObjectContentCommand = class _SelectObjectContentCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s360.getThrow200ExceptionsPlugin)(config),
        (0, import_middleware_ssec.getSsecPlugin)(config)
      ];
    }).s("AmazonS3", "SelectObjectContent", {
      /**
       * @internal
       */
      eventStream: {
        output: true
      }
    }).n("S3Client", "SelectObjectContentCommand").f(SelectObjectContentRequestFilterSensitiveLog, SelectObjectContentOutputFilterSensitiveLog).ser(se_SelectObjectContentCommand).de(de_SelectObjectContentCommand).build() {
    };
    __name(_SelectObjectContentCommand, "SelectObjectContentCommand");
    var SelectObjectContentCommand = _SelectObjectContentCommand;
    var import_middleware_sdk_s361 = require_dist_cjs29();
    var _UploadPartCommand = class _UploadPartCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      Bucket: { type: "contextParams", name: "Bucket" },
      Key: { type: "contextParams", name: "Key" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_flexible_checksums.getFlexibleChecksumsPlugin)(config, {
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: false
        }),
        (0, import_middleware_sdk_s361.getThrow200ExceptionsPlugin)(config),
        (0, import_middleware_ssec.getSsecPlugin)(config)
      ];
    }).s("AmazonS3", "UploadPart", {}).n("S3Client", "UploadPartCommand").f(UploadPartRequestFilterSensitiveLog, UploadPartOutputFilterSensitiveLog).ser(se_UploadPartCommand).de(de_UploadPartCommand).build() {
    };
    __name(_UploadPartCommand, "UploadPartCommand");
    var UploadPartCommand = _UploadPartCommand;
    var import_middleware_sdk_s362 = require_dist_cjs29();
    var _UploadPartCopyCommand = class _UploadPartCopyCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      DisableS3ExpressSessionAuth: { type: "staticContextParams", value: true },
      Bucket: { type: "contextParams", name: "Bucket" }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
        (0, import_middleware_sdk_s362.getThrow200ExceptionsPlugin)(config),
        (0, import_middleware_ssec.getSsecPlugin)(config)
      ];
    }).s("AmazonS3", "UploadPartCopy", {}).n("S3Client", "UploadPartCopyCommand").f(UploadPartCopyRequestFilterSensitiveLog, UploadPartCopyOutputFilterSensitiveLog).ser(se_UploadPartCopyCommand).de(de_UploadPartCopyCommand).build() {
    };
    __name(_UploadPartCopyCommand, "UploadPartCopyCommand");
    var UploadPartCopyCommand = _UploadPartCopyCommand;
    var _WriteGetObjectResponseCommand = class _WriteGetObjectResponseCommand extends import_smithy_client4.Command.classBuilder().ep({
      ...commonParams,
      UseObjectLambdaEndpoint: { type: "staticContextParams", value: true }
    }).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("AmazonS3", "WriteGetObjectResponse", {}).n("S3Client", "WriteGetObjectResponseCommand").f(WriteGetObjectResponseRequestFilterSensitiveLog, void 0).ser(se_WriteGetObjectResponseCommand).de(de_WriteGetObjectResponseCommand).build() {
    };
    __name(_WriteGetObjectResponseCommand, "WriteGetObjectResponseCommand");
    var WriteGetObjectResponseCommand = _WriteGetObjectResponseCommand;
    var commands = {
      AbortMultipartUploadCommand,
      CompleteMultipartUploadCommand,
      CopyObjectCommand,
      CreateBucketCommand,
      CreateMultipartUploadCommand,
      CreateSessionCommand,
      DeleteBucketCommand,
      DeleteBucketAnalyticsConfigurationCommand,
      DeleteBucketCorsCommand,
      DeleteBucketEncryptionCommand,
      DeleteBucketIntelligentTieringConfigurationCommand,
      DeleteBucketInventoryConfigurationCommand,
      DeleteBucketLifecycleCommand,
      DeleteBucketMetricsConfigurationCommand,
      DeleteBucketOwnershipControlsCommand,
      DeleteBucketPolicyCommand,
      DeleteBucketReplicationCommand,
      DeleteBucketTaggingCommand,
      DeleteBucketWebsiteCommand,
      DeleteObjectCommand: DeleteObjectCommand2,
      DeleteObjectsCommand,
      DeleteObjectTaggingCommand,
      DeletePublicAccessBlockCommand,
      GetBucketAccelerateConfigurationCommand,
      GetBucketAclCommand,
      GetBucketAnalyticsConfigurationCommand,
      GetBucketCorsCommand,
      GetBucketEncryptionCommand,
      GetBucketIntelligentTieringConfigurationCommand,
      GetBucketInventoryConfigurationCommand,
      GetBucketLifecycleConfigurationCommand,
      GetBucketLocationCommand,
      GetBucketLoggingCommand,
      GetBucketMetricsConfigurationCommand,
      GetBucketNotificationConfigurationCommand,
      GetBucketOwnershipControlsCommand,
      GetBucketPolicyCommand,
      GetBucketPolicyStatusCommand,
      GetBucketReplicationCommand,
      GetBucketRequestPaymentCommand,
      GetBucketTaggingCommand,
      GetBucketVersioningCommand,
      GetBucketWebsiteCommand,
      GetObjectCommand,
      GetObjectAclCommand,
      GetObjectAttributesCommand,
      GetObjectLegalHoldCommand,
      GetObjectLockConfigurationCommand,
      GetObjectRetentionCommand,
      GetObjectTaggingCommand,
      GetObjectTorrentCommand,
      GetPublicAccessBlockCommand,
      HeadBucketCommand,
      HeadObjectCommand,
      ListBucketAnalyticsConfigurationsCommand,
      ListBucketIntelligentTieringConfigurationsCommand,
      ListBucketInventoryConfigurationsCommand,
      ListBucketMetricsConfigurationsCommand,
      ListBucketsCommand,
      ListDirectoryBucketsCommand,
      ListMultipartUploadsCommand,
      ListObjectsCommand,
      ListObjectsV2Command,
      ListObjectVersionsCommand,
      ListPartsCommand,
      PutBucketAccelerateConfigurationCommand,
      PutBucketAclCommand,
      PutBucketAnalyticsConfigurationCommand,
      PutBucketCorsCommand,
      PutBucketEncryptionCommand,
      PutBucketIntelligentTieringConfigurationCommand,
      PutBucketInventoryConfigurationCommand,
      PutBucketLifecycleConfigurationCommand,
      PutBucketLoggingCommand,
      PutBucketMetricsConfigurationCommand,
      PutBucketNotificationConfigurationCommand,
      PutBucketOwnershipControlsCommand,
      PutBucketPolicyCommand,
      PutBucketReplicationCommand,
      PutBucketRequestPaymentCommand,
      PutBucketTaggingCommand,
      PutBucketVersioningCommand,
      PutBucketWebsiteCommand,
      PutObjectCommand: PutObjectCommand2,
      PutObjectAclCommand,
      PutObjectLegalHoldCommand,
      PutObjectLockConfigurationCommand,
      PutObjectRetentionCommand,
      PutObjectTaggingCommand,
      PutPublicAccessBlockCommand,
      RestoreObjectCommand,
      SelectObjectContentCommand,
      UploadPartCommand,
      UploadPartCopyCommand,
      WriteGetObjectResponseCommand
    };
    var _S3 = class _S3 extends S3Client2 {
    };
    __name(_S3, "S3");
    var S3 = _S3;
    (0, import_smithy_client4.createAggregatedClient)(commands, S3);
    var import_core42 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var paginateListBuckets = (0, import_core42.createPaginator)(S3Client2, ListBucketsCommand, "ContinuationToken", "ContinuationToken", "MaxBuckets");
    var import_core5 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var paginateListDirectoryBuckets = (0, import_core5.createPaginator)(S3Client2, ListDirectoryBucketsCommand, "ContinuationToken", "ContinuationToken", "MaxDirectoryBuckets");
    var import_core6 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var paginateListObjectsV2 = (0, import_core6.createPaginator)(S3Client2, ListObjectsV2Command, "ContinuationToken", "NextContinuationToken", "MaxKeys");
    var import_core7 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var paginateListParts = (0, import_core7.createPaginator)(S3Client2, ListPartsCommand, "PartNumberMarker", "NextPartNumberMarker", "MaxParts");
    var import_util_waiter = require_dist_cjs70();
    var checkState = /* @__PURE__ */ __name(async (client, input) => {
      let reason;
      try {
        const result = await client.send(new HeadBucketCommand(input));
        reason = result;
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "NotFound") {
          return { state: import_util_waiter.WaiterState.RETRY, reason };
        }
      }
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }, "checkState");
    var waitForBucketExists = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    }, "waitForBucketExists");
    var waitUntilBucketExists = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, import_util_waiter.checkExceptions)(result);
    }, "waitUntilBucketExists");
    var checkState2 = /* @__PURE__ */ __name(async (client, input) => {
      let reason;
      try {
        const result = await client.send(new HeadBucketCommand(input));
        reason = result;
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "NotFound") {
          return { state: import_util_waiter.WaiterState.SUCCESS, reason };
        }
      }
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }, "checkState");
    var waitForBucketNotExists = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState2);
    }, "waitForBucketNotExists");
    var waitUntilBucketNotExists = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState2);
      return (0, import_util_waiter.checkExceptions)(result);
    }, "waitUntilBucketNotExists");
    var checkState3 = /* @__PURE__ */ __name(async (client, input) => {
      let reason;
      try {
        const result = await client.send(new HeadObjectCommand(input));
        reason = result;
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "NotFound") {
          return { state: import_util_waiter.WaiterState.RETRY, reason };
        }
      }
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }, "checkState");
    var waitForObjectExists = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState3);
    }, "waitForObjectExists");
    var waitUntilObjectExists = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState3);
      return (0, import_util_waiter.checkExceptions)(result);
    }, "waitUntilObjectExists");
    var checkState4 = /* @__PURE__ */ __name(async (client, input) => {
      let reason;
      try {
        const result = await client.send(new HeadObjectCommand(input));
        reason = result;
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "NotFound") {
          return { state: import_util_waiter.WaiterState.SUCCESS, reason };
        }
      }
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }, "checkState");
    var waitForObjectNotExists = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState4);
    }, "waitForObjectNotExists");
    var waitUntilObjectNotExists = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState4);
      return (0, import_util_waiter.checkExceptions)(result);
    }, "waitUntilObjectNotExists");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iot-data-plane@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-iot-data-plane/dist-cjs/auth/httpAuthSchemeProvider.js
var require_httpAuthSchemeProvider5 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iot-data-plane@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-iot-data-plane/dist-cjs/auth/httpAuthSchemeProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveHttpAuthSchemeConfig = exports.defaultIoTDataPlaneHttpAuthSchemeProvider = exports.defaultIoTDataPlaneHttpAuthSchemeParametersProvider = void 0;
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var util_middleware_1 = require_dist_cjs4();
    var defaultIoTDataPlaneHttpAuthSchemeParametersProvider = async (config, context, input) => {
      return {
        operation: (0, util_middleware_1.getSmithyContext)(context).operation,
        region: await (0, util_middleware_1.normalizeProvider)(config.region)() || (() => {
          throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
        })()
      };
    };
    exports.defaultIoTDataPlaneHttpAuthSchemeParametersProvider = defaultIoTDataPlaneHttpAuthSchemeParametersProvider;
    function createAwsAuthSigv4HttpAuthOption(authParameters) {
      return {
        schemeId: "aws.auth#sigv4",
        signingProperties: {
          name: "iotdata",
          region: authParameters.region
        },
        propertiesExtractor: (config, context) => ({
          signingProperties: {
            config,
            context
          }
        })
      };
    }
    var defaultIoTDataPlaneHttpAuthSchemeProvider = (authParameters) => {
      const options = [];
      switch (authParameters.operation) {
        default: {
          options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
        }
      }
      return options;
    };
    exports.defaultIoTDataPlaneHttpAuthSchemeProvider = defaultIoTDataPlaneHttpAuthSchemeProvider;
    var resolveHttpAuthSchemeConfig = (config) => {
      const config_0 = (0, core_1.resolveAwsSdkSigV4Config)(config);
      return {
        ...config_0
      };
    };
    exports.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iot-data-plane@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-iot-data-plane/package.json
var require_package5 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iot-data-plane@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-iot-data-plane/package.json"(exports, module) {
    module.exports = {
      name: "@aws-sdk/client-iot-data-plane",
      description: "AWS SDK for JavaScript Iot Data Plane Client for Node.js, Browser and React Native",
      version: "3.699.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "node ../../scripts/compilation/inline client-iot-data-plane",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo iot-data-plane"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "5.2.0",
        "@aws-crypto/sha256-js": "5.2.0",
        "@aws-sdk/client-sso-oidc": "3.699.0",
        "@aws-sdk/client-sts": "3.699.0",
        "@aws-sdk/core": "3.696.0",
        "@aws-sdk/credential-provider-node": "3.699.0",
        "@aws-sdk/middleware-host-header": "3.696.0",
        "@aws-sdk/middleware-logger": "3.696.0",
        "@aws-sdk/middleware-recursion-detection": "3.696.0",
        "@aws-sdk/middleware-user-agent": "3.696.0",
        "@aws-sdk/region-config-resolver": "3.696.0",
        "@aws-sdk/types": "3.696.0",
        "@aws-sdk/util-endpoints": "3.696.0",
        "@aws-sdk/util-user-agent-browser": "3.696.0",
        "@aws-sdk/util-user-agent-node": "3.696.0",
        "@smithy/config-resolver": "^3.0.12",
        "@smithy/core": "^2.5.3",
        "@smithy/fetch-http-handler": "^4.1.1",
        "@smithy/hash-node": "^3.0.10",
        "@smithy/invalid-dependency": "^3.0.10",
        "@smithy/middleware-content-length": "^3.0.12",
        "@smithy/middleware-endpoint": "^3.2.3",
        "@smithy/middleware-retry": "^3.0.27",
        "@smithy/middleware-serde": "^3.0.10",
        "@smithy/middleware-stack": "^3.0.10",
        "@smithy/node-config-provider": "^3.1.11",
        "@smithy/node-http-handler": "^3.3.1",
        "@smithy/protocol-http": "^4.1.7",
        "@smithy/smithy-client": "^3.4.4",
        "@smithy/types": "^3.7.1",
        "@smithy/url-parser": "^3.0.10",
        "@smithy/util-base64": "^3.0.0",
        "@smithy/util-body-length-browser": "^3.0.0",
        "@smithy/util-body-length-node": "^3.0.0",
        "@smithy/util-defaults-mode-browser": "^3.0.27",
        "@smithy/util-defaults-mode-node": "^3.0.27",
        "@smithy/util-endpoints": "^2.1.6",
        "@smithy/util-middleware": "^3.0.10",
        "@smithy/util-retry": "^3.0.10",
        "@smithy/util-stream": "^3.3.1",
        "@smithy/util-utf8": "^3.0.0",
        tslib: "^2.6.2"
      },
      devDependencies: {
        "@tsconfig/node16": "16.1.3",
        "@types/node": "^16.18.96",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=16.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-iot-data-plane",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-iot-data-plane"
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iot-data-plane@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-iot-data-plane/dist-cjs/endpoint/ruleset.js
var require_ruleset5 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iot-data-plane@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-iot-data-plane/dist-cjs/endpoint/ruleset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ruleSet = void 0;
    var w = "required";
    var x = "fn";
    var y = "argv";
    var z = "ref";
    var a = true;
    var b = "isSet";
    var c = "booleanEquals";
    var d = "error";
    var e = "endpoint";
    var f = "tree";
    var g = "PartitionResult";
    var h = "stringEquals";
    var i = { [w]: false, "type": "String" };
    var j = { [w]: true, "default": false, "type": "Boolean" };
    var k = { [z]: "Endpoint" };
    var l = { [x]: c, [y]: [{ [z]: "UseFIPS" }, true] };
    var m = { [x]: c, [y]: [{ [z]: "UseDualStack" }, true] };
    var n = {};
    var o = { [z]: "Region" };
    var p = { [x]: "getAttr", [y]: [{ [z]: g }, "supportsFIPS"] };
    var q = { [x]: c, [y]: [true, { [x]: "getAttr", [y]: [{ [z]: g }, "supportsDualStack"] }] };
    var r = { [x]: "getAttr", [y]: [{ [z]: g }, "name"] };
    var s = { "url": "https://data-ats.iot.{Region}.amazonaws.com", "properties": {}, "headers": {} };
    var t = [l];
    var u = [m];
    var v = [o];
    var _data = { version: "1.0", parameters: { Region: i, UseDualStack: j, UseFIPS: j, Endpoint: i }, rules: [{ conditions: [{ [x]: b, [y]: [k] }], rules: [{ conditions: t, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d }, { conditions: u, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d }, { endpoint: { url: k, properties: n, headers: n }, type: e }], type: f }, { conditions: [{ [x]: b, [y]: v }], rules: [{ conditions: [{ [x]: "aws.partition", [y]: v, assign: g }], rules: [{ conditions: [l, m], rules: [{ conditions: [{ [x]: c, [y]: [a, p] }, q], rules: [{ endpoint: { url: "https://data-ats.iot-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d }], type: f }, { conditions: t, rules: [{ conditions: [{ [x]: c, [y]: [p, a] }], rules: [{ conditions: [{ [x]: h, [y]: [o, "ca-central-1"] }], endpoint: { url: "https://data.iot-fips.ca-central-1.amazonaws.com", properties: n, headers: n }, type: e }, { conditions: [{ [x]: h, [y]: [o, "us-east-1"] }], endpoint: { url: "https://data.iot-fips.us-east-1.amazonaws.com", properties: n, headers: n }, type: e }, { conditions: [{ [x]: h, [y]: [o, "us-east-2"] }], endpoint: { url: "https://data.iot-fips.us-east-2.amazonaws.com", properties: n, headers: n }, type: e }, { conditions: [{ [x]: h, [y]: [o, "us-west-1"] }], endpoint: { url: "https://data.iot-fips.us-west-1.amazonaws.com", properties: n, headers: n }, type: e }, { conditions: [{ [x]: h, [y]: [o, "us-west-2"] }], endpoint: { url: "https://data.iot-fips.us-west-2.amazonaws.com", properties: n, headers: n }, type: e }, { conditions: [{ [x]: h, [y]: [o, "us-gov-east-1"] }], endpoint: { url: "https://data.iot-fips.us-gov-east-1.amazonaws.com", properties: n, headers: n }, type: e }, { conditions: [{ [x]: h, [y]: [o, "us-gov-west-1"] }], endpoint: { url: "https://data.iot-fips.us-gov-west-1.amazonaws.com", properties: n, headers: n }, type: e }, { endpoint: { url: "https://data-ats.iot-fips.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS is enabled but this partition does not support FIPS", type: d }], type: f }, { conditions: u, rules: [{ conditions: [q], rules: [{ endpoint: { url: "https://data-ats.iot.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "DualStack is enabled but this partition does not support DualStack", type: d }], type: f }, { conditions: [{ [x]: h, [y]: [o, "cn-north-1"] }], endpoint: { url: "https://data.ats.iot.cn-north-1.amazonaws.com.cn", properties: n, headers: n }, type: e }, { conditions: [{ [x]: h, [y]: ["aws", r] }], endpoint: s, type: e }, { conditions: [{ [x]: h, [y]: ["aws-cn", r] }], endpoint: { url: "https://data-ats.iot.{Region}.amazonaws.com.cn", properties: n, headers: n }, type: e }, { conditions: [{ [x]: h, [y]: ["aws-us-gov", r] }], endpoint: s, type: e }, { endpoint: { url: "https://data-ats.iot.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }], type: f }, { error: "Invalid Configuration: Missing Region", type: d }] };
    exports.ruleSet = _data;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iot-data-plane@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-iot-data-plane/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver5 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iot-data-plane@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-iot-data-plane/dist-cjs/endpoint/endpointResolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs31();
    var util_endpoints_2 = require_dist_cjs30();
    var ruleset_1 = require_ruleset5();
    var cache = new util_endpoints_2.EndpointCache({
      size: 50,
      params: ["Endpoint", "Region", "UseDualStack", "UseFIPS"]
    });
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return cache.get(endpointParams, () => (0, util_endpoints_2.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      }));
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
    util_endpoints_2.customEndpointFunctions.aws = util_endpoints_1.awsEndpointFunctions;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iot-data-plane@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-iot-data-plane/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared5 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iot-data-plane@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-iot-data-plane/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var smithy_client_1 = require_dist_cjs19();
    var url_parser_1 = require_dist_cjs43();
    var util_base64_1 = require_dist_cjs9();
    var util_utf8_1 = require_dist_cjs8();
    var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider5();
    var endpointResolver_1 = require_endpointResolver5();
    var getRuntimeConfig = (config) => {
      return {
        apiVersion: "2015-05-28",
        base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
        base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
        disableHostPrefix: config?.disableHostPrefix ?? false,
        endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
        extensions: config?.extensions ?? [],
        httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? httpAuthSchemeProvider_1.defaultIoTDataPlaneHttpAuthSchemeProvider,
        httpAuthSchemes: config?.httpAuthSchemes ?? [
          {
            schemeId: "aws.auth#sigv4",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
            signer: new core_1.AwsSdkSigV4Signer()
          }
        ],
        logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
        serviceId: config?.serviceId ?? "IoT Data Plane",
        urlParser: config?.urlParser ?? url_parser_1.parseUrl,
        utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
        utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iot-data-plane@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-iot-data-plane/dist-cjs/runtimeConfig.js
var require_runtimeConfig5 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iot-data-plane@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-iot-data-plane/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package5());
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var credential_provider_node_1 = require_dist_cjs62();
    var util_user_agent_node_1 = require_dist_cjs49();
    var config_resolver_1 = require_dist_cjs33();
    var hash_node_1 = require_dist_cjs50();
    var middleware_retry_1 = require_dist_cjs38();
    var node_config_provider_1 = require_dist_cjs41();
    var node_http_handler_1 = require_dist_cjs12();
    var util_body_length_node_1 = require_dist_cjs51();
    var util_retry_1 = require_dist_cjs37();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared5();
    var smithy_client_1 = require_dist_cjs19();
    var util_defaults_mode_node_1 = require_dist_cjs52();
    var smithy_client_2 = require_dist_cjs19();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      (0, core_1.emitWarningIfUnsupportedVersion)(process.version);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? credential_provider_node_1.defaultProvider,
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.createDefaultUserAgentProvider)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: node_http_handler_1.NodeHttpHandler.create(config?.requestHandler ?? defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),
        userAgentAppId: config?.userAgentAppId ?? (0, node_config_provider_1.loadConfig)(util_user_agent_node_1.NODE_APP_ID_CONFIG_OPTIONS)
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-iot-data-plane@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-iot-data-plane/dist-cjs/index.js
var require_dist_cjs72 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-iot-data-plane@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-iot-data-plane/dist-cjs/index.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      ConflictException: () => ConflictException,
      DeleteThingShadowCommand: () => DeleteThingShadowCommand,
      GetRetainedMessageCommand: () => GetRetainedMessageCommand,
      GetThingShadowCommand: () => GetThingShadowCommand,
      InternalFailureException: () => InternalFailureException,
      InvalidRequestException: () => InvalidRequestException,
      IoTDataPlane: () => IoTDataPlane,
      IoTDataPlaneClient: () => IoTDataPlaneClient2,
      IoTDataPlaneServiceException: () => IoTDataPlaneServiceException,
      ListNamedShadowsForThingCommand: () => ListNamedShadowsForThingCommand,
      ListRetainedMessagesCommand: () => ListRetainedMessagesCommand,
      MethodNotAllowedException: () => MethodNotAllowedException,
      PayloadFormatIndicator: () => PayloadFormatIndicator,
      PublishCommand: () => PublishCommand2,
      RequestEntityTooLargeException: () => RequestEntityTooLargeException,
      ResourceNotFoundException: () => ResourceNotFoundException,
      ServiceUnavailableException: () => ServiceUnavailableException,
      ThrottlingException: () => ThrottlingException,
      UnauthorizedException: () => UnauthorizedException,
      UnsupportedDocumentEncodingException: () => UnsupportedDocumentEncodingException,
      UpdateThingShadowCommand: () => UpdateThingShadowCommand,
      __Client: () => import_smithy_client4.Client,
      paginateListRetainedMessages: () => paginateListRetainedMessages
    });
    module.exports = __toCommonJS2(src_exports);
    var import_middleware_host_header = require_dist_cjs24();
    var import_middleware_logger = require_dist_cjs25();
    var import_middleware_recursion_detection = require_dist_cjs26();
    var import_middleware_user_agent = require_dist_cjs32();
    var import_config_resolver = require_dist_cjs33();
    var import_core3 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var import_middleware_content_length = require_dist_cjs35();
    var import_middleware_endpoint = require_dist_cjs44();
    var import_middleware_retry = require_dist_cjs38();
    var import_httpAuthSchemeProvider = require_httpAuthSchemeProvider5();
    var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "iotdata"
      };
    }, "resolveClientEndpointParameters");
    var commonParams = {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
    var import_runtimeConfig = require_runtimeConfig5();
    var import_region_config_resolver = require_dist_cjs53();
    var import_protocol_http8 = require_dist_cjs2();
    var import_smithy_client4 = require_dist_cjs19();
    var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
      let _credentials = runtimeConfig.credentials;
      return {
        setHttpAuthScheme(httpAuthScheme) {
          const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
          if (index === -1) {
            _httpAuthSchemes.push(httpAuthScheme);
          } else {
            _httpAuthSchemes.splice(index, 1, httpAuthScheme);
          }
        },
        httpAuthSchemes() {
          return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
          _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
          return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
          _credentials = credentials;
        },
        credentials() {
          return _credentials;
        }
      };
    }, "getHttpAuthExtensionConfiguration");
    var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
      return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials()
      };
    }, "resolveHttpAuthRuntimeConfig");
    var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
    var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
      const extensionConfiguration = {
        ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, import_smithy_client4.getDefaultExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, import_protocol_http8.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
        ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
      };
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return {
        ...runtimeConfig,
        ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
        ...(0, import_smithy_client4.resolveDefaultRuntimeConfig)(extensionConfiguration),
        ...(0, import_protocol_http8.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
        ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
      };
    }, "resolveRuntimeExtensions");
    var _IoTDataPlaneClient = class _IoTDataPlaneClient extends import_smithy_client4.Client {
      constructor(...[configuration]) {
        const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_1);
        const _config_3 = (0, import_middleware_retry.resolveRetryConfig)(_config_2);
        const _config_4 = (0, import_config_resolver.resolveRegionConfig)(_config_3);
        const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_5);
        const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
        super(_config_8);
        this.config = _config_8;
        this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use(
          (0, import_core3.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
            httpAuthSchemeParametersProvider: import_httpAuthSchemeProvider.defaultIoTDataPlaneHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new import_core3.DefaultIdentityProviderConfig({
              "aws.auth#sigv4": config.credentials
            })
          })
        );
        this.middlewareStack.use((0, import_core3.getHttpSigningPlugin)(this.config));
      }
      /**
       * Destroy underlying resources, like sockets. It's usually not necessary to do this.
       * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
       * Otherwise, sockets might stay open for quite a long time before the server terminates them.
       */
      destroy() {
        super.destroy();
      }
    };
    __name(_IoTDataPlaneClient, "IoTDataPlaneClient");
    var IoTDataPlaneClient2 = _IoTDataPlaneClient;
    var import_middleware_serde2 = require_dist_cjs5();
    var import_core22 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var _IoTDataPlaneServiceException = class _IoTDataPlaneServiceException2 extends import_smithy_client4.ServiceException {
      /**
       * @internal
       */
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _IoTDataPlaneServiceException2.prototype);
      }
    };
    __name(_IoTDataPlaneServiceException, "IoTDataPlaneServiceException");
    var IoTDataPlaneServiceException = _IoTDataPlaneServiceException;
    var _ConflictException = class _ConflictException2 extends IoTDataPlaneServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ConflictException",
          $fault: "client",
          ...opts
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ConflictException2.prototype);
      }
    };
    __name(_ConflictException, "ConflictException");
    var ConflictException = _ConflictException;
    var _InternalFailureException = class _InternalFailureException2 extends IoTDataPlaneServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InternalFailureException",
          $fault: "server",
          ...opts
        });
        this.name = "InternalFailureException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _InternalFailureException2.prototype);
      }
    };
    __name(_InternalFailureException, "InternalFailureException");
    var InternalFailureException = _InternalFailureException;
    var _InvalidRequestException = class _InvalidRequestException2 extends IoTDataPlaneServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidRequestException2.prototype);
      }
    };
    __name(_InvalidRequestException, "InvalidRequestException");
    var InvalidRequestException = _InvalidRequestException;
    var _MethodNotAllowedException = class _MethodNotAllowedException2 extends IoTDataPlaneServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "MethodNotAllowedException",
          $fault: "client",
          ...opts
        });
        this.name = "MethodNotAllowedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _MethodNotAllowedException2.prototype);
      }
    };
    __name(_MethodNotAllowedException, "MethodNotAllowedException");
    var MethodNotAllowedException = _MethodNotAllowedException;
    var _ResourceNotFoundException = class _ResourceNotFoundException2 extends IoTDataPlaneServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ResourceNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceNotFoundException2.prototype);
      }
    };
    __name(_ResourceNotFoundException, "ResourceNotFoundException");
    var ResourceNotFoundException = _ResourceNotFoundException;
    var _ServiceUnavailableException = class _ServiceUnavailableException2 extends IoTDataPlaneServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ServiceUnavailableException",
          $fault: "server",
          ...opts
        });
        this.name = "ServiceUnavailableException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _ServiceUnavailableException2.prototype);
      }
    };
    __name(_ServiceUnavailableException, "ServiceUnavailableException");
    var ServiceUnavailableException = _ServiceUnavailableException;
    var _ThrottlingException = class _ThrottlingException2 extends IoTDataPlaneServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ThrottlingException",
          $fault: "client",
          ...opts
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ThrottlingException2.prototype);
      }
    };
    __name(_ThrottlingException, "ThrottlingException");
    var ThrottlingException = _ThrottlingException;
    var _UnauthorizedException = class _UnauthorizedException2 extends IoTDataPlaneServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "UnauthorizedException",
          $fault: "client",
          ...opts
        });
        this.name = "UnauthorizedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnauthorizedException2.prototype);
      }
    };
    __name(_UnauthorizedException, "UnauthorizedException");
    var UnauthorizedException = _UnauthorizedException;
    var _UnsupportedDocumentEncodingException = class _UnsupportedDocumentEncodingException2 extends IoTDataPlaneServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "UnsupportedDocumentEncodingException",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedDocumentEncodingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnsupportedDocumentEncodingException2.prototype);
      }
    };
    __name(_UnsupportedDocumentEncodingException, "UnsupportedDocumentEncodingException");
    var UnsupportedDocumentEncodingException = _UnsupportedDocumentEncodingException;
    var PayloadFormatIndicator = {
      UNSPECIFIED_BYTES: "UNSPECIFIED_BYTES",
      UTF8_DATA: "UTF8_DATA"
    };
    var _RequestEntityTooLargeException = class _RequestEntityTooLargeException2 extends IoTDataPlaneServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "RequestEntityTooLargeException",
          $fault: "client",
          ...opts
        });
        this.name = "RequestEntityTooLargeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _RequestEntityTooLargeException2.prototype);
      }
    };
    __name(_RequestEntityTooLargeException, "RequestEntityTooLargeException");
    var RequestEntityTooLargeException = _RequestEntityTooLargeException;
    var se_DeleteThingShadowCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core3.requestBuilder)(input, context);
      const headers = {};
      b.bp("/things/{thingName}/shadow");
      b.p("thingName", () => input.thingName, "{thingName}", false);
      const query = (0, import_smithy_client4.map)({
        [_n]: [, input[_sN]]
      });
      let body;
      b.m("DELETE").h(headers).q(query).b(body);
      return b.build();
    }, "se_DeleteThingShadowCommand");
    var se_GetRetainedMessageCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core3.requestBuilder)(input, context);
      const headers = {};
      b.bp("/retainedMessage/{topic}");
      b.p("topic", () => input.topic, "{topic}", false);
      let body;
      b.m("GET").h(headers).b(body);
      return b.build();
    }, "se_GetRetainedMessageCommand");
    var se_GetThingShadowCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core3.requestBuilder)(input, context);
      const headers = {};
      b.bp("/things/{thingName}/shadow");
      b.p("thingName", () => input.thingName, "{thingName}", false);
      const query = (0, import_smithy_client4.map)({
        [_n]: [, input[_sN]]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_GetThingShadowCommand");
    var se_ListNamedShadowsForThingCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core3.requestBuilder)(input, context);
      const headers = {};
      b.bp("/api/things/shadow/ListNamedShadowsForThing/{thingName}");
      b.p("thingName", () => input.thingName, "{thingName}", false);
      const query = (0, import_smithy_client4.map)({
        [_nT]: [, input[_nT]],
        [_pS]: [() => input.pageSize !== void 0, () => input[_pS].toString()]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_ListNamedShadowsForThingCommand");
    var se_ListRetainedMessagesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core3.requestBuilder)(input, context);
      const headers = {};
      b.bp("/retainedMessage");
      const query = (0, import_smithy_client4.map)({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
      });
      let body;
      b.m("GET").h(headers).q(query).b(body);
      return b.build();
    }, "se_ListRetainedMessagesCommand");
    var se_PublishCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core3.requestBuilder)(input, context);
      const headers = (0, import_smithy_client4.map)({}, import_smithy_client4.isSerializableHeaderValue, {
        "content-type": "application/octet-stream",
        [_xamup]: [
          () => (0, import_smithy_client4.isSerializableHeaderValue)(input[_uP]),
          () => context.base64Encoder(Buffer.from(import_smithy_client4.LazyJsonString.fromObject(input[_uP])))
        ],
        [_xampfi]: input[_pFI],
        [_xamcd]: input[_cD]
      });
      b.bp("/topics/{topic}");
      b.p("topic", () => input.topic, "{topic}", false);
      const query = (0, import_smithy_client4.map)({
        [_q]: [() => input.qos !== void 0, () => input[_q].toString()],
        [_r]: [() => input.retain !== void 0, () => input[_r].toString()],
        [_cT]: [, input[_cT]],
        [_rT]: [, input[_rT]],
        [_mE]: [() => input.messageExpiry !== void 0, () => input[_mE].toString()]
      });
      let body;
      if (input.payload !== void 0) {
        body = input.payload;
      }
      b.m("POST").h(headers).q(query).b(body);
      return b.build();
    }, "se_PublishCommand");
    var se_UpdateThingShadowCommand = /* @__PURE__ */ __name(async (input, context) => {
      const b = (0, import_core3.requestBuilder)(input, context);
      const headers = {
        "content-type": "application/octet-stream"
      };
      b.bp("/things/{thingName}/shadow");
      b.p("thingName", () => input.thingName, "{thingName}", false);
      const query = (0, import_smithy_client4.map)({
        [_n]: [, input[_sN]]
      });
      let body;
      if (input.payload !== void 0) {
        body = input.payload;
      }
      b.m("POST").h(headers).q(query).b(body);
      return b.build();
    }, "se_UpdateThingShadowCommand");
    var de_DeleteThingShadowCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = await (0, import_smithy_client4.collectBody)(output.body, context);
      contents.payload = data;
      return contents;
    }, "de_DeleteThingShadowCommand");
    var de_GetRetainedMessageCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client4.take)(data, {
        lastModifiedTime: import_smithy_client4.expectLong,
        payload: context.base64Decoder,
        qos: import_smithy_client4.expectInt32,
        topic: import_smithy_client4.expectString,
        userProperties: context.base64Decoder
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_GetRetainedMessageCommand");
    var de_GetThingShadowCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = await (0, import_smithy_client4.collectBody)(output.body, context);
      contents.payload = data;
      return contents;
    }, "de_GetThingShadowCommand");
    var de_ListNamedShadowsForThingCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client4.take)(data, {
        nextToken: import_smithy_client4.expectString,
        results: import_smithy_client4._json,
        timestamp: import_smithy_client4.expectLong
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_ListNamedShadowsForThingCommand");
    var de_ListRetainedMessagesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.expectObject)(await (0, import_core22.parseJsonBody)(output.body, context)), "body");
      const doc = (0, import_smithy_client4.take)(data, {
        nextToken: import_smithy_client4.expectString,
        retainedTopics: import_smithy_client4._json
      });
      Object.assign(contents, doc);
      return contents;
    }, "de_ListRetainedMessagesCommand");
    var de_PublishCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      await (0, import_smithy_client4.collectBody)(output.body, context);
      return contents;
    }, "de_PublishCommand");
    var de_UpdateThingShadowCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = (0, import_smithy_client4.map)({
        $metadata: deserializeMetadata(output)
      });
      const data = await (0, import_smithy_client4.collectBody)(output.body, context);
      contents.payload = data;
      return contents;
    }, "de_UpdateThingShadowCommand");
    var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await (0, import_core22.parseJsonErrorBody)(output.body, context)
      };
      const errorCode = (0, import_core22.loadRestJsonErrorCode)(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalFailureException":
        case "com.amazonaws.iotdataplane#InternalFailureException":
          throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.iotdataplane#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.iotdataplane#MethodNotAllowedException":
          throw await de_MethodNotAllowedExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.iotdataplane#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.iotdataplane#ServiceUnavailableException":
          throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.iotdataplane#ThrottlingException":
          throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.iotdataplane#UnauthorizedException":
          throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        case "UnsupportedDocumentEncodingException":
        case "com.amazonaws.iotdataplane#UnsupportedDocumentEncodingException":
          throw await de_UnsupportedDocumentEncodingExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.iotdataplane#ConflictException":
          throw await de_ConflictExceptionRes(parsedOutput, context);
        case "RequestEntityTooLargeException":
        case "com.amazonaws.iotdataplane#RequestEntityTooLargeException":
          throw await de_RequestEntityTooLargeExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode
          });
      }
    }, "de_CommandError");
    var throwDefaultError = (0, import_smithy_client4.withBaseException)(IoTDataPlaneServiceException);
    var de_ConflictExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client4.take)(data, {
        message: import_smithy_client4.expectString
      });
      Object.assign(contents, doc);
      const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_ConflictExceptionRes");
    var de_InternalFailureExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client4.take)(data, {
        message: import_smithy_client4.expectString
      });
      Object.assign(contents, doc);
      const exception = new InternalFailureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InternalFailureExceptionRes");
    var de_InvalidRequestExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client4.take)(data, {
        message: import_smithy_client4.expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_InvalidRequestExceptionRes");
    var de_MethodNotAllowedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client4.take)(data, {
        message: import_smithy_client4.expectString
      });
      Object.assign(contents, doc);
      const exception = new MethodNotAllowedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_MethodNotAllowedExceptionRes");
    var de_RequestEntityTooLargeExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client4.take)(data, {
        message: import_smithy_client4.expectString
      });
      Object.assign(contents, doc);
      const exception = new RequestEntityTooLargeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_RequestEntityTooLargeExceptionRes");
    var de_ResourceNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client4.take)(data, {
        message: import_smithy_client4.expectString
      });
      Object.assign(contents, doc);
      const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_ResourceNotFoundExceptionRes");
    var de_ServiceUnavailableExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client4.take)(data, {
        message: import_smithy_client4.expectString
      });
      Object.assign(contents, doc);
      const exception = new ServiceUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_ServiceUnavailableExceptionRes");
    var de_ThrottlingExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client4.take)(data, {
        message: import_smithy_client4.expectString
      });
      Object.assign(contents, doc);
      const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_ThrottlingExceptionRes");
    var de_UnauthorizedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client4.take)(data, {
        message: import_smithy_client4.expectString
      });
      Object.assign(contents, doc);
      const exception = new UnauthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_UnauthorizedExceptionRes");
    var de_UnsupportedDocumentEncodingExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const contents = (0, import_smithy_client4.map)({});
      const data = parsedOutput.body;
      const doc = (0, import_smithy_client4.take)(data, {
        message: import_smithy_client4.expectString
      });
      Object.assign(contents, doc);
      const exception = new UnsupportedDocumentEncodingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, parsedOutput.body);
    }, "de_UnsupportedDocumentEncodingExceptionRes");
    var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    }), "deserializeMetadata");
    var _cD = "correlationData";
    var _cT = "contentType";
    var _mE = "messageExpiry";
    var _mR = "maxResults";
    var _n = "name";
    var _nT = "nextToken";
    var _pFI = "payloadFormatIndicator";
    var _pS = "pageSize";
    var _q = "qos";
    var _r = "retain";
    var _rT = "responseTopic";
    var _sN = "shadowName";
    var _uP = "userProperties";
    var _xamcd = "x-amz-mqtt5-correlation-data";
    var _xampfi = "x-amz-mqtt5-payload-format-indicator";
    var _xamup = "x-amz-mqtt5-user-properties";
    var _DeleteThingShadowCommand = class _DeleteThingShadowCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("IotMoonrakerService", "DeleteThingShadow", {}).n("IoTDataPlaneClient", "DeleteThingShadowCommand").f(void 0, void 0).ser(se_DeleteThingShadowCommand).de(de_DeleteThingShadowCommand).build() {
    };
    __name(_DeleteThingShadowCommand, "DeleteThingShadowCommand");
    var DeleteThingShadowCommand = _DeleteThingShadowCommand;
    var _GetRetainedMessageCommand = class _GetRetainedMessageCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("IotMoonrakerService", "GetRetainedMessage", {}).n("IoTDataPlaneClient", "GetRetainedMessageCommand").f(void 0, void 0).ser(se_GetRetainedMessageCommand).de(de_GetRetainedMessageCommand).build() {
    };
    __name(_GetRetainedMessageCommand, "GetRetainedMessageCommand");
    var GetRetainedMessageCommand = _GetRetainedMessageCommand;
    var _GetThingShadowCommand = class _GetThingShadowCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("IotMoonrakerService", "GetThingShadow", {}).n("IoTDataPlaneClient", "GetThingShadowCommand").f(void 0, void 0).ser(se_GetThingShadowCommand).de(de_GetThingShadowCommand).build() {
    };
    __name(_GetThingShadowCommand, "GetThingShadowCommand");
    var GetThingShadowCommand = _GetThingShadowCommand;
    var _ListNamedShadowsForThingCommand = class _ListNamedShadowsForThingCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("IotMoonrakerService", "ListNamedShadowsForThing", {}).n("IoTDataPlaneClient", "ListNamedShadowsForThingCommand").f(void 0, void 0).ser(se_ListNamedShadowsForThingCommand).de(de_ListNamedShadowsForThingCommand).build() {
    };
    __name(_ListNamedShadowsForThingCommand, "ListNamedShadowsForThingCommand");
    var ListNamedShadowsForThingCommand = _ListNamedShadowsForThingCommand;
    var _ListRetainedMessagesCommand = class _ListRetainedMessagesCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("IotMoonrakerService", "ListRetainedMessages", {}).n("IoTDataPlaneClient", "ListRetainedMessagesCommand").f(void 0, void 0).ser(se_ListRetainedMessagesCommand).de(de_ListRetainedMessagesCommand).build() {
    };
    __name(_ListRetainedMessagesCommand, "ListRetainedMessagesCommand");
    var ListRetainedMessagesCommand = _ListRetainedMessagesCommand;
    var _PublishCommand = class _PublishCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("IotMoonrakerService", "Publish", {}).n("IoTDataPlaneClient", "PublishCommand").f(void 0, void 0).ser(se_PublishCommand).de(de_PublishCommand).build() {
    };
    __name(_PublishCommand, "PublishCommand");
    var PublishCommand2 = _PublishCommand;
    var _UpdateThingShadowCommand = class _UpdateThingShadowCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("IotMoonrakerService", "UpdateThingShadow", {}).n("IoTDataPlaneClient", "UpdateThingShadowCommand").f(void 0, void 0).ser(se_UpdateThingShadowCommand).de(de_UpdateThingShadowCommand).build() {
    };
    __name(_UpdateThingShadowCommand, "UpdateThingShadowCommand");
    var UpdateThingShadowCommand = _UpdateThingShadowCommand;
    var commands = {
      DeleteThingShadowCommand,
      GetRetainedMessageCommand,
      GetThingShadowCommand,
      ListNamedShadowsForThingCommand,
      ListRetainedMessagesCommand,
      PublishCommand: PublishCommand2,
      UpdateThingShadowCommand
    };
    var _IoTDataPlane = class _IoTDataPlane extends IoTDataPlaneClient2 {
    };
    __name(_IoTDataPlane, "IoTDataPlane");
    var IoTDataPlane = _IoTDataPlane;
    (0, import_smithy_client4.createAggregatedClient)(commands, IoTDataPlane);
    var paginateListRetainedMessages = (0, import_core3.createPaginator)(IoTDataPlaneClient2, ListRetainedMessagesCommand, "nextToken", "nextToken", "maxResults");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-cloudformation/dist-cjs/auth/httpAuthSchemeProvider.js
var require_httpAuthSchemeProvider6 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-cloudformation/dist-cjs/auth/httpAuthSchemeProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveHttpAuthSchemeConfig = exports.defaultCloudFormationHttpAuthSchemeProvider = exports.defaultCloudFormationHttpAuthSchemeParametersProvider = void 0;
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var util_middleware_1 = require_dist_cjs4();
    var defaultCloudFormationHttpAuthSchemeParametersProvider = async (config, context, input) => {
      return {
        operation: (0, util_middleware_1.getSmithyContext)(context).operation,
        region: await (0, util_middleware_1.normalizeProvider)(config.region)() || (() => {
          throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
        })()
      };
    };
    exports.defaultCloudFormationHttpAuthSchemeParametersProvider = defaultCloudFormationHttpAuthSchemeParametersProvider;
    function createAwsAuthSigv4HttpAuthOption(authParameters) {
      return {
        schemeId: "aws.auth#sigv4",
        signingProperties: {
          name: "cloudformation",
          region: authParameters.region
        },
        propertiesExtractor: (config, context) => ({
          signingProperties: {
            config,
            context
          }
        })
      };
    }
    var defaultCloudFormationHttpAuthSchemeProvider = (authParameters) => {
      const options = [];
      switch (authParameters.operation) {
        default: {
          options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
        }
      }
      return options;
    };
    exports.defaultCloudFormationHttpAuthSchemeProvider = defaultCloudFormationHttpAuthSchemeProvider;
    var resolveHttpAuthSchemeConfig = (config) => {
      const config_0 = (0, core_1.resolveAwsSdkSigV4Config)(config);
      return {
        ...config_0
      };
    };
    exports.resolveHttpAuthSchemeConfig = resolveHttpAuthSchemeConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-cloudformation/package.json
var require_package6 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-cloudformation/package.json"(exports, module) {
    module.exports = {
      name: "@aws-sdk/client-cloudformation",
      description: "AWS SDK for JavaScript Cloudformation Client for Node.js, Browser and React Native",
      version: "3.699.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "node ../../scripts/compilation/inline client-cloudformation",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo cloudformation"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "5.2.0",
        "@aws-crypto/sha256-js": "5.2.0",
        "@aws-sdk/client-sso-oidc": "3.699.0",
        "@aws-sdk/client-sts": "3.699.0",
        "@aws-sdk/core": "3.696.0",
        "@aws-sdk/credential-provider-node": "3.699.0",
        "@aws-sdk/middleware-host-header": "3.696.0",
        "@aws-sdk/middleware-logger": "3.696.0",
        "@aws-sdk/middleware-recursion-detection": "3.696.0",
        "@aws-sdk/middleware-user-agent": "3.696.0",
        "@aws-sdk/region-config-resolver": "3.696.0",
        "@aws-sdk/types": "3.696.0",
        "@aws-sdk/util-endpoints": "3.696.0",
        "@aws-sdk/util-user-agent-browser": "3.696.0",
        "@aws-sdk/util-user-agent-node": "3.696.0",
        "@smithy/config-resolver": "^3.0.12",
        "@smithy/core": "^2.5.3",
        "@smithy/fetch-http-handler": "^4.1.1",
        "@smithy/hash-node": "^3.0.10",
        "@smithy/invalid-dependency": "^3.0.10",
        "@smithy/middleware-content-length": "^3.0.12",
        "@smithy/middleware-endpoint": "^3.2.3",
        "@smithy/middleware-retry": "^3.0.27",
        "@smithy/middleware-serde": "^3.0.10",
        "@smithy/middleware-stack": "^3.0.10",
        "@smithy/node-config-provider": "^3.1.11",
        "@smithy/node-http-handler": "^3.3.1",
        "@smithy/protocol-http": "^4.1.7",
        "@smithy/smithy-client": "^3.4.4",
        "@smithy/types": "^3.7.1",
        "@smithy/url-parser": "^3.0.10",
        "@smithy/util-base64": "^3.0.0",
        "@smithy/util-body-length-browser": "^3.0.0",
        "@smithy/util-body-length-node": "^3.0.0",
        "@smithy/util-defaults-mode-browser": "^3.0.27",
        "@smithy/util-defaults-mode-node": "^3.0.27",
        "@smithy/util-endpoints": "^2.1.6",
        "@smithy/util-middleware": "^3.0.10",
        "@smithy/util-retry": "^3.0.10",
        "@smithy/util-utf8": "^3.0.0",
        "@smithy/util-waiter": "^3.1.9",
        "@types/uuid": "^9.0.1",
        tslib: "^2.6.2",
        uuid: "^9.0.1"
      },
      devDependencies: {
        "@tsconfig/node16": "16.1.3",
        "@types/node": "^16.18.96",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=16.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-cloudformation",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-cloudformation"
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-cloudformation/dist-cjs/endpoint/ruleset.js
var require_ruleset6 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-cloudformation/dist-cjs/endpoint/ruleset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ruleSet = void 0;
    var u = "required";
    var v = "fn";
    var w = "argv";
    var x = "ref";
    var a = true;
    var b = "isSet";
    var c = "booleanEquals";
    var d = "error";
    var e = "endpoint";
    var f = "tree";
    var g = "PartitionResult";
    var h = "getAttr";
    var i = { [u]: false, "type": "String" };
    var j = { [u]: true, "default": false, "type": "Boolean" };
    var k = { [x]: "Endpoint" };
    var l = { [v]: c, [w]: [{ [x]: "UseFIPS" }, true] };
    var m = { [v]: c, [w]: [{ [x]: "UseDualStack" }, true] };
    var n = {};
    var o = { [v]: h, [w]: [{ [x]: g }, "supportsFIPS"] };
    var p = { [x]: g };
    var q = { [v]: c, [w]: [true, { [v]: h, [w]: [p, "supportsDualStack"] }] };
    var r = [l];
    var s = [m];
    var t = [{ [x]: "Region" }];
    var _data = { version: "1.0", parameters: { Region: i, UseDualStack: j, UseFIPS: j, Endpoint: i }, rules: [{ conditions: [{ [v]: b, [w]: [k] }], rules: [{ conditions: r, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d }, { conditions: s, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d }, { endpoint: { url: k, properties: n, headers: n }, type: e }], type: f }, { conditions: [{ [v]: b, [w]: t }], rules: [{ conditions: [{ [v]: "aws.partition", [w]: t, assign: g }], rules: [{ conditions: [l, m], rules: [{ conditions: [{ [v]: c, [w]: [a, o] }, q], rules: [{ endpoint: { url: "https://cloudformation-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d }], type: f }, { conditions: r, rules: [{ conditions: [{ [v]: c, [w]: [o, a] }], rules: [{ conditions: [{ [v]: "stringEquals", [w]: [{ [v]: h, [w]: [p, "name"] }, "aws-us-gov"] }], endpoint: { url: "https://cloudformation.{Region}.amazonaws.com", properties: n, headers: n }, type: e }, { endpoint: { url: "https://cloudformation-fips.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS is enabled but this partition does not support FIPS", type: d }], type: f }, { conditions: s, rules: [{ conditions: [q], rules: [{ endpoint: { url: "https://cloudformation.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "DualStack is enabled but this partition does not support DualStack", type: d }], type: f }, { endpoint: { url: "https://cloudformation.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }], type: f }, { error: "Invalid Configuration: Missing Region", type: d }] };
    exports.ruleSet = _data;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-cloudformation/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver6 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-cloudformation/dist-cjs/endpoint/endpointResolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs31();
    var util_endpoints_2 = require_dist_cjs30();
    var ruleset_1 = require_ruleset6();
    var cache = new util_endpoints_2.EndpointCache({
      size: 50,
      params: ["Endpoint", "Region", "UseDualStack", "UseFIPS"]
    });
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return cache.get(endpointParams, () => (0, util_endpoints_2.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      }));
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
    util_endpoints_2.customEndpointFunctions.aws = util_endpoints_1.awsEndpointFunctions;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-cloudformation/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared6 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-cloudformation/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var smithy_client_1 = require_dist_cjs19();
    var url_parser_1 = require_dist_cjs43();
    var util_base64_1 = require_dist_cjs9();
    var util_utf8_1 = require_dist_cjs8();
    var httpAuthSchemeProvider_1 = require_httpAuthSchemeProvider6();
    var endpointResolver_1 = require_endpointResolver6();
    var getRuntimeConfig = (config) => {
      return {
        apiVersion: "2010-05-15",
        base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
        base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
        disableHostPrefix: config?.disableHostPrefix ?? false,
        endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
        extensions: config?.extensions ?? [],
        httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? httpAuthSchemeProvider_1.defaultCloudFormationHttpAuthSchemeProvider,
        httpAuthSchemes: config?.httpAuthSchemes ?? [
          {
            schemeId: "aws.auth#sigv4",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
            signer: new core_1.AwsSdkSigV4Signer()
          }
        ],
        logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
        serviceId: config?.serviceId ?? "CloudFormation",
        urlParser: config?.urlParser ?? url_parser_1.parseUrl,
        utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
        utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-cloudformation/dist-cjs/runtimeConfig.js
var require_runtimeConfig6 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-cloudformation/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package6());
    var core_1 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var credential_provider_node_1 = require_dist_cjs62();
    var util_user_agent_node_1 = require_dist_cjs49();
    var config_resolver_1 = require_dist_cjs33();
    var hash_node_1 = require_dist_cjs50();
    var middleware_retry_1 = require_dist_cjs38();
    var node_config_provider_1 = require_dist_cjs41();
    var node_http_handler_1 = require_dist_cjs12();
    var util_body_length_node_1 = require_dist_cjs51();
    var util_retry_1 = require_dist_cjs37();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared6();
    var smithy_client_1 = require_dist_cjs19();
    var util_defaults_mode_node_1 = require_dist_cjs52();
    var smithy_client_2 = require_dist_cjs19();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      (0, core_1.emitWarningIfUnsupportedVersion)(process.version);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? credential_provider_node_1.defaultProvider,
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.createDefaultUserAgentProvider)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: node_http_handler_1.NodeHttpHandler.create(config?.requestHandler ?? defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),
        userAgentAppId: config?.userAgentAppId ?? (0, node_config_provider_1.loadConfig)(util_user_agent_node_1.NODE_APP_ID_CONFIG_OPTIONS)
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-cloudformation/dist-cjs/index.js
var require_dist_cjs73 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.699.0_aws-crt@1.27.1/node_modules/@aws-sdk/client-cloudformation/dist-cjs/index.js"(exports, module) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __name = (target, value) => __defProp2(target, "name", { value, configurable: true });
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      AccountFilterType: () => AccountFilterType,
      AccountGateStatus: () => AccountGateStatus,
      ActivateOrganizationsAccessCommand: () => ActivateOrganizationsAccessCommand,
      ActivateTypeCommand: () => ActivateTypeCommand,
      AlreadyExistsException: () => AlreadyExistsException,
      AttributeChangeType: () => AttributeChangeType,
      BatchDescribeTypeConfigurationsCommand: () => BatchDescribeTypeConfigurationsCommand,
      CFNRegistryException: () => CFNRegistryException,
      CallAs: () => CallAs,
      CancelUpdateStackCommand: () => CancelUpdateStackCommand,
      Capability: () => Capability,
      Category: () => Category,
      ChangeAction: () => ChangeAction,
      ChangeSetHooksStatus: () => ChangeSetHooksStatus,
      ChangeSetNotFoundException: () => ChangeSetNotFoundException,
      ChangeSetStatus: () => ChangeSetStatus,
      ChangeSetType: () => ChangeSetType,
      ChangeSource: () => ChangeSource,
      ChangeType: () => ChangeType,
      CloudFormation: () => CloudFormation,
      CloudFormationClient: () => CloudFormationClient2,
      CloudFormationServiceException: () => CloudFormationServiceException,
      ConcurrencyMode: () => ConcurrencyMode,
      ConcurrentResourcesLimitExceededException: () => ConcurrentResourcesLimitExceededException,
      ContinueUpdateRollbackCommand: () => ContinueUpdateRollbackCommand,
      CreateChangeSetCommand: () => CreateChangeSetCommand,
      CreateGeneratedTemplateCommand: () => CreateGeneratedTemplateCommand,
      CreateStackCommand: () => CreateStackCommand,
      CreateStackInstancesCommand: () => CreateStackInstancesCommand,
      CreateStackSetCommand: () => CreateStackSetCommand,
      CreatedButModifiedException: () => CreatedButModifiedException,
      DeactivateOrganizationsAccessCommand: () => DeactivateOrganizationsAccessCommand,
      DeactivateTypeCommand: () => DeactivateTypeCommand,
      DeleteChangeSetCommand: () => DeleteChangeSetCommand,
      DeleteGeneratedTemplateCommand: () => DeleteGeneratedTemplateCommand,
      DeleteStackCommand: () => DeleteStackCommand,
      DeleteStackInstancesCommand: () => DeleteStackInstancesCommand,
      DeleteStackSetCommand: () => DeleteStackSetCommand,
      DeletionMode: () => DeletionMode,
      DeprecatedStatus: () => DeprecatedStatus,
      DeregisterTypeCommand: () => DeregisterTypeCommand,
      DescribeAccountLimitsCommand: () => DescribeAccountLimitsCommand,
      DescribeChangeSetCommand: () => DescribeChangeSetCommand,
      DescribeChangeSetHooksCommand: () => DescribeChangeSetHooksCommand,
      DescribeGeneratedTemplateCommand: () => DescribeGeneratedTemplateCommand,
      DescribeOrganizationsAccessCommand: () => DescribeOrganizationsAccessCommand,
      DescribePublisherCommand: () => DescribePublisherCommand,
      DescribeResourceScanCommand: () => DescribeResourceScanCommand,
      DescribeStackDriftDetectionStatusCommand: () => DescribeStackDriftDetectionStatusCommand,
      DescribeStackEventsCommand: () => DescribeStackEventsCommand,
      DescribeStackInstanceCommand: () => DescribeStackInstanceCommand,
      DescribeStackResourceCommand: () => DescribeStackResourceCommand,
      DescribeStackResourceDriftsCommand: () => DescribeStackResourceDriftsCommand,
      DescribeStackResourcesCommand: () => DescribeStackResourcesCommand,
      DescribeStackSetCommand: () => DescribeStackSetCommand,
      DescribeStackSetOperationCommand: () => DescribeStackSetOperationCommand,
      DescribeStacksCommand: () => DescribeStacksCommand2,
      DescribeTypeCommand: () => DescribeTypeCommand,
      DescribeTypeRegistrationCommand: () => DescribeTypeRegistrationCommand,
      DetailedStatus: () => DetailedStatus,
      DetectStackDriftCommand: () => DetectStackDriftCommand,
      DetectStackResourceDriftCommand: () => DetectStackResourceDriftCommand,
      DetectStackSetDriftCommand: () => DetectStackSetDriftCommand,
      DifferenceType: () => DifferenceType,
      EstimateTemplateCostCommand: () => EstimateTemplateCostCommand,
      EvaluationType: () => EvaluationType,
      ExecuteChangeSetCommand: () => ExecuteChangeSetCommand,
      ExecutionStatus: () => ExecutionStatus,
      GeneratedTemplateDeletionPolicy: () => GeneratedTemplateDeletionPolicy,
      GeneratedTemplateNotFoundException: () => GeneratedTemplateNotFoundException,
      GeneratedTemplateResourceStatus: () => GeneratedTemplateResourceStatus,
      GeneratedTemplateStatus: () => GeneratedTemplateStatus,
      GeneratedTemplateUpdateReplacePolicy: () => GeneratedTemplateUpdateReplacePolicy,
      GetGeneratedTemplateCommand: () => GetGeneratedTemplateCommand,
      GetStackPolicyCommand: () => GetStackPolicyCommand,
      GetTemplateCommand: () => GetTemplateCommand,
      GetTemplateSummaryCommand: () => GetTemplateSummaryCommand,
      HandlerErrorCode: () => HandlerErrorCode,
      HookFailureMode: () => HookFailureMode,
      HookInvocationPoint: () => HookInvocationPoint,
      HookResultNotFoundException: () => HookResultNotFoundException,
      HookStatus: () => HookStatus,
      HookTargetType: () => HookTargetType,
      IdentityProvider: () => IdentityProvider,
      ImportStacksToStackSetCommand: () => ImportStacksToStackSetCommand,
      InsufficientCapabilitiesException: () => InsufficientCapabilitiesException,
      InvalidChangeSetStatusException: () => InvalidChangeSetStatusException,
      InvalidOperationException: () => InvalidOperationException,
      InvalidStateTransitionException: () => InvalidStateTransitionException,
      LimitExceededException: () => LimitExceededException,
      ListChangeSetsCommand: () => ListChangeSetsCommand,
      ListExportsCommand: () => ListExportsCommand,
      ListGeneratedTemplatesCommand: () => ListGeneratedTemplatesCommand,
      ListHookResultsCommand: () => ListHookResultsCommand,
      ListHookResultsTargetType: () => ListHookResultsTargetType,
      ListImportsCommand: () => ListImportsCommand,
      ListResourceScanRelatedResourcesCommand: () => ListResourceScanRelatedResourcesCommand,
      ListResourceScanResourcesCommand: () => ListResourceScanResourcesCommand,
      ListResourceScansCommand: () => ListResourceScansCommand,
      ListStackInstanceResourceDriftsCommand: () => ListStackInstanceResourceDriftsCommand,
      ListStackInstancesCommand: () => ListStackInstancesCommand,
      ListStackResourcesCommand: () => ListStackResourcesCommand,
      ListStackSetAutoDeploymentTargetsCommand: () => ListStackSetAutoDeploymentTargetsCommand,
      ListStackSetOperationResultsCommand: () => ListStackSetOperationResultsCommand,
      ListStackSetOperationsCommand: () => ListStackSetOperationsCommand,
      ListStackSetsCommand: () => ListStackSetsCommand,
      ListStacksCommand: () => ListStacksCommand,
      ListTypeRegistrationsCommand: () => ListTypeRegistrationsCommand,
      ListTypeVersionsCommand: () => ListTypeVersionsCommand,
      ListTypesCommand: () => ListTypesCommand,
      NameAlreadyExistsException: () => NameAlreadyExistsException,
      OnFailure: () => OnFailure,
      OnStackFailure: () => OnStackFailure,
      OperationIdAlreadyExistsException: () => OperationIdAlreadyExistsException,
      OperationInProgressException: () => OperationInProgressException,
      OperationNotFoundException: () => OperationNotFoundException,
      OperationResultFilterName: () => OperationResultFilterName,
      OperationStatus: () => OperationStatus,
      OperationStatusCheckFailedException: () => OperationStatusCheckFailedException,
      OrganizationStatus: () => OrganizationStatus,
      PermissionModels: () => PermissionModels,
      PolicyAction: () => PolicyAction,
      ProvisioningType: () => ProvisioningType,
      PublishTypeCommand: () => PublishTypeCommand,
      PublisherStatus: () => PublisherStatus,
      RecordHandlerProgressCommand: () => RecordHandlerProgressCommand,
      RegionConcurrencyType: () => RegionConcurrencyType,
      RegisterPublisherCommand: () => RegisterPublisherCommand,
      RegisterTypeCommand: () => RegisterTypeCommand,
      RegistrationStatus: () => RegistrationStatus,
      RegistryType: () => RegistryType,
      Replacement: () => Replacement,
      RequiresRecreation: () => RequiresRecreation,
      ResourceAttribute: () => ResourceAttribute,
      ResourceScanInProgressException: () => ResourceScanInProgressException,
      ResourceScanLimitExceededException: () => ResourceScanLimitExceededException,
      ResourceScanNotFoundException: () => ResourceScanNotFoundException,
      ResourceScanStatus: () => ResourceScanStatus,
      ResourceSignalStatus: () => ResourceSignalStatus,
      ResourceStatus: () => ResourceStatus,
      RollbackStackCommand: () => RollbackStackCommand,
      SetStackPolicyCommand: () => SetStackPolicyCommand,
      SetTypeConfigurationCommand: () => SetTypeConfigurationCommand,
      SetTypeDefaultVersionCommand: () => SetTypeDefaultVersionCommand,
      SignalResourceCommand: () => SignalResourceCommand,
      StackDriftDetectionStatus: () => StackDriftDetectionStatus,
      StackDriftStatus: () => StackDriftStatus,
      StackInstanceDetailedStatus: () => StackInstanceDetailedStatus,
      StackInstanceFilterName: () => StackInstanceFilterName,
      StackInstanceNotFoundException: () => StackInstanceNotFoundException,
      StackInstanceStatus: () => StackInstanceStatus,
      StackNotFoundException: () => StackNotFoundException,
      StackResourceDriftStatus: () => StackResourceDriftStatus,
      StackSetDriftDetectionStatus: () => StackSetDriftDetectionStatus,
      StackSetDriftStatus: () => StackSetDriftStatus,
      StackSetNotEmptyException: () => StackSetNotEmptyException,
      StackSetNotFoundException: () => StackSetNotFoundException,
      StackSetOperationAction: () => StackSetOperationAction,
      StackSetOperationResultStatus: () => StackSetOperationResultStatus,
      StackSetOperationStatus: () => StackSetOperationStatus,
      StackSetStatus: () => StackSetStatus,
      StackStatus: () => StackStatus,
      StaleRequestException: () => StaleRequestException,
      StartResourceScanCommand: () => StartResourceScanCommand,
      StopStackSetOperationCommand: () => StopStackSetOperationCommand,
      TemplateFormat: () => TemplateFormat,
      TemplateStage: () => TemplateStage,
      TestTypeCommand: () => TestTypeCommand,
      ThirdPartyType: () => ThirdPartyType,
      TokenAlreadyExistsException: () => TokenAlreadyExistsException,
      TypeConfigurationNotFoundException: () => TypeConfigurationNotFoundException,
      TypeNotFoundException: () => TypeNotFoundException,
      TypeTestsStatus: () => TypeTestsStatus,
      UpdateGeneratedTemplateCommand: () => UpdateGeneratedTemplateCommand,
      UpdateStackCommand: () => UpdateStackCommand,
      UpdateStackInstancesCommand: () => UpdateStackInstancesCommand,
      UpdateStackSetCommand: () => UpdateStackSetCommand,
      UpdateTerminationProtectionCommand: () => UpdateTerminationProtectionCommand,
      ValidateTemplateCommand: () => ValidateTemplateCommand,
      VersionBump: () => VersionBump,
      Visibility: () => Visibility,
      WarningType: () => WarningType,
      __Client: () => import_smithy_client4.Client,
      paginateDescribeAccountLimits: () => paginateDescribeAccountLimits,
      paginateDescribeStackEvents: () => paginateDescribeStackEvents,
      paginateDescribeStackResourceDrifts: () => paginateDescribeStackResourceDrifts,
      paginateDescribeStacks: () => paginateDescribeStacks,
      paginateListChangeSets: () => paginateListChangeSets,
      paginateListExports: () => paginateListExports,
      paginateListGeneratedTemplates: () => paginateListGeneratedTemplates,
      paginateListImports: () => paginateListImports,
      paginateListResourceScanRelatedResources: () => paginateListResourceScanRelatedResources,
      paginateListResourceScanResources: () => paginateListResourceScanResources,
      paginateListResourceScans: () => paginateListResourceScans,
      paginateListStackInstances: () => paginateListStackInstances,
      paginateListStackResources: () => paginateListStackResources,
      paginateListStackSetOperationResults: () => paginateListStackSetOperationResults,
      paginateListStackSetOperations: () => paginateListStackSetOperations,
      paginateListStackSets: () => paginateListStackSets,
      paginateListStacks: () => paginateListStacks,
      paginateListTypeRegistrations: () => paginateListTypeRegistrations,
      paginateListTypeVersions: () => paginateListTypeVersions,
      paginateListTypes: () => paginateListTypes,
      waitForChangeSetCreateComplete: () => waitForChangeSetCreateComplete,
      waitForStackCreateComplete: () => waitForStackCreateComplete,
      waitForStackDeleteComplete: () => waitForStackDeleteComplete,
      waitForStackExists: () => waitForStackExists,
      waitForStackImportComplete: () => waitForStackImportComplete,
      waitForStackRollbackComplete: () => waitForStackRollbackComplete,
      waitForStackUpdateComplete: () => waitForStackUpdateComplete,
      waitForTypeRegistrationComplete: () => waitForTypeRegistrationComplete,
      waitUntilChangeSetCreateComplete: () => waitUntilChangeSetCreateComplete,
      waitUntilStackCreateComplete: () => waitUntilStackCreateComplete,
      waitUntilStackDeleteComplete: () => waitUntilStackDeleteComplete,
      waitUntilStackExists: () => waitUntilStackExists,
      waitUntilStackImportComplete: () => waitUntilStackImportComplete,
      waitUntilStackRollbackComplete: () => waitUntilStackRollbackComplete,
      waitUntilStackUpdateComplete: () => waitUntilStackUpdateComplete,
      waitUntilTypeRegistrationComplete: () => waitUntilTypeRegistrationComplete
    });
    module.exports = __toCommonJS2(src_exports);
    var import_middleware_host_header = require_dist_cjs24();
    var import_middleware_logger = require_dist_cjs25();
    var import_middleware_recursion_detection = require_dist_cjs26();
    var import_middleware_user_agent = require_dist_cjs32();
    var import_config_resolver = require_dist_cjs33();
    var import_core3 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var import_middleware_content_length = require_dist_cjs35();
    var import_middleware_endpoint = require_dist_cjs44();
    var import_middleware_retry = require_dist_cjs38();
    var import_httpAuthSchemeProvider = require_httpAuthSchemeProvider6();
    var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "cloudformation"
      };
    }, "resolveClientEndpointParameters");
    var commonParams = {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
    var import_runtimeConfig = require_runtimeConfig6();
    var import_region_config_resolver = require_dist_cjs53();
    var import_protocol_http8 = require_dist_cjs2();
    var import_smithy_client4 = require_dist_cjs19();
    var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
      let _credentials = runtimeConfig.credentials;
      return {
        setHttpAuthScheme(httpAuthScheme) {
          const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
          if (index === -1) {
            _httpAuthSchemes.push(httpAuthScheme);
          } else {
            _httpAuthSchemes.splice(index, 1, httpAuthScheme);
          }
        },
        httpAuthSchemes() {
          return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
          _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
          return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
          _credentials = credentials;
        },
        credentials() {
          return _credentials;
        }
      };
    }, "getHttpAuthExtensionConfiguration");
    var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
      return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials()
      };
    }, "resolveHttpAuthRuntimeConfig");
    var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
    var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
      const extensionConfiguration = {
        ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, import_smithy_client4.getDefaultExtensionConfiguration)(runtimeConfig)),
        ...asPartial((0, import_protocol_http8.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
        ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
      };
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return {
        ...runtimeConfig,
        ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
        ...(0, import_smithy_client4.resolveDefaultRuntimeConfig)(extensionConfiguration),
        ...(0, import_protocol_http8.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
        ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
      };
    }, "resolveRuntimeExtensions");
    var _CloudFormationClient = class _CloudFormationClient extends import_smithy_client4.Client {
      constructor(...[configuration]) {
        const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_1);
        const _config_3 = (0, import_middleware_retry.resolveRetryConfig)(_config_2);
        const _config_4 = (0, import_config_resolver.resolveRegionConfig)(_config_3);
        const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_5);
        const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
        super(_config_8);
        this.config = _config_8;
        this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use(
          (0, import_core3.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
            httpAuthSchemeParametersProvider: import_httpAuthSchemeProvider.defaultCloudFormationHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new import_core3.DefaultIdentityProviderConfig({
              "aws.auth#sigv4": config.credentials
            })
          })
        );
        this.middlewareStack.use((0, import_core3.getHttpSigningPlugin)(this.config));
      }
      /**
       * Destroy underlying resources, like sockets. It's usually not necessary to do this.
       * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
       * Otherwise, sockets might stay open for quite a long time before the server terminates them.
       */
      destroy() {
        super.destroy();
      }
    };
    __name(_CloudFormationClient, "CloudFormationClient");
    var CloudFormationClient2 = _CloudFormationClient;
    var import_middleware_serde2 = require_dist_cjs5();
    var import_core22 = (init_dist_es2(), __toCommonJS(dist_es_exports2));
    var import_uuid = (init_esm_node(), __toCommonJS(esm_node_exports));
    var _CloudFormationServiceException = class _CloudFormationServiceException2 extends import_smithy_client4.ServiceException {
      /**
       * @internal
       */
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _CloudFormationServiceException2.prototype);
      }
    };
    __name(_CloudFormationServiceException, "CloudFormationServiceException");
    var CloudFormationServiceException = _CloudFormationServiceException;
    var AccountFilterType = {
      DIFFERENCE: "DIFFERENCE",
      INTERSECTION: "INTERSECTION",
      NONE: "NONE",
      UNION: "UNION"
    };
    var AccountGateStatus = {
      FAILED: "FAILED",
      SKIPPED: "SKIPPED",
      SUCCEEDED: "SUCCEEDED"
    };
    var _InvalidOperationException = class _InvalidOperationException2 extends CloudFormationServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidOperationException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidOperationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidOperationException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_InvalidOperationException, "InvalidOperationException");
    var InvalidOperationException = _InvalidOperationException;
    var _OperationNotFoundException = class _OperationNotFoundException2 extends CloudFormationServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "OperationNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "OperationNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _OperationNotFoundException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_OperationNotFoundException, "OperationNotFoundException");
    var OperationNotFoundException = _OperationNotFoundException;
    var ThirdPartyType = {
      HOOK: "HOOK",
      MODULE: "MODULE",
      RESOURCE: "RESOURCE"
    };
    var VersionBump = {
      MAJOR: "MAJOR",
      MINOR: "MINOR"
    };
    var _CFNRegistryException = class _CFNRegistryException2 extends CloudFormationServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "CFNRegistryException",
          $fault: "client",
          ...opts
        });
        this.name = "CFNRegistryException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _CFNRegistryException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_CFNRegistryException, "CFNRegistryException");
    var CFNRegistryException = _CFNRegistryException;
    var _TypeNotFoundException = class _TypeNotFoundException2 extends CloudFormationServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "TypeNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "TypeNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TypeNotFoundException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_TypeNotFoundException, "TypeNotFoundException");
    var TypeNotFoundException = _TypeNotFoundException;
    var _AlreadyExistsException = class _AlreadyExistsException2 extends CloudFormationServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "AlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "AlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AlreadyExistsException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_AlreadyExistsException, "AlreadyExistsException");
    var AlreadyExistsException = _AlreadyExistsException;
    var AttributeChangeType = {
      Add: "Add",
      Modify: "Modify",
      Remove: "Remove"
    };
    var _TypeConfigurationNotFoundException = class _TypeConfigurationNotFoundException2 extends CloudFormationServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "TypeConfigurationNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "TypeConfigurationNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TypeConfigurationNotFoundException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_TypeConfigurationNotFoundException, "TypeConfigurationNotFoundException");
    var TypeConfigurationNotFoundException = _TypeConfigurationNotFoundException;
    var CallAs = {
      DELEGATED_ADMIN: "DELEGATED_ADMIN",
      SELF: "SELF"
    };
    var _TokenAlreadyExistsException = class _TokenAlreadyExistsException2 extends CloudFormationServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "TokenAlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "TokenAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TokenAlreadyExistsException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_TokenAlreadyExistsException, "TokenAlreadyExistsException");
    var TokenAlreadyExistsException = _TokenAlreadyExistsException;
    var Capability = {
      CAPABILITY_AUTO_EXPAND: "CAPABILITY_AUTO_EXPAND",
      CAPABILITY_IAM: "CAPABILITY_IAM",
      CAPABILITY_NAMED_IAM: "CAPABILITY_NAMED_IAM"
    };
    var Category = {
      ACTIVATED: "ACTIVATED",
      AWS_TYPES: "AWS_TYPES",
      REGISTERED: "REGISTERED",
      THIRD_PARTY: "THIRD_PARTY"
    };
    var ChangeAction = {
      Add: "Add",
      Dynamic: "Dynamic",
      Import: "Import",
      Modify: "Modify",
      Remove: "Remove"
    };
    var ChangeSource = {
      Automatic: "Automatic",
      DirectModification: "DirectModification",
      ParameterReference: "ParameterReference",
      ResourceAttribute: "ResourceAttribute",
      ResourceReference: "ResourceReference"
    };
    var EvaluationType = {
      Dynamic: "Dynamic",
      Static: "Static"
    };
    var ResourceAttribute = {
      CreationPolicy: "CreationPolicy",
      DeletionPolicy: "DeletionPolicy",
      Metadata: "Metadata",
      Properties: "Properties",
      Tags: "Tags",
      UpdatePolicy: "UpdatePolicy",
      UpdateReplacePolicy: "UpdateReplacePolicy"
    };
    var RequiresRecreation = {
      Always: "Always",
      Conditionally: "Conditionally",
      Never: "Never"
    };
    var PolicyAction = {
      Delete: "Delete",
      ReplaceAndDelete: "ReplaceAndDelete",
      ReplaceAndRetain: "ReplaceAndRetain",
      ReplaceAndSnapshot: "ReplaceAndSnapshot",
      Retain: "Retain",
      Snapshot: "Snapshot"
    };
    var Replacement = {
      Conditional: "Conditional",
      False: "False",
      True: "True"
    };
    var ChangeType = {
      Resource: "Resource"
    };
    var HookFailureMode = {
      FAIL: "FAIL",
      WARN: "WARN"
    };
    var HookInvocationPoint = {
      PRE_PROVISION: "PRE_PROVISION"
    };
    var HookTargetType = {
      RESOURCE: "RESOURCE"
    };
    var ChangeSetHooksStatus = {
      PLANNED: "PLANNED",
      PLANNING: "PLANNING",
      UNAVAILABLE: "UNAVAILABLE"
    };
    var _ChangeSetNotFoundException = class _ChangeSetNotFoundException2 extends CloudFormationServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ChangeSetNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ChangeSetNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ChangeSetNotFoundException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_ChangeSetNotFoundException, "ChangeSetNotFoundException");
    var ChangeSetNotFoundException = _ChangeSetNotFoundException;
    var ChangeSetStatus = {
      CREATE_COMPLETE: "CREATE_COMPLETE",
      CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS",
      CREATE_PENDING: "CREATE_PENDING",
      DELETE_COMPLETE: "DELETE_COMPLETE",
      DELETE_FAILED: "DELETE_FAILED",
      DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS",
      DELETE_PENDING: "DELETE_PENDING",
      FAILED: "FAILED"
    };
    var ExecutionStatus = {
      AVAILABLE: "AVAILABLE",
      EXECUTE_COMPLETE: "EXECUTE_COMPLETE",
      EXECUTE_FAILED: "EXECUTE_FAILED",
      EXECUTE_IN_PROGRESS: "EXECUTE_IN_PROGRESS",
      OBSOLETE: "OBSOLETE",
      UNAVAILABLE: "UNAVAILABLE"
    };
    var ChangeSetType = {
      CREATE: "CREATE",
      IMPORT: "IMPORT",
      UPDATE: "UPDATE"
    };
    var OnStackFailure = {
      DELETE: "DELETE",
      DO_NOTHING: "DO_NOTHING",
      ROLLBACK: "ROLLBACK"
    };
    var _InsufficientCapabilitiesException = class _InsufficientCapabilitiesException2 extends CloudFormationServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InsufficientCapabilitiesException",
          $fault: "client",
          ...opts
        });
        this.name = "InsufficientCapabilitiesException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InsufficientCapabilitiesException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_InsufficientCapabilitiesException, "InsufficientCapabilitiesException");
    var InsufficientCapabilitiesException = _InsufficientCapabilitiesException;
    var _LimitExceededException = class _LimitExceededException2 extends CloudFormationServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "LimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _LimitExceededException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_LimitExceededException, "LimitExceededException");
    var LimitExceededException = _LimitExceededException;
    var _ConcurrentResourcesLimitExceededException = class _ConcurrentResourcesLimitExceededException2 extends CloudFormationServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ConcurrentResourcesLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "ConcurrentResourcesLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ConcurrentResourcesLimitExceededException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_ConcurrentResourcesLimitExceededException, "ConcurrentResourcesLimitExceededException");
    var ConcurrentResourcesLimitExceededException = _ConcurrentResourcesLimitExceededException;
    var GeneratedTemplateDeletionPolicy = {
      DELETE: "DELETE",
      RETAIN: "RETAIN"
    };
    var GeneratedTemplateUpdateReplacePolicy = {
      DELETE: "DELETE",
      RETAIN: "RETAIN"
    };
    var OnFailure = {
      DELETE: "DELETE",
      DO_NOTHING: "DO_NOTHING",
      ROLLBACK: "ROLLBACK"
    };
    var ConcurrencyMode = {
      SOFT_FAILURE_TOLERANCE: "SOFT_FAILURE_TOLERANCE",
      STRICT_FAILURE_TOLERANCE: "STRICT_FAILURE_TOLERANCE"
    };
    var RegionConcurrencyType = {
      PARALLEL: "PARALLEL",
      SEQUENTIAL: "SEQUENTIAL"
    };
    var _OperationIdAlreadyExistsException = class _OperationIdAlreadyExistsException2 extends CloudFormationServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "OperationIdAlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "OperationIdAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _OperationIdAlreadyExistsException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_OperationIdAlreadyExistsException, "OperationIdAlreadyExistsException");
    var OperationIdAlreadyExistsException = _OperationIdAlreadyExistsException;
    var _OperationInProgressException = class _OperationInProgressException2 extends CloudFormationServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "OperationInProgressException",
          $fault: "client",
          ...opts
        });
        this.name = "OperationInProgressException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _OperationInProgressException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_OperationInProgressException, "OperationInProgressException");
    var OperationInProgressException = _OperationInProgressException;
    var _StackSetNotFoundException = class _StackSetNotFoundException2 extends CloudFormationServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "StackSetNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "StackSetNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _StackSetNotFoundException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_StackSetNotFoundException, "StackSetNotFoundException");
    var StackSetNotFoundException = _StackSetNotFoundException;
    var _StaleRequestException = class _StaleRequestException2 extends CloudFormationServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "StaleRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "StaleRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _StaleRequestException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_StaleRequestException, "StaleRequestException");
    var StaleRequestException = _StaleRequestException;
    var _CreatedButModifiedException = class _CreatedButModifiedException2 extends CloudFormationServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "CreatedButModifiedException",
          $fault: "client",
          ...opts
        });
        this.name = "CreatedButModifiedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _CreatedButModifiedException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_CreatedButModifiedException, "CreatedButModifiedException");
    var CreatedButModifiedException = _CreatedButModifiedException;
    var PermissionModels = {
      SELF_MANAGED: "SELF_MANAGED",
      SERVICE_MANAGED: "SERVICE_MANAGED"
    };
    var _NameAlreadyExistsException = class _NameAlreadyExistsException2 extends CloudFormationServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "NameAlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "NameAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _NameAlreadyExistsException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_NameAlreadyExistsException, "NameAlreadyExistsException");
    var NameAlreadyExistsException = _NameAlreadyExistsException;
    var _InvalidChangeSetStatusException = class _InvalidChangeSetStatusException2 extends CloudFormationServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidChangeSetStatusException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidChangeSetStatusException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidChangeSetStatusException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_InvalidChangeSetStatusException, "InvalidChangeSetStatusException");
    var InvalidChangeSetStatusException = _InvalidChangeSetStatusException;
    var _GeneratedTemplateNotFoundException = class _GeneratedTemplateNotFoundException2 extends CloudFormationServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "GeneratedTemplateNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "GeneratedTemplateNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _GeneratedTemplateNotFoundException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_GeneratedTemplateNotFoundException, "GeneratedTemplateNotFoundException");
    var GeneratedTemplateNotFoundException = _GeneratedTemplateNotFoundException;
    var DeletionMode = {
      FORCE_DELETE_STACK: "FORCE_DELETE_STACK",
      STANDARD: "STANDARD"
    };
    var _StackSetNotEmptyException = class _StackSetNotEmptyException2 extends CloudFormationServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "StackSetNotEmptyException",
          $fault: "client",
          ...opts
        });
        this.name = "StackSetNotEmptyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _StackSetNotEmptyException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_StackSetNotEmptyException, "StackSetNotEmptyException");
    var StackSetNotEmptyException = _StackSetNotEmptyException;
    var RegistryType = {
      HOOK: "HOOK",
      MODULE: "MODULE",
      RESOURCE: "RESOURCE"
    };
    var GeneratedTemplateResourceStatus = {
      COMPLETE: "COMPLETE",
      FAILED: "FAILED",
      IN_PROGRESS: "IN_PROGRESS",
      PENDING: "PENDING"
    };
    var WarningType = {
      MUTUALLY_EXCLUSIVE_PROPERTIES: "MUTUALLY_EXCLUSIVE_PROPERTIES",
      MUTUALLY_EXCLUSIVE_TYPES: "MUTUALLY_EXCLUSIVE_TYPES",
      UNSUPPORTED_PROPERTIES: "UNSUPPORTED_PROPERTIES"
    };
    var GeneratedTemplateStatus = {
      COMPLETE: "COMPLETE",
      CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS",
      CREATE_PENDING: "CREATE_PENDING",
      DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS",
      DELETE_PENDING: "DELETE_PENDING",
      FAILED: "FAILED",
      UPDATE_IN_PROGRESS: "UPDATE_IN_PROGRESS",
      UPDATE_PENDING: "UPDATE_PENDING"
    };
    var OrganizationStatus = {
      DISABLED: "DISABLED",
      DISABLED_PERMANENTLY: "DISABLED_PERMANENTLY",
      ENABLED: "ENABLED"
    };
    var IdentityProvider = {
      AWS_Marketplace: "AWS_Marketplace",
      Bitbucket: "Bitbucket",
      GitHub: "GitHub"
    };
    var PublisherStatus = {
      UNVERIFIED: "UNVERIFIED",
      VERIFIED: "VERIFIED"
    };
    var ResourceScanStatus = {
      COMPLETE: "COMPLETE",
      EXPIRED: "EXPIRED",
      FAILED: "FAILED",
      IN_PROGRESS: "IN_PROGRESS"
    };
    var _ResourceScanNotFoundException = class _ResourceScanNotFoundException2 extends CloudFormationServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ResourceScanNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceScanNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceScanNotFoundException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_ResourceScanNotFoundException, "ResourceScanNotFoundException");
    var ResourceScanNotFoundException = _ResourceScanNotFoundException;
    var StackDriftDetectionStatus = {
      DETECTION_COMPLETE: "DETECTION_COMPLETE",
      DETECTION_FAILED: "DETECTION_FAILED",
      DETECTION_IN_PROGRESS: "DETECTION_IN_PROGRESS"
    };
    var StackDriftStatus = {
      DRIFTED: "DRIFTED",
      IN_SYNC: "IN_SYNC",
      NOT_CHECKED: "NOT_CHECKED",
      UNKNOWN: "UNKNOWN"
    };
    var DetailedStatus = {
      CONFIGURATION_COMPLETE: "CONFIGURATION_COMPLETE",
      VALIDATION_FAILED: "VALIDATION_FAILED"
    };
    var HookStatus = {
      HOOK_COMPLETE_FAILED: "HOOK_COMPLETE_FAILED",
      HOOK_COMPLETE_SUCCEEDED: "HOOK_COMPLETE_SUCCEEDED",
      HOOK_FAILED: "HOOK_FAILED",
      HOOK_IN_PROGRESS: "HOOK_IN_PROGRESS"
    };
    var ResourceStatus = {
      CREATE_COMPLETE: "CREATE_COMPLETE",
      CREATE_FAILED: "CREATE_FAILED",
      CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS",
      DELETE_COMPLETE: "DELETE_COMPLETE",
      DELETE_FAILED: "DELETE_FAILED",
      DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS",
      DELETE_SKIPPED: "DELETE_SKIPPED",
      IMPORT_COMPLETE: "IMPORT_COMPLETE",
      IMPORT_FAILED: "IMPORT_FAILED",
      IMPORT_IN_PROGRESS: "IMPORT_IN_PROGRESS",
      IMPORT_ROLLBACK_COMPLETE: "IMPORT_ROLLBACK_COMPLETE",
      IMPORT_ROLLBACK_FAILED: "IMPORT_ROLLBACK_FAILED",
      IMPORT_ROLLBACK_IN_PROGRESS: "IMPORT_ROLLBACK_IN_PROGRESS",
      ROLLBACK_COMPLETE: "ROLLBACK_COMPLETE",
      ROLLBACK_FAILED: "ROLLBACK_FAILED",
      ROLLBACK_IN_PROGRESS: "ROLLBACK_IN_PROGRESS",
      UPDATE_COMPLETE: "UPDATE_COMPLETE",
      UPDATE_FAILED: "UPDATE_FAILED",
      UPDATE_IN_PROGRESS: "UPDATE_IN_PROGRESS",
      UPDATE_ROLLBACK_COMPLETE: "UPDATE_ROLLBACK_COMPLETE",
      UPDATE_ROLLBACK_FAILED: "UPDATE_ROLLBACK_FAILED",
      UPDATE_ROLLBACK_IN_PROGRESS: "UPDATE_ROLLBACK_IN_PROGRESS"
    };
    var StackInstanceDetailedStatus = {
      CANCELLED: "CANCELLED",
      FAILED: "FAILED",
      FAILED_IMPORT: "FAILED_IMPORT",
      INOPERABLE: "INOPERABLE",
      PENDING: "PENDING",
      RUNNING: "RUNNING",
      SKIPPED_SUSPENDED_ACCOUNT: "SKIPPED_SUSPENDED_ACCOUNT",
      SUCCEEDED: "SUCCEEDED"
    };
    var StackInstanceStatus = {
      CURRENT: "CURRENT",
      INOPERABLE: "INOPERABLE",
      OUTDATED: "OUTDATED"
    };
    var _StackInstanceNotFoundException = class _StackInstanceNotFoundException2 extends CloudFormationServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "StackInstanceNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "StackInstanceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _StackInstanceNotFoundException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_StackInstanceNotFoundException, "StackInstanceNotFoundException");
    var StackInstanceNotFoundException = _StackInstanceNotFoundException;
    var StackResourceDriftStatus = {
      DELETED: "DELETED",
      IN_SYNC: "IN_SYNC",
      MODIFIED: "MODIFIED",
      NOT_CHECKED: "NOT_CHECKED"
    };
    var DifferenceType = {
      ADD: "ADD",
      NOT_EQUAL: "NOT_EQUAL",
      REMOVE: "REMOVE"
    };
    var StackStatus = {
      CREATE_COMPLETE: "CREATE_COMPLETE",
      CREATE_FAILED: "CREATE_FAILED",
      CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS",
      DELETE_COMPLETE: "DELETE_COMPLETE",
      DELETE_FAILED: "DELETE_FAILED",
      DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS",
      IMPORT_COMPLETE: "IMPORT_COMPLETE",
      IMPORT_IN_PROGRESS: "IMPORT_IN_PROGRESS",
      IMPORT_ROLLBACK_COMPLETE: "IMPORT_ROLLBACK_COMPLETE",
      IMPORT_ROLLBACK_FAILED: "IMPORT_ROLLBACK_FAILED",
      IMPORT_ROLLBACK_IN_PROGRESS: "IMPORT_ROLLBACK_IN_PROGRESS",
      REVIEW_IN_PROGRESS: "REVIEW_IN_PROGRESS",
      ROLLBACK_COMPLETE: "ROLLBACK_COMPLETE",
      ROLLBACK_FAILED: "ROLLBACK_FAILED",
      ROLLBACK_IN_PROGRESS: "ROLLBACK_IN_PROGRESS",
      UPDATE_COMPLETE: "UPDATE_COMPLETE",
      UPDATE_COMPLETE_CLEANUP_IN_PROGRESS: "UPDATE_COMPLETE_CLEANUP_IN_PROGRESS",
      UPDATE_FAILED: "UPDATE_FAILED",
      UPDATE_IN_PROGRESS: "UPDATE_IN_PROGRESS",
      UPDATE_ROLLBACK_COMPLETE: "UPDATE_ROLLBACK_COMPLETE",
      UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS: "UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS",
      UPDATE_ROLLBACK_FAILED: "UPDATE_ROLLBACK_FAILED",
      UPDATE_ROLLBACK_IN_PROGRESS: "UPDATE_ROLLBACK_IN_PROGRESS"
    };
    var StackSetDriftDetectionStatus = {
      COMPLETED: "COMPLETED",
      FAILED: "FAILED",
      IN_PROGRESS: "IN_PROGRESS",
      PARTIAL_SUCCESS: "PARTIAL_SUCCESS",
      STOPPED: "STOPPED"
    };
    var StackSetDriftStatus = {
      DRIFTED: "DRIFTED",
      IN_SYNC: "IN_SYNC",
      NOT_CHECKED: "NOT_CHECKED"
    };
    var StackSetStatus = {
      ACTIVE: "ACTIVE",
      DELETED: "DELETED"
    };
    var StackSetOperationAction = {
      CREATE: "CREATE",
      DELETE: "DELETE",
      DETECT_DRIFT: "DETECT_DRIFT",
      UPDATE: "UPDATE"
    };
    var StackSetOperationStatus = {
      FAILED: "FAILED",
      QUEUED: "QUEUED",
      RUNNING: "RUNNING",
      STOPPED: "STOPPED",
      STOPPING: "STOPPING",
      SUCCEEDED: "SUCCEEDED"
    };
    var DeprecatedStatus = {
      DEPRECATED: "DEPRECATED",
      LIVE: "LIVE"
    };
    var ProvisioningType = {
      FULLY_MUTABLE: "FULLY_MUTABLE",
      IMMUTABLE: "IMMUTABLE",
      NON_PROVISIONABLE: "NON_PROVISIONABLE"
    };
    var TypeTestsStatus = {
      FAILED: "FAILED",
      IN_PROGRESS: "IN_PROGRESS",
      NOT_TESTED: "NOT_TESTED",
      PASSED: "PASSED"
    };
    var Visibility = {
      PRIVATE: "PRIVATE",
      PUBLIC: "PUBLIC"
    };
    var RegistrationStatus = {
      COMPLETE: "COMPLETE",
      FAILED: "FAILED",
      IN_PROGRESS: "IN_PROGRESS"
    };
    var TemplateFormat = {
      JSON: "JSON",
      YAML: "YAML"
    };
    var TemplateStage = {
      Original: "Original",
      Processed: "Processed"
    };
    var _StackNotFoundException = class _StackNotFoundException2 extends CloudFormationServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "StackNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "StackNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _StackNotFoundException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_StackNotFoundException, "StackNotFoundException");
    var StackNotFoundException = _StackNotFoundException;
    var _HookResultNotFoundException = class _HookResultNotFoundException2 extends CloudFormationServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "HookResultNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "HookResultNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _HookResultNotFoundException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_HookResultNotFoundException, "HookResultNotFoundException");
    var HookResultNotFoundException = _HookResultNotFoundException;
    var ListHookResultsTargetType = {
      CHANGE_SET: "CHANGE_SET",
      CLOUD_CONTROL: "CLOUD_CONTROL",
      RESOURCE: "RESOURCE",
      STACK: "STACK"
    };
    var _ResourceScanInProgressException = class _ResourceScanInProgressException2 extends CloudFormationServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ResourceScanInProgressException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceScanInProgressException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceScanInProgressException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_ResourceScanInProgressException, "ResourceScanInProgressException");
    var ResourceScanInProgressException = _ResourceScanInProgressException;
    var StackInstanceFilterName = {
      DETAILED_STATUS: "DETAILED_STATUS",
      DRIFT_STATUS: "DRIFT_STATUS",
      LAST_OPERATION_ID: "LAST_OPERATION_ID"
    };
    var OperationResultFilterName = {
      OPERATION_RESULT_STATUS: "OPERATION_RESULT_STATUS"
    };
    var StackSetOperationResultStatus = {
      CANCELLED: "CANCELLED",
      FAILED: "FAILED",
      PENDING: "PENDING",
      RUNNING: "RUNNING",
      SUCCEEDED: "SUCCEEDED"
    };
    var _InvalidStateTransitionException = class _InvalidStateTransitionException2 extends CloudFormationServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "InvalidStateTransitionException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidStateTransitionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidStateTransitionException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_InvalidStateTransitionException, "InvalidStateTransitionException");
    var InvalidStateTransitionException = _InvalidStateTransitionException;
    var _OperationStatusCheckFailedException = class _OperationStatusCheckFailedException2 extends CloudFormationServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "OperationStatusCheckFailedException",
          $fault: "client",
          ...opts
        });
        this.name = "OperationStatusCheckFailedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _OperationStatusCheckFailedException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_OperationStatusCheckFailedException, "OperationStatusCheckFailedException");
    var OperationStatusCheckFailedException = _OperationStatusCheckFailedException;
    var OperationStatus = {
      FAILED: "FAILED",
      IN_PROGRESS: "IN_PROGRESS",
      PENDING: "PENDING",
      SUCCESS: "SUCCESS"
    };
    var HandlerErrorCode = {
      AccessDenied: "AccessDenied",
      AlreadyExists: "AlreadyExists",
      GeneralServiceException: "GeneralServiceException",
      HandlerInternalFailure: "HandlerInternalFailure",
      InternalFailure: "InternalFailure",
      InvalidCredentials: "InvalidCredentials",
      InvalidRequest: "InvalidRequest",
      InvalidTypeConfiguration: "InvalidTypeConfiguration",
      NetworkFailure: "NetworkFailure",
      NonCompliant: "NonCompliant",
      NotFound: "NotFound",
      NotUpdatable: "NotUpdatable",
      ResourceConflict: "ResourceConflict",
      ServiceInternalError: "ServiceInternalError",
      ServiceLimitExceeded: "ServiceLimitExceeded",
      ServiceTimeout: "NotStabilized",
      Throttling: "Throttling",
      Unknown: "Unknown",
      UnsupportedTarget: "UnsupportedTarget"
    };
    var ResourceSignalStatus = {
      FAILURE: "FAILURE",
      SUCCESS: "SUCCESS"
    };
    var _ResourceScanLimitExceededException = class _ResourceScanLimitExceededException2 extends CloudFormationServiceException {
      /**
       * @internal
       */
      constructor(opts) {
        super({
          name: "ResourceScanLimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceScanLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceScanLimitExceededException2.prototype);
        this.Message = opts.Message;
      }
    };
    __name(_ResourceScanLimitExceededException, "ResourceScanLimitExceededException");
    var ResourceScanLimitExceededException = _ResourceScanLimitExceededException;
    var se_ActivateOrganizationsAccessCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ActivateOrganizationsAccessInput(input, context),
        [_A]: _AOA,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ActivateOrganizationsAccessCommand");
    var se_ActivateTypeCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ActivateTypeInput(input, context),
        [_A]: _AT,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ActivateTypeCommand");
    var se_BatchDescribeTypeConfigurationsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_BatchDescribeTypeConfigurationsInput(input, context),
        [_A]: _BDTC,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_BatchDescribeTypeConfigurationsCommand");
    var se_CancelUpdateStackCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_CancelUpdateStackInput(input, context),
        [_A]: _CUS,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_CancelUpdateStackCommand");
    var se_ContinueUpdateRollbackCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ContinueUpdateRollbackInput(input, context),
        [_A]: _CUR,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ContinueUpdateRollbackCommand");
    var se_CreateChangeSetCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_CreateChangeSetInput(input, context),
        [_A]: _CCS,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_CreateChangeSetCommand");
    var se_CreateGeneratedTemplateCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_CreateGeneratedTemplateInput(input, context),
        [_A]: _CGT,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_CreateGeneratedTemplateCommand");
    var se_CreateStackCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_CreateStackInput(input, context),
        [_A]: _CS,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_CreateStackCommand");
    var se_CreateStackInstancesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_CreateStackInstancesInput(input, context),
        [_A]: _CSI,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_CreateStackInstancesCommand");
    var se_CreateStackSetCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_CreateStackSetInput(input, context),
        [_A]: _CSS,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_CreateStackSetCommand");
    var se_DeactivateOrganizationsAccessCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DeactivateOrganizationsAccessInput(input, context),
        [_A]: _DOA,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DeactivateOrganizationsAccessCommand");
    var se_DeactivateTypeCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DeactivateTypeInput(input, context),
        [_A]: _DT,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DeactivateTypeCommand");
    var se_DeleteChangeSetCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DeleteChangeSetInput(input, context),
        [_A]: _DCS,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DeleteChangeSetCommand");
    var se_DeleteGeneratedTemplateCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DeleteGeneratedTemplateInput(input, context),
        [_A]: _DGT,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DeleteGeneratedTemplateCommand");
    var se_DeleteStackCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DeleteStackInput(input, context),
        [_A]: _DS,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DeleteStackCommand");
    var se_DeleteStackInstancesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DeleteStackInstancesInput(input, context),
        [_A]: _DSI,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DeleteStackInstancesCommand");
    var se_DeleteStackSetCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DeleteStackSetInput(input, context),
        [_A]: _DSS,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DeleteStackSetCommand");
    var se_DeregisterTypeCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DeregisterTypeInput(input, context),
        [_A]: _DTe,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DeregisterTypeCommand");
    var se_DescribeAccountLimitsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DescribeAccountLimitsInput(input, context),
        [_A]: _DAL,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeAccountLimitsCommand");
    var se_DescribeChangeSetCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DescribeChangeSetInput(input, context),
        [_A]: _DCSe,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeChangeSetCommand");
    var se_DescribeChangeSetHooksCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DescribeChangeSetHooksInput(input, context),
        [_A]: _DCSH,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeChangeSetHooksCommand");
    var se_DescribeGeneratedTemplateCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DescribeGeneratedTemplateInput(input, context),
        [_A]: _DGTe,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeGeneratedTemplateCommand");
    var se_DescribeOrganizationsAccessCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DescribeOrganizationsAccessInput(input, context),
        [_A]: _DOAe,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeOrganizationsAccessCommand");
    var se_DescribePublisherCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DescribePublisherInput(input, context),
        [_A]: _DP,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribePublisherCommand");
    var se_DescribeResourceScanCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DescribeResourceScanInput(input, context),
        [_A]: _DRS,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeResourceScanCommand");
    var se_DescribeStackDriftDetectionStatusCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DescribeStackDriftDetectionStatusInput(input, context),
        [_A]: _DSDDS,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeStackDriftDetectionStatusCommand");
    var se_DescribeStackEventsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DescribeStackEventsInput(input, context),
        [_A]: _DSE,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeStackEventsCommand");
    var se_DescribeStackInstanceCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DescribeStackInstanceInput(input, context),
        [_A]: _DSIe,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeStackInstanceCommand");
    var se_DescribeStackResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DescribeStackResourceInput(input, context),
        [_A]: _DSR,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeStackResourceCommand");
    var se_DescribeStackResourceDriftsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DescribeStackResourceDriftsInput(input, context),
        [_A]: _DSRD,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeStackResourceDriftsCommand");
    var se_DescribeStackResourcesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DescribeStackResourcesInput(input, context),
        [_A]: _DSRe,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeStackResourcesCommand");
    var se_DescribeStacksCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DescribeStacksInput(input, context),
        [_A]: _DSe,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeStacksCommand");
    var se_DescribeStackSetCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DescribeStackSetInput(input, context),
        [_A]: _DSSe,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeStackSetCommand");
    var se_DescribeStackSetOperationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DescribeStackSetOperationInput(input, context),
        [_A]: _DSSO,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeStackSetOperationCommand");
    var se_DescribeTypeCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DescribeTypeInput(input, context),
        [_A]: _DTes,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeTypeCommand");
    var se_DescribeTypeRegistrationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DescribeTypeRegistrationInput(input, context),
        [_A]: _DTR,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DescribeTypeRegistrationCommand");
    var se_DetectStackDriftCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DetectStackDriftInput(input, context),
        [_A]: _DSD,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DetectStackDriftCommand");
    var se_DetectStackResourceDriftCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DetectStackResourceDriftInput(input, context),
        [_A]: _DSRDe,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DetectStackResourceDriftCommand");
    var se_DetectStackSetDriftCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DetectStackSetDriftInput(input, context),
        [_A]: _DSSD,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_DetectStackSetDriftCommand");
    var se_EstimateTemplateCostCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_EstimateTemplateCostInput(input, context),
        [_A]: _ETC,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_EstimateTemplateCostCommand");
    var se_ExecuteChangeSetCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ExecuteChangeSetInput(input, context),
        [_A]: _ECS,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ExecuteChangeSetCommand");
    var se_GetGeneratedTemplateCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetGeneratedTemplateInput(input, context),
        [_A]: _GGT,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetGeneratedTemplateCommand");
    var se_GetStackPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetStackPolicyInput(input, context),
        [_A]: _GSP,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetStackPolicyCommand");
    var se_GetTemplateCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetTemplateInput(input, context),
        [_A]: _GT,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetTemplateCommand");
    var se_GetTemplateSummaryCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetTemplateSummaryInput(input, context),
        [_A]: _GTS,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_GetTemplateSummaryCommand");
    var se_ImportStacksToStackSetCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ImportStacksToStackSetInput(input, context),
        [_A]: _ISTSS,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ImportStacksToStackSetCommand");
    var se_ListChangeSetsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ListChangeSetsInput(input, context),
        [_A]: _LCS,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListChangeSetsCommand");
    var se_ListExportsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ListExportsInput(input, context),
        [_A]: _LE,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListExportsCommand");
    var se_ListGeneratedTemplatesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ListGeneratedTemplatesInput(input, context),
        [_A]: _LGT,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListGeneratedTemplatesCommand");
    var se_ListHookResultsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ListHookResultsInput(input, context),
        [_A]: _LHR,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListHookResultsCommand");
    var se_ListImportsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ListImportsInput(input, context),
        [_A]: _LI,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListImportsCommand");
    var se_ListResourceScanRelatedResourcesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ListResourceScanRelatedResourcesInput(input, context),
        [_A]: _LRSRR,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListResourceScanRelatedResourcesCommand");
    var se_ListResourceScanResourcesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ListResourceScanResourcesInput(input, context),
        [_A]: _LRSR,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListResourceScanResourcesCommand");
    var se_ListResourceScansCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ListResourceScansInput(input, context),
        [_A]: _LRS,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListResourceScansCommand");
    var se_ListStackInstanceResourceDriftsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ListStackInstanceResourceDriftsInput(input, context),
        [_A]: _LSIRD,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListStackInstanceResourceDriftsCommand");
    var se_ListStackInstancesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ListStackInstancesInput(input, context),
        [_A]: _LSI,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListStackInstancesCommand");
    var se_ListStackResourcesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ListStackResourcesInput(input, context),
        [_A]: _LSR,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListStackResourcesCommand");
    var se_ListStacksCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ListStacksInput(input, context),
        [_A]: _LS,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListStacksCommand");
    var se_ListStackSetAutoDeploymentTargetsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ListStackSetAutoDeploymentTargetsInput(input, context),
        [_A]: _LSSADT,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListStackSetAutoDeploymentTargetsCommand");
    var se_ListStackSetOperationResultsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ListStackSetOperationResultsInput(input, context),
        [_A]: _LSSOR,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListStackSetOperationResultsCommand");
    var se_ListStackSetOperationsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ListStackSetOperationsInput(input, context),
        [_A]: _LSSO,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListStackSetOperationsCommand");
    var se_ListStackSetsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ListStackSetsInput(input, context),
        [_A]: _LSS,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListStackSetsCommand");
    var se_ListTypeRegistrationsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ListTypeRegistrationsInput(input, context),
        [_A]: _LTR,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListTypeRegistrationsCommand");
    var se_ListTypesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ListTypesInput(input, context),
        [_A]: _LT,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListTypesCommand");
    var se_ListTypeVersionsCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ListTypeVersionsInput(input, context),
        [_A]: _LTV,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ListTypeVersionsCommand");
    var se_PublishTypeCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_PublishTypeInput(input, context),
        [_A]: _PT,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_PublishTypeCommand");
    var se_RecordHandlerProgressCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_RecordHandlerProgressInput(input, context),
        [_A]: _RHP,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_RecordHandlerProgressCommand");
    var se_RegisterPublisherCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_RegisterPublisherInput(input, context),
        [_A]: _RP,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_RegisterPublisherCommand");
    var se_RegisterTypeCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_RegisterTypeInput(input, context),
        [_A]: _RT,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_RegisterTypeCommand");
    var se_RollbackStackCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_RollbackStackInput(input, context),
        [_A]: _RS,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_RollbackStackCommand");
    var se_SetStackPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_SetStackPolicyInput(input, context),
        [_A]: _SSP,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_SetStackPolicyCommand");
    var se_SetTypeConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_SetTypeConfigurationInput(input, context),
        [_A]: _STC,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_SetTypeConfigurationCommand");
    var se_SetTypeDefaultVersionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_SetTypeDefaultVersionInput(input, context),
        [_A]: _STDV,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_SetTypeDefaultVersionCommand");
    var se_SignalResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_SignalResourceInput(input, context),
        [_A]: _SR,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_SignalResourceCommand");
    var se_StartResourceScanCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_StartResourceScanInput(input, context),
        [_A]: _SRS,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_StartResourceScanCommand");
    var se_StopStackSetOperationCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_StopStackSetOperationInput(input, context),
        [_A]: _SSSO,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_StopStackSetOperationCommand");
    var se_TestTypeCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_TestTypeInput(input, context),
        [_A]: _TT,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_TestTypeCommand");
    var se_UpdateGeneratedTemplateCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_UpdateGeneratedTemplateInput(input, context),
        [_A]: _UGT,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_UpdateGeneratedTemplateCommand");
    var se_UpdateStackCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_UpdateStackInput(input, context),
        [_A]: _US,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_UpdateStackCommand");
    var se_UpdateStackInstancesCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_UpdateStackInstancesInput(input, context),
        [_A]: _USI,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_UpdateStackInstancesCommand");
    var se_UpdateStackSetCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_UpdateStackSetInput(input, context),
        [_A]: _USS,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_UpdateStackSetCommand");
    var se_UpdateTerminationProtectionCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_UpdateTerminationProtectionInput(input, context),
        [_A]: _UTP,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_UpdateTerminationProtectionCommand");
    var se_ValidateTemplateCommand = /* @__PURE__ */ __name(async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_ValidateTemplateInput(input, context),
        [_A]: _VT,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    }, "se_ValidateTemplateCommand");
    var de_ActivateOrganizationsAccessCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_ActivateOrganizationsAccessOutput(data.ActivateOrganizationsAccessResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ActivateOrganizationsAccessCommand");
    var de_ActivateTypeCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_ActivateTypeOutput(data.ActivateTypeResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ActivateTypeCommand");
    var de_BatchDescribeTypeConfigurationsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_BatchDescribeTypeConfigurationsOutput(data.BatchDescribeTypeConfigurationsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_BatchDescribeTypeConfigurationsCommand");
    var de_CancelUpdateStackCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      await (0, import_smithy_client4.collectBody)(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return response;
    }, "de_CancelUpdateStackCommand");
    var de_ContinueUpdateRollbackCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_ContinueUpdateRollbackOutput(data.ContinueUpdateRollbackResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ContinueUpdateRollbackCommand");
    var de_CreateChangeSetCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_CreateChangeSetOutput(data.CreateChangeSetResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_CreateChangeSetCommand");
    var de_CreateGeneratedTemplateCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_CreateGeneratedTemplateOutput(data.CreateGeneratedTemplateResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_CreateGeneratedTemplateCommand");
    var de_CreateStackCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_CreateStackOutput(data.CreateStackResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_CreateStackCommand");
    var de_CreateStackInstancesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_CreateStackInstancesOutput(data.CreateStackInstancesResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_CreateStackInstancesCommand");
    var de_CreateStackSetCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_CreateStackSetOutput(data.CreateStackSetResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_CreateStackSetCommand");
    var de_DeactivateOrganizationsAccessCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_DeactivateOrganizationsAccessOutput(data.DeactivateOrganizationsAccessResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DeactivateOrganizationsAccessCommand");
    var de_DeactivateTypeCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_DeactivateTypeOutput(data.DeactivateTypeResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DeactivateTypeCommand");
    var de_DeleteChangeSetCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_DeleteChangeSetOutput(data.DeleteChangeSetResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DeleteChangeSetCommand");
    var de_DeleteGeneratedTemplateCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      await (0, import_smithy_client4.collectBody)(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return response;
    }, "de_DeleteGeneratedTemplateCommand");
    var de_DeleteStackCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      await (0, import_smithy_client4.collectBody)(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return response;
    }, "de_DeleteStackCommand");
    var de_DeleteStackInstancesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_DeleteStackInstancesOutput(data.DeleteStackInstancesResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DeleteStackInstancesCommand");
    var de_DeleteStackSetCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_DeleteStackSetOutput(data.DeleteStackSetResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DeleteStackSetCommand");
    var de_DeregisterTypeCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_DeregisterTypeOutput(data.DeregisterTypeResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DeregisterTypeCommand");
    var de_DescribeAccountLimitsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_DescribeAccountLimitsOutput(data.DescribeAccountLimitsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeAccountLimitsCommand");
    var de_DescribeChangeSetCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_DescribeChangeSetOutput(data.DescribeChangeSetResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeChangeSetCommand");
    var de_DescribeChangeSetHooksCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_DescribeChangeSetHooksOutput(data.DescribeChangeSetHooksResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeChangeSetHooksCommand");
    var de_DescribeGeneratedTemplateCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_DescribeGeneratedTemplateOutput(data.DescribeGeneratedTemplateResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeGeneratedTemplateCommand");
    var de_DescribeOrganizationsAccessCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_DescribeOrganizationsAccessOutput(data.DescribeOrganizationsAccessResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeOrganizationsAccessCommand");
    var de_DescribePublisherCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_DescribePublisherOutput(data.DescribePublisherResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribePublisherCommand");
    var de_DescribeResourceScanCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_DescribeResourceScanOutput(data.DescribeResourceScanResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeResourceScanCommand");
    var de_DescribeStackDriftDetectionStatusCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_DescribeStackDriftDetectionStatusOutput(data.DescribeStackDriftDetectionStatusResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeStackDriftDetectionStatusCommand");
    var de_DescribeStackEventsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_DescribeStackEventsOutput(data.DescribeStackEventsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeStackEventsCommand");
    var de_DescribeStackInstanceCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_DescribeStackInstanceOutput(data.DescribeStackInstanceResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeStackInstanceCommand");
    var de_DescribeStackResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_DescribeStackResourceOutput(data.DescribeStackResourceResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeStackResourceCommand");
    var de_DescribeStackResourceDriftsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_DescribeStackResourceDriftsOutput(data.DescribeStackResourceDriftsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeStackResourceDriftsCommand");
    var de_DescribeStackResourcesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_DescribeStackResourcesOutput(data.DescribeStackResourcesResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeStackResourcesCommand");
    var de_DescribeStacksCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_DescribeStacksOutput(data.DescribeStacksResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeStacksCommand");
    var de_DescribeStackSetCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_DescribeStackSetOutput(data.DescribeStackSetResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeStackSetCommand");
    var de_DescribeStackSetOperationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_DescribeStackSetOperationOutput(data.DescribeStackSetOperationResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeStackSetOperationCommand");
    var de_DescribeTypeCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_DescribeTypeOutput(data.DescribeTypeResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeTypeCommand");
    var de_DescribeTypeRegistrationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_DescribeTypeRegistrationOutput(data.DescribeTypeRegistrationResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DescribeTypeRegistrationCommand");
    var de_DetectStackDriftCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_DetectStackDriftOutput(data.DetectStackDriftResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DetectStackDriftCommand");
    var de_DetectStackResourceDriftCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_DetectStackResourceDriftOutput(data.DetectStackResourceDriftResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DetectStackResourceDriftCommand");
    var de_DetectStackSetDriftCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_DetectStackSetDriftOutput(data.DetectStackSetDriftResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_DetectStackSetDriftCommand");
    var de_EstimateTemplateCostCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_EstimateTemplateCostOutput(data.EstimateTemplateCostResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_EstimateTemplateCostCommand");
    var de_ExecuteChangeSetCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_ExecuteChangeSetOutput(data.ExecuteChangeSetResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ExecuteChangeSetCommand");
    var de_GetGeneratedTemplateCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_GetGeneratedTemplateOutput(data.GetGeneratedTemplateResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetGeneratedTemplateCommand");
    var de_GetStackPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_GetStackPolicyOutput(data.GetStackPolicyResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetStackPolicyCommand");
    var de_GetTemplateCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_GetTemplateOutput(data.GetTemplateResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetTemplateCommand");
    var de_GetTemplateSummaryCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_GetTemplateSummaryOutput(data.GetTemplateSummaryResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_GetTemplateSummaryCommand");
    var de_ImportStacksToStackSetCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_ImportStacksToStackSetOutput(data.ImportStacksToStackSetResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ImportStacksToStackSetCommand");
    var de_ListChangeSetsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_ListChangeSetsOutput(data.ListChangeSetsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListChangeSetsCommand");
    var de_ListExportsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_ListExportsOutput(data.ListExportsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListExportsCommand");
    var de_ListGeneratedTemplatesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_ListGeneratedTemplatesOutput(data.ListGeneratedTemplatesResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListGeneratedTemplatesCommand");
    var de_ListHookResultsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_ListHookResultsOutput(data.ListHookResultsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListHookResultsCommand");
    var de_ListImportsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_ListImportsOutput(data.ListImportsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListImportsCommand");
    var de_ListResourceScanRelatedResourcesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_ListResourceScanRelatedResourcesOutput(data.ListResourceScanRelatedResourcesResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListResourceScanRelatedResourcesCommand");
    var de_ListResourceScanResourcesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_ListResourceScanResourcesOutput(data.ListResourceScanResourcesResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListResourceScanResourcesCommand");
    var de_ListResourceScansCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_ListResourceScansOutput(data.ListResourceScansResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListResourceScansCommand");
    var de_ListStackInstanceResourceDriftsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_ListStackInstanceResourceDriftsOutput(data.ListStackInstanceResourceDriftsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListStackInstanceResourceDriftsCommand");
    var de_ListStackInstancesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_ListStackInstancesOutput(data.ListStackInstancesResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListStackInstancesCommand");
    var de_ListStackResourcesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_ListStackResourcesOutput(data.ListStackResourcesResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListStackResourcesCommand");
    var de_ListStacksCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_ListStacksOutput(data.ListStacksResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListStacksCommand");
    var de_ListStackSetAutoDeploymentTargetsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_ListStackSetAutoDeploymentTargetsOutput(data.ListStackSetAutoDeploymentTargetsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListStackSetAutoDeploymentTargetsCommand");
    var de_ListStackSetOperationResultsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_ListStackSetOperationResultsOutput(data.ListStackSetOperationResultsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListStackSetOperationResultsCommand");
    var de_ListStackSetOperationsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_ListStackSetOperationsOutput(data.ListStackSetOperationsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListStackSetOperationsCommand");
    var de_ListStackSetsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_ListStackSetsOutput(data.ListStackSetsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListStackSetsCommand");
    var de_ListTypeRegistrationsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_ListTypeRegistrationsOutput(data.ListTypeRegistrationsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListTypeRegistrationsCommand");
    var de_ListTypesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_ListTypesOutput(data.ListTypesResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListTypesCommand");
    var de_ListTypeVersionsCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_ListTypeVersionsOutput(data.ListTypeVersionsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ListTypeVersionsCommand");
    var de_PublishTypeCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_PublishTypeOutput(data.PublishTypeResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_PublishTypeCommand");
    var de_RecordHandlerProgressCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_RecordHandlerProgressOutput(data.RecordHandlerProgressResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_RecordHandlerProgressCommand");
    var de_RegisterPublisherCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_RegisterPublisherOutput(data.RegisterPublisherResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_RegisterPublisherCommand");
    var de_RegisterTypeCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_RegisterTypeOutput(data.RegisterTypeResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_RegisterTypeCommand");
    var de_RollbackStackCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_RollbackStackOutput(data.RollbackStackResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_RollbackStackCommand");
    var de_SetStackPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      await (0, import_smithy_client4.collectBody)(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return response;
    }, "de_SetStackPolicyCommand");
    var de_SetTypeConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_SetTypeConfigurationOutput(data.SetTypeConfigurationResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_SetTypeConfigurationCommand");
    var de_SetTypeDefaultVersionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_SetTypeDefaultVersionOutput(data.SetTypeDefaultVersionResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_SetTypeDefaultVersionCommand");
    var de_SignalResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      await (0, import_smithy_client4.collectBody)(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return response;
    }, "de_SignalResourceCommand");
    var de_StartResourceScanCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_StartResourceScanOutput(data.StartResourceScanResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_StartResourceScanCommand");
    var de_StopStackSetOperationCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_StopStackSetOperationOutput(data.StopStackSetOperationResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_StopStackSetOperationCommand");
    var de_TestTypeCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_TestTypeOutput(data.TestTypeResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_TestTypeCommand");
    var de_UpdateGeneratedTemplateCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_UpdateGeneratedTemplateOutput(data.UpdateGeneratedTemplateResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_UpdateGeneratedTemplateCommand");
    var de_UpdateStackCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_UpdateStackOutput(data.UpdateStackResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_UpdateStackCommand");
    var de_UpdateStackInstancesCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_UpdateStackInstancesOutput(data.UpdateStackInstancesResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_UpdateStackInstancesCommand");
    var de_UpdateStackSetCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_UpdateStackSetOutput(data.UpdateStackSetResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_UpdateStackSetCommand");
    var de_UpdateTerminationProtectionCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_UpdateTerminationProtectionOutput(data.UpdateTerminationProtectionResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_UpdateTerminationProtectionCommand");
    var de_ValidateTemplateCommand = /* @__PURE__ */ __name(async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const data = await (0, import_core22.parseXmlBody)(output.body, context);
      let contents = {};
      contents = de_ValidateTemplateOutput(data.ValidateTemplateResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return response;
    }, "de_ValidateTemplateCommand");
    var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await (0, import_core22.parseXmlErrorBody)(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidOperationException":
        case "com.amazonaws.cloudformation#InvalidOperationException":
          throw await de_InvalidOperationExceptionRes(parsedOutput, context);
        case "OperationNotFoundException":
        case "com.amazonaws.cloudformation#OperationNotFoundException":
          throw await de_OperationNotFoundExceptionRes(parsedOutput, context);
        case "CFNRegistryException":
        case "com.amazonaws.cloudformation#CFNRegistryException":
          throw await de_CFNRegistryExceptionRes(parsedOutput, context);
        case "TypeNotFoundException":
        case "com.amazonaws.cloudformation#TypeNotFoundException":
          throw await de_TypeNotFoundExceptionRes(parsedOutput, context);
        case "TypeConfigurationNotFoundException":
        case "com.amazonaws.cloudformation#TypeConfigurationNotFoundException":
          throw await de_TypeConfigurationNotFoundExceptionRes(parsedOutput, context);
        case "TokenAlreadyExistsException":
        case "com.amazonaws.cloudformation#TokenAlreadyExistsException":
          throw await de_TokenAlreadyExistsExceptionRes(parsedOutput, context);
        case "AlreadyExistsException":
        case "com.amazonaws.cloudformation#AlreadyExistsException":
          throw await de_AlreadyExistsExceptionRes(parsedOutput, context);
        case "InsufficientCapabilitiesException":
        case "com.amazonaws.cloudformation#InsufficientCapabilitiesException":
          throw await de_InsufficientCapabilitiesExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.cloudformation#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ConcurrentResourcesLimitExceeded":
        case "com.amazonaws.cloudformation#ConcurrentResourcesLimitExceededException":
          throw await de_ConcurrentResourcesLimitExceededExceptionRes(parsedOutput, context);
        case "OperationIdAlreadyExistsException":
        case "com.amazonaws.cloudformation#OperationIdAlreadyExistsException":
          throw await de_OperationIdAlreadyExistsExceptionRes(parsedOutput, context);
        case "OperationInProgressException":
        case "com.amazonaws.cloudformation#OperationInProgressException":
          throw await de_OperationInProgressExceptionRes(parsedOutput, context);
        case "StackSetNotFoundException":
        case "com.amazonaws.cloudformation#StackSetNotFoundException":
          throw await de_StackSetNotFoundExceptionRes(parsedOutput, context);
        case "StaleRequestException":
        case "com.amazonaws.cloudformation#StaleRequestException":
          throw await de_StaleRequestExceptionRes(parsedOutput, context);
        case "CreatedButModifiedException":
        case "com.amazonaws.cloudformation#CreatedButModifiedException":
          throw await de_CreatedButModifiedExceptionRes(parsedOutput, context);
        case "NameAlreadyExistsException":
        case "com.amazonaws.cloudformation#NameAlreadyExistsException":
          throw await de_NameAlreadyExistsExceptionRes(parsedOutput, context);
        case "InvalidChangeSetStatus":
        case "com.amazonaws.cloudformation#InvalidChangeSetStatusException":
          throw await de_InvalidChangeSetStatusExceptionRes(parsedOutput, context);
        case "GeneratedTemplateNotFound":
        case "com.amazonaws.cloudformation#GeneratedTemplateNotFoundException":
          throw await de_GeneratedTemplateNotFoundExceptionRes(parsedOutput, context);
        case "StackSetNotEmptyException":
        case "com.amazonaws.cloudformation#StackSetNotEmptyException":
          throw await de_StackSetNotEmptyExceptionRes(parsedOutput, context);
        case "ChangeSetNotFound":
        case "com.amazonaws.cloudformation#ChangeSetNotFoundException":
          throw await de_ChangeSetNotFoundExceptionRes(parsedOutput, context);
        case "ResourceScanNotFound":
        case "com.amazonaws.cloudformation#ResourceScanNotFoundException":
          throw await de_ResourceScanNotFoundExceptionRes(parsedOutput, context);
        case "StackInstanceNotFoundException":
        case "com.amazonaws.cloudformation#StackInstanceNotFoundException":
          throw await de_StackInstanceNotFoundExceptionRes(parsedOutput, context);
        case "StackNotFoundException":
        case "com.amazonaws.cloudformation#StackNotFoundException":
          throw await de_StackNotFoundExceptionRes(parsedOutput, context);
        case "HookResultNotFound":
        case "com.amazonaws.cloudformation#HookResultNotFoundException":
          throw await de_HookResultNotFoundExceptionRes(parsedOutput, context);
        case "ResourceScanInProgress":
        case "com.amazonaws.cloudformation#ResourceScanInProgressException":
          throw await de_ResourceScanInProgressExceptionRes(parsedOutput, context);
        case "ConditionalCheckFailed":
        case "com.amazonaws.cloudformation#OperationStatusCheckFailedException":
          throw await de_OperationStatusCheckFailedExceptionRes(parsedOutput, context);
        case "InvalidStateTransition":
        case "com.amazonaws.cloudformation#InvalidStateTransitionException":
          throw await de_InvalidStateTransitionExceptionRes(parsedOutput, context);
        case "ResourceScanLimitExceeded":
        case "com.amazonaws.cloudformation#ResourceScanLimitExceededException":
          throw await de_ResourceScanLimitExceededExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    }, "de_CommandError");
    var de_AlreadyExistsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_AlreadyExistsException(body.Error, context);
      const exception = new AlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, body);
    }, "de_AlreadyExistsExceptionRes");
    var de_CFNRegistryExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_CFNRegistryException(body.Error, context);
      const exception = new CFNRegistryException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, body);
    }, "de_CFNRegistryExceptionRes");
    var de_ChangeSetNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_ChangeSetNotFoundException(body.Error, context);
      const exception = new ChangeSetNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, body);
    }, "de_ChangeSetNotFoundExceptionRes");
    var de_ConcurrentResourcesLimitExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_ConcurrentResourcesLimitExceededException(body.Error, context);
      const exception = new ConcurrentResourcesLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, body);
    }, "de_ConcurrentResourcesLimitExceededExceptionRes");
    var de_CreatedButModifiedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_CreatedButModifiedException(body.Error, context);
      const exception = new CreatedButModifiedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, body);
    }, "de_CreatedButModifiedExceptionRes");
    var de_GeneratedTemplateNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_GeneratedTemplateNotFoundException(body.Error, context);
      const exception = new GeneratedTemplateNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, body);
    }, "de_GeneratedTemplateNotFoundExceptionRes");
    var de_HookResultNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_HookResultNotFoundException(body.Error, context);
      const exception = new HookResultNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, body);
    }, "de_HookResultNotFoundExceptionRes");
    var de_InsufficientCapabilitiesExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InsufficientCapabilitiesException(body.Error, context);
      const exception = new InsufficientCapabilitiesException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, body);
    }, "de_InsufficientCapabilitiesExceptionRes");
    var de_InvalidChangeSetStatusExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidChangeSetStatusException(body.Error, context);
      const exception = new InvalidChangeSetStatusException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, body);
    }, "de_InvalidChangeSetStatusExceptionRes");
    var de_InvalidOperationExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidOperationException(body.Error, context);
      const exception = new InvalidOperationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, body);
    }, "de_InvalidOperationExceptionRes");
    var de_InvalidStateTransitionExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidStateTransitionException(body.Error, context);
      const exception = new InvalidStateTransitionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, body);
    }, "de_InvalidStateTransitionExceptionRes");
    var de_LimitExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_LimitExceededException(body.Error, context);
      const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, body);
    }, "de_LimitExceededExceptionRes");
    var de_NameAlreadyExistsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_NameAlreadyExistsException(body.Error, context);
      const exception = new NameAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, body);
    }, "de_NameAlreadyExistsExceptionRes");
    var de_OperationIdAlreadyExistsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_OperationIdAlreadyExistsException(body.Error, context);
      const exception = new OperationIdAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, body);
    }, "de_OperationIdAlreadyExistsExceptionRes");
    var de_OperationInProgressExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_OperationInProgressException(body.Error, context);
      const exception = new OperationInProgressException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, body);
    }, "de_OperationInProgressExceptionRes");
    var de_OperationNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_OperationNotFoundException(body.Error, context);
      const exception = new OperationNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, body);
    }, "de_OperationNotFoundExceptionRes");
    var de_OperationStatusCheckFailedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_OperationStatusCheckFailedException(body.Error, context);
      const exception = new OperationStatusCheckFailedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, body);
    }, "de_OperationStatusCheckFailedExceptionRes");
    var de_ResourceScanInProgressExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_ResourceScanInProgressException(body.Error, context);
      const exception = new ResourceScanInProgressException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, body);
    }, "de_ResourceScanInProgressExceptionRes");
    var de_ResourceScanLimitExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_ResourceScanLimitExceededException(body.Error, context);
      const exception = new ResourceScanLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, body);
    }, "de_ResourceScanLimitExceededExceptionRes");
    var de_ResourceScanNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_ResourceScanNotFoundException(body.Error, context);
      const exception = new ResourceScanNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, body);
    }, "de_ResourceScanNotFoundExceptionRes");
    var de_StackInstanceNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_StackInstanceNotFoundException(body.Error, context);
      const exception = new StackInstanceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, body);
    }, "de_StackInstanceNotFoundExceptionRes");
    var de_StackNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_StackNotFoundException(body.Error, context);
      const exception = new StackNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, body);
    }, "de_StackNotFoundExceptionRes");
    var de_StackSetNotEmptyExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_StackSetNotEmptyException(body.Error, context);
      const exception = new StackSetNotEmptyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, body);
    }, "de_StackSetNotEmptyExceptionRes");
    var de_StackSetNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_StackSetNotFoundException(body.Error, context);
      const exception = new StackSetNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, body);
    }, "de_StackSetNotFoundExceptionRes");
    var de_StaleRequestExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_StaleRequestException(body.Error, context);
      const exception = new StaleRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, body);
    }, "de_StaleRequestExceptionRes");
    var de_TokenAlreadyExistsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_TokenAlreadyExistsException(body.Error, context);
      const exception = new TokenAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, body);
    }, "de_TokenAlreadyExistsExceptionRes");
    var de_TypeConfigurationNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_TypeConfigurationNotFoundException(body.Error, context);
      const exception = new TypeConfigurationNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, body);
    }, "de_TypeConfigurationNotFoundExceptionRes");
    var de_TypeNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_TypeNotFoundException(body.Error, context);
      const exception = new TypeNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, import_smithy_client4.decorateServiceException)(exception, body);
    }, "de_TypeNotFoundExceptionRes");
    var se_AccountList = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    }, "se_AccountList");
    var se_ActivateOrganizationsAccessInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      return entries;
    }, "se_ActivateOrganizationsAccessInput");
    var se_ActivateTypeInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_T] != null) {
        entries[_T] = input[_T];
      }
      if (input[_PTA] != null) {
        entries[_PTA] = input[_PTA];
      }
      if (input[_PI] != null) {
        entries[_PI] = input[_PI];
      }
      if (input[_TN] != null) {
        entries[_TN] = input[_TN];
      }
      if (input[_TNA] != null) {
        entries[_TNA] = input[_TNA];
      }
      if (input[_AU] != null) {
        entries[_AU] = input[_AU];
      }
      if (input[_LC] != null) {
        const memberEntries = se_LoggingConfig(input[_LC], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `LoggingConfig.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_ERA] != null) {
        entries[_ERA] = input[_ERA];
      }
      if (input[_VB] != null) {
        entries[_VB] = input[_VB];
      }
      if (input[_MV] != null) {
        entries[_MV] = input[_MV];
      }
      return entries;
    }, "se_ActivateTypeInput");
    var se_AutoDeployment = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_E] != null) {
        entries[_E] = input[_E];
      }
      if (input[_RSOAR] != null) {
        entries[_RSOAR] = input[_RSOAR];
      }
      return entries;
    }, "se_AutoDeployment");
    var se_BatchDescribeTypeConfigurationsInput = /* @__PURE__ */ __name((input, context) => {
      var _a;
      const entries = {};
      if (input[_TCI] != null) {
        const memberEntries = se_TypeConfigurationIdentifiers(input[_TCI], context);
        if (((_a = input[_TCI]) == null ? void 0 : _a.length) === 0) {
          entries.TypeConfigurationIdentifiers = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TypeConfigurationIdentifiers.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    }, "se_BatchDescribeTypeConfigurationsInput");
    var se_CancelUpdateStackInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_SN] != null) {
        entries[_SN] = input[_SN];
      }
      if (input[_CRT] != null) {
        entries[_CRT] = input[_CRT];
      }
      return entries;
    }, "se_CancelUpdateStackInput");
    var se_Capabilities = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    }, "se_Capabilities");
    var se_ContinueUpdateRollbackInput = /* @__PURE__ */ __name((input, context) => {
      var _a;
      const entries = {};
      if (input[_SN] != null) {
        entries[_SN] = input[_SN];
      }
      if (input[_RARN] != null) {
        entries[_RARN] = input[_RARN];
      }
      if (input[_RTS] != null) {
        const memberEntries = se_ResourcesToSkip(input[_RTS], context);
        if (((_a = input[_RTS]) == null ? void 0 : _a.length) === 0) {
          entries.ResourcesToSkip = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ResourcesToSkip.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_CRT] != null) {
        entries[_CRT] = input[_CRT];
      }
      return entries;
    }, "se_ContinueUpdateRollbackInput");
    var se_CreateChangeSetInput = /* @__PURE__ */ __name((input, context) => {
      var _a, _b, _c, _d, _e2, _f;
      const entries = {};
      if (input[_SN] != null) {
        entries[_SN] = input[_SN];
      }
      if (input[_TB] != null) {
        entries[_TB] = input[_TB];
      }
      if (input[_TURL] != null) {
        entries[_TURL] = input[_TURL];
      }
      if (input[_UPT] != null) {
        entries[_UPT] = input[_UPT];
      }
      if (input[_P] != null) {
        const memberEntries = se_Parameters(input[_P], context);
        if (((_a = input[_P]) == null ? void 0 : _a.length) === 0) {
          entries.Parameters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Parameters.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_C] != null) {
        const memberEntries = se_Capabilities(input[_C], context);
        if (((_b = input[_C]) == null ? void 0 : _b.length) === 0) {
          entries.Capabilities = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Capabilities.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_RTe] != null) {
        const memberEntries = se_ResourceTypes(input[_RTe], context);
        if (((_c = input[_RTe]) == null ? void 0 : _c.length) === 0) {
          entries.ResourceTypes = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ResourceTypes.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_RARN] != null) {
        entries[_RARN] = input[_RARN];
      }
      if (input[_RC] != null) {
        const memberEntries = se_RollbackConfiguration(input[_RC], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `RollbackConfiguration.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_NARN] != null) {
        const memberEntries = se_NotificationARNs(input[_NARN], context);
        if (((_d = input[_NARN]) == null ? void 0 : _d.length) === 0) {
          entries.NotificationARNs = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `NotificationARNs.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_Ta] != null) {
        const memberEntries = se_Tags(input[_Ta], context);
        if (((_e2 = input[_Ta]) == null ? void 0 : _e2.length) === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_CSN] != null) {
        entries[_CSN] = input[_CSN];
      }
      if (input[_CT] != null) {
        entries[_CT] = input[_CT];
      }
      if (input[_D] != null) {
        entries[_D] = input[_D];
      }
      if (input[_CST] != null) {
        entries[_CST] = input[_CST];
      }
      if (input[_RTI] != null) {
        const memberEntries = se_ResourcesToImport(input[_RTI], context);
        if (((_f = input[_RTI]) == null ? void 0 : _f.length) === 0) {
          entries.ResourcesToImport = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ResourcesToImport.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_INS] != null) {
        entries[_INS] = input[_INS];
      }
      if (input[_OSF] != null) {
        entries[_OSF] = input[_OSF];
      }
      if (input[_IER] != null) {
        entries[_IER] = input[_IER];
      }
      return entries;
    }, "se_CreateChangeSetInput");
    var se_CreateGeneratedTemplateInput = /* @__PURE__ */ __name((input, context) => {
      var _a;
      const entries = {};
      if (input[_R] != null) {
        const memberEntries = se_ResourceDefinitions(input[_R], context);
        if (((_a = input[_R]) == null ? void 0 : _a.length) === 0) {
          entries.Resources = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Resources.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_GTN] != null) {
        entries[_GTN] = input[_GTN];
      }
      if (input[_SN] != null) {
        entries[_SN] = input[_SN];
      }
      if (input[_TC] != null) {
        const memberEntries = se_TemplateConfiguration(input[_TC], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TemplateConfiguration.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    }, "se_CreateGeneratedTemplateInput");
    var se_CreateStackInput = /* @__PURE__ */ __name((input, context) => {
      var _a, _b, _c, _d, _e2;
      const entries = {};
      if (input[_SN] != null) {
        entries[_SN] = input[_SN];
      }
      if (input[_TB] != null) {
        entries[_TB] = input[_TB];
      }
      if (input[_TURL] != null) {
        entries[_TURL] = input[_TURL];
      }
      if (input[_P] != null) {
        const memberEntries = se_Parameters(input[_P], context);
        if (((_a = input[_P]) == null ? void 0 : _a.length) === 0) {
          entries.Parameters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Parameters.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_DR] != null) {
        entries[_DR] = input[_DR];
      }
      if (input[_RC] != null) {
        const memberEntries = se_RollbackConfiguration(input[_RC], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `RollbackConfiguration.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_TIM] != null) {
        entries[_TIM] = input[_TIM];
      }
      if (input[_NARN] != null) {
        const memberEntries = se_NotificationARNs(input[_NARN], context);
        if (((_b = input[_NARN]) == null ? void 0 : _b.length) === 0) {
          entries.NotificationARNs = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `NotificationARNs.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_C] != null) {
        const memberEntries = se_Capabilities(input[_C], context);
        if (((_c = input[_C]) == null ? void 0 : _c.length) === 0) {
          entries.Capabilities = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Capabilities.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_RTe] != null) {
        const memberEntries = se_ResourceTypes(input[_RTe], context);
        if (((_d = input[_RTe]) == null ? void 0 : _d.length) === 0) {
          entries.ResourceTypes = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ResourceTypes.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_RARN] != null) {
        entries[_RARN] = input[_RARN];
      }
      if (input[_OF] != null) {
        entries[_OF] = input[_OF];
      }
      if (input[_SPB] != null) {
        entries[_SPB] = input[_SPB];
      }
      if (input[_SPURL] != null) {
        entries[_SPURL] = input[_SPURL];
      }
      if (input[_Ta] != null) {
        const memberEntries = se_Tags(input[_Ta], context);
        if (((_e2 = input[_Ta]) == null ? void 0 : _e2.length) === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_CRT] != null) {
        entries[_CRT] = input[_CRT];
      }
      if (input[_ETP] != null) {
        entries[_ETP] = input[_ETP];
      }
      if (input[_REOC] != null) {
        entries[_REOC] = input[_REOC];
      }
      return entries;
    }, "se_CreateStackInput");
    var se_CreateStackInstancesInput = /* @__PURE__ */ __name((input, context) => {
      var _a, _b, _c;
      const entries = {};
      if (input[_SSN] != null) {
        entries[_SSN] = input[_SSN];
      }
      if (input[_Ac] != null) {
        const memberEntries = se_AccountList(input[_Ac], context);
        if (((_a = input[_Ac]) == null ? void 0 : _a.length) === 0) {
          entries.Accounts = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Accounts.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_DTep] != null) {
        const memberEntries = se_DeploymentTargets(input[_DTep], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `DeploymentTargets.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_Re] != null) {
        const memberEntries = se_RegionList(input[_Re], context);
        if (((_b = input[_Re]) == null ? void 0 : _b.length) === 0) {
          entries.Regions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Regions.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_PO] != null) {
        const memberEntries = se_Parameters(input[_PO], context);
        if (((_c = input[_PO]) == null ? void 0 : _c.length) === 0) {
          entries.ParameterOverrides = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ParameterOverrides.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_OP] != null) {
        const memberEntries = se_StackSetOperationPreferences(input[_OP], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `OperationPreferences.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_OI] === void 0) {
        input[_OI] = (0, import_uuid.v4)();
      }
      if (input[_OI] != null) {
        entries[_OI] = input[_OI];
      }
      if (input[_CA] != null) {
        entries[_CA] = input[_CA];
      }
      return entries;
    }, "se_CreateStackInstancesInput");
    var se_CreateStackSetInput = /* @__PURE__ */ __name((input, context) => {
      var _a, _b, _c;
      const entries = {};
      if (input[_SSN] != null) {
        entries[_SSN] = input[_SSN];
      }
      if (input[_D] != null) {
        entries[_D] = input[_D];
      }
      if (input[_TB] != null) {
        entries[_TB] = input[_TB];
      }
      if (input[_TURL] != null) {
        entries[_TURL] = input[_TURL];
      }
      if (input[_SI] != null) {
        entries[_SI] = input[_SI];
      }
      if (input[_P] != null) {
        const memberEntries = se_Parameters(input[_P], context);
        if (((_a = input[_P]) == null ? void 0 : _a.length) === 0) {
          entries.Parameters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Parameters.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_C] != null) {
        const memberEntries = se_Capabilities(input[_C], context);
        if (((_b = input[_C]) == null ? void 0 : _b.length) === 0) {
          entries.Capabilities = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Capabilities.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_Ta] != null) {
        const memberEntries = se_Tags(input[_Ta], context);
        if (((_c = input[_Ta]) == null ? void 0 : _c.length) === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_ARARN] != null) {
        entries[_ARARN] = input[_ARARN];
      }
      if (input[_ERN] != null) {
        entries[_ERN] = input[_ERN];
      }
      if (input[_PM] != null) {
        entries[_PM] = input[_PM];
      }
      if (input[_AD] != null) {
        const memberEntries = se_AutoDeployment(input[_AD], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `AutoDeployment.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_CA] != null) {
        entries[_CA] = input[_CA];
      }
      if (input[_CRT] === void 0) {
        input[_CRT] = (0, import_uuid.v4)();
      }
      if (input[_CRT] != null) {
        entries[_CRT] = input[_CRT];
      }
      if (input[_ME] != null) {
        const memberEntries = se_ManagedExecution(input[_ME], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ManagedExecution.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    }, "se_CreateStackSetInput");
    var se_DeactivateOrganizationsAccessInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      return entries;
    }, "se_DeactivateOrganizationsAccessInput");
    var se_DeactivateTypeInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_TN] != null) {
        entries[_TN] = input[_TN];
      }
      if (input[_T] != null) {
        entries[_T] = input[_T];
      }
      if (input[_Ar] != null) {
        entries[_Ar] = input[_Ar];
      }
      return entries;
    }, "se_DeactivateTypeInput");
    var se_DeleteChangeSetInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_CSN] != null) {
        entries[_CSN] = input[_CSN];
      }
      if (input[_SN] != null) {
        entries[_SN] = input[_SN];
      }
      return entries;
    }, "se_DeleteChangeSetInput");
    var se_DeleteGeneratedTemplateInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_GTN] != null) {
        entries[_GTN] = input[_GTN];
      }
      return entries;
    }, "se_DeleteGeneratedTemplateInput");
    var se_DeleteStackInput = /* @__PURE__ */ __name((input, context) => {
      var _a;
      const entries = {};
      if (input[_SN] != null) {
        entries[_SN] = input[_SN];
      }
      if (input[_RR] != null) {
        const memberEntries = se_RetainResources(input[_RR], context);
        if (((_a = input[_RR]) == null ? void 0 : _a.length) === 0) {
          entries.RetainResources = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `RetainResources.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_RARN] != null) {
        entries[_RARN] = input[_RARN];
      }
      if (input[_CRT] != null) {
        entries[_CRT] = input[_CRT];
      }
      if (input[_DM] != null) {
        entries[_DM] = input[_DM];
      }
      return entries;
    }, "se_DeleteStackInput");
    var se_DeleteStackInstancesInput = /* @__PURE__ */ __name((input, context) => {
      var _a, _b;
      const entries = {};
      if (input[_SSN] != null) {
        entries[_SSN] = input[_SSN];
      }
      if (input[_Ac] != null) {
        const memberEntries = se_AccountList(input[_Ac], context);
        if (((_a = input[_Ac]) == null ? void 0 : _a.length) === 0) {
          entries.Accounts = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Accounts.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_DTep] != null) {
        const memberEntries = se_DeploymentTargets(input[_DTep], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `DeploymentTargets.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_Re] != null) {
        const memberEntries = se_RegionList(input[_Re], context);
        if (((_b = input[_Re]) == null ? void 0 : _b.length) === 0) {
          entries.Regions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Regions.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_OP] != null) {
        const memberEntries = se_StackSetOperationPreferences(input[_OP], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `OperationPreferences.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_RSe] != null) {
        entries[_RSe] = input[_RSe];
      }
      if (input[_OI] === void 0) {
        input[_OI] = (0, import_uuid.v4)();
      }
      if (input[_OI] != null) {
        entries[_OI] = input[_OI];
      }
      if (input[_CA] != null) {
        entries[_CA] = input[_CA];
      }
      return entries;
    }, "se_DeleteStackInstancesInput");
    var se_DeleteStackSetInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_SSN] != null) {
        entries[_SSN] = input[_SSN];
      }
      if (input[_CA] != null) {
        entries[_CA] = input[_CA];
      }
      return entries;
    }, "se_DeleteStackSetInput");
    var se_DeploymentTargets = /* @__PURE__ */ __name((input, context) => {
      var _a, _b;
      const entries = {};
      if (input[_Ac] != null) {
        const memberEntries = se_AccountList(input[_Ac], context);
        if (((_a = input[_Ac]) == null ? void 0 : _a.length) === 0) {
          entries.Accounts = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Accounts.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_AUc] != null) {
        entries[_AUc] = input[_AUc];
      }
      if (input[_OUI] != null) {
        const memberEntries = se_OrganizationalUnitIdList(input[_OUI], context);
        if (((_b = input[_OUI]) == null ? void 0 : _b.length) === 0) {
          entries.OrganizationalUnitIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `OrganizationalUnitIds.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_AFT] != null) {
        entries[_AFT] = input[_AFT];
      }
      return entries;
    }, "se_DeploymentTargets");
    var se_DeregisterTypeInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_Ar] != null) {
        entries[_Ar] = input[_Ar];
      }
      if (input[_T] != null) {
        entries[_T] = input[_T];
      }
      if (input[_TN] != null) {
        entries[_TN] = input[_TN];
      }
      if (input[_VI] != null) {
        entries[_VI] = input[_VI];
      }
      return entries;
    }, "se_DeregisterTypeInput");
    var se_DescribeAccountLimitsInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_NT] != null) {
        entries[_NT] = input[_NT];
      }
      return entries;
    }, "se_DescribeAccountLimitsInput");
    var se_DescribeChangeSetHooksInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_CSN] != null) {
        entries[_CSN] = input[_CSN];
      }
      if (input[_SN] != null) {
        entries[_SN] = input[_SN];
      }
      if (input[_NT] != null) {
        entries[_NT] = input[_NT];
      }
      if (input[_LRI] != null) {
        entries[_LRI] = input[_LRI];
      }
      return entries;
    }, "se_DescribeChangeSetHooksInput");
    var se_DescribeChangeSetInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_CSN] != null) {
        entries[_CSN] = input[_CSN];
      }
      if (input[_SN] != null) {
        entries[_SN] = input[_SN];
      }
      if (input[_NT] != null) {
        entries[_NT] = input[_NT];
      }
      if (input[_IPV] != null) {
        entries[_IPV] = input[_IPV];
      }
      return entries;
    }, "se_DescribeChangeSetInput");
    var se_DescribeGeneratedTemplateInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_GTN] != null) {
        entries[_GTN] = input[_GTN];
      }
      return entries;
    }, "se_DescribeGeneratedTemplateInput");
    var se_DescribeOrganizationsAccessInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_CA] != null) {
        entries[_CA] = input[_CA];
      }
      return entries;
    }, "se_DescribeOrganizationsAccessInput");
    var se_DescribePublisherInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_PI] != null) {
        entries[_PI] = input[_PI];
      }
      return entries;
    }, "se_DescribePublisherInput");
    var se_DescribeResourceScanInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_RSI] != null) {
        entries[_RSI] = input[_RSI];
      }
      return entries;
    }, "se_DescribeResourceScanInput");
    var se_DescribeStackDriftDetectionStatusInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_SDDI] != null) {
        entries[_SDDI] = input[_SDDI];
      }
      return entries;
    }, "se_DescribeStackDriftDetectionStatusInput");
    var se_DescribeStackEventsInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_SN] != null) {
        entries[_SN] = input[_SN];
      }
      if (input[_NT] != null) {
        entries[_NT] = input[_NT];
      }
      return entries;
    }, "se_DescribeStackEventsInput");
    var se_DescribeStackInstanceInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_SSN] != null) {
        entries[_SSN] = input[_SSN];
      }
      if (input[_SIA] != null) {
        entries[_SIA] = input[_SIA];
      }
      if (input[_SIR] != null) {
        entries[_SIR] = input[_SIR];
      }
      if (input[_CA] != null) {
        entries[_CA] = input[_CA];
      }
      return entries;
    }, "se_DescribeStackInstanceInput");
    var se_DescribeStackResourceDriftsInput = /* @__PURE__ */ __name((input, context) => {
      var _a;
      const entries = {};
      if (input[_SN] != null) {
        entries[_SN] = input[_SN];
      }
      if (input[_SRDSF] != null) {
        const memberEntries = se_StackResourceDriftStatusFilters(input[_SRDSF], context);
        if (((_a = input[_SRDSF]) == null ? void 0 : _a.length) === 0) {
          entries.StackResourceDriftStatusFilters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `StackResourceDriftStatusFilters.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_NT] != null) {
        entries[_NT] = input[_NT];
      }
      if (input[_MR] != null) {
        entries[_MR] = input[_MR];
      }
      return entries;
    }, "se_DescribeStackResourceDriftsInput");
    var se_DescribeStackResourceInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_SN] != null) {
        entries[_SN] = input[_SN];
      }
      if (input[_LRI] != null) {
        entries[_LRI] = input[_LRI];
      }
      return entries;
    }, "se_DescribeStackResourceInput");
    var se_DescribeStackResourcesInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_SN] != null) {
        entries[_SN] = input[_SN];
      }
      if (input[_LRI] != null) {
        entries[_LRI] = input[_LRI];
      }
      if (input[_PRI] != null) {
        entries[_PRI] = input[_PRI];
      }
      return entries;
    }, "se_DescribeStackResourcesInput");
    var se_DescribeStackSetInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_SSN] != null) {
        entries[_SSN] = input[_SSN];
      }
      if (input[_CA] != null) {
        entries[_CA] = input[_CA];
      }
      return entries;
    }, "se_DescribeStackSetInput");
    var se_DescribeStackSetOperationInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_SSN] != null) {
        entries[_SSN] = input[_SSN];
      }
      if (input[_OI] != null) {
        entries[_OI] = input[_OI];
      }
      if (input[_CA] != null) {
        entries[_CA] = input[_CA];
      }
      return entries;
    }, "se_DescribeStackSetOperationInput");
    var se_DescribeStacksInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_SN] != null) {
        entries[_SN] = input[_SN];
      }
      if (input[_NT] != null) {
        entries[_NT] = input[_NT];
      }
      return entries;
    }, "se_DescribeStacksInput");
    var se_DescribeTypeInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_T] != null) {
        entries[_T] = input[_T];
      }
      if (input[_TN] != null) {
        entries[_TN] = input[_TN];
      }
      if (input[_Ar] != null) {
        entries[_Ar] = input[_Ar];
      }
      if (input[_VI] != null) {
        entries[_VI] = input[_VI];
      }
      if (input[_PI] != null) {
        entries[_PI] = input[_PI];
      }
      if (input[_PVN] != null) {
        entries[_PVN] = input[_PVN];
      }
      return entries;
    }, "se_DescribeTypeInput");
    var se_DescribeTypeRegistrationInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_RTeg] != null) {
        entries[_RTeg] = input[_RTeg];
      }
      return entries;
    }, "se_DescribeTypeRegistrationInput");
    var se_DetectStackDriftInput = /* @__PURE__ */ __name((input, context) => {
      var _a;
      const entries = {};
      if (input[_SN] != null) {
        entries[_SN] = input[_SN];
      }
      if (input[_LRIo] != null) {
        const memberEntries = se_LogicalResourceIds(input[_LRIo], context);
        if (((_a = input[_LRIo]) == null ? void 0 : _a.length) === 0) {
          entries.LogicalResourceIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `LogicalResourceIds.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    }, "se_DetectStackDriftInput");
    var se_DetectStackResourceDriftInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_SN] != null) {
        entries[_SN] = input[_SN];
      }
      if (input[_LRI] != null) {
        entries[_LRI] = input[_LRI];
      }
      return entries;
    }, "se_DetectStackResourceDriftInput");
    var se_DetectStackSetDriftInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_SSN] != null) {
        entries[_SSN] = input[_SSN];
      }
      if (input[_OP] != null) {
        const memberEntries = se_StackSetOperationPreferences(input[_OP], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `OperationPreferences.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_OI] === void 0) {
        input[_OI] = (0, import_uuid.v4)();
      }
      if (input[_OI] != null) {
        entries[_OI] = input[_OI];
      }
      if (input[_CA] != null) {
        entries[_CA] = input[_CA];
      }
      return entries;
    }, "se_DetectStackSetDriftInput");
    var se_EstimateTemplateCostInput = /* @__PURE__ */ __name((input, context) => {
      var _a;
      const entries = {};
      if (input[_TB] != null) {
        entries[_TB] = input[_TB];
      }
      if (input[_TURL] != null) {
        entries[_TURL] = input[_TURL];
      }
      if (input[_P] != null) {
        const memberEntries = se_Parameters(input[_P], context);
        if (((_a = input[_P]) == null ? void 0 : _a.length) === 0) {
          entries.Parameters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Parameters.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    }, "se_EstimateTemplateCostInput");
    var se_ExecuteChangeSetInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_CSN] != null) {
        entries[_CSN] = input[_CSN];
      }
      if (input[_SN] != null) {
        entries[_SN] = input[_SN];
      }
      if (input[_CRT] != null) {
        entries[_CRT] = input[_CRT];
      }
      if (input[_DR] != null) {
        entries[_DR] = input[_DR];
      }
      if (input[_REOC] != null) {
        entries[_REOC] = input[_REOC];
      }
      return entries;
    }, "se_ExecuteChangeSetInput");
    var se_GetGeneratedTemplateInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_F] != null) {
        entries[_F] = input[_F];
      }
      if (input[_GTN] != null) {
        entries[_GTN] = input[_GTN];
      }
      return entries;
    }, "se_GetGeneratedTemplateInput");
    var se_GetStackPolicyInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_SN] != null) {
        entries[_SN] = input[_SN];
      }
      return entries;
    }, "se_GetStackPolicyInput");
    var se_GetTemplateInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_SN] != null) {
        entries[_SN] = input[_SN];
      }
      if (input[_CSN] != null) {
        entries[_CSN] = input[_CSN];
      }
      if (input[_TS] != null) {
        entries[_TS] = input[_TS];
      }
      return entries;
    }, "se_GetTemplateInput");
    var se_GetTemplateSummaryInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_TB] != null) {
        entries[_TB] = input[_TB];
      }
      if (input[_TURL] != null) {
        entries[_TURL] = input[_TURL];
      }
      if (input[_SN] != null) {
        entries[_SN] = input[_SN];
      }
      if (input[_SSN] != null) {
        entries[_SSN] = input[_SSN];
      }
      if (input[_CA] != null) {
        entries[_CA] = input[_CA];
      }
      if (input[_TSC] != null) {
        const memberEntries = se_TemplateSummaryConfig(input[_TSC], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TemplateSummaryConfig.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    }, "se_GetTemplateSummaryInput");
    var se_ImportStacksToStackSetInput = /* @__PURE__ */ __name((input, context) => {
      var _a, _b;
      const entries = {};
      if (input[_SSN] != null) {
        entries[_SSN] = input[_SSN];
      }
      if (input[_SIt] != null) {
        const memberEntries = se_StackIdList(input[_SIt], context);
        if (((_a = input[_SIt]) == null ? void 0 : _a.length) === 0) {
          entries.StackIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `StackIds.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_SIU] != null) {
        entries[_SIU] = input[_SIU];
      }
      if (input[_OUI] != null) {
        const memberEntries = se_OrganizationalUnitIdList(input[_OUI], context);
        if (((_b = input[_OUI]) == null ? void 0 : _b.length) === 0) {
          entries.OrganizationalUnitIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `OrganizationalUnitIds.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_OP] != null) {
        const memberEntries = se_StackSetOperationPreferences(input[_OP], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `OperationPreferences.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_OI] === void 0) {
        input[_OI] = (0, import_uuid.v4)();
      }
      if (input[_OI] != null) {
        entries[_OI] = input[_OI];
      }
      if (input[_CA] != null) {
        entries[_CA] = input[_CA];
      }
      return entries;
    }, "se_ImportStacksToStackSetInput");
    var se_JazzLogicalResourceIds = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    }, "se_JazzLogicalResourceIds");
    var se_JazzResourceIdentifierProperties = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      Object.keys(input).filter((key) => input[key] != null).forEach((key) => {
        entries[`entry.${counter}.key`] = key;
        entries[`entry.${counter}.value`] = input[key];
        counter++;
      });
      return entries;
    }, "se_JazzResourceIdentifierProperties");
    var se_ListChangeSetsInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_SN] != null) {
        entries[_SN] = input[_SN];
      }
      if (input[_NT] != null) {
        entries[_NT] = input[_NT];
      }
      return entries;
    }, "se_ListChangeSetsInput");
    var se_ListExportsInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_NT] != null) {
        entries[_NT] = input[_NT];
      }
      return entries;
    }, "se_ListExportsInput");
    var se_ListGeneratedTemplatesInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_NT] != null) {
        entries[_NT] = input[_NT];
      }
      if (input[_MR] != null) {
        entries[_MR] = input[_MR];
      }
      return entries;
    }, "se_ListGeneratedTemplatesInput");
    var se_ListHookResultsInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_TTa] != null) {
        entries[_TTa] = input[_TTa];
      }
      if (input[_TI] != null) {
        entries[_TI] = input[_TI];
      }
      if (input[_NT] != null) {
        entries[_NT] = input[_NT];
      }
      return entries;
    }, "se_ListHookResultsInput");
    var se_ListImportsInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_EN] != null) {
        entries[_EN] = input[_EN];
      }
      if (input[_NT] != null) {
        entries[_NT] = input[_NT];
      }
      return entries;
    }, "se_ListImportsInput");
    var se_ListResourceScanRelatedResourcesInput = /* @__PURE__ */ __name((input, context) => {
      var _a;
      const entries = {};
      if (input[_RSI] != null) {
        entries[_RSI] = input[_RSI];
      }
      if (input[_R] != null) {
        const memberEntries = se_ScannedResourceIdentifiers(input[_R], context);
        if (((_a = input[_R]) == null ? void 0 : _a.length) === 0) {
          entries.Resources = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Resources.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_NT] != null) {
        entries[_NT] = input[_NT];
      }
      if (input[_MR] != null) {
        entries[_MR] = input[_MR];
      }
      return entries;
    }, "se_ListResourceScanRelatedResourcesInput");
    var se_ListResourceScanResourcesInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_RSI] != null) {
        entries[_RSI] = input[_RSI];
      }
      if (input[_RI] != null) {
        entries[_RI] = input[_RI];
      }
      if (input[_RTP] != null) {
        entries[_RTP] = input[_RTP];
      }
      if (input[_TK] != null) {
        entries[_TK] = input[_TK];
      }
      if (input[_TV] != null) {
        entries[_TV] = input[_TV];
      }
      if (input[_NT] != null) {
        entries[_NT] = input[_NT];
      }
      if (input[_MR] != null) {
        entries[_MR] = input[_MR];
      }
      return entries;
    }, "se_ListResourceScanResourcesInput");
    var se_ListResourceScansInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_NT] != null) {
        entries[_NT] = input[_NT];
      }
      if (input[_MR] != null) {
        entries[_MR] = input[_MR];
      }
      return entries;
    }, "se_ListResourceScansInput");
    var se_ListStackInstanceResourceDriftsInput = /* @__PURE__ */ __name((input, context) => {
      var _a;
      const entries = {};
      if (input[_SSN] != null) {
        entries[_SSN] = input[_SSN];
      }
      if (input[_NT] != null) {
        entries[_NT] = input[_NT];
      }
      if (input[_MR] != null) {
        entries[_MR] = input[_MR];
      }
      if (input[_SIRDS] != null) {
        const memberEntries = se_StackResourceDriftStatusFilters(input[_SIRDS], context);
        if (((_a = input[_SIRDS]) == null ? void 0 : _a.length) === 0) {
          entries.StackInstanceResourceDriftStatuses = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `StackInstanceResourceDriftStatuses.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_SIA] != null) {
        entries[_SIA] = input[_SIA];
      }
      if (input[_SIR] != null) {
        entries[_SIR] = input[_SIR];
      }
      if (input[_OI] != null) {
        entries[_OI] = input[_OI];
      }
      if (input[_CA] != null) {
        entries[_CA] = input[_CA];
      }
      return entries;
    }, "se_ListStackInstanceResourceDriftsInput");
    var se_ListStackInstancesInput = /* @__PURE__ */ __name((input, context) => {
      var _a;
      const entries = {};
      if (input[_SSN] != null) {
        entries[_SSN] = input[_SSN];
      }
      if (input[_NT] != null) {
        entries[_NT] = input[_NT];
      }
      if (input[_MR] != null) {
        entries[_MR] = input[_MR];
      }
      if (input[_Fi] != null) {
        const memberEntries = se_StackInstanceFilters(input[_Fi], context);
        if (((_a = input[_Fi]) == null ? void 0 : _a.length) === 0) {
          entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_SIA] != null) {
        entries[_SIA] = input[_SIA];
      }
      if (input[_SIR] != null) {
        entries[_SIR] = input[_SIR];
      }
      if (input[_CA] != null) {
        entries[_CA] = input[_CA];
      }
      return entries;
    }, "se_ListStackInstancesInput");
    var se_ListStackResourcesInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_SN] != null) {
        entries[_SN] = input[_SN];
      }
      if (input[_NT] != null) {
        entries[_NT] = input[_NT];
      }
      return entries;
    }, "se_ListStackResourcesInput");
    var se_ListStackSetAutoDeploymentTargetsInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_SSN] != null) {
        entries[_SSN] = input[_SSN];
      }
      if (input[_NT] != null) {
        entries[_NT] = input[_NT];
      }
      if (input[_MR] != null) {
        entries[_MR] = input[_MR];
      }
      if (input[_CA] != null) {
        entries[_CA] = input[_CA];
      }
      return entries;
    }, "se_ListStackSetAutoDeploymentTargetsInput");
    var se_ListStackSetOperationResultsInput = /* @__PURE__ */ __name((input, context) => {
      var _a;
      const entries = {};
      if (input[_SSN] != null) {
        entries[_SSN] = input[_SSN];
      }
      if (input[_OI] != null) {
        entries[_OI] = input[_OI];
      }
      if (input[_NT] != null) {
        entries[_NT] = input[_NT];
      }
      if (input[_MR] != null) {
        entries[_MR] = input[_MR];
      }
      if (input[_CA] != null) {
        entries[_CA] = input[_CA];
      }
      if (input[_Fi] != null) {
        const memberEntries = se_OperationResultFilters(input[_Fi], context);
        if (((_a = input[_Fi]) == null ? void 0 : _a.length) === 0) {
          entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    }, "se_ListStackSetOperationResultsInput");
    var se_ListStackSetOperationsInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_SSN] != null) {
        entries[_SSN] = input[_SSN];
      }
      if (input[_NT] != null) {
        entries[_NT] = input[_NT];
      }
      if (input[_MR] != null) {
        entries[_MR] = input[_MR];
      }
      if (input[_CA] != null) {
        entries[_CA] = input[_CA];
      }
      return entries;
    }, "se_ListStackSetOperationsInput");
    var se_ListStackSetsInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_NT] != null) {
        entries[_NT] = input[_NT];
      }
      if (input[_MR] != null) {
        entries[_MR] = input[_MR];
      }
      if (input[_S] != null) {
        entries[_S] = input[_S];
      }
      if (input[_CA] != null) {
        entries[_CA] = input[_CA];
      }
      return entries;
    }, "se_ListStackSetsInput");
    var se_ListStacksInput = /* @__PURE__ */ __name((input, context) => {
      var _a;
      const entries = {};
      if (input[_NT] != null) {
        entries[_NT] = input[_NT];
      }
      if (input[_SSF] != null) {
        const memberEntries = se_StackStatusFilter(input[_SSF], context);
        if (((_a = input[_SSF]) == null ? void 0 : _a.length) === 0) {
          entries.StackStatusFilter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `StackStatusFilter.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    }, "se_ListStacksInput");
    var se_ListTypeRegistrationsInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_T] != null) {
        entries[_T] = input[_T];
      }
      if (input[_TN] != null) {
        entries[_TN] = input[_TN];
      }
      if (input[_TA] != null) {
        entries[_TA] = input[_TA];
      }
      if (input[_RSF] != null) {
        entries[_RSF] = input[_RSF];
      }
      if (input[_MR] != null) {
        entries[_MR] = input[_MR];
      }
      if (input[_NT] != null) {
        entries[_NT] = input[_NT];
      }
      return entries;
    }, "se_ListTypeRegistrationsInput");
    var se_ListTypesInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_Vi] != null) {
        entries[_Vi] = input[_Vi];
      }
      if (input[_PTr] != null) {
        entries[_PTr] = input[_PTr];
      }
      if (input[_DSep] != null) {
        entries[_DSep] = input[_DSep];
      }
      if (input[_T] != null) {
        entries[_T] = input[_T];
      }
      if (input[_Fi] != null) {
        const memberEntries = se_TypeFilters(input[_Fi], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_MR] != null) {
        entries[_MR] = input[_MR];
      }
      if (input[_NT] != null) {
        entries[_NT] = input[_NT];
      }
      return entries;
    }, "se_ListTypesInput");
    var se_ListTypeVersionsInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_T] != null) {
        entries[_T] = input[_T];
      }
      if (input[_TN] != null) {
        entries[_TN] = input[_TN];
      }
      if (input[_Ar] != null) {
        entries[_Ar] = input[_Ar];
      }
      if (input[_MR] != null) {
        entries[_MR] = input[_MR];
      }
      if (input[_NT] != null) {
        entries[_NT] = input[_NT];
      }
      if (input[_DSep] != null) {
        entries[_DSep] = input[_DSep];
      }
      if (input[_PI] != null) {
        entries[_PI] = input[_PI];
      }
      return entries;
    }, "se_ListTypeVersionsInput");
    var se_LoggingConfig = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_LRA] != null) {
        entries[_LRA] = input[_LRA];
      }
      if (input[_LGN] != null) {
        entries[_LGN] = input[_LGN];
      }
      return entries;
    }, "se_LoggingConfig");
    var se_LogicalResourceIds = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    }, "se_LogicalResourceIds");
    var se_ManagedExecution = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_Act] != null) {
        entries[_Act] = input[_Act];
      }
      return entries;
    }, "se_ManagedExecution");
    var se_NotificationARNs = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    }, "se_NotificationARNs");
    var se_OperationResultFilter = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_N] != null) {
        entries[_N] = input[_N];
      }
      if (input[_Va] != null) {
        entries[_Va] = input[_Va];
      }
      return entries;
    }, "se_OperationResultFilter");
    var se_OperationResultFilters = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_OperationResultFilter(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    }, "se_OperationResultFilters");
    var se_OrganizationalUnitIdList = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    }, "se_OrganizationalUnitIdList");
    var se_Parameter = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_PK] != null) {
        entries[_PK] = input[_PK];
      }
      if (input[_PV] != null) {
        entries[_PV] = input[_PV];
      }
      if (input[_UPV] != null) {
        entries[_UPV] = input[_UPV];
      }
      if (input[_RV] != null) {
        entries[_RV] = input[_RV];
      }
      return entries;
    }, "se_Parameter");
    var se_Parameters = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_Parameter(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    }, "se_Parameters");
    var se_PublishTypeInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_T] != null) {
        entries[_T] = input[_T];
      }
      if (input[_Ar] != null) {
        entries[_Ar] = input[_Ar];
      }
      if (input[_TN] != null) {
        entries[_TN] = input[_TN];
      }
      if (input[_PVN] != null) {
        entries[_PVN] = input[_PVN];
      }
      return entries;
    }, "se_PublishTypeInput");
    var se_RecordHandlerProgressInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_BT] != null) {
        entries[_BT] = input[_BT];
      }
      if (input[_OS] != null) {
        entries[_OS] = input[_OS];
      }
      if (input[_COS] != null) {
        entries[_COS] = input[_COS];
      }
      if (input[_SM] != null) {
        entries[_SM] = input[_SM];
      }
      if (input[_EC] != null) {
        entries[_EC] = input[_EC];
      }
      if (input[_RM] != null) {
        entries[_RM] = input[_RM];
      }
      if (input[_CRT] != null) {
        entries[_CRT] = input[_CRT];
      }
      return entries;
    }, "se_RecordHandlerProgressInput");
    var se_RegionList = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    }, "se_RegionList");
    var se_RegisterPublisherInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_ATAC] != null) {
        entries[_ATAC] = input[_ATAC];
      }
      if (input[_CAo] != null) {
        entries[_CAo] = input[_CAo];
      }
      return entries;
    }, "se_RegisterPublisherInput");
    var se_RegisterTypeInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_T] != null) {
        entries[_T] = input[_T];
      }
      if (input[_TN] != null) {
        entries[_TN] = input[_TN];
      }
      if (input[_SHP] != null) {
        entries[_SHP] = input[_SHP];
      }
      if (input[_LC] != null) {
        const memberEntries = se_LoggingConfig(input[_LC], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `LoggingConfig.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_ERA] != null) {
        entries[_ERA] = input[_ERA];
      }
      if (input[_CRT] != null) {
        entries[_CRT] = input[_CRT];
      }
      return entries;
    }, "se_RegisterTypeInput");
    var se_ResourceDefinition = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_RTes] != null) {
        entries[_RTes] = input[_RTes];
      }
      if (input[_LRI] != null) {
        entries[_LRI] = input[_LRI];
      }
      if (input[_RI] != null) {
        const memberEntries = se_ResourceIdentifierProperties(input[_RI], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ResourceIdentifier.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    }, "se_ResourceDefinition");
    var se_ResourceDefinitions = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_ResourceDefinition(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    }, "se_ResourceDefinitions");
    var se_ResourceIdentifierProperties = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      Object.keys(input).filter((key) => input[key] != null).forEach((key) => {
        entries[`entry.${counter}.key`] = key;
        entries[`entry.${counter}.value`] = input[key];
        counter++;
      });
      return entries;
    }, "se_ResourceIdentifierProperties");
    var se_ResourcesToImport = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_ResourceToImport(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    }, "se_ResourcesToImport");
    var se_ResourcesToSkip = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    }, "se_ResourcesToSkip");
    var se_ResourceToImport = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_RTes] != null) {
        entries[_RTes] = input[_RTes];
      }
      if (input[_LRI] != null) {
        entries[_LRI] = input[_LRI];
      }
      if (input[_RI] != null) {
        const memberEntries = se_ResourceIdentifierProperties(input[_RI], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ResourceIdentifier.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    }, "se_ResourceToImport");
    var se_ResourceTypes = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    }, "se_ResourceTypes");
    var se_RetainResources = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    }, "se_RetainResources");
    var se_RollbackConfiguration = /* @__PURE__ */ __name((input, context) => {
      var _a;
      const entries = {};
      if (input[_RTo] != null) {
        const memberEntries = se_RollbackTriggers(input[_RTo], context);
        if (((_a = input[_RTo]) == null ? void 0 : _a.length) === 0) {
          entries.RollbackTriggers = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `RollbackTriggers.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_MTIM] != null) {
        entries[_MTIM] = input[_MTIM];
      }
      return entries;
    }, "se_RollbackConfiguration");
    var se_RollbackStackInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_SN] != null) {
        entries[_SN] = input[_SN];
      }
      if (input[_RARN] != null) {
        entries[_RARN] = input[_RARN];
      }
      if (input[_CRT] != null) {
        entries[_CRT] = input[_CRT];
      }
      if (input[_REOC] != null) {
        entries[_REOC] = input[_REOC];
      }
      return entries;
    }, "se_RollbackStackInput");
    var se_RollbackTrigger = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_Ar] != null) {
        entries[_Ar] = input[_Ar];
      }
      if (input[_T] != null) {
        entries[_T] = input[_T];
      }
      return entries;
    }, "se_RollbackTrigger");
    var se_RollbackTriggers = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_RollbackTrigger(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    }, "se_RollbackTriggers");
    var se_ScannedResourceIdentifier = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_RTes] != null) {
        entries[_RTes] = input[_RTes];
      }
      if (input[_RI] != null) {
        const memberEntries = se_JazzResourceIdentifierProperties(input[_RI], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ResourceIdentifier.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    }, "se_ScannedResourceIdentifier");
    var se_ScannedResourceIdentifiers = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_ScannedResourceIdentifier(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    }, "se_ScannedResourceIdentifiers");
    var se_SetStackPolicyInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_SN] != null) {
        entries[_SN] = input[_SN];
      }
      if (input[_SPB] != null) {
        entries[_SPB] = input[_SPB];
      }
      if (input[_SPURL] != null) {
        entries[_SPURL] = input[_SPURL];
      }
      return entries;
    }, "se_SetStackPolicyInput");
    var se_SetTypeConfigurationInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_TA] != null) {
        entries[_TA] = input[_TA];
      }
      if (input[_Co] != null) {
        entries[_Co] = input[_Co];
      }
      if (input[_CAon] != null) {
        entries[_CAon] = input[_CAon];
      }
      if (input[_TN] != null) {
        entries[_TN] = input[_TN];
      }
      if (input[_T] != null) {
        entries[_T] = input[_T];
      }
      return entries;
    }, "se_SetTypeConfigurationInput");
    var se_SetTypeDefaultVersionInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_Ar] != null) {
        entries[_Ar] = input[_Ar];
      }
      if (input[_T] != null) {
        entries[_T] = input[_T];
      }
      if (input[_TN] != null) {
        entries[_TN] = input[_TN];
      }
      if (input[_VI] != null) {
        entries[_VI] = input[_VI];
      }
      return entries;
    }, "se_SetTypeDefaultVersionInput");
    var se_SignalResourceInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_SN] != null) {
        entries[_SN] = input[_SN];
      }
      if (input[_LRI] != null) {
        entries[_LRI] = input[_LRI];
      }
      if (input[_UI] != null) {
        entries[_UI] = input[_UI];
      }
      if (input[_S] != null) {
        entries[_S] = input[_S];
      }
      return entries;
    }, "se_SignalResourceInput");
    var se_StackIdList = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    }, "se_StackIdList");
    var se_StackInstanceFilter = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_N] != null) {
        entries[_N] = input[_N];
      }
      if (input[_Va] != null) {
        entries[_Va] = input[_Va];
      }
      return entries;
    }, "se_StackInstanceFilter");
    var se_StackInstanceFilters = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_StackInstanceFilter(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    }, "se_StackInstanceFilters");
    var se_StackResourceDriftStatusFilters = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    }, "se_StackResourceDriftStatusFilters");
    var se_StackSetOperationPreferences = /* @__PURE__ */ __name((input, context) => {
      var _a;
      const entries = {};
      if (input[_RCT] != null) {
        entries[_RCT] = input[_RCT];
      }
      if (input[_RO] != null) {
        const memberEntries = se_RegionList(input[_RO], context);
        if (((_a = input[_RO]) == null ? void 0 : _a.length) === 0) {
          entries.RegionOrder = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `RegionOrder.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_FTC] != null) {
        entries[_FTC] = input[_FTC];
      }
      if (input[_FTP] != null) {
        entries[_FTP] = input[_FTP];
      }
      if (input[_MCC] != null) {
        entries[_MCC] = input[_MCC];
      }
      if (input[_MCP] != null) {
        entries[_MCP] = input[_MCP];
      }
      if (input[_CM] != null) {
        entries[_CM] = input[_CM];
      }
      return entries;
    }, "se_StackSetOperationPreferences");
    var se_StackStatusFilter = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    }, "se_StackStatusFilter");
    var se_StartResourceScanInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_CRT] != null) {
        entries[_CRT] = input[_CRT];
      }
      return entries;
    }, "se_StartResourceScanInput");
    var se_StopStackSetOperationInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_SSN] != null) {
        entries[_SSN] = input[_SSN];
      }
      if (input[_OI] != null) {
        entries[_OI] = input[_OI];
      }
      if (input[_CA] != null) {
        entries[_CA] = input[_CA];
      }
      return entries;
    }, "se_StopStackSetOperationInput");
    var se_Tag = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_K] != null) {
        entries[_K] = input[_K];
      }
      if (input[_Val] != null) {
        entries[_Val] = input[_Val];
      }
      return entries;
    }, "se_Tag");
    var se_Tags = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_Tag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    }, "se_Tags");
    var se_TemplateConfiguration = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_DPe] != null) {
        entries[_DPe] = input[_DPe];
      }
      if (input[_URP] != null) {
        entries[_URP] = input[_URP];
      }
      return entries;
    }, "se_TemplateConfiguration");
    var se_TemplateSummaryConfig = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_TURTAW] != null) {
        entries[_TURTAW] = input[_TURTAW];
      }
      return entries;
    }, "se_TemplateSummaryConfig");
    var se_TestTypeInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_Ar] != null) {
        entries[_Ar] = input[_Ar];
      }
      if (input[_T] != null) {
        entries[_T] = input[_T];
      }
      if (input[_TN] != null) {
        entries[_TN] = input[_TN];
      }
      if (input[_VI] != null) {
        entries[_VI] = input[_VI];
      }
      if (input[_LDB] != null) {
        entries[_LDB] = input[_LDB];
      }
      return entries;
    }, "se_TestTypeInput");
    var se_TypeConfigurationIdentifier = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_TA] != null) {
        entries[_TA] = input[_TA];
      }
      if (input[_TCA] != null) {
        entries[_TCA] = input[_TCA];
      }
      if (input[_TCAy] != null) {
        entries[_TCAy] = input[_TCAy];
      }
      if (input[_T] != null) {
        entries[_T] = input[_T];
      }
      if (input[_TN] != null) {
        entries[_TN] = input[_TN];
      }
      return entries;
    }, "se_TypeConfigurationIdentifier");
    var se_TypeConfigurationIdentifiers = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_TypeConfigurationIdentifier(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    }, "se_TypeConfigurationIdentifiers");
    var se_TypeFilters = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_Ca] != null) {
        entries[_Ca] = input[_Ca];
      }
      if (input[_PI] != null) {
        entries[_PI] = input[_PI];
      }
      if (input[_TNP] != null) {
        entries[_TNP] = input[_TNP];
      }
      return entries;
    }, "se_TypeFilters");
    var se_UpdateGeneratedTemplateInput = /* @__PURE__ */ __name((input, context) => {
      var _a, _b;
      const entries = {};
      if (input[_GTN] != null) {
        entries[_GTN] = input[_GTN];
      }
      if (input[_NGTN] != null) {
        entries[_NGTN] = input[_NGTN];
      }
      if (input[_AR] != null) {
        const memberEntries = se_ResourceDefinitions(input[_AR], context);
        if (((_a = input[_AR]) == null ? void 0 : _a.length) === 0) {
          entries.AddResources = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `AddResources.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_RRe] != null) {
        const memberEntries = se_JazzLogicalResourceIds(input[_RRe], context);
        if (((_b = input[_RRe]) == null ? void 0 : _b.length) === 0) {
          entries.RemoveResources = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `RemoveResources.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_RAR] != null) {
        entries[_RAR] = input[_RAR];
      }
      if (input[_TC] != null) {
        const memberEntries = se_TemplateConfiguration(input[_TC], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TemplateConfiguration.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    }, "se_UpdateGeneratedTemplateInput");
    var se_UpdateStackInput = /* @__PURE__ */ __name((input, context) => {
      var _a, _b, _c, _d, _e2;
      const entries = {};
      if (input[_SN] != null) {
        entries[_SN] = input[_SN];
      }
      if (input[_TB] != null) {
        entries[_TB] = input[_TB];
      }
      if (input[_TURL] != null) {
        entries[_TURL] = input[_TURL];
      }
      if (input[_UPT] != null) {
        entries[_UPT] = input[_UPT];
      }
      if (input[_SPDUB] != null) {
        entries[_SPDUB] = input[_SPDUB];
      }
      if (input[_SPDUURL] != null) {
        entries[_SPDUURL] = input[_SPDUURL];
      }
      if (input[_P] != null) {
        const memberEntries = se_Parameters(input[_P], context);
        if (((_a = input[_P]) == null ? void 0 : _a.length) === 0) {
          entries.Parameters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Parameters.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_C] != null) {
        const memberEntries = se_Capabilities(input[_C], context);
        if (((_b = input[_C]) == null ? void 0 : _b.length) === 0) {
          entries.Capabilities = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Capabilities.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_RTe] != null) {
        const memberEntries = se_ResourceTypes(input[_RTe], context);
        if (((_c = input[_RTe]) == null ? void 0 : _c.length) === 0) {
          entries.ResourceTypes = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ResourceTypes.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_RARN] != null) {
        entries[_RARN] = input[_RARN];
      }
      if (input[_RC] != null) {
        const memberEntries = se_RollbackConfiguration(input[_RC], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `RollbackConfiguration.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_SPB] != null) {
        entries[_SPB] = input[_SPB];
      }
      if (input[_SPURL] != null) {
        entries[_SPURL] = input[_SPURL];
      }
      if (input[_NARN] != null) {
        const memberEntries = se_NotificationARNs(input[_NARN], context);
        if (((_d = input[_NARN]) == null ? void 0 : _d.length) === 0) {
          entries.NotificationARNs = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `NotificationARNs.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_Ta] != null) {
        const memberEntries = se_Tags(input[_Ta], context);
        if (((_e2 = input[_Ta]) == null ? void 0 : _e2.length) === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_DR] != null) {
        entries[_DR] = input[_DR];
      }
      if (input[_CRT] != null) {
        entries[_CRT] = input[_CRT];
      }
      if (input[_REOC] != null) {
        entries[_REOC] = input[_REOC];
      }
      return entries;
    }, "se_UpdateStackInput");
    var se_UpdateStackInstancesInput = /* @__PURE__ */ __name((input, context) => {
      var _a, _b, _c;
      const entries = {};
      if (input[_SSN] != null) {
        entries[_SSN] = input[_SSN];
      }
      if (input[_Ac] != null) {
        const memberEntries = se_AccountList(input[_Ac], context);
        if (((_a = input[_Ac]) == null ? void 0 : _a.length) === 0) {
          entries.Accounts = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Accounts.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_DTep] != null) {
        const memberEntries = se_DeploymentTargets(input[_DTep], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `DeploymentTargets.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_Re] != null) {
        const memberEntries = se_RegionList(input[_Re], context);
        if (((_b = input[_Re]) == null ? void 0 : _b.length) === 0) {
          entries.Regions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Regions.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_PO] != null) {
        const memberEntries = se_Parameters(input[_PO], context);
        if (((_c = input[_PO]) == null ? void 0 : _c.length) === 0) {
          entries.ParameterOverrides = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ParameterOverrides.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_OP] != null) {
        const memberEntries = se_StackSetOperationPreferences(input[_OP], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `OperationPreferences.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_OI] === void 0) {
        input[_OI] = (0, import_uuid.v4)();
      }
      if (input[_OI] != null) {
        entries[_OI] = input[_OI];
      }
      if (input[_CA] != null) {
        entries[_CA] = input[_CA];
      }
      return entries;
    }, "se_UpdateStackInstancesInput");
    var se_UpdateStackSetInput = /* @__PURE__ */ __name((input, context) => {
      var _a, _b, _c, _d, _e2;
      const entries = {};
      if (input[_SSN] != null) {
        entries[_SSN] = input[_SSN];
      }
      if (input[_D] != null) {
        entries[_D] = input[_D];
      }
      if (input[_TB] != null) {
        entries[_TB] = input[_TB];
      }
      if (input[_TURL] != null) {
        entries[_TURL] = input[_TURL];
      }
      if (input[_UPT] != null) {
        entries[_UPT] = input[_UPT];
      }
      if (input[_P] != null) {
        const memberEntries = se_Parameters(input[_P], context);
        if (((_a = input[_P]) == null ? void 0 : _a.length) === 0) {
          entries.Parameters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Parameters.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_C] != null) {
        const memberEntries = se_Capabilities(input[_C], context);
        if (((_b = input[_C]) == null ? void 0 : _b.length) === 0) {
          entries.Capabilities = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Capabilities.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_Ta] != null) {
        const memberEntries = se_Tags(input[_Ta], context);
        if (((_c = input[_Ta]) == null ? void 0 : _c.length) === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_OP] != null) {
        const memberEntries = se_StackSetOperationPreferences(input[_OP], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `OperationPreferences.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_ARARN] != null) {
        entries[_ARARN] = input[_ARARN];
      }
      if (input[_ERN] != null) {
        entries[_ERN] = input[_ERN];
      }
      if (input[_DTep] != null) {
        const memberEntries = se_DeploymentTargets(input[_DTep], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `DeploymentTargets.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_PM] != null) {
        entries[_PM] = input[_PM];
      }
      if (input[_AD] != null) {
        const memberEntries = se_AutoDeployment(input[_AD], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `AutoDeployment.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_OI] === void 0) {
        input[_OI] = (0, import_uuid.v4)();
      }
      if (input[_OI] != null) {
        entries[_OI] = input[_OI];
      }
      if (input[_Ac] != null) {
        const memberEntries = se_AccountList(input[_Ac], context);
        if (((_d = input[_Ac]) == null ? void 0 : _d.length) === 0) {
          entries.Accounts = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Accounts.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_Re] != null) {
        const memberEntries = se_RegionList(input[_Re], context);
        if (((_e2 = input[_Re]) == null ? void 0 : _e2.length) === 0) {
          entries.Regions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Regions.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_CA] != null) {
        entries[_CA] = input[_CA];
      }
      if (input[_ME] != null) {
        const memberEntries = se_ManagedExecution(input[_ME], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ManagedExecution.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    }, "se_UpdateStackSetInput");
    var se_UpdateTerminationProtectionInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_ETP] != null) {
        entries[_ETP] = input[_ETP];
      }
      if (input[_SN] != null) {
        entries[_SN] = input[_SN];
      }
      return entries;
    }, "se_UpdateTerminationProtectionInput");
    var se_ValidateTemplateInput = /* @__PURE__ */ __name((input, context) => {
      const entries = {};
      if (input[_TB] != null) {
        entries[_TB] = input[_TB];
      }
      if (input[_TURL] != null) {
        entries[_TURL] = input[_TURL];
      }
      return entries;
    }, "se_ValidateTemplateInput");
    var de_AccountGateResult = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_S] != null) {
        contents[_S] = (0, import_smithy_client4.expectString)(output[_S]);
      }
      if (output[_SRt] != null) {
        contents[_SRt] = (0, import_smithy_client4.expectString)(output[_SRt]);
      }
      return contents;
    }, "de_AccountGateResult");
    var de_AccountLimit = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_N] != null) {
        contents[_N] = (0, import_smithy_client4.expectString)(output[_N]);
      }
      if (output[_Val] != null) {
        contents[_Val] = (0, import_smithy_client4.strictParseInt32)(output[_Val]);
      }
      return contents;
    }, "de_AccountLimit");
    var de_AccountLimitList = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_AccountLimit(entry, context);
      });
    }, "de_AccountLimitList");
    var de_AccountList = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, import_smithy_client4.expectString)(entry);
      });
    }, "de_AccountList");
    var de_ActivateOrganizationsAccessOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      return contents;
    }, "de_ActivateOrganizationsAccessOutput");
    var de_ActivateTypeOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_Ar] != null) {
        contents[_Ar] = (0, import_smithy_client4.expectString)(output[_Ar]);
      }
      return contents;
    }, "de_ActivateTypeOutput");
    var de_AllowedValues = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, import_smithy_client4.expectString)(entry);
      });
    }, "de_AllowedValues");
    var de_AlreadyExistsException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_M] != null) {
        contents[_M] = (0, import_smithy_client4.expectString)(output[_M]);
      }
      return contents;
    }, "de_AlreadyExistsException");
    var de_AutoDeployment = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_E] != null) {
        contents[_E] = (0, import_smithy_client4.parseBoolean)(output[_E]);
      }
      if (output[_RSOAR] != null) {
        contents[_RSOAR] = (0, import_smithy_client4.parseBoolean)(output[_RSOAR]);
      }
      return contents;
    }, "de_AutoDeployment");
    var de_BatchDescribeTypeConfigurationsError = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_EC] != null) {
        contents[_EC] = (0, import_smithy_client4.expectString)(output[_EC]);
      }
      if (output[_EM] != null) {
        contents[_EM] = (0, import_smithy_client4.expectString)(output[_EM]);
      }
      if (output[_TCIy] != null) {
        contents[_TCIy] = de_TypeConfigurationIdentifier(output[_TCIy], context);
      }
      return contents;
    }, "de_BatchDescribeTypeConfigurationsError");
    var de_BatchDescribeTypeConfigurationsErrors = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_BatchDescribeTypeConfigurationsError(entry, context);
      });
    }, "de_BatchDescribeTypeConfigurationsErrors");
    var de_BatchDescribeTypeConfigurationsOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.Errors === "") {
        contents[_Er] = [];
      } else if (output[_Er] != null && output[_Er][_m] != null) {
        contents[_Er] = de_BatchDescribeTypeConfigurationsErrors((0, import_smithy_client4.getArrayIfSingleItem)(output[_Er][_m]), context);
      }
      if (output.UnprocessedTypeConfigurations === "") {
        contents[_UTC] = [];
      } else if (output[_UTC] != null && output[_UTC][_m] != null) {
        contents[_UTC] = de_UnprocessedTypeConfigurations((0, import_smithy_client4.getArrayIfSingleItem)(output[_UTC][_m]), context);
      }
      if (output.TypeConfigurations === "") {
        contents[_TCy] = [];
      } else if (output[_TCy] != null && output[_TCy][_m] != null) {
        contents[_TCy] = de_TypeConfigurationDetailsList((0, import_smithy_client4.getArrayIfSingleItem)(output[_TCy][_m]), context);
      }
      return contents;
    }, "de_BatchDescribeTypeConfigurationsOutput");
    var de_Capabilities = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, import_smithy_client4.expectString)(entry);
      });
    }, "de_Capabilities");
    var de_CFNRegistryException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_M] != null) {
        contents[_M] = (0, import_smithy_client4.expectString)(output[_M]);
      }
      return contents;
    }, "de_CFNRegistryException");
    var de_Change = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_T] != null) {
        contents[_T] = (0, import_smithy_client4.expectString)(output[_T]);
      }
      if (output[_HIC] != null) {
        contents[_HIC] = (0, import_smithy_client4.strictParseInt32)(output[_HIC]);
      }
      if (output[_RCe] != null) {
        contents[_RCe] = de_ResourceChange(output[_RCe], context);
      }
      return contents;
    }, "de_Change");
    var de_Changes = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_Change(entry, context);
      });
    }, "de_Changes");
    var de_ChangeSetHook = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_IP] != null) {
        contents[_IP] = (0, import_smithy_client4.expectString)(output[_IP]);
      }
      if (output[_FM] != null) {
        contents[_FM] = (0, import_smithy_client4.expectString)(output[_FM]);
      }
      if (output[_TN] != null) {
        contents[_TN] = (0, import_smithy_client4.expectString)(output[_TN]);
      }
      if (output[_TVI] != null) {
        contents[_TVI] = (0, import_smithy_client4.expectString)(output[_TVI]);
      }
      if (output[_TCVI] != null) {
        contents[_TCVI] = (0, import_smithy_client4.expectString)(output[_TCVI]);
      }
      if (output[_TD] != null) {
        contents[_TD] = de_ChangeSetHookTargetDetails(output[_TD], context);
      }
      return contents;
    }, "de_ChangeSetHook");
    var de_ChangeSetHookResourceTargetDetails = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_LRI] != null) {
        contents[_LRI] = (0, import_smithy_client4.expectString)(output[_LRI]);
      }
      if (output[_RTes] != null) {
        contents[_RTes] = (0, import_smithy_client4.expectString)(output[_RTes]);
      }
      if (output[_RA] != null) {
        contents[_RA] = (0, import_smithy_client4.expectString)(output[_RA]);
      }
      return contents;
    }, "de_ChangeSetHookResourceTargetDetails");
    var de_ChangeSetHooks = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_ChangeSetHook(entry, context);
      });
    }, "de_ChangeSetHooks");
    var de_ChangeSetHookTargetDetails = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_TTa] != null) {
        contents[_TTa] = (0, import_smithy_client4.expectString)(output[_TTa]);
      }
      if (output[_RTD] != null) {
        contents[_RTD] = de_ChangeSetHookResourceTargetDetails(output[_RTD], context);
      }
      return contents;
    }, "de_ChangeSetHookTargetDetails");
    var de_ChangeSetNotFoundException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_M] != null) {
        contents[_M] = (0, import_smithy_client4.expectString)(output[_M]);
      }
      return contents;
    }, "de_ChangeSetNotFoundException");
    var de_ChangeSetSummaries = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_ChangeSetSummary(entry, context);
      });
    }, "de_ChangeSetSummaries");
    var de_ChangeSetSummary = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_SI] != null) {
        contents[_SI] = (0, import_smithy_client4.expectString)(output[_SI]);
      }
      if (output[_SN] != null) {
        contents[_SN] = (0, import_smithy_client4.expectString)(output[_SN]);
      }
      if (output[_CSIh] != null) {
        contents[_CSIh] = (0, import_smithy_client4.expectString)(output[_CSIh]);
      }
      if (output[_CSN] != null) {
        contents[_CSN] = (0, import_smithy_client4.expectString)(output[_CSN]);
      }
      if (output[_ES] != null) {
        contents[_ES] = (0, import_smithy_client4.expectString)(output[_ES]);
      }
      if (output[_S] != null) {
        contents[_S] = (0, import_smithy_client4.expectString)(output[_S]);
      }
      if (output[_SRt] != null) {
        contents[_SRt] = (0, import_smithy_client4.expectString)(output[_SRt]);
      }
      if (output[_CTr] != null) {
        contents[_CTr] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_CTr]));
      }
      if (output[_D] != null) {
        contents[_D] = (0, import_smithy_client4.expectString)(output[_D]);
      }
      if (output[_INS] != null) {
        contents[_INS] = (0, import_smithy_client4.parseBoolean)(output[_INS]);
      }
      if (output[_PCSI] != null) {
        contents[_PCSI] = (0, import_smithy_client4.expectString)(output[_PCSI]);
      }
      if (output[_RCSI] != null) {
        contents[_RCSI] = (0, import_smithy_client4.expectString)(output[_RCSI]);
      }
      if (output[_IER] != null) {
        contents[_IER] = (0, import_smithy_client4.parseBoolean)(output[_IER]);
      }
      return contents;
    }, "de_ChangeSetSummary");
    var de_ConcurrentResourcesLimitExceededException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_M] != null) {
        contents[_M] = (0, import_smithy_client4.expectString)(output[_M]);
      }
      return contents;
    }, "de_ConcurrentResourcesLimitExceededException");
    var de_ContinueUpdateRollbackOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      return contents;
    }, "de_ContinueUpdateRollbackOutput");
    var de_CreateChangeSetOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_I] != null) {
        contents[_I] = (0, import_smithy_client4.expectString)(output[_I]);
      }
      if (output[_SI] != null) {
        contents[_SI] = (0, import_smithy_client4.expectString)(output[_SI]);
      }
      return contents;
    }, "de_CreateChangeSetOutput");
    var de_CreatedButModifiedException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_M] != null) {
        contents[_M] = (0, import_smithy_client4.expectString)(output[_M]);
      }
      return contents;
    }, "de_CreatedButModifiedException");
    var de_CreateGeneratedTemplateOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_GTI] != null) {
        contents[_GTI] = (0, import_smithy_client4.expectString)(output[_GTI]);
      }
      return contents;
    }, "de_CreateGeneratedTemplateOutput");
    var de_CreateStackInstancesOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_OI] != null) {
        contents[_OI] = (0, import_smithy_client4.expectString)(output[_OI]);
      }
      return contents;
    }, "de_CreateStackInstancesOutput");
    var de_CreateStackOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_SI] != null) {
        contents[_SI] = (0, import_smithy_client4.expectString)(output[_SI]);
      }
      return contents;
    }, "de_CreateStackOutput");
    var de_CreateStackSetOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_SSI] != null) {
        contents[_SSI] = (0, import_smithy_client4.expectString)(output[_SSI]);
      }
      return contents;
    }, "de_CreateStackSetOutput");
    var de_DeactivateOrganizationsAccessOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      return contents;
    }, "de_DeactivateOrganizationsAccessOutput");
    var de_DeactivateTypeOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      return contents;
    }, "de_DeactivateTypeOutput");
    var de_DeleteChangeSetOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      return contents;
    }, "de_DeleteChangeSetOutput");
    var de_DeleteStackInstancesOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_OI] != null) {
        contents[_OI] = (0, import_smithy_client4.expectString)(output[_OI]);
      }
      return contents;
    }, "de_DeleteStackInstancesOutput");
    var de_DeleteStackSetOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      return contents;
    }, "de_DeleteStackSetOutput");
    var de_DeploymentTargets = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.Accounts === "") {
        contents[_Ac] = [];
      } else if (output[_Ac] != null && output[_Ac][_m] != null) {
        contents[_Ac] = de_AccountList((0, import_smithy_client4.getArrayIfSingleItem)(output[_Ac][_m]), context);
      }
      if (output[_AUc] != null) {
        contents[_AUc] = (0, import_smithy_client4.expectString)(output[_AUc]);
      }
      if (output.OrganizationalUnitIds === "") {
        contents[_OUI] = [];
      } else if (output[_OUI] != null && output[_OUI][_m] != null) {
        contents[_OUI] = de_OrganizationalUnitIdList((0, import_smithy_client4.getArrayIfSingleItem)(output[_OUI][_m]), context);
      }
      if (output[_AFT] != null) {
        contents[_AFT] = (0, import_smithy_client4.expectString)(output[_AFT]);
      }
      return contents;
    }, "de_DeploymentTargets");
    var de_DeregisterTypeOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      return contents;
    }, "de_DeregisterTypeOutput");
    var de_DescribeAccountLimitsOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.AccountLimits === "") {
        contents[_AL] = [];
      } else if (output[_AL] != null && output[_AL][_m] != null) {
        contents[_AL] = de_AccountLimitList((0, import_smithy_client4.getArrayIfSingleItem)(output[_AL][_m]), context);
      }
      if (output[_NT] != null) {
        contents[_NT] = (0, import_smithy_client4.expectString)(output[_NT]);
      }
      return contents;
    }, "de_DescribeAccountLimitsOutput");
    var de_DescribeChangeSetHooksOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_CSIh] != null) {
        contents[_CSIh] = (0, import_smithy_client4.expectString)(output[_CSIh]);
      }
      if (output[_CSN] != null) {
        contents[_CSN] = (0, import_smithy_client4.expectString)(output[_CSN]);
      }
      if (output.Hooks === "") {
        contents[_H] = [];
      } else if (output[_H] != null && output[_H][_m] != null) {
        contents[_H] = de_ChangeSetHooks((0, import_smithy_client4.getArrayIfSingleItem)(output[_H][_m]), context);
      }
      if (output[_S] != null) {
        contents[_S] = (0, import_smithy_client4.expectString)(output[_S]);
      }
      if (output[_NT] != null) {
        contents[_NT] = (0, import_smithy_client4.expectString)(output[_NT]);
      }
      if (output[_SI] != null) {
        contents[_SI] = (0, import_smithy_client4.expectString)(output[_SI]);
      }
      if (output[_SN] != null) {
        contents[_SN] = (0, import_smithy_client4.expectString)(output[_SN]);
      }
      return contents;
    }, "de_DescribeChangeSetHooksOutput");
    var de_DescribeChangeSetOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_CSN] != null) {
        contents[_CSN] = (0, import_smithy_client4.expectString)(output[_CSN]);
      }
      if (output[_CSIh] != null) {
        contents[_CSIh] = (0, import_smithy_client4.expectString)(output[_CSIh]);
      }
      if (output[_SI] != null) {
        contents[_SI] = (0, import_smithy_client4.expectString)(output[_SI]);
      }
      if (output[_SN] != null) {
        contents[_SN] = (0, import_smithy_client4.expectString)(output[_SN]);
      }
      if (output[_D] != null) {
        contents[_D] = (0, import_smithy_client4.expectString)(output[_D]);
      }
      if (output.Parameters === "") {
        contents[_P] = [];
      } else if (output[_P] != null && output[_P][_m] != null) {
        contents[_P] = de_Parameters((0, import_smithy_client4.getArrayIfSingleItem)(output[_P][_m]), context);
      }
      if (output[_CTr] != null) {
        contents[_CTr] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_CTr]));
      }
      if (output[_ES] != null) {
        contents[_ES] = (0, import_smithy_client4.expectString)(output[_ES]);
      }
      if (output[_S] != null) {
        contents[_S] = (0, import_smithy_client4.expectString)(output[_S]);
      }
      if (output[_SRt] != null) {
        contents[_SRt] = (0, import_smithy_client4.expectString)(output[_SRt]);
      }
      if (output.NotificationARNs === "") {
        contents[_NARN] = [];
      } else if (output[_NARN] != null && output[_NARN][_m] != null) {
        contents[_NARN] = de_NotificationARNs((0, import_smithy_client4.getArrayIfSingleItem)(output[_NARN][_m]), context);
      }
      if (output[_RC] != null) {
        contents[_RC] = de_RollbackConfiguration(output[_RC], context);
      }
      if (output.Capabilities === "") {
        contents[_C] = [];
      } else if (output[_C] != null && output[_C][_m] != null) {
        contents[_C] = de_Capabilities((0, import_smithy_client4.getArrayIfSingleItem)(output[_C][_m]), context);
      }
      if (output.Tags === "") {
        contents[_Ta] = [];
      } else if (output[_Ta] != null && output[_Ta][_m] != null) {
        contents[_Ta] = de_Tags((0, import_smithy_client4.getArrayIfSingleItem)(output[_Ta][_m]), context);
      }
      if (output.Changes === "") {
        contents[_Ch] = [];
      } else if (output[_Ch] != null && output[_Ch][_m] != null) {
        contents[_Ch] = de_Changes((0, import_smithy_client4.getArrayIfSingleItem)(output[_Ch][_m]), context);
      }
      if (output[_NT] != null) {
        contents[_NT] = (0, import_smithy_client4.expectString)(output[_NT]);
      }
      if (output[_INS] != null) {
        contents[_INS] = (0, import_smithy_client4.parseBoolean)(output[_INS]);
      }
      if (output[_PCSI] != null) {
        contents[_PCSI] = (0, import_smithy_client4.expectString)(output[_PCSI]);
      }
      if (output[_RCSI] != null) {
        contents[_RCSI] = (0, import_smithy_client4.expectString)(output[_RCSI]);
      }
      if (output[_OSF] != null) {
        contents[_OSF] = (0, import_smithy_client4.expectString)(output[_OSF]);
      }
      if (output[_IER] != null) {
        contents[_IER] = (0, import_smithy_client4.parseBoolean)(output[_IER]);
      }
      return contents;
    }, "de_DescribeChangeSetOutput");
    var de_DescribeGeneratedTemplateOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_GTI] != null) {
        contents[_GTI] = (0, import_smithy_client4.expectString)(output[_GTI]);
      }
      if (output[_GTN] != null) {
        contents[_GTN] = (0, import_smithy_client4.expectString)(output[_GTN]);
      }
      if (output.Resources === "") {
        contents[_R] = [];
      } else if (output[_R] != null && output[_R][_m] != null) {
        contents[_R] = de_ResourceDetails((0, import_smithy_client4.getArrayIfSingleItem)(output[_R][_m]), context);
      }
      if (output[_S] != null) {
        contents[_S] = (0, import_smithy_client4.expectString)(output[_S]);
      }
      if (output[_SRt] != null) {
        contents[_SRt] = (0, import_smithy_client4.expectString)(output[_SRt]);
      }
      if (output[_CTr] != null) {
        contents[_CTr] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_CTr]));
      }
      if (output[_LUT] != null) {
        contents[_LUT] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_LUT]));
      }
      if (output[_Pr] != null) {
        contents[_Pr] = de_TemplateProgress(output[_Pr], context);
      }
      if (output[_SI] != null) {
        contents[_SI] = (0, import_smithy_client4.expectString)(output[_SI]);
      }
      if (output[_TC] != null) {
        contents[_TC] = de_TemplateConfiguration(output[_TC], context);
      }
      if (output[_TW] != null) {
        contents[_TW] = (0, import_smithy_client4.strictParseInt32)(output[_TW]);
      }
      return contents;
    }, "de_DescribeGeneratedTemplateOutput");
    var de_DescribeOrganizationsAccessOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_S] != null) {
        contents[_S] = (0, import_smithy_client4.expectString)(output[_S]);
      }
      return contents;
    }, "de_DescribeOrganizationsAccessOutput");
    var de_DescribePublisherOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_PI] != null) {
        contents[_PI] = (0, import_smithy_client4.expectString)(output[_PI]);
      }
      if (output[_PS] != null) {
        contents[_PS] = (0, import_smithy_client4.expectString)(output[_PS]);
      }
      if (output[_IPd] != null) {
        contents[_IPd] = (0, import_smithy_client4.expectString)(output[_IPd]);
      }
      if (output[_PP] != null) {
        contents[_PP] = (0, import_smithy_client4.expectString)(output[_PP]);
      }
      return contents;
    }, "de_DescribePublisherOutput");
    var de_DescribeResourceScanOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_RSI] != null) {
        contents[_RSI] = (0, import_smithy_client4.expectString)(output[_RSI]);
      }
      if (output[_S] != null) {
        contents[_S] = (0, import_smithy_client4.expectString)(output[_S]);
      }
      if (output[_SRt] != null) {
        contents[_SRt] = (0, import_smithy_client4.expectString)(output[_SRt]);
      }
      if (output[_ST] != null) {
        contents[_ST] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_ST]));
      }
      if (output[_ET] != null) {
        contents[_ET] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_ET]));
      }
      if (output[_PC] != null) {
        contents[_PC] = (0, import_smithy_client4.strictParseFloat)(output[_PC]);
      }
      if (output.ResourceTypes === "") {
        contents[_RTe] = [];
      } else if (output[_RTe] != null && output[_RTe][_m] != null) {
        contents[_RTe] = de_ResourceTypes((0, import_smithy_client4.getArrayIfSingleItem)(output[_RTe][_m]), context);
      }
      if (output[_RSes] != null) {
        contents[_RSes] = (0, import_smithy_client4.strictParseInt32)(output[_RSes]);
      }
      if (output[_RRes] != null) {
        contents[_RRes] = (0, import_smithy_client4.strictParseInt32)(output[_RRes]);
      }
      return contents;
    }, "de_DescribeResourceScanOutput");
    var de_DescribeStackDriftDetectionStatusOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_SI] != null) {
        contents[_SI] = (0, import_smithy_client4.expectString)(output[_SI]);
      }
      if (output[_SDDI] != null) {
        contents[_SDDI] = (0, import_smithy_client4.expectString)(output[_SDDI]);
      }
      if (output[_SDS] != null) {
        contents[_SDS] = (0, import_smithy_client4.expectString)(output[_SDS]);
      }
      if (output[_DSet] != null) {
        contents[_DSet] = (0, import_smithy_client4.expectString)(output[_DSet]);
      }
      if (output[_DSRet] != null) {
        contents[_DSRet] = (0, import_smithy_client4.expectString)(output[_DSRet]);
      }
      if (output[_DSRC] != null) {
        contents[_DSRC] = (0, import_smithy_client4.strictParseInt32)(output[_DSRC]);
      }
      if (output[_Ti] != null) {
        contents[_Ti] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_Ti]));
      }
      return contents;
    }, "de_DescribeStackDriftDetectionStatusOutput");
    var de_DescribeStackEventsOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.StackEvents === "") {
        contents[_SE] = [];
      } else if (output[_SE] != null && output[_SE][_m] != null) {
        contents[_SE] = de_StackEvents((0, import_smithy_client4.getArrayIfSingleItem)(output[_SE][_m]), context);
      }
      if (output[_NT] != null) {
        contents[_NT] = (0, import_smithy_client4.expectString)(output[_NT]);
      }
      return contents;
    }, "de_DescribeStackEventsOutput");
    var de_DescribeStackInstanceOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_SIta] != null) {
        contents[_SIta] = de_StackInstance(output[_SIta], context);
      }
      return contents;
    }, "de_DescribeStackInstanceOutput");
    var de_DescribeStackResourceDriftsOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.StackResourceDrifts === "") {
        contents[_SRD] = [];
      } else if (output[_SRD] != null && output[_SRD][_m] != null) {
        contents[_SRD] = de_StackResourceDrifts((0, import_smithy_client4.getArrayIfSingleItem)(output[_SRD][_m]), context);
      }
      if (output[_NT] != null) {
        contents[_NT] = (0, import_smithy_client4.expectString)(output[_NT]);
      }
      return contents;
    }, "de_DescribeStackResourceDriftsOutput");
    var de_DescribeStackResourceOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_SRDt] != null) {
        contents[_SRDt] = de_StackResourceDetail(output[_SRDt], context);
      }
      return contents;
    }, "de_DescribeStackResourceOutput");
    var de_DescribeStackResourcesOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.StackResources === "") {
        contents[_SRta] = [];
      } else if (output[_SRta] != null && output[_SRta][_m] != null) {
        contents[_SRta] = de_StackResources((0, import_smithy_client4.getArrayIfSingleItem)(output[_SRta][_m]), context);
      }
      return contents;
    }, "de_DescribeStackResourcesOutput");
    var de_DescribeStackSetOperationOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_SSO] != null) {
        contents[_SSO] = de_StackSetOperation(output[_SSO], context);
      }
      return contents;
    }, "de_DescribeStackSetOperationOutput");
    var de_DescribeStackSetOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_SS] != null) {
        contents[_SS] = de_StackSet(output[_SS], context);
      }
      return contents;
    }, "de_DescribeStackSetOutput");
    var de_DescribeStacksOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.Stacks === "") {
        contents[_St] = [];
      } else if (output[_St] != null && output[_St][_m] != null) {
        contents[_St] = de_Stacks((0, import_smithy_client4.getArrayIfSingleItem)(output[_St][_m]), context);
      }
      if (output[_NT] != null) {
        contents[_NT] = (0, import_smithy_client4.expectString)(output[_NT]);
      }
      return contents;
    }, "de_DescribeStacksOutput");
    var de_DescribeTypeOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_Ar] != null) {
        contents[_Ar] = (0, import_smithy_client4.expectString)(output[_Ar]);
      }
      if (output[_T] != null) {
        contents[_T] = (0, import_smithy_client4.expectString)(output[_T]);
      }
      if (output[_TN] != null) {
        contents[_TN] = (0, import_smithy_client4.expectString)(output[_TN]);
      }
      if (output[_DVI] != null) {
        contents[_DVI] = (0, import_smithy_client4.expectString)(output[_DVI]);
      }
      if (output[_IDV] != null) {
        contents[_IDV] = (0, import_smithy_client4.parseBoolean)(output[_IDV]);
      }
      if (output[_TTS] != null) {
        contents[_TTS] = (0, import_smithy_client4.expectString)(output[_TTS]);
      }
      if (output[_TTSD] != null) {
        contents[_TTSD] = (0, import_smithy_client4.expectString)(output[_TTSD]);
      }
      if (output[_D] != null) {
        contents[_D] = (0, import_smithy_client4.expectString)(output[_D]);
      }
      if (output[_Sc] != null) {
        contents[_Sc] = (0, import_smithy_client4.expectString)(output[_Sc]);
      }
      if (output[_PTr] != null) {
        contents[_PTr] = (0, import_smithy_client4.expectString)(output[_PTr]);
      }
      if (output[_DSep] != null) {
        contents[_DSep] = (0, import_smithy_client4.expectString)(output[_DSep]);
      }
      if (output[_LC] != null) {
        contents[_LC] = de_LoggingConfig(output[_LC], context);
      }
      if (output.RequiredActivatedTypes === "") {
        contents[_RAT] = [];
      } else if (output[_RAT] != null && output[_RAT][_m] != null) {
        contents[_RAT] = de_RequiredActivatedTypes((0, import_smithy_client4.getArrayIfSingleItem)(output[_RAT][_m]), context);
      }
      if (output[_ERA] != null) {
        contents[_ERA] = (0, import_smithy_client4.expectString)(output[_ERA]);
      }
      if (output[_Vi] != null) {
        contents[_Vi] = (0, import_smithy_client4.expectString)(output[_Vi]);
      }
      if (output[_SU] != null) {
        contents[_SU] = (0, import_smithy_client4.expectString)(output[_SU]);
      }
      if (output[_DU] != null) {
        contents[_DU] = (0, import_smithy_client4.expectString)(output[_DU]);
      }
      if (output[_LU] != null) {
        contents[_LU] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_LU]));
      }
      if (output[_TCi] != null) {
        contents[_TCi] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_TCi]));
      }
      if (output[_CSo] != null) {
        contents[_CSo] = (0, import_smithy_client4.expectString)(output[_CSo]);
      }
      if (output[_PI] != null) {
        contents[_PI] = (0, import_smithy_client4.expectString)(output[_PI]);
      }
      if (output[_OTN] != null) {
        contents[_OTN] = (0, import_smithy_client4.expectString)(output[_OTN]);
      }
      if (output[_OTA] != null) {
        contents[_OTA] = (0, import_smithy_client4.expectString)(output[_OTA]);
      }
      if (output[_PVN] != null) {
        contents[_PVN] = (0, import_smithy_client4.expectString)(output[_PVN]);
      }
      if (output[_LPV] != null) {
        contents[_LPV] = (0, import_smithy_client4.expectString)(output[_LPV]);
      }
      if (output[_IA] != null) {
        contents[_IA] = (0, import_smithy_client4.parseBoolean)(output[_IA]);
      }
      if (output[_AU] != null) {
        contents[_AU] = (0, import_smithy_client4.parseBoolean)(output[_AU]);
      }
      return contents;
    }, "de_DescribeTypeOutput");
    var de_DescribeTypeRegistrationOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_PSr] != null) {
        contents[_PSr] = (0, import_smithy_client4.expectString)(output[_PSr]);
      }
      if (output[_D] != null) {
        contents[_D] = (0, import_smithy_client4.expectString)(output[_D]);
      }
      if (output[_TA] != null) {
        contents[_TA] = (0, import_smithy_client4.expectString)(output[_TA]);
      }
      if (output[_TVA] != null) {
        contents[_TVA] = (0, import_smithy_client4.expectString)(output[_TVA]);
      }
      return contents;
    }, "de_DescribeTypeRegistrationOutput");
    var de_DetectStackDriftOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_SDDI] != null) {
        contents[_SDDI] = (0, import_smithy_client4.expectString)(output[_SDDI]);
      }
      return contents;
    }, "de_DetectStackDriftOutput");
    var de_DetectStackResourceDriftOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_SRDta] != null) {
        contents[_SRDta] = de_StackResourceDrift(output[_SRDta], context);
      }
      return contents;
    }, "de_DetectStackResourceDriftOutput");
    var de_DetectStackSetDriftOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_OI] != null) {
        contents[_OI] = (0, import_smithy_client4.expectString)(output[_OI]);
      }
      return contents;
    }, "de_DetectStackSetDriftOutput");
    var de_EstimateTemplateCostOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_U] != null) {
        contents[_U] = (0, import_smithy_client4.expectString)(output[_U]);
      }
      return contents;
    }, "de_EstimateTemplateCostOutput");
    var de_ExecuteChangeSetOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      return contents;
    }, "de_ExecuteChangeSetOutput");
    var de_Export = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_ESI] != null) {
        contents[_ESI] = (0, import_smithy_client4.expectString)(output[_ESI]);
      }
      if (output[_N] != null) {
        contents[_N] = (0, import_smithy_client4.expectString)(output[_N]);
      }
      if (output[_Val] != null) {
        contents[_Val] = (0, import_smithy_client4.expectString)(output[_Val]);
      }
      return contents;
    }, "de_Export");
    var de_Exports = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_Export(entry, context);
      });
    }, "de_Exports");
    var de_GeneratedTemplateNotFoundException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_M] != null) {
        contents[_M] = (0, import_smithy_client4.expectString)(output[_M]);
      }
      return contents;
    }, "de_GeneratedTemplateNotFoundException");
    var de_GetGeneratedTemplateOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_S] != null) {
        contents[_S] = (0, import_smithy_client4.expectString)(output[_S]);
      }
      if (output[_TB] != null) {
        contents[_TB] = (0, import_smithy_client4.expectString)(output[_TB]);
      }
      return contents;
    }, "de_GetGeneratedTemplateOutput");
    var de_GetStackPolicyOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_SPB] != null) {
        contents[_SPB] = (0, import_smithy_client4.expectString)(output[_SPB]);
      }
      return contents;
    }, "de_GetStackPolicyOutput");
    var de_GetTemplateOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_TB] != null) {
        contents[_TB] = (0, import_smithy_client4.expectString)(output[_TB]);
      }
      if (output.StagesAvailable === "") {
        contents[_SA] = [];
      } else if (output[_SA] != null && output[_SA][_m] != null) {
        contents[_SA] = de_StageList((0, import_smithy_client4.getArrayIfSingleItem)(output[_SA][_m]), context);
      }
      return contents;
    }, "de_GetTemplateOutput");
    var de_GetTemplateSummaryOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.Parameters === "") {
        contents[_P] = [];
      } else if (output[_P] != null && output[_P][_m] != null) {
        contents[_P] = de_ParameterDeclarations((0, import_smithy_client4.getArrayIfSingleItem)(output[_P][_m]), context);
      }
      if (output[_D] != null) {
        contents[_D] = (0, import_smithy_client4.expectString)(output[_D]);
      }
      if (output.Capabilities === "") {
        contents[_C] = [];
      } else if (output[_C] != null && output[_C][_m] != null) {
        contents[_C] = de_Capabilities((0, import_smithy_client4.getArrayIfSingleItem)(output[_C][_m]), context);
      }
      if (output[_CR] != null) {
        contents[_CR] = (0, import_smithy_client4.expectString)(output[_CR]);
      }
      if (output.ResourceTypes === "") {
        contents[_RTe] = [];
      } else if (output[_RTe] != null && output[_RTe][_m] != null) {
        contents[_RTe] = de_ResourceTypes((0, import_smithy_client4.getArrayIfSingleItem)(output[_RTe][_m]), context);
      }
      if (output[_V] != null) {
        contents[_V] = (0, import_smithy_client4.expectString)(output[_V]);
      }
      if (output[_Me] != null) {
        contents[_Me] = (0, import_smithy_client4.expectString)(output[_Me]);
      }
      if (output.DeclaredTransforms === "") {
        contents[_DTec] = [];
      } else if (output[_DTec] != null && output[_DTec][_m] != null) {
        contents[_DTec] = de_TransformsList((0, import_smithy_client4.getArrayIfSingleItem)(output[_DTec][_m]), context);
      }
      if (output.ResourceIdentifierSummaries === "") {
        contents[_RIS] = [];
      } else if (output[_RIS] != null && output[_RIS][_m] != null) {
        contents[_RIS] = de_ResourceIdentifierSummaries((0, import_smithy_client4.getArrayIfSingleItem)(output[_RIS][_m]), context);
      }
      if (output[_W] != null) {
        contents[_W] = de_Warnings(output[_W], context);
      }
      return contents;
    }, "de_GetTemplateSummaryOutput");
    var de_HookResultNotFoundException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_M] != null) {
        contents[_M] = (0, import_smithy_client4.expectString)(output[_M]);
      }
      return contents;
    }, "de_HookResultNotFoundException");
    var de_HookResultSummaries = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_HookResultSummary(entry, context);
      });
    }, "de_HookResultSummaries");
    var de_HookResultSummary = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_IP] != null) {
        contents[_IP] = (0, import_smithy_client4.expectString)(output[_IP]);
      }
      if (output[_FM] != null) {
        contents[_FM] = (0, import_smithy_client4.expectString)(output[_FM]);
      }
      if (output[_TN] != null) {
        contents[_TN] = (0, import_smithy_client4.expectString)(output[_TN]);
      }
      if (output[_TVI] != null) {
        contents[_TVI] = (0, import_smithy_client4.expectString)(output[_TVI]);
      }
      if (output[_TCVI] != null) {
        contents[_TCVI] = (0, import_smithy_client4.expectString)(output[_TCVI]);
      }
      if (output[_S] != null) {
        contents[_S] = (0, import_smithy_client4.expectString)(output[_S]);
      }
      if (output[_HSR] != null) {
        contents[_HSR] = (0, import_smithy_client4.expectString)(output[_HSR]);
      }
      return contents;
    }, "de_HookResultSummary");
    var de_Imports = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, import_smithy_client4.expectString)(entry);
      });
    }, "de_Imports");
    var de_ImportStacksToStackSetOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_OI] != null) {
        contents[_OI] = (0, import_smithy_client4.expectString)(output[_OI]);
      }
      return contents;
    }, "de_ImportStacksToStackSetOutput");
    var de_InsufficientCapabilitiesException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_M] != null) {
        contents[_M] = (0, import_smithy_client4.expectString)(output[_M]);
      }
      return contents;
    }, "de_InsufficientCapabilitiesException");
    var de_InvalidChangeSetStatusException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_M] != null) {
        contents[_M] = (0, import_smithy_client4.expectString)(output[_M]);
      }
      return contents;
    }, "de_InvalidChangeSetStatusException");
    var de_InvalidOperationException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_M] != null) {
        contents[_M] = (0, import_smithy_client4.expectString)(output[_M]);
      }
      return contents;
    }, "de_InvalidOperationException");
    var de_InvalidStateTransitionException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_M] != null) {
        contents[_M] = (0, import_smithy_client4.expectString)(output[_M]);
      }
      return contents;
    }, "de_InvalidStateTransitionException");
    var de_JazzResourceIdentifierProperties = /* @__PURE__ */ __name((output, context) => {
      return output.reduce((acc, pair) => {
        if (pair["value"] === null) {
          return acc;
        }
        acc[pair["key"]] = (0, import_smithy_client4.expectString)(pair["value"]);
        return acc;
      }, {});
    }, "de_JazzResourceIdentifierProperties");
    var de_LimitExceededException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_M] != null) {
        contents[_M] = (0, import_smithy_client4.expectString)(output[_M]);
      }
      return contents;
    }, "de_LimitExceededException");
    var de_ListChangeSetsOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.Summaries === "") {
        contents[_Su] = [];
      } else if (output[_Su] != null && output[_Su][_m] != null) {
        contents[_Su] = de_ChangeSetSummaries((0, import_smithy_client4.getArrayIfSingleItem)(output[_Su][_m]), context);
      }
      if (output[_NT] != null) {
        contents[_NT] = (0, import_smithy_client4.expectString)(output[_NT]);
      }
      return contents;
    }, "de_ListChangeSetsOutput");
    var de_ListExportsOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.Exports === "") {
        contents[_Ex] = [];
      } else if (output[_Ex] != null && output[_Ex][_m] != null) {
        contents[_Ex] = de_Exports((0, import_smithy_client4.getArrayIfSingleItem)(output[_Ex][_m]), context);
      }
      if (output[_NT] != null) {
        contents[_NT] = (0, import_smithy_client4.expectString)(output[_NT]);
      }
      return contents;
    }, "de_ListExportsOutput");
    var de_ListGeneratedTemplatesOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.Summaries === "") {
        contents[_Su] = [];
      } else if (output[_Su] != null && output[_Su][_m] != null) {
        contents[_Su] = de_TemplateSummaries((0, import_smithy_client4.getArrayIfSingleItem)(output[_Su][_m]), context);
      }
      if (output[_NT] != null) {
        contents[_NT] = (0, import_smithy_client4.expectString)(output[_NT]);
      }
      return contents;
    }, "de_ListGeneratedTemplatesOutput");
    var de_ListHookResultsOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_TTa] != null) {
        contents[_TTa] = (0, import_smithy_client4.expectString)(output[_TTa]);
      }
      if (output[_TI] != null) {
        contents[_TI] = (0, import_smithy_client4.expectString)(output[_TI]);
      }
      if (output.HookResults === "") {
        contents[_HR] = [];
      } else if (output[_HR] != null && output[_HR][_m] != null) {
        contents[_HR] = de_HookResultSummaries((0, import_smithy_client4.getArrayIfSingleItem)(output[_HR][_m]), context);
      }
      if (output[_NT] != null) {
        contents[_NT] = (0, import_smithy_client4.expectString)(output[_NT]);
      }
      return contents;
    }, "de_ListHookResultsOutput");
    var de_ListImportsOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.Imports === "") {
        contents[_Im] = [];
      } else if (output[_Im] != null && output[_Im][_m] != null) {
        contents[_Im] = de_Imports((0, import_smithy_client4.getArrayIfSingleItem)(output[_Im][_m]), context);
      }
      if (output[_NT] != null) {
        contents[_NT] = (0, import_smithy_client4.expectString)(output[_NT]);
      }
      return contents;
    }, "de_ListImportsOutput");
    var de_ListResourceScanRelatedResourcesOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.RelatedResources === "") {
        contents[_RRel] = [];
      } else if (output[_RRel] != null && output[_RRel][_m] != null) {
        contents[_RRel] = de_RelatedResources((0, import_smithy_client4.getArrayIfSingleItem)(output[_RRel][_m]), context);
      }
      if (output[_NT] != null) {
        contents[_NT] = (0, import_smithy_client4.expectString)(output[_NT]);
      }
      return contents;
    }, "de_ListResourceScanRelatedResourcesOutput");
    var de_ListResourceScanResourcesOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.Resources === "") {
        contents[_R] = [];
      } else if (output[_R] != null && output[_R][_m] != null) {
        contents[_R] = de_ScannedResources((0, import_smithy_client4.getArrayIfSingleItem)(output[_R][_m]), context);
      }
      if (output[_NT] != null) {
        contents[_NT] = (0, import_smithy_client4.expectString)(output[_NT]);
      }
      return contents;
    }, "de_ListResourceScanResourcesOutput");
    var de_ListResourceScansOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.ResourceScanSummaries === "") {
        contents[_RSS] = [];
      } else if (output[_RSS] != null && output[_RSS][_m] != null) {
        contents[_RSS] = de_ResourceScanSummaries((0, import_smithy_client4.getArrayIfSingleItem)(output[_RSS][_m]), context);
      }
      if (output[_NT] != null) {
        contents[_NT] = (0, import_smithy_client4.expectString)(output[_NT]);
      }
      return contents;
    }, "de_ListResourceScansOutput");
    var de_ListStackInstanceResourceDriftsOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.Summaries === "") {
        contents[_Su] = [];
      } else if (output[_Su] != null && output[_Su][_m] != null) {
        contents[_Su] = de_StackInstanceResourceDriftsSummaries((0, import_smithy_client4.getArrayIfSingleItem)(output[_Su][_m]), context);
      }
      if (output[_NT] != null) {
        contents[_NT] = (0, import_smithy_client4.expectString)(output[_NT]);
      }
      return contents;
    }, "de_ListStackInstanceResourceDriftsOutput");
    var de_ListStackInstancesOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.Summaries === "") {
        contents[_Su] = [];
      } else if (output[_Su] != null && output[_Su][_m] != null) {
        contents[_Su] = de_StackInstanceSummaries((0, import_smithy_client4.getArrayIfSingleItem)(output[_Su][_m]), context);
      }
      if (output[_NT] != null) {
        contents[_NT] = (0, import_smithy_client4.expectString)(output[_NT]);
      }
      return contents;
    }, "de_ListStackInstancesOutput");
    var de_ListStackResourcesOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.StackResourceSummaries === "") {
        contents[_SRSt] = [];
      } else if (output[_SRSt] != null && output[_SRSt][_m] != null) {
        contents[_SRSt] = de_StackResourceSummaries((0, import_smithy_client4.getArrayIfSingleItem)(output[_SRSt][_m]), context);
      }
      if (output[_NT] != null) {
        contents[_NT] = (0, import_smithy_client4.expectString)(output[_NT]);
      }
      return contents;
    }, "de_ListStackResourcesOutput");
    var de_ListStackSetAutoDeploymentTargetsOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.Summaries === "") {
        contents[_Su] = [];
      } else if (output[_Su] != null && output[_Su][_m] != null) {
        contents[_Su] = de_StackSetAutoDeploymentTargetSummaries((0, import_smithy_client4.getArrayIfSingleItem)(output[_Su][_m]), context);
      }
      if (output[_NT] != null) {
        contents[_NT] = (0, import_smithy_client4.expectString)(output[_NT]);
      }
      return contents;
    }, "de_ListStackSetAutoDeploymentTargetsOutput");
    var de_ListStackSetOperationResultsOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.Summaries === "") {
        contents[_Su] = [];
      } else if (output[_Su] != null && output[_Su][_m] != null) {
        contents[_Su] = de_StackSetOperationResultSummaries((0, import_smithy_client4.getArrayIfSingleItem)(output[_Su][_m]), context);
      }
      if (output[_NT] != null) {
        contents[_NT] = (0, import_smithy_client4.expectString)(output[_NT]);
      }
      return contents;
    }, "de_ListStackSetOperationResultsOutput");
    var de_ListStackSetOperationsOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.Summaries === "") {
        contents[_Su] = [];
      } else if (output[_Su] != null && output[_Su][_m] != null) {
        contents[_Su] = de_StackSetOperationSummaries((0, import_smithy_client4.getArrayIfSingleItem)(output[_Su][_m]), context);
      }
      if (output[_NT] != null) {
        contents[_NT] = (0, import_smithy_client4.expectString)(output[_NT]);
      }
      return contents;
    }, "de_ListStackSetOperationsOutput");
    var de_ListStackSetsOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.Summaries === "") {
        contents[_Su] = [];
      } else if (output[_Su] != null && output[_Su][_m] != null) {
        contents[_Su] = de_StackSetSummaries((0, import_smithy_client4.getArrayIfSingleItem)(output[_Su][_m]), context);
      }
      if (output[_NT] != null) {
        contents[_NT] = (0, import_smithy_client4.expectString)(output[_NT]);
      }
      return contents;
    }, "de_ListStackSetsOutput");
    var de_ListStacksOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.StackSummaries === "") {
        contents[_SSt] = [];
      } else if (output[_SSt] != null && output[_SSt][_m] != null) {
        contents[_SSt] = de_StackSummaries((0, import_smithy_client4.getArrayIfSingleItem)(output[_SSt][_m]), context);
      }
      if (output[_NT] != null) {
        contents[_NT] = (0, import_smithy_client4.expectString)(output[_NT]);
      }
      return contents;
    }, "de_ListStacksOutput");
    var de_ListTypeRegistrationsOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.RegistrationTokenList === "") {
        contents[_RTL] = [];
      } else if (output[_RTL] != null && output[_RTL][_m] != null) {
        contents[_RTL] = de_RegistrationTokenList((0, import_smithy_client4.getArrayIfSingleItem)(output[_RTL][_m]), context);
      }
      if (output[_NT] != null) {
        contents[_NT] = (0, import_smithy_client4.expectString)(output[_NT]);
      }
      return contents;
    }, "de_ListTypeRegistrationsOutput");
    var de_ListTypesOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.TypeSummaries === "") {
        contents[_TSy] = [];
      } else if (output[_TSy] != null && output[_TSy][_m] != null) {
        contents[_TSy] = de_TypeSummaries((0, import_smithy_client4.getArrayIfSingleItem)(output[_TSy][_m]), context);
      }
      if (output[_NT] != null) {
        contents[_NT] = (0, import_smithy_client4.expectString)(output[_NT]);
      }
      return contents;
    }, "de_ListTypesOutput");
    var de_ListTypeVersionsOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.TypeVersionSummaries === "") {
        contents[_TVS] = [];
      } else if (output[_TVS] != null && output[_TVS][_m] != null) {
        contents[_TVS] = de_TypeVersionSummaries((0, import_smithy_client4.getArrayIfSingleItem)(output[_TVS][_m]), context);
      }
      if (output[_NT] != null) {
        contents[_NT] = (0, import_smithy_client4.expectString)(output[_NT]);
      }
      return contents;
    }, "de_ListTypeVersionsOutput");
    var de_LoggingConfig = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_LRA] != null) {
        contents[_LRA] = (0, import_smithy_client4.expectString)(output[_LRA]);
      }
      if (output[_LGN] != null) {
        contents[_LGN] = (0, import_smithy_client4.expectString)(output[_LGN]);
      }
      return contents;
    }, "de_LoggingConfig");
    var de_LogicalResourceIds = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, import_smithy_client4.expectString)(entry);
      });
    }, "de_LogicalResourceIds");
    var de_ManagedExecution = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_Act] != null) {
        contents[_Act] = (0, import_smithy_client4.parseBoolean)(output[_Act]);
      }
      return contents;
    }, "de_ManagedExecution");
    var de_ModuleInfo = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_TH] != null) {
        contents[_TH] = (0, import_smithy_client4.expectString)(output[_TH]);
      }
      if (output[_LIH] != null) {
        contents[_LIH] = (0, import_smithy_client4.expectString)(output[_LIH]);
      }
      return contents;
    }, "de_ModuleInfo");
    var de_NameAlreadyExistsException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_M] != null) {
        contents[_M] = (0, import_smithy_client4.expectString)(output[_M]);
      }
      return contents;
    }, "de_NameAlreadyExistsException");
    var de_NotificationARNs = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, import_smithy_client4.expectString)(entry);
      });
    }, "de_NotificationARNs");
    var de_OperationIdAlreadyExistsException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_M] != null) {
        contents[_M] = (0, import_smithy_client4.expectString)(output[_M]);
      }
      return contents;
    }, "de_OperationIdAlreadyExistsException");
    var de_OperationInProgressException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_M] != null) {
        contents[_M] = (0, import_smithy_client4.expectString)(output[_M]);
      }
      return contents;
    }, "de_OperationInProgressException");
    var de_OperationNotFoundException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_M] != null) {
        contents[_M] = (0, import_smithy_client4.expectString)(output[_M]);
      }
      return contents;
    }, "de_OperationNotFoundException");
    var de_OperationStatusCheckFailedException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_M] != null) {
        contents[_M] = (0, import_smithy_client4.expectString)(output[_M]);
      }
      return contents;
    }, "de_OperationStatusCheckFailedException");
    var de_OrganizationalUnitIdList = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, import_smithy_client4.expectString)(entry);
      });
    }, "de_OrganizationalUnitIdList");
    var de_Output = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_OK] != null) {
        contents[_OK] = (0, import_smithy_client4.expectString)(output[_OK]);
      }
      if (output[_OV] != null) {
        contents[_OV] = (0, import_smithy_client4.expectString)(output[_OV]);
      }
      if (output[_D] != null) {
        contents[_D] = (0, import_smithy_client4.expectString)(output[_D]);
      }
      if (output[_EN] != null) {
        contents[_EN] = (0, import_smithy_client4.expectString)(output[_EN]);
      }
      return contents;
    }, "de_Output");
    var de_Outputs = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_Output(entry, context);
      });
    }, "de_Outputs");
    var de_Parameter = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_PK] != null) {
        contents[_PK] = (0, import_smithy_client4.expectString)(output[_PK]);
      }
      if (output[_PV] != null) {
        contents[_PV] = (0, import_smithy_client4.expectString)(output[_PV]);
      }
      if (output[_UPV] != null) {
        contents[_UPV] = (0, import_smithy_client4.parseBoolean)(output[_UPV]);
      }
      if (output[_RV] != null) {
        contents[_RV] = (0, import_smithy_client4.expectString)(output[_RV]);
      }
      return contents;
    }, "de_Parameter");
    var de_ParameterConstraints = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.AllowedValues === "") {
        contents[_AV] = [];
      } else if (output[_AV] != null && output[_AV][_m] != null) {
        contents[_AV] = de_AllowedValues((0, import_smithy_client4.getArrayIfSingleItem)(output[_AV][_m]), context);
      }
      return contents;
    }, "de_ParameterConstraints");
    var de_ParameterDeclaration = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_PK] != null) {
        contents[_PK] = (0, import_smithy_client4.expectString)(output[_PK]);
      }
      if (output[_DV] != null) {
        contents[_DV] = (0, import_smithy_client4.expectString)(output[_DV]);
      }
      if (output[_PTa] != null) {
        contents[_PTa] = (0, import_smithy_client4.expectString)(output[_PTa]);
      }
      if (output[_NE] != null) {
        contents[_NE] = (0, import_smithy_client4.parseBoolean)(output[_NE]);
      }
      if (output[_D] != null) {
        contents[_D] = (0, import_smithy_client4.expectString)(output[_D]);
      }
      if (output[_PCa] != null) {
        contents[_PCa] = de_ParameterConstraints(output[_PCa], context);
      }
      return contents;
    }, "de_ParameterDeclaration");
    var de_ParameterDeclarations = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_ParameterDeclaration(entry, context);
      });
    }, "de_ParameterDeclarations");
    var de_Parameters = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_Parameter(entry, context);
      });
    }, "de_Parameters");
    var de_PhysicalResourceIdContext = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_PhysicalResourceIdContextKeyValuePair(entry, context);
      });
    }, "de_PhysicalResourceIdContext");
    var de_PhysicalResourceIdContextKeyValuePair = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_K] != null) {
        contents[_K] = (0, import_smithy_client4.expectString)(output[_K]);
      }
      if (output[_Val] != null) {
        contents[_Val] = (0, import_smithy_client4.expectString)(output[_Val]);
      }
      return contents;
    }, "de_PhysicalResourceIdContextKeyValuePair");
    var de_PropertyDifference = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_PPr] != null) {
        contents[_PPr] = (0, import_smithy_client4.expectString)(output[_PPr]);
      }
      if (output[_EV] != null) {
        contents[_EV] = (0, import_smithy_client4.expectString)(output[_EV]);
      }
      if (output[_AVc] != null) {
        contents[_AVc] = (0, import_smithy_client4.expectString)(output[_AVc]);
      }
      if (output[_DTi] != null) {
        contents[_DTi] = (0, import_smithy_client4.expectString)(output[_DTi]);
      }
      return contents;
    }, "de_PropertyDifference");
    var de_PropertyDifferences = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_PropertyDifference(entry, context);
      });
    }, "de_PropertyDifferences");
    var de_PublishTypeOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_PTA] != null) {
        contents[_PTA] = (0, import_smithy_client4.expectString)(output[_PTA]);
      }
      return contents;
    }, "de_PublishTypeOutput");
    var de_RecordHandlerProgressOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      return contents;
    }, "de_RecordHandlerProgressOutput");
    var de_RegionList = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, import_smithy_client4.expectString)(entry);
      });
    }, "de_RegionList");
    var de_RegisterPublisherOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_PI] != null) {
        contents[_PI] = (0, import_smithy_client4.expectString)(output[_PI]);
      }
      return contents;
    }, "de_RegisterPublisherOutput");
    var de_RegisterTypeOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_RTeg] != null) {
        contents[_RTeg] = (0, import_smithy_client4.expectString)(output[_RTeg]);
      }
      return contents;
    }, "de_RegisterTypeOutput");
    var de_RegistrationTokenList = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, import_smithy_client4.expectString)(entry);
      });
    }, "de_RegistrationTokenList");
    var de_RelatedResources = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_ScannedResource(entry, context);
      });
    }, "de_RelatedResources");
    var de_RequiredActivatedType = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_TNA] != null) {
        contents[_TNA] = (0, import_smithy_client4.expectString)(output[_TNA]);
      }
      if (output[_OTN] != null) {
        contents[_OTN] = (0, import_smithy_client4.expectString)(output[_OTN]);
      }
      if (output[_PI] != null) {
        contents[_PI] = (0, import_smithy_client4.expectString)(output[_PI]);
      }
      if (output.SupportedMajorVersions === "") {
        contents[_SMV] = [];
      } else if (output[_SMV] != null && output[_SMV][_m] != null) {
        contents[_SMV] = de_SupportedMajorVersions((0, import_smithy_client4.getArrayIfSingleItem)(output[_SMV][_m]), context);
      }
      return contents;
    }, "de_RequiredActivatedType");
    var de_RequiredActivatedTypes = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_RequiredActivatedType(entry, context);
      });
    }, "de_RequiredActivatedTypes");
    var de_ResourceChange = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_PA] != null) {
        contents[_PA] = (0, import_smithy_client4.expectString)(output[_PA]);
      }
      if (output[_A] != null) {
        contents[_A] = (0, import_smithy_client4.expectString)(output[_A]);
      }
      if (output[_LRI] != null) {
        contents[_LRI] = (0, import_smithy_client4.expectString)(output[_LRI]);
      }
      if (output[_PRI] != null) {
        contents[_PRI] = (0, import_smithy_client4.expectString)(output[_PRI]);
      }
      if (output[_RTes] != null) {
        contents[_RTes] = (0, import_smithy_client4.expectString)(output[_RTes]);
      }
      if (output[_Rep] != null) {
        contents[_Rep] = (0, import_smithy_client4.expectString)(output[_Rep]);
      }
      if (output.Scope === "") {
        contents[_Sco] = [];
      } else if (output[_Sco] != null && output[_Sco][_m] != null) {
        contents[_Sco] = de_Scope((0, import_smithy_client4.getArrayIfSingleItem)(output[_Sco][_m]), context);
      }
      if (output.Details === "") {
        contents[_De] = [];
      } else if (output[_De] != null && output[_De][_m] != null) {
        contents[_De] = de_ResourceChangeDetails((0, import_smithy_client4.getArrayIfSingleItem)(output[_De][_m]), context);
      }
      if (output[_CSIh] != null) {
        contents[_CSIh] = (0, import_smithy_client4.expectString)(output[_CSIh]);
      }
      if (output[_MI] != null) {
        contents[_MI] = de_ModuleInfo(output[_MI], context);
      }
      if (output[_BC] != null) {
        contents[_BC] = (0, import_smithy_client4.expectString)(output[_BC]);
      }
      if (output[_AC] != null) {
        contents[_AC] = (0, import_smithy_client4.expectString)(output[_AC]);
      }
      return contents;
    }, "de_ResourceChange");
    var de_ResourceChangeDetail = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_Tar] != null) {
        contents[_Tar] = de_ResourceTargetDefinition(output[_Tar], context);
      }
      if (output[_Ev] != null) {
        contents[_Ev] = (0, import_smithy_client4.expectString)(output[_Ev]);
      }
      if (output[_CSh] != null) {
        contents[_CSh] = (0, import_smithy_client4.expectString)(output[_CSh]);
      }
      if (output[_CE] != null) {
        contents[_CE] = (0, import_smithy_client4.expectString)(output[_CE]);
      }
      return contents;
    }, "de_ResourceChangeDetail");
    var de_ResourceChangeDetails = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_ResourceChangeDetail(entry, context);
      });
    }, "de_ResourceChangeDetails");
    var de_ResourceDetail = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_RTes] != null) {
        contents[_RTes] = (0, import_smithy_client4.expectString)(output[_RTes]);
      }
      if (output[_LRI] != null) {
        contents[_LRI] = (0, import_smithy_client4.expectString)(output[_LRI]);
      }
      if (output.ResourceIdentifier === "") {
        contents[_RI] = {};
      } else if (output[_RI] != null && output[_RI][_e] != null) {
        contents[_RI] = de_ResourceIdentifierProperties((0, import_smithy_client4.getArrayIfSingleItem)(output[_RI][_e]), context);
      }
      if (output[_RSeso] != null) {
        contents[_RSeso] = (0, import_smithy_client4.expectString)(output[_RSeso]);
      }
      if (output[_RSR] != null) {
        contents[_RSR] = (0, import_smithy_client4.expectString)(output[_RSR]);
      }
      if (output.Warnings === "") {
        contents[_W] = [];
      } else if (output[_W] != null && output[_W][_m] != null) {
        contents[_W] = de_WarningDetails((0, import_smithy_client4.getArrayIfSingleItem)(output[_W][_m]), context);
      }
      return contents;
    }, "de_ResourceDetail");
    var de_ResourceDetails = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_ResourceDetail(entry, context);
      });
    }, "de_ResourceDetails");
    var de_ResourceIdentifierProperties = /* @__PURE__ */ __name((output, context) => {
      return output.reduce((acc, pair) => {
        if (pair["value"] === null) {
          return acc;
        }
        acc[pair["key"]] = (0, import_smithy_client4.expectString)(pair["value"]);
        return acc;
      }, {});
    }, "de_ResourceIdentifierProperties");
    var de_ResourceIdentifiers = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, import_smithy_client4.expectString)(entry);
      });
    }, "de_ResourceIdentifiers");
    var de_ResourceIdentifierSummaries = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_ResourceIdentifierSummary(entry, context);
      });
    }, "de_ResourceIdentifierSummaries");
    var de_ResourceIdentifierSummary = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_RTes] != null) {
        contents[_RTes] = (0, import_smithy_client4.expectString)(output[_RTes]);
      }
      if (output.LogicalResourceIds === "") {
        contents[_LRIo] = [];
      } else if (output[_LRIo] != null && output[_LRIo][_m] != null) {
        contents[_LRIo] = de_LogicalResourceIds((0, import_smithy_client4.getArrayIfSingleItem)(output[_LRIo][_m]), context);
      }
      if (output.ResourceIdentifiers === "") {
        contents[_RIe] = [];
      } else if (output[_RIe] != null && output[_RIe][_m] != null) {
        contents[_RIe] = de_ResourceIdentifiers((0, import_smithy_client4.getArrayIfSingleItem)(output[_RIe][_m]), context);
      }
      return contents;
    }, "de_ResourceIdentifierSummary");
    var de_ResourceScanInProgressException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_M] != null) {
        contents[_M] = (0, import_smithy_client4.expectString)(output[_M]);
      }
      return contents;
    }, "de_ResourceScanInProgressException");
    var de_ResourceScanLimitExceededException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_M] != null) {
        contents[_M] = (0, import_smithy_client4.expectString)(output[_M]);
      }
      return contents;
    }, "de_ResourceScanLimitExceededException");
    var de_ResourceScanNotFoundException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_M] != null) {
        contents[_M] = (0, import_smithy_client4.expectString)(output[_M]);
      }
      return contents;
    }, "de_ResourceScanNotFoundException");
    var de_ResourceScanSummaries = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_ResourceScanSummary(entry, context);
      });
    }, "de_ResourceScanSummaries");
    var de_ResourceScanSummary = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_RSI] != null) {
        contents[_RSI] = (0, import_smithy_client4.expectString)(output[_RSI]);
      }
      if (output[_S] != null) {
        contents[_S] = (0, import_smithy_client4.expectString)(output[_S]);
      }
      if (output[_SRt] != null) {
        contents[_SRt] = (0, import_smithy_client4.expectString)(output[_SRt]);
      }
      if (output[_ST] != null) {
        contents[_ST] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_ST]));
      }
      if (output[_ET] != null) {
        contents[_ET] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_ET]));
      }
      if (output[_PC] != null) {
        contents[_PC] = (0, import_smithy_client4.strictParseFloat)(output[_PC]);
      }
      return contents;
    }, "de_ResourceScanSummary");
    var de_ResourceTargetDefinition = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_At] != null) {
        contents[_At] = (0, import_smithy_client4.expectString)(output[_At]);
      }
      if (output[_N] != null) {
        contents[_N] = (0, import_smithy_client4.expectString)(output[_N]);
      }
      if (output[_RReq] != null) {
        contents[_RReq] = (0, import_smithy_client4.expectString)(output[_RReq]);
      }
      if (output[_Pa] != null) {
        contents[_Pa] = (0, import_smithy_client4.expectString)(output[_Pa]);
      }
      if (output[_BV] != null) {
        contents[_BV] = (0, import_smithy_client4.expectString)(output[_BV]);
      }
      if (output[_AVf] != null) {
        contents[_AVf] = (0, import_smithy_client4.expectString)(output[_AVf]);
      }
      if (output[_ACT] != null) {
        contents[_ACT] = (0, import_smithy_client4.expectString)(output[_ACT]);
      }
      return contents;
    }, "de_ResourceTargetDefinition");
    var de_ResourceTypes = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, import_smithy_client4.expectString)(entry);
      });
    }, "de_ResourceTypes");
    var de_RollbackConfiguration = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.RollbackTriggers === "") {
        contents[_RTo] = [];
      } else if (output[_RTo] != null && output[_RTo][_m] != null) {
        contents[_RTo] = de_RollbackTriggers((0, import_smithy_client4.getArrayIfSingleItem)(output[_RTo][_m]), context);
      }
      if (output[_MTIM] != null) {
        contents[_MTIM] = (0, import_smithy_client4.strictParseInt32)(output[_MTIM]);
      }
      return contents;
    }, "de_RollbackConfiguration");
    var de_RollbackStackOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_SI] != null) {
        contents[_SI] = (0, import_smithy_client4.expectString)(output[_SI]);
      }
      return contents;
    }, "de_RollbackStackOutput");
    var de_RollbackTrigger = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_Ar] != null) {
        contents[_Ar] = (0, import_smithy_client4.expectString)(output[_Ar]);
      }
      if (output[_T] != null) {
        contents[_T] = (0, import_smithy_client4.expectString)(output[_T]);
      }
      return contents;
    }, "de_RollbackTrigger");
    var de_RollbackTriggers = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_RollbackTrigger(entry, context);
      });
    }, "de_RollbackTriggers");
    var de_ScannedResource = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_RTes] != null) {
        contents[_RTes] = (0, import_smithy_client4.expectString)(output[_RTes]);
      }
      if (output.ResourceIdentifier === "") {
        contents[_RI] = {};
      } else if (output[_RI] != null && output[_RI][_e] != null) {
        contents[_RI] = de_JazzResourceIdentifierProperties((0, import_smithy_client4.getArrayIfSingleItem)(output[_RI][_e]), context);
      }
      if (output[_MBS] != null) {
        contents[_MBS] = (0, import_smithy_client4.parseBoolean)(output[_MBS]);
      }
      return contents;
    }, "de_ScannedResource");
    var de_ScannedResources = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_ScannedResource(entry, context);
      });
    }, "de_ScannedResources");
    var de_Scope = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, import_smithy_client4.expectString)(entry);
      });
    }, "de_Scope");
    var de_SetTypeConfigurationOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_CAonf] != null) {
        contents[_CAonf] = (0, import_smithy_client4.expectString)(output[_CAonf]);
      }
      return contents;
    }, "de_SetTypeConfigurationOutput");
    var de_SetTypeDefaultVersionOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      return contents;
    }, "de_SetTypeDefaultVersionOutput");
    var de_Stack = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_SI] != null) {
        contents[_SI] = (0, import_smithy_client4.expectString)(output[_SI]);
      }
      if (output[_SN] != null) {
        contents[_SN] = (0, import_smithy_client4.expectString)(output[_SN]);
      }
      if (output[_CSIh] != null) {
        contents[_CSIh] = (0, import_smithy_client4.expectString)(output[_CSIh]);
      }
      if (output[_D] != null) {
        contents[_D] = (0, import_smithy_client4.expectString)(output[_D]);
      }
      if (output.Parameters === "") {
        contents[_P] = [];
      } else if (output[_P] != null && output[_P][_m] != null) {
        contents[_P] = de_Parameters((0, import_smithy_client4.getArrayIfSingleItem)(output[_P][_m]), context);
      }
      if (output[_CTr] != null) {
        contents[_CTr] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_CTr]));
      }
      if (output[_DTel] != null) {
        contents[_DTel] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_DTel]));
      }
      if (output[_LUT] != null) {
        contents[_LUT] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_LUT]));
      }
      if (output[_RC] != null) {
        contents[_RC] = de_RollbackConfiguration(output[_RC], context);
      }
      if (output[_SSta] != null) {
        contents[_SSta] = (0, import_smithy_client4.expectString)(output[_SSta]);
      }
      if (output[_SSR] != null) {
        contents[_SSR] = (0, import_smithy_client4.expectString)(output[_SSR]);
      }
      if (output[_DR] != null) {
        contents[_DR] = (0, import_smithy_client4.parseBoolean)(output[_DR]);
      }
      if (output.NotificationARNs === "") {
        contents[_NARN] = [];
      } else if (output[_NARN] != null && output[_NARN][_m] != null) {
        contents[_NARN] = de_NotificationARNs((0, import_smithy_client4.getArrayIfSingleItem)(output[_NARN][_m]), context);
      }
      if (output[_TIM] != null) {
        contents[_TIM] = (0, import_smithy_client4.strictParseInt32)(output[_TIM]);
      }
      if (output.Capabilities === "") {
        contents[_C] = [];
      } else if (output[_C] != null && output[_C][_m] != null) {
        contents[_C] = de_Capabilities((0, import_smithy_client4.getArrayIfSingleItem)(output[_C][_m]), context);
      }
      if (output.Outputs === "") {
        contents[_O] = [];
      } else if (output[_O] != null && output[_O][_m] != null) {
        contents[_O] = de_Outputs((0, import_smithy_client4.getArrayIfSingleItem)(output[_O][_m]), context);
      }
      if (output[_RARN] != null) {
        contents[_RARN] = (0, import_smithy_client4.expectString)(output[_RARN]);
      }
      if (output.Tags === "") {
        contents[_Ta] = [];
      } else if (output[_Ta] != null && output[_Ta][_m] != null) {
        contents[_Ta] = de_Tags((0, import_smithy_client4.getArrayIfSingleItem)(output[_Ta][_m]), context);
      }
      if (output[_ETP] != null) {
        contents[_ETP] = (0, import_smithy_client4.parseBoolean)(output[_ETP]);
      }
      if (output[_PIa] != null) {
        contents[_PIa] = (0, import_smithy_client4.expectString)(output[_PIa]);
      }
      if (output[_RIo] != null) {
        contents[_RIo] = (0, import_smithy_client4.expectString)(output[_RIo]);
      }
      if (output[_DI] != null) {
        contents[_DI] = de_StackDriftInformation(output[_DI], context);
      }
      if (output[_REOC] != null) {
        contents[_REOC] = (0, import_smithy_client4.parseBoolean)(output[_REOC]);
      }
      if (output[_DM] != null) {
        contents[_DM] = (0, import_smithy_client4.expectString)(output[_DM]);
      }
      if (output[_DSeta] != null) {
        contents[_DSeta] = (0, import_smithy_client4.expectString)(output[_DSeta]);
      }
      return contents;
    }, "de_Stack");
    var de_StackDriftInformation = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_SDS] != null) {
        contents[_SDS] = (0, import_smithy_client4.expectString)(output[_SDS]);
      }
      if (output[_LCT] != null) {
        contents[_LCT] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_LCT]));
      }
      return contents;
    }, "de_StackDriftInformation");
    var de_StackDriftInformationSummary = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_SDS] != null) {
        contents[_SDS] = (0, import_smithy_client4.expectString)(output[_SDS]);
      }
      if (output[_LCT] != null) {
        contents[_LCT] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_LCT]));
      }
      return contents;
    }, "de_StackDriftInformationSummary");
    var de_StackEvent = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_SI] != null) {
        contents[_SI] = (0, import_smithy_client4.expectString)(output[_SI]);
      }
      if (output[_EI] != null) {
        contents[_EI] = (0, import_smithy_client4.expectString)(output[_EI]);
      }
      if (output[_SN] != null) {
        contents[_SN] = (0, import_smithy_client4.expectString)(output[_SN]);
      }
      if (output[_LRI] != null) {
        contents[_LRI] = (0, import_smithy_client4.expectString)(output[_LRI]);
      }
      if (output[_PRI] != null) {
        contents[_PRI] = (0, import_smithy_client4.expectString)(output[_PRI]);
      }
      if (output[_RTes] != null) {
        contents[_RTes] = (0, import_smithy_client4.expectString)(output[_RTes]);
      }
      if (output[_Ti] != null) {
        contents[_Ti] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_Ti]));
      }
      if (output[_RSeso] != null) {
        contents[_RSeso] = (0, import_smithy_client4.expectString)(output[_RSeso]);
      }
      if (output[_RSR] != null) {
        contents[_RSR] = (0, import_smithy_client4.expectString)(output[_RSR]);
      }
      if (output[_RPe] != null) {
        contents[_RPe] = (0, import_smithy_client4.expectString)(output[_RPe]);
      }
      if (output[_CRT] != null) {
        contents[_CRT] = (0, import_smithy_client4.expectString)(output[_CRT]);
      }
      if (output[_HT] != null) {
        contents[_HT] = (0, import_smithy_client4.expectString)(output[_HT]);
      }
      if (output[_HS] != null) {
        contents[_HS] = (0, import_smithy_client4.expectString)(output[_HS]);
      }
      if (output[_HSR] != null) {
        contents[_HSR] = (0, import_smithy_client4.expectString)(output[_HSR]);
      }
      if (output[_HIP] != null) {
        contents[_HIP] = (0, import_smithy_client4.expectString)(output[_HIP]);
      }
      if (output[_HFM] != null) {
        contents[_HFM] = (0, import_smithy_client4.expectString)(output[_HFM]);
      }
      if (output[_DSeta] != null) {
        contents[_DSeta] = (0, import_smithy_client4.expectString)(output[_DSeta]);
      }
      return contents;
    }, "de_StackEvent");
    var de_StackEvents = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_StackEvent(entry, context);
      });
    }, "de_StackEvents");
    var de_StackInstance = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_SSI] != null) {
        contents[_SSI] = (0, import_smithy_client4.expectString)(output[_SSI]);
      }
      if (output[_Reg] != null) {
        contents[_Reg] = (0, import_smithy_client4.expectString)(output[_Reg]);
      }
      if (output[_Acc] != null) {
        contents[_Acc] = (0, import_smithy_client4.expectString)(output[_Acc]);
      }
      if (output[_SI] != null) {
        contents[_SI] = (0, import_smithy_client4.expectString)(output[_SI]);
      }
      if (output.ParameterOverrides === "") {
        contents[_PO] = [];
      } else if (output[_PO] != null && output[_PO][_m] != null) {
        contents[_PO] = de_Parameters((0, import_smithy_client4.getArrayIfSingleItem)(output[_PO][_m]), context);
      }
      if (output[_S] != null) {
        contents[_S] = (0, import_smithy_client4.expectString)(output[_S]);
      }
      if (output[_SIS] != null) {
        contents[_SIS] = de_StackInstanceComprehensiveStatus(output[_SIS], context);
      }
      if (output[_SRt] != null) {
        contents[_SRt] = (0, import_smithy_client4.expectString)(output[_SRt]);
      }
      if (output[_OUIr] != null) {
        contents[_OUIr] = (0, import_smithy_client4.expectString)(output[_OUIr]);
      }
      if (output[_DSr] != null) {
        contents[_DSr] = (0, import_smithy_client4.expectString)(output[_DSr]);
      }
      if (output[_LDCT] != null) {
        contents[_LDCT] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_LDCT]));
      }
      if (output[_LOI] != null) {
        contents[_LOI] = (0, import_smithy_client4.expectString)(output[_LOI]);
      }
      return contents;
    }, "de_StackInstance");
    var de_StackInstanceComprehensiveStatus = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_DSeta] != null) {
        contents[_DSeta] = (0, import_smithy_client4.expectString)(output[_DSeta]);
      }
      return contents;
    }, "de_StackInstanceComprehensiveStatus");
    var de_StackInstanceNotFoundException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_M] != null) {
        contents[_M] = (0, import_smithy_client4.expectString)(output[_M]);
      }
      return contents;
    }, "de_StackInstanceNotFoundException");
    var de_StackInstanceResourceDriftsSummaries = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_StackInstanceResourceDriftsSummary(entry, context);
      });
    }, "de_StackInstanceResourceDriftsSummaries");
    var de_StackInstanceResourceDriftsSummary = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_SI] != null) {
        contents[_SI] = (0, import_smithy_client4.expectString)(output[_SI]);
      }
      if (output[_LRI] != null) {
        contents[_LRI] = (0, import_smithy_client4.expectString)(output[_LRI]);
      }
      if (output[_PRI] != null) {
        contents[_PRI] = (0, import_smithy_client4.expectString)(output[_PRI]);
      }
      if (output.PhysicalResourceIdContext === "") {
        contents[_PRIC] = [];
      } else if (output[_PRIC] != null && output[_PRIC][_m] != null) {
        contents[_PRIC] = de_PhysicalResourceIdContext((0, import_smithy_client4.getArrayIfSingleItem)(output[_PRIC][_m]), context);
      }
      if (output[_RTes] != null) {
        contents[_RTes] = (0, import_smithy_client4.expectString)(output[_RTes]);
      }
      if (output.PropertyDifferences === "") {
        contents[_PD] = [];
      } else if (output[_PD] != null && output[_PD][_m] != null) {
        contents[_PD] = de_PropertyDifferences((0, import_smithy_client4.getArrayIfSingleItem)(output[_PD][_m]), context);
      }
      if (output[_SRDS] != null) {
        contents[_SRDS] = (0, import_smithy_client4.expectString)(output[_SRDS]);
      }
      if (output[_Ti] != null) {
        contents[_Ti] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_Ti]));
      }
      return contents;
    }, "de_StackInstanceResourceDriftsSummary");
    var de_StackInstanceSummaries = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_StackInstanceSummary(entry, context);
      });
    }, "de_StackInstanceSummaries");
    var de_StackInstanceSummary = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_SSI] != null) {
        contents[_SSI] = (0, import_smithy_client4.expectString)(output[_SSI]);
      }
      if (output[_Reg] != null) {
        contents[_Reg] = (0, import_smithy_client4.expectString)(output[_Reg]);
      }
      if (output[_Acc] != null) {
        contents[_Acc] = (0, import_smithy_client4.expectString)(output[_Acc]);
      }
      if (output[_SI] != null) {
        contents[_SI] = (0, import_smithy_client4.expectString)(output[_SI]);
      }
      if (output[_S] != null) {
        contents[_S] = (0, import_smithy_client4.expectString)(output[_S]);
      }
      if (output[_SRt] != null) {
        contents[_SRt] = (0, import_smithy_client4.expectString)(output[_SRt]);
      }
      if (output[_SIS] != null) {
        contents[_SIS] = de_StackInstanceComprehensiveStatus(output[_SIS], context);
      }
      if (output[_OUIr] != null) {
        contents[_OUIr] = (0, import_smithy_client4.expectString)(output[_OUIr]);
      }
      if (output[_DSr] != null) {
        contents[_DSr] = (0, import_smithy_client4.expectString)(output[_DSr]);
      }
      if (output[_LDCT] != null) {
        contents[_LDCT] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_LDCT]));
      }
      if (output[_LOI] != null) {
        contents[_LOI] = (0, import_smithy_client4.expectString)(output[_LOI]);
      }
      return contents;
    }, "de_StackInstanceSummary");
    var de_StackNotFoundException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_M] != null) {
        contents[_M] = (0, import_smithy_client4.expectString)(output[_M]);
      }
      return contents;
    }, "de_StackNotFoundException");
    var de_StackResource = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_SN] != null) {
        contents[_SN] = (0, import_smithy_client4.expectString)(output[_SN]);
      }
      if (output[_SI] != null) {
        contents[_SI] = (0, import_smithy_client4.expectString)(output[_SI]);
      }
      if (output[_LRI] != null) {
        contents[_LRI] = (0, import_smithy_client4.expectString)(output[_LRI]);
      }
      if (output[_PRI] != null) {
        contents[_PRI] = (0, import_smithy_client4.expectString)(output[_PRI]);
      }
      if (output[_RTes] != null) {
        contents[_RTes] = (0, import_smithy_client4.expectString)(output[_RTes]);
      }
      if (output[_Ti] != null) {
        contents[_Ti] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_Ti]));
      }
      if (output[_RSeso] != null) {
        contents[_RSeso] = (0, import_smithy_client4.expectString)(output[_RSeso]);
      }
      if (output[_RSR] != null) {
        contents[_RSR] = (0, import_smithy_client4.expectString)(output[_RSR]);
      }
      if (output[_D] != null) {
        contents[_D] = (0, import_smithy_client4.expectString)(output[_D]);
      }
      if (output[_DI] != null) {
        contents[_DI] = de_StackResourceDriftInformation(output[_DI], context);
      }
      if (output[_MI] != null) {
        contents[_MI] = de_ModuleInfo(output[_MI], context);
      }
      return contents;
    }, "de_StackResource");
    var de_StackResourceDetail = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_SN] != null) {
        contents[_SN] = (0, import_smithy_client4.expectString)(output[_SN]);
      }
      if (output[_SI] != null) {
        contents[_SI] = (0, import_smithy_client4.expectString)(output[_SI]);
      }
      if (output[_LRI] != null) {
        contents[_LRI] = (0, import_smithy_client4.expectString)(output[_LRI]);
      }
      if (output[_PRI] != null) {
        contents[_PRI] = (0, import_smithy_client4.expectString)(output[_PRI]);
      }
      if (output[_RTes] != null) {
        contents[_RTes] = (0, import_smithy_client4.expectString)(output[_RTes]);
      }
      if (output[_LUTa] != null) {
        contents[_LUTa] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_LUTa]));
      }
      if (output[_RSeso] != null) {
        contents[_RSeso] = (0, import_smithy_client4.expectString)(output[_RSeso]);
      }
      if (output[_RSR] != null) {
        contents[_RSR] = (0, import_smithy_client4.expectString)(output[_RSR]);
      }
      if (output[_D] != null) {
        contents[_D] = (0, import_smithy_client4.expectString)(output[_D]);
      }
      if (output[_Me] != null) {
        contents[_Me] = (0, import_smithy_client4.expectString)(output[_Me]);
      }
      if (output[_DI] != null) {
        contents[_DI] = de_StackResourceDriftInformation(output[_DI], context);
      }
      if (output[_MI] != null) {
        contents[_MI] = de_ModuleInfo(output[_MI], context);
      }
      return contents;
    }, "de_StackResourceDetail");
    var de_StackResourceDrift = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_SI] != null) {
        contents[_SI] = (0, import_smithy_client4.expectString)(output[_SI]);
      }
      if (output[_LRI] != null) {
        contents[_LRI] = (0, import_smithy_client4.expectString)(output[_LRI]);
      }
      if (output[_PRI] != null) {
        contents[_PRI] = (0, import_smithy_client4.expectString)(output[_PRI]);
      }
      if (output.PhysicalResourceIdContext === "") {
        contents[_PRIC] = [];
      } else if (output[_PRIC] != null && output[_PRIC][_m] != null) {
        contents[_PRIC] = de_PhysicalResourceIdContext((0, import_smithy_client4.getArrayIfSingleItem)(output[_PRIC][_m]), context);
      }
      if (output[_RTes] != null) {
        contents[_RTes] = (0, import_smithy_client4.expectString)(output[_RTes]);
      }
      if (output[_EP] != null) {
        contents[_EP] = (0, import_smithy_client4.expectString)(output[_EP]);
      }
      if (output[_AP] != null) {
        contents[_AP] = (0, import_smithy_client4.expectString)(output[_AP]);
      }
      if (output.PropertyDifferences === "") {
        contents[_PD] = [];
      } else if (output[_PD] != null && output[_PD][_m] != null) {
        contents[_PD] = de_PropertyDifferences((0, import_smithy_client4.getArrayIfSingleItem)(output[_PD][_m]), context);
      }
      if (output[_SRDS] != null) {
        contents[_SRDS] = (0, import_smithy_client4.expectString)(output[_SRDS]);
      }
      if (output[_Ti] != null) {
        contents[_Ti] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_Ti]));
      }
      if (output[_MI] != null) {
        contents[_MI] = de_ModuleInfo(output[_MI], context);
      }
      return contents;
    }, "de_StackResourceDrift");
    var de_StackResourceDriftInformation = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_SRDS] != null) {
        contents[_SRDS] = (0, import_smithy_client4.expectString)(output[_SRDS]);
      }
      if (output[_LCT] != null) {
        contents[_LCT] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_LCT]));
      }
      return contents;
    }, "de_StackResourceDriftInformation");
    var de_StackResourceDriftInformationSummary = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_SRDS] != null) {
        contents[_SRDS] = (0, import_smithy_client4.expectString)(output[_SRDS]);
      }
      if (output[_LCT] != null) {
        contents[_LCT] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_LCT]));
      }
      return contents;
    }, "de_StackResourceDriftInformationSummary");
    var de_StackResourceDrifts = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_StackResourceDrift(entry, context);
      });
    }, "de_StackResourceDrifts");
    var de_StackResources = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_StackResource(entry, context);
      });
    }, "de_StackResources");
    var de_StackResourceSummaries = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_StackResourceSummary(entry, context);
      });
    }, "de_StackResourceSummaries");
    var de_StackResourceSummary = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_LRI] != null) {
        contents[_LRI] = (0, import_smithy_client4.expectString)(output[_LRI]);
      }
      if (output[_PRI] != null) {
        contents[_PRI] = (0, import_smithy_client4.expectString)(output[_PRI]);
      }
      if (output[_RTes] != null) {
        contents[_RTes] = (0, import_smithy_client4.expectString)(output[_RTes]);
      }
      if (output[_LUTa] != null) {
        contents[_LUTa] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_LUTa]));
      }
      if (output[_RSeso] != null) {
        contents[_RSeso] = (0, import_smithy_client4.expectString)(output[_RSeso]);
      }
      if (output[_RSR] != null) {
        contents[_RSR] = (0, import_smithy_client4.expectString)(output[_RSR]);
      }
      if (output[_DI] != null) {
        contents[_DI] = de_StackResourceDriftInformationSummary(output[_DI], context);
      }
      if (output[_MI] != null) {
        contents[_MI] = de_ModuleInfo(output[_MI], context);
      }
      return contents;
    }, "de_StackResourceSummary");
    var de_Stacks = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_Stack(entry, context);
      });
    }, "de_Stacks");
    var de_StackSet = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_SSN] != null) {
        contents[_SSN] = (0, import_smithy_client4.expectString)(output[_SSN]);
      }
      if (output[_SSI] != null) {
        contents[_SSI] = (0, import_smithy_client4.expectString)(output[_SSI]);
      }
      if (output[_D] != null) {
        contents[_D] = (0, import_smithy_client4.expectString)(output[_D]);
      }
      if (output[_S] != null) {
        contents[_S] = (0, import_smithy_client4.expectString)(output[_S]);
      }
      if (output[_TB] != null) {
        contents[_TB] = (0, import_smithy_client4.expectString)(output[_TB]);
      }
      if (output.Parameters === "") {
        contents[_P] = [];
      } else if (output[_P] != null && output[_P][_m] != null) {
        contents[_P] = de_Parameters((0, import_smithy_client4.getArrayIfSingleItem)(output[_P][_m]), context);
      }
      if (output.Capabilities === "") {
        contents[_C] = [];
      } else if (output[_C] != null && output[_C][_m] != null) {
        contents[_C] = de_Capabilities((0, import_smithy_client4.getArrayIfSingleItem)(output[_C][_m]), context);
      }
      if (output.Tags === "") {
        contents[_Ta] = [];
      } else if (output[_Ta] != null && output[_Ta][_m] != null) {
        contents[_Ta] = de_Tags((0, import_smithy_client4.getArrayIfSingleItem)(output[_Ta][_m]), context);
      }
      if (output[_SSARN] != null) {
        contents[_SSARN] = (0, import_smithy_client4.expectString)(output[_SSARN]);
      }
      if (output[_ARARN] != null) {
        contents[_ARARN] = (0, import_smithy_client4.expectString)(output[_ARARN]);
      }
      if (output[_ERN] != null) {
        contents[_ERN] = (0, import_smithy_client4.expectString)(output[_ERN]);
      }
      if (output[_SSDDD] != null) {
        contents[_SSDDD] = de_StackSetDriftDetectionDetails(output[_SSDDD], context);
      }
      if (output[_AD] != null) {
        contents[_AD] = de_AutoDeployment(output[_AD], context);
      }
      if (output[_PM] != null) {
        contents[_PM] = (0, import_smithy_client4.expectString)(output[_PM]);
      }
      if (output.OrganizationalUnitIds === "") {
        contents[_OUI] = [];
      } else if (output[_OUI] != null && output[_OUI][_m] != null) {
        contents[_OUI] = de_OrganizationalUnitIdList((0, import_smithy_client4.getArrayIfSingleItem)(output[_OUI][_m]), context);
      }
      if (output[_ME] != null) {
        contents[_ME] = de_ManagedExecution(output[_ME], context);
      }
      if (output.Regions === "") {
        contents[_Re] = [];
      } else if (output[_Re] != null && output[_Re][_m] != null) {
        contents[_Re] = de_RegionList((0, import_smithy_client4.getArrayIfSingleItem)(output[_Re][_m]), context);
      }
      return contents;
    }, "de_StackSet");
    var de_StackSetAutoDeploymentTargetSummaries = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_StackSetAutoDeploymentTargetSummary(entry, context);
      });
    }, "de_StackSetAutoDeploymentTargetSummaries");
    var de_StackSetAutoDeploymentTargetSummary = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_OUIr] != null) {
        contents[_OUIr] = (0, import_smithy_client4.expectString)(output[_OUIr]);
      }
      if (output.Regions === "") {
        contents[_Re] = [];
      } else if (output[_Re] != null && output[_Re][_m] != null) {
        contents[_Re] = de_RegionList((0, import_smithy_client4.getArrayIfSingleItem)(output[_Re][_m]), context);
      }
      return contents;
    }, "de_StackSetAutoDeploymentTargetSummary");
    var de_StackSetDriftDetectionDetails = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_DSr] != null) {
        contents[_DSr] = (0, import_smithy_client4.expectString)(output[_DSr]);
      }
      if (output[_DDS] != null) {
        contents[_DDS] = (0, import_smithy_client4.expectString)(output[_DDS]);
      }
      if (output[_LDCT] != null) {
        contents[_LDCT] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_LDCT]));
      }
      if (output[_TSIC] != null) {
        contents[_TSIC] = (0, import_smithy_client4.strictParseInt32)(output[_TSIC]);
      }
      if (output[_DSIC] != null) {
        contents[_DSIC] = (0, import_smithy_client4.strictParseInt32)(output[_DSIC]);
      }
      if (output[_ISSIC] != null) {
        contents[_ISSIC] = (0, import_smithy_client4.strictParseInt32)(output[_ISSIC]);
      }
      if (output[_IPSIC] != null) {
        contents[_IPSIC] = (0, import_smithy_client4.strictParseInt32)(output[_IPSIC]);
      }
      if (output[_FSIC] != null) {
        contents[_FSIC] = (0, import_smithy_client4.strictParseInt32)(output[_FSIC]);
      }
      return contents;
    }, "de_StackSetDriftDetectionDetails");
    var de_StackSetNotEmptyException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_M] != null) {
        contents[_M] = (0, import_smithy_client4.expectString)(output[_M]);
      }
      return contents;
    }, "de_StackSetNotEmptyException");
    var de_StackSetNotFoundException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_M] != null) {
        contents[_M] = (0, import_smithy_client4.expectString)(output[_M]);
      }
      return contents;
    }, "de_StackSetNotFoundException");
    var de_StackSetOperation = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_OI] != null) {
        contents[_OI] = (0, import_smithy_client4.expectString)(output[_OI]);
      }
      if (output[_SSI] != null) {
        contents[_SSI] = (0, import_smithy_client4.expectString)(output[_SSI]);
      }
      if (output[_A] != null) {
        contents[_A] = (0, import_smithy_client4.expectString)(output[_A]);
      }
      if (output[_S] != null) {
        contents[_S] = (0, import_smithy_client4.expectString)(output[_S]);
      }
      if (output[_OP] != null) {
        contents[_OP] = de_StackSetOperationPreferences(output[_OP], context);
      }
      if (output[_RSe] != null) {
        contents[_RSe] = (0, import_smithy_client4.parseBoolean)(output[_RSe]);
      }
      if (output[_ARARN] != null) {
        contents[_ARARN] = (0, import_smithy_client4.expectString)(output[_ARARN]);
      }
      if (output[_ERN] != null) {
        contents[_ERN] = (0, import_smithy_client4.expectString)(output[_ERN]);
      }
      if (output[_CTre] != null) {
        contents[_CTre] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_CTre]));
      }
      if (output[_ETn] != null) {
        contents[_ETn] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_ETn]));
      }
      if (output[_DTep] != null) {
        contents[_DTep] = de_DeploymentTargets(output[_DTep], context);
      }
      if (output[_SSDDD] != null) {
        contents[_SSDDD] = de_StackSetDriftDetectionDetails(output[_SSDDD], context);
      }
      if (output[_SRt] != null) {
        contents[_SRt] = (0, import_smithy_client4.expectString)(output[_SRt]);
      }
      if (output[_SD] != null) {
        contents[_SD] = de_StackSetOperationStatusDetails(output[_SD], context);
      }
      return contents;
    }, "de_StackSetOperation");
    var de_StackSetOperationPreferences = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_RCT] != null) {
        contents[_RCT] = (0, import_smithy_client4.expectString)(output[_RCT]);
      }
      if (output.RegionOrder === "") {
        contents[_RO] = [];
      } else if (output[_RO] != null && output[_RO][_m] != null) {
        contents[_RO] = de_RegionList((0, import_smithy_client4.getArrayIfSingleItem)(output[_RO][_m]), context);
      }
      if (output[_FTC] != null) {
        contents[_FTC] = (0, import_smithy_client4.strictParseInt32)(output[_FTC]);
      }
      if (output[_FTP] != null) {
        contents[_FTP] = (0, import_smithy_client4.strictParseInt32)(output[_FTP]);
      }
      if (output[_MCC] != null) {
        contents[_MCC] = (0, import_smithy_client4.strictParseInt32)(output[_MCC]);
      }
      if (output[_MCP] != null) {
        contents[_MCP] = (0, import_smithy_client4.strictParseInt32)(output[_MCP]);
      }
      if (output[_CM] != null) {
        contents[_CM] = (0, import_smithy_client4.expectString)(output[_CM]);
      }
      return contents;
    }, "de_StackSetOperationPreferences");
    var de_StackSetOperationResultSummaries = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_StackSetOperationResultSummary(entry, context);
      });
    }, "de_StackSetOperationResultSummaries");
    var de_StackSetOperationResultSummary = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_Acc] != null) {
        contents[_Acc] = (0, import_smithy_client4.expectString)(output[_Acc]);
      }
      if (output[_Reg] != null) {
        contents[_Reg] = (0, import_smithy_client4.expectString)(output[_Reg]);
      }
      if (output[_S] != null) {
        contents[_S] = (0, import_smithy_client4.expectString)(output[_S]);
      }
      if (output[_SRt] != null) {
        contents[_SRt] = (0, import_smithy_client4.expectString)(output[_SRt]);
      }
      if (output[_AGR] != null) {
        contents[_AGR] = de_AccountGateResult(output[_AGR], context);
      }
      if (output[_OUIr] != null) {
        contents[_OUIr] = (0, import_smithy_client4.expectString)(output[_OUIr]);
      }
      return contents;
    }, "de_StackSetOperationResultSummary");
    var de_StackSetOperationStatusDetails = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_FSIC] != null) {
        contents[_FSIC] = (0, import_smithy_client4.strictParseInt32)(output[_FSIC]);
      }
      return contents;
    }, "de_StackSetOperationStatusDetails");
    var de_StackSetOperationSummaries = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_StackSetOperationSummary(entry, context);
      });
    }, "de_StackSetOperationSummaries");
    var de_StackSetOperationSummary = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_OI] != null) {
        contents[_OI] = (0, import_smithy_client4.expectString)(output[_OI]);
      }
      if (output[_A] != null) {
        contents[_A] = (0, import_smithy_client4.expectString)(output[_A]);
      }
      if (output[_S] != null) {
        contents[_S] = (0, import_smithy_client4.expectString)(output[_S]);
      }
      if (output[_CTre] != null) {
        contents[_CTre] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_CTre]));
      }
      if (output[_ETn] != null) {
        contents[_ETn] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_ETn]));
      }
      if (output[_SRt] != null) {
        contents[_SRt] = (0, import_smithy_client4.expectString)(output[_SRt]);
      }
      if (output[_SD] != null) {
        contents[_SD] = de_StackSetOperationStatusDetails(output[_SD], context);
      }
      if (output[_OP] != null) {
        contents[_OP] = de_StackSetOperationPreferences(output[_OP], context);
      }
      return contents;
    }, "de_StackSetOperationSummary");
    var de_StackSetSummaries = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_StackSetSummary(entry, context);
      });
    }, "de_StackSetSummaries");
    var de_StackSetSummary = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_SSN] != null) {
        contents[_SSN] = (0, import_smithy_client4.expectString)(output[_SSN]);
      }
      if (output[_SSI] != null) {
        contents[_SSI] = (0, import_smithy_client4.expectString)(output[_SSI]);
      }
      if (output[_D] != null) {
        contents[_D] = (0, import_smithy_client4.expectString)(output[_D]);
      }
      if (output[_S] != null) {
        contents[_S] = (0, import_smithy_client4.expectString)(output[_S]);
      }
      if (output[_AD] != null) {
        contents[_AD] = de_AutoDeployment(output[_AD], context);
      }
      if (output[_PM] != null) {
        contents[_PM] = (0, import_smithy_client4.expectString)(output[_PM]);
      }
      if (output[_DSr] != null) {
        contents[_DSr] = (0, import_smithy_client4.expectString)(output[_DSr]);
      }
      if (output[_LDCT] != null) {
        contents[_LDCT] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_LDCT]));
      }
      if (output[_ME] != null) {
        contents[_ME] = de_ManagedExecution(output[_ME], context);
      }
      return contents;
    }, "de_StackSetSummary");
    var de_StackSummaries = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_StackSummary(entry, context);
      });
    }, "de_StackSummaries");
    var de_StackSummary = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_SI] != null) {
        contents[_SI] = (0, import_smithy_client4.expectString)(output[_SI]);
      }
      if (output[_SN] != null) {
        contents[_SN] = (0, import_smithy_client4.expectString)(output[_SN]);
      }
      if (output[_TDe] != null) {
        contents[_TDe] = (0, import_smithy_client4.expectString)(output[_TDe]);
      }
      if (output[_CTr] != null) {
        contents[_CTr] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_CTr]));
      }
      if (output[_LUT] != null) {
        contents[_LUT] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_LUT]));
      }
      if (output[_DTel] != null) {
        contents[_DTel] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_DTel]));
      }
      if (output[_SSta] != null) {
        contents[_SSta] = (0, import_smithy_client4.expectString)(output[_SSta]);
      }
      if (output[_SSR] != null) {
        contents[_SSR] = (0, import_smithy_client4.expectString)(output[_SSR]);
      }
      if (output[_PIa] != null) {
        contents[_PIa] = (0, import_smithy_client4.expectString)(output[_PIa]);
      }
      if (output[_RIo] != null) {
        contents[_RIo] = (0, import_smithy_client4.expectString)(output[_RIo]);
      }
      if (output[_DI] != null) {
        contents[_DI] = de_StackDriftInformationSummary(output[_DI], context);
      }
      return contents;
    }, "de_StackSummary");
    var de_StageList = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, import_smithy_client4.expectString)(entry);
      });
    }, "de_StageList");
    var de_StaleRequestException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_M] != null) {
        contents[_M] = (0, import_smithy_client4.expectString)(output[_M]);
      }
      return contents;
    }, "de_StaleRequestException");
    var de_StartResourceScanOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_RSI] != null) {
        contents[_RSI] = (0, import_smithy_client4.expectString)(output[_RSI]);
      }
      return contents;
    }, "de_StartResourceScanOutput");
    var de_StopStackSetOperationOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      return contents;
    }, "de_StopStackSetOperationOutput");
    var de_SupportedMajorVersions = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, import_smithy_client4.strictParseInt32)(entry);
      });
    }, "de_SupportedMajorVersions");
    var de_Tag = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_K] != null) {
        contents[_K] = (0, import_smithy_client4.expectString)(output[_K]);
      }
      if (output[_Val] != null) {
        contents[_Val] = (0, import_smithy_client4.expectString)(output[_Val]);
      }
      return contents;
    }, "de_Tag");
    var de_Tags = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_Tag(entry, context);
      });
    }, "de_Tags");
    var de_TemplateConfiguration = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_DPe] != null) {
        contents[_DPe] = (0, import_smithy_client4.expectString)(output[_DPe]);
      }
      if (output[_URP] != null) {
        contents[_URP] = (0, import_smithy_client4.expectString)(output[_URP]);
      }
      return contents;
    }, "de_TemplateConfiguration");
    var de_TemplateParameter = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_PK] != null) {
        contents[_PK] = (0, import_smithy_client4.expectString)(output[_PK]);
      }
      if (output[_DV] != null) {
        contents[_DV] = (0, import_smithy_client4.expectString)(output[_DV]);
      }
      if (output[_NE] != null) {
        contents[_NE] = (0, import_smithy_client4.parseBoolean)(output[_NE]);
      }
      if (output[_D] != null) {
        contents[_D] = (0, import_smithy_client4.expectString)(output[_D]);
      }
      return contents;
    }, "de_TemplateParameter");
    var de_TemplateParameters = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_TemplateParameter(entry, context);
      });
    }, "de_TemplateParameters");
    var de_TemplateProgress = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_RSesou] != null) {
        contents[_RSesou] = (0, import_smithy_client4.strictParseInt32)(output[_RSesou]);
      }
      if (output[_RF] != null) {
        contents[_RF] = (0, import_smithy_client4.strictParseInt32)(output[_RF]);
      }
      if (output[_RPes] != null) {
        contents[_RPes] = (0, import_smithy_client4.strictParseInt32)(output[_RPes]);
      }
      if (output[_RPeso] != null) {
        contents[_RPeso] = (0, import_smithy_client4.strictParseInt32)(output[_RPeso]);
      }
      return contents;
    }, "de_TemplateProgress");
    var de_TemplateSummaries = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_TemplateSummary(entry, context);
      });
    }, "de_TemplateSummaries");
    var de_TemplateSummary = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_GTI] != null) {
        contents[_GTI] = (0, import_smithy_client4.expectString)(output[_GTI]);
      }
      if (output[_GTN] != null) {
        contents[_GTN] = (0, import_smithy_client4.expectString)(output[_GTN]);
      }
      if (output[_S] != null) {
        contents[_S] = (0, import_smithy_client4.expectString)(output[_S]);
      }
      if (output[_SRt] != null) {
        contents[_SRt] = (0, import_smithy_client4.expectString)(output[_SRt]);
      }
      if (output[_CTr] != null) {
        contents[_CTr] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_CTr]));
      }
      if (output[_LUT] != null) {
        contents[_LUT] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_LUT]));
      }
      if (output[_NOR] != null) {
        contents[_NOR] = (0, import_smithy_client4.strictParseInt32)(output[_NOR]);
      }
      return contents;
    }, "de_TemplateSummary");
    var de_TestTypeOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_TVA] != null) {
        contents[_TVA] = (0, import_smithy_client4.expectString)(output[_TVA]);
      }
      return contents;
    }, "de_TestTypeOutput");
    var de_TokenAlreadyExistsException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_M] != null) {
        contents[_M] = (0, import_smithy_client4.expectString)(output[_M]);
      }
      return contents;
    }, "de_TokenAlreadyExistsException");
    var de_TransformsList = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, import_smithy_client4.expectString)(entry);
      });
    }, "de_TransformsList");
    var de_TypeConfigurationDetails = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_Ar] != null) {
        contents[_Ar] = (0, import_smithy_client4.expectString)(output[_Ar]);
      }
      if (output[_Al] != null) {
        contents[_Al] = (0, import_smithy_client4.expectString)(output[_Al]);
      }
      if (output[_Co] != null) {
        contents[_Co] = (0, import_smithy_client4.expectString)(output[_Co]);
      }
      if (output[_LU] != null) {
        contents[_LU] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_LU]));
      }
      if (output[_TA] != null) {
        contents[_TA] = (0, import_smithy_client4.expectString)(output[_TA]);
      }
      if (output[_TN] != null) {
        contents[_TN] = (0, import_smithy_client4.expectString)(output[_TN]);
      }
      if (output[_IDC] != null) {
        contents[_IDC] = (0, import_smithy_client4.parseBoolean)(output[_IDC]);
      }
      return contents;
    }, "de_TypeConfigurationDetails");
    var de_TypeConfigurationDetailsList = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_TypeConfigurationDetails(entry, context);
      });
    }, "de_TypeConfigurationDetailsList");
    var de_TypeConfigurationIdentifier = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_TA] != null) {
        contents[_TA] = (0, import_smithy_client4.expectString)(output[_TA]);
      }
      if (output[_TCA] != null) {
        contents[_TCA] = (0, import_smithy_client4.expectString)(output[_TCA]);
      }
      if (output[_TCAy] != null) {
        contents[_TCAy] = (0, import_smithy_client4.expectString)(output[_TCAy]);
      }
      if (output[_T] != null) {
        contents[_T] = (0, import_smithy_client4.expectString)(output[_T]);
      }
      if (output[_TN] != null) {
        contents[_TN] = (0, import_smithy_client4.expectString)(output[_TN]);
      }
      return contents;
    }, "de_TypeConfigurationIdentifier");
    var de_TypeConfigurationNotFoundException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_M] != null) {
        contents[_M] = (0, import_smithy_client4.expectString)(output[_M]);
      }
      return contents;
    }, "de_TypeConfigurationNotFoundException");
    var de_TypeNotFoundException = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_M] != null) {
        contents[_M] = (0, import_smithy_client4.expectString)(output[_M]);
      }
      return contents;
    }, "de_TypeNotFoundException");
    var de_TypeSummaries = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_TypeSummary(entry, context);
      });
    }, "de_TypeSummaries");
    var de_TypeSummary = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_T] != null) {
        contents[_T] = (0, import_smithy_client4.expectString)(output[_T]);
      }
      if (output[_TN] != null) {
        contents[_TN] = (0, import_smithy_client4.expectString)(output[_TN]);
      }
      if (output[_DVI] != null) {
        contents[_DVI] = (0, import_smithy_client4.expectString)(output[_DVI]);
      }
      if (output[_TA] != null) {
        contents[_TA] = (0, import_smithy_client4.expectString)(output[_TA]);
      }
      if (output[_LU] != null) {
        contents[_LU] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_LU]));
      }
      if (output[_D] != null) {
        contents[_D] = (0, import_smithy_client4.expectString)(output[_D]);
      }
      if (output[_PI] != null) {
        contents[_PI] = (0, import_smithy_client4.expectString)(output[_PI]);
      }
      if (output[_OTN] != null) {
        contents[_OTN] = (0, import_smithy_client4.expectString)(output[_OTN]);
      }
      if (output[_PVN] != null) {
        contents[_PVN] = (0, import_smithy_client4.expectString)(output[_PVN]);
      }
      if (output[_LPV] != null) {
        contents[_LPV] = (0, import_smithy_client4.expectString)(output[_LPV]);
      }
      if (output[_PIu] != null) {
        contents[_PIu] = (0, import_smithy_client4.expectString)(output[_PIu]);
      }
      if (output[_PN] != null) {
        contents[_PN] = (0, import_smithy_client4.expectString)(output[_PN]);
      }
      if (output[_IA] != null) {
        contents[_IA] = (0, import_smithy_client4.parseBoolean)(output[_IA]);
      }
      return contents;
    }, "de_TypeSummary");
    var de_TypeVersionSummaries = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_TypeVersionSummary(entry, context);
      });
    }, "de_TypeVersionSummaries");
    var de_TypeVersionSummary = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_T] != null) {
        contents[_T] = (0, import_smithy_client4.expectString)(output[_T]);
      }
      if (output[_TN] != null) {
        contents[_TN] = (0, import_smithy_client4.expectString)(output[_TN]);
      }
      if (output[_VI] != null) {
        contents[_VI] = (0, import_smithy_client4.expectString)(output[_VI]);
      }
      if (output[_IDV] != null) {
        contents[_IDV] = (0, import_smithy_client4.parseBoolean)(output[_IDV]);
      }
      if (output[_Ar] != null) {
        contents[_Ar] = (0, import_smithy_client4.expectString)(output[_Ar]);
      }
      if (output[_TCi] != null) {
        contents[_TCi] = (0, import_smithy_client4.expectNonNull)((0, import_smithy_client4.parseRfc3339DateTimeWithOffset)(output[_TCi]));
      }
      if (output[_D] != null) {
        contents[_D] = (0, import_smithy_client4.expectString)(output[_D]);
      }
      if (output[_PVN] != null) {
        contents[_PVN] = (0, import_smithy_client4.expectString)(output[_PVN]);
      }
      return contents;
    }, "de_TypeVersionSummary");
    var de_UnprocessedTypeConfigurations = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_TypeConfigurationIdentifier(entry, context);
      });
    }, "de_UnprocessedTypeConfigurations");
    var de_UpdateGeneratedTemplateOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_GTI] != null) {
        contents[_GTI] = (0, import_smithy_client4.expectString)(output[_GTI]);
      }
      return contents;
    }, "de_UpdateGeneratedTemplateOutput");
    var de_UpdateStackInstancesOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_OI] != null) {
        contents[_OI] = (0, import_smithy_client4.expectString)(output[_OI]);
      }
      return contents;
    }, "de_UpdateStackInstancesOutput");
    var de_UpdateStackOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_SI] != null) {
        contents[_SI] = (0, import_smithy_client4.expectString)(output[_SI]);
      }
      return contents;
    }, "de_UpdateStackOutput");
    var de_UpdateStackSetOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_OI] != null) {
        contents[_OI] = (0, import_smithy_client4.expectString)(output[_OI]);
      }
      return contents;
    }, "de_UpdateStackSetOutput");
    var de_UpdateTerminationProtectionOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_SI] != null) {
        contents[_SI] = (0, import_smithy_client4.expectString)(output[_SI]);
      }
      return contents;
    }, "de_UpdateTerminationProtectionOutput");
    var de_ValidateTemplateOutput = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.Parameters === "") {
        contents[_P] = [];
      } else if (output[_P] != null && output[_P][_m] != null) {
        contents[_P] = de_TemplateParameters((0, import_smithy_client4.getArrayIfSingleItem)(output[_P][_m]), context);
      }
      if (output[_D] != null) {
        contents[_D] = (0, import_smithy_client4.expectString)(output[_D]);
      }
      if (output.Capabilities === "") {
        contents[_C] = [];
      } else if (output[_C] != null && output[_C][_m] != null) {
        contents[_C] = de_Capabilities((0, import_smithy_client4.getArrayIfSingleItem)(output[_C][_m]), context);
      }
      if (output[_CR] != null) {
        contents[_CR] = (0, import_smithy_client4.expectString)(output[_CR]);
      }
      if (output.DeclaredTransforms === "") {
        contents[_DTec] = [];
      } else if (output[_DTec] != null && output[_DTec][_m] != null) {
        contents[_DTec] = de_TransformsList((0, import_smithy_client4.getArrayIfSingleItem)(output[_DTec][_m]), context);
      }
      return contents;
    }, "de_ValidateTemplateOutput");
    var de_WarningDetail = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_T] != null) {
        contents[_T] = (0, import_smithy_client4.expectString)(output[_T]);
      }
      if (output.Properties === "") {
        contents[_Pro] = [];
      } else if (output[_Pro] != null && output[_Pro][_m] != null) {
        contents[_Pro] = de_WarningProperties((0, import_smithy_client4.getArrayIfSingleItem)(output[_Pro][_m]), context);
      }
      return contents;
    }, "de_WarningDetail");
    var de_WarningDetails = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_WarningDetail(entry, context);
      });
    }, "de_WarningDetails");
    var de_WarningProperties = /* @__PURE__ */ __name((output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return de_WarningProperty(entry, context);
      });
    }, "de_WarningProperties");
    var de_WarningProperty = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output[_PPr] != null) {
        contents[_PPr] = (0, import_smithy_client4.expectString)(output[_PPr]);
      }
      if (output[_Req] != null) {
        contents[_Req] = (0, import_smithy_client4.parseBoolean)(output[_Req]);
      }
      if (output[_D] != null) {
        contents[_D] = (0, import_smithy_client4.expectString)(output[_D]);
      }
      return contents;
    }, "de_WarningProperty");
    var de_Warnings = /* @__PURE__ */ __name((output, context) => {
      const contents = {};
      if (output.UnrecognizedResourceTypes === "") {
        contents[_URT] = [];
      } else if (output[_URT] != null && output[_URT][_m] != null) {
        contents[_URT] = de_ResourceTypes((0, import_smithy_client4.getArrayIfSingleItem)(output[_URT][_m]), context);
      }
      return contents;
    }, "de_Warnings");
    var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    }), "deserializeMetadata");
    var throwDefaultError = (0, import_smithy_client4.withBaseException)(CloudFormationServiceException);
    var buildHttpRpcRequest = /* @__PURE__ */ __name(async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new import_protocol_http8.HttpRequest(contents);
    }, "buildHttpRpcRequest");
    var SHARED_HEADERS = {
      "content-type": "application/x-www-form-urlencoded"
    };
    var _ = "2010-05-15";
    var _A = "Action";
    var _AC = "AfterContext";
    var _ACT = "AttributeChangeType";
    var _AD = "AutoDeployment";
    var _AFT = "AccountFilterType";
    var _AGR = "AccountGateResult";
    var _AL = "AccountLimits";
    var _AOA = "ActivateOrganizationsAccess";
    var _AP = "ActualProperties";
    var _AR = "AddResources";
    var _ARARN = "AdministrationRoleARN";
    var _AT = "ActivateType";
    var _ATAC = "AcceptTermsAndConditions";
    var _AU = "AutoUpdate";
    var _AUc = "AccountsUrl";
    var _AV = "AllowedValues";
    var _AVc = "ActualValue";
    var _AVf = "AfterValue";
    var _Ac = "Accounts";
    var _Acc = "Account";
    var _Act = "Active";
    var _Al = "Alias";
    var _Ar = "Arn";
    var _At = "Attribute";
    var _BC = "BeforeContext";
    var _BDTC = "BatchDescribeTypeConfigurations";
    var _BT = "BearerToken";
    var _BV = "BeforeValue";
    var _C = "Capabilities";
    var _CA = "CallAs";
    var _CAo = "ConnectionArn";
    var _CAon = "ConfigurationAlias";
    var _CAonf = "ConfigurationArn";
    var _CCS = "CreateChangeSet";
    var _CE = "CausingEntity";
    var _CGT = "CreateGeneratedTemplate";
    var _CM = "ConcurrencyMode";
    var _COS = "CurrentOperationStatus";
    var _CR = "CapabilitiesReason";
    var _CRT = "ClientRequestToken";
    var _CS = "CreateStack";
    var _CSI = "CreateStackInstances";
    var _CSIh = "ChangeSetId";
    var _CSN = "ChangeSetName";
    var _CSS = "CreateStackSet";
    var _CST = "ChangeSetType";
    var _CSh = "ChangeSource";
    var _CSo = "ConfigurationSchema";
    var _CT = "ClientToken";
    var _CTr = "CreationTime";
    var _CTre = "CreationTimestamp";
    var _CUR = "ContinueUpdateRollback";
    var _CUS = "CancelUpdateStack";
    var _Ca = "Category";
    var _Ch = "Changes";
    var _Co = "Configuration";
    var _D = "Description";
    var _DAL = "DescribeAccountLimits";
    var _DCS = "DeleteChangeSet";
    var _DCSH = "DescribeChangeSetHooks";
    var _DCSe = "DescribeChangeSet";
    var _DDS = "DriftDetectionStatus";
    var _DGT = "DeleteGeneratedTemplate";
    var _DGTe = "DescribeGeneratedTemplate";
    var _DI = "DriftInformation";
    var _DM = "DeletionMode";
    var _DOA = "DeactivateOrganizationsAccess";
    var _DOAe = "DescribeOrganizationsAccess";
    var _DP = "DescribePublisher";
    var _DPe = "DeletionPolicy";
    var _DR = "DisableRollback";
    var _DRS = "DescribeResourceScan";
    var _DS = "DeleteStack";
    var _DSD = "DetectStackDrift";
    var _DSDDS = "DescribeStackDriftDetectionStatus";
    var _DSE = "DescribeStackEvents";
    var _DSI = "DeleteStackInstances";
    var _DSIC = "DriftedStackInstancesCount";
    var _DSIe = "DescribeStackInstance";
    var _DSR = "DescribeStackResource";
    var _DSRC = "DriftedStackResourceCount";
    var _DSRD = "DescribeStackResourceDrifts";
    var _DSRDe = "DetectStackResourceDrift";
    var _DSRe = "DescribeStackResources";
    var _DSRet = "DetectionStatusReason";
    var _DSS = "DeleteStackSet";
    var _DSSD = "DetectStackSetDrift";
    var _DSSO = "DescribeStackSetOperation";
    var _DSSe = "DescribeStackSet";
    var _DSe = "DescribeStacks";
    var _DSep = "DeprecatedStatus";
    var _DSet = "DetectionStatus";
    var _DSeta = "DetailedStatus";
    var _DSr = "DriftStatus";
    var _DT = "DeactivateType";
    var _DTR = "DescribeTypeRegistration";
    var _DTe = "DeregisterType";
    var _DTec = "DeclaredTransforms";
    var _DTel = "DeletionTime";
    var _DTep = "DeploymentTargets";
    var _DTes = "DescribeType";
    var _DTi = "DifferenceType";
    var _DU = "DocumentationUrl";
    var _DV = "DefaultValue";
    var _DVI = "DefaultVersionId";
    var _De = "Details";
    var _E = "Enabled";
    var _EC = "ErrorCode";
    var _ECS = "ExecuteChangeSet";
    var _EI = "EventId";
    var _EM = "ErrorMessage";
    var _EN = "ExportName";
    var _EP = "ExpectedProperties";
    var _ERA = "ExecutionRoleArn";
    var _ERN = "ExecutionRoleName";
    var _ES = "ExecutionStatus";
    var _ESI = "ExportingStackId";
    var _ET = "EndTime";
    var _ETC = "EstimateTemplateCost";
    var _ETP = "EnableTerminationProtection";
    var _ETn = "EndTimestamp";
    var _EV = "ExpectedValue";
    var _Er = "Errors";
    var _Ev = "Evaluation";
    var _Ex = "Exports";
    var _F = "Format";
    var _FM = "FailureMode";
    var _FSIC = "FailedStackInstancesCount";
    var _FTC = "FailureToleranceCount";
    var _FTP = "FailureTolerancePercentage";
    var _Fi = "Filters";
    var _GGT = "GetGeneratedTemplate";
    var _GSP = "GetStackPolicy";
    var _GT = "GetTemplate";
    var _GTI = "GeneratedTemplateId";
    var _GTN = "GeneratedTemplateName";
    var _GTS = "GetTemplateSummary";
    var _H = "Hooks";
    var _HFM = "HookFailureMode";
    var _HIC = "HookInvocationCount";
    var _HIP = "HookInvocationPoint";
    var _HR = "HookResults";
    var _HS = "HookStatus";
    var _HSR = "HookStatusReason";
    var _HT = "HookType";
    var _I = "Id";
    var _IA = "IsActivated";
    var _IDC = "IsDefaultConfiguration";
    var _IDV = "IsDefaultVersion";
    var _IER = "ImportExistingResources";
    var _INS = "IncludeNestedStacks";
    var _IP = "InvocationPoint";
    var _IPSIC = "InProgressStackInstancesCount";
    var _IPV = "IncludePropertyValues";
    var _IPd = "IdentityProvider";
    var _ISSIC = "InSyncStackInstancesCount";
    var _ISTSS = "ImportStacksToStackSet";
    var _Im = "Imports";
    var _K = "Key";
    var _LC = "LoggingConfig";
    var _LCS = "ListChangeSets";
    var _LCT = "LastCheckTimestamp";
    var _LDB = "LogDeliveryBucket";
    var _LDCT = "LastDriftCheckTimestamp";
    var _LE = "ListExports";
    var _LGN = "LogGroupName";
    var _LGT = "ListGeneratedTemplates";
    var _LHR = "ListHookResults";
    var _LI = "ListImports";
    var _LIH = "LogicalIdHierarchy";
    var _LOI = "LastOperationId";
    var _LPV = "LatestPublicVersion";
    var _LRA = "LogRoleArn";
    var _LRI = "LogicalResourceId";
    var _LRIo = "LogicalResourceIds";
    var _LRS = "ListResourceScans";
    var _LRSR = "ListResourceScanResources";
    var _LRSRR = "ListResourceScanRelatedResources";
    var _LS = "ListStacks";
    var _LSI = "ListStackInstances";
    var _LSIRD = "ListStackInstanceResourceDrifts";
    var _LSR = "ListStackResources";
    var _LSS = "ListStackSets";
    var _LSSADT = "ListStackSetAutoDeploymentTargets";
    var _LSSO = "ListStackSetOperations";
    var _LSSOR = "ListStackSetOperationResults";
    var _LT = "ListTypes";
    var _LTR = "ListTypeRegistrations";
    var _LTV = "ListTypeVersions";
    var _LU = "LastUpdated";
    var _LUT = "LastUpdatedTime";
    var _LUTa = "LastUpdatedTimestamp";
    var _M = "Message";
    var _MBS = "ManagedByStack";
    var _MCC = "MaxConcurrentCount";
    var _MCP = "MaxConcurrentPercentage";
    var _ME = "ManagedExecution";
    var _MI = "ModuleInfo";
    var _MR = "MaxResults";
    var _MTIM = "MonitoringTimeInMinutes";
    var _MV = "MajorVersion";
    var _Me = "Metadata";
    var _N = "Name";
    var _NARN = "NotificationARNs";
    var _NE = "NoEcho";
    var _NGTN = "NewGeneratedTemplateName";
    var _NOR = "NumberOfResources";
    var _NT = "NextToken";
    var _O = "Outputs";
    var _OF = "OnFailure";
    var _OI = "OperationId";
    var _OK = "OutputKey";
    var _OP = "OperationPreferences";
    var _OS = "OperationStatus";
    var _OSF = "OnStackFailure";
    var _OTA = "OriginalTypeArn";
    var _OTN = "OriginalTypeName";
    var _OUI = "OrganizationalUnitIds";
    var _OUIr = "OrganizationalUnitId";
    var _OV = "OutputValue";
    var _P = "Parameters";
    var _PA = "PolicyAction";
    var _PC = "PercentageCompleted";
    var _PCSI = "ParentChangeSetId";
    var _PCa = "ParameterConstraints";
    var _PD = "PropertyDifferences";
    var _PI = "PublisherId";
    var _PIa = "ParentId";
    var _PIu = "PublisherIdentity";
    var _PK = "ParameterKey";
    var _PM = "PermissionModel";
    var _PN = "PublisherName";
    var _PO = "ParameterOverrides";
    var _PP = "PublisherProfile";
    var _PPr = "PropertyPath";
    var _PRI = "PhysicalResourceId";
    var _PRIC = "PhysicalResourceIdContext";
    var _PS = "PublisherStatus";
    var _PSr = "ProgressStatus";
    var _PT = "PublishType";
    var _PTA = "PublicTypeArn";
    var _PTa = "ParameterType";
    var _PTr = "ProvisioningType";
    var _PV = "ParameterValue";
    var _PVN = "PublicVersionNumber";
    var _Pa = "Path";
    var _Pr = "Progress";
    var _Pro = "Properties";
    var _R = "Resources";
    var _RA = "ResourceAction";
    var _RAR = "RefreshAllResources";
    var _RARN = "RoleARN";
    var _RAT = "RequiredActivatedTypes";
    var _RC = "RollbackConfiguration";
    var _RCSI = "RootChangeSetId";
    var _RCT = "RegionConcurrencyType";
    var _RCe = "ResourceChange";
    var _REOC = "RetainExceptOnCreate";
    var _RF = "ResourcesFailed";
    var _RHP = "RecordHandlerProgress";
    var _RI = "ResourceIdentifier";
    var _RIS = "ResourceIdentifierSummaries";
    var _RIe = "ResourceIdentifiers";
    var _RIo = "RootId";
    var _RM = "ResourceModel";
    var _RO = "RegionOrder";
    var _RP = "RegisterPublisher";
    var _RPe = "ResourceProperties";
    var _RPes = "ResourcesProcessing";
    var _RPeso = "ResourcesPending";
    var _RR = "RetainResources";
    var _RRe = "RemoveResources";
    var _RRel = "RelatedResources";
    var _RReq = "RequiresRecreation";
    var _RRes = "ResourcesRead";
    var _RS = "RollbackStack";
    var _RSF = "RegistrationStatusFilter";
    var _RSI = "ResourceScanId";
    var _RSOAR = "RetainStacksOnAccountRemoval";
    var _RSR = "ResourceStatusReason";
    var _RSS = "ResourceScanSummaries";
    var _RSe = "RetainStacks";
    var _RSes = "ResourcesScanned";
    var _RSeso = "ResourceStatus";
    var _RSesou = "ResourcesSucceeded";
    var _RT = "RegisterType";
    var _RTD = "ResourceTargetDetails";
    var _RTI = "ResourcesToImport";
    var _RTL = "RegistrationTokenList";
    var _RTP = "ResourceTypePrefix";
    var _RTS = "ResourcesToSkip";
    var _RTe = "ResourceTypes";
    var _RTeg = "RegistrationToken";
    var _RTes = "ResourceType";
    var _RTo = "RollbackTriggers";
    var _RV = "ResolvedValue";
    var _Re = "Regions";
    var _Reg = "Region";
    var _Rep = "Replacement";
    var _Req = "Required";
    var _S = "Status";
    var _SA = "StagesAvailable";
    var _SD = "StatusDetails";
    var _SDDI = "StackDriftDetectionId";
    var _SDS = "StackDriftStatus";
    var _SE = "StackEvents";
    var _SHP = "SchemaHandlerPackage";
    var _SI = "StackId";
    var _SIA = "StackInstanceAccount";
    var _SIR = "StackInstanceRegion";
    var _SIRDS = "StackInstanceResourceDriftStatuses";
    var _SIS = "StackInstanceStatus";
    var _SIU = "StackIdsUrl";
    var _SIt = "StackIds";
    var _SIta = "StackInstance";
    var _SM = "StatusMessage";
    var _SMV = "SupportedMajorVersions";
    var _SN = "StackName";
    var _SPB = "StackPolicyBody";
    var _SPDUB = "StackPolicyDuringUpdateBody";
    var _SPDUURL = "StackPolicyDuringUpdateURL";
    var _SPURL = "StackPolicyURL";
    var _SR = "SignalResource";
    var _SRD = "StackResourceDrifts";
    var _SRDS = "StackResourceDriftStatus";
    var _SRDSF = "StackResourceDriftStatusFilters";
    var _SRDt = "StackResourceDetail";
    var _SRDta = "StackResourceDrift";
    var _SRS = "StartResourceScan";
    var _SRSt = "StackResourceSummaries";
    var _SRt = "StatusReason";
    var _SRta = "StackResources";
    var _SS = "StackSet";
    var _SSARN = "StackSetARN";
    var _SSDDD = "StackSetDriftDetectionDetails";
    var _SSF = "StackStatusFilter";
    var _SSI = "StackSetId";
    var _SSN = "StackSetName";
    var _SSO = "StackSetOperation";
    var _SSP = "SetStackPolicy";
    var _SSR = "StackStatusReason";
    var _SSSO = "StopStackSetOperation";
    var _SSt = "StackSummaries";
    var _SSta = "StackStatus";
    var _ST = "StartTime";
    var _STC = "SetTypeConfiguration";
    var _STDV = "SetTypeDefaultVersion";
    var _SU = "SourceUrl";
    var _Sc = "Schema";
    var _Sco = "Scope";
    var _St = "Stacks";
    var _Su = "Summaries";
    var _T = "Type";
    var _TA = "TypeArn";
    var _TB = "TemplateBody";
    var _TC = "TemplateConfiguration";
    var _TCA = "TypeConfigurationAlias";
    var _TCAy = "TypeConfigurationArn";
    var _TCI = "TypeConfigurationIdentifiers";
    var _TCIy = "TypeConfigurationIdentifier";
    var _TCVI = "TypeConfigurationVersionId";
    var _TCi = "TimeCreated";
    var _TCy = "TypeConfigurations";
    var _TD = "TargetDetails";
    var _TDe = "TemplateDescription";
    var _TH = "TypeHierarchy";
    var _TI = "TargetId";
    var _TIM = "TimeoutInMinutes";
    var _TK = "TagKey";
    var _TN = "TypeName";
    var _TNA = "TypeNameAlias";
    var _TNP = "TypeNamePrefix";
    var _TS = "TemplateStage";
    var _TSC = "TemplateSummaryConfig";
    var _TSIC = "TotalStackInstancesCount";
    var _TSy = "TypeSummaries";
    var _TT = "TestType";
    var _TTS = "TypeTestsStatus";
    var _TTSD = "TypeTestsStatusDescription";
    var _TTa = "TargetType";
    var _TURL = "TemplateURL";
    var _TURTAW = "TreatUnrecognizedResourceTypesAsWarnings";
    var _TV = "TagValue";
    var _TVA = "TypeVersionArn";
    var _TVI = "TypeVersionId";
    var _TVS = "TypeVersionSummaries";
    var _TW = "TotalWarnings";
    var _Ta = "Tags";
    var _Tar = "Target";
    var _Ti = "Timestamp";
    var _U = "Url";
    var _UGT = "UpdateGeneratedTemplate";
    var _UI = "UniqueId";
    var _UPT = "UsePreviousTemplate";
    var _UPV = "UsePreviousValue";
    var _URP = "UpdateReplacePolicy";
    var _URT = "UnrecognizedResourceTypes";
    var _US = "UpdateStack";
    var _USI = "UpdateStackInstances";
    var _USS = "UpdateStackSet";
    var _UTC = "UnprocessedTypeConfigurations";
    var _UTP = "UpdateTerminationProtection";
    var _V = "Version";
    var _VB = "VersionBump";
    var _VI = "VersionId";
    var _VT = "ValidateTemplate";
    var _Va = "Values";
    var _Val = "Value";
    var _Vi = "Visibility";
    var _W = "Warnings";
    var _e = "entry";
    var _m = "member";
    var buildFormUrlencodedString = /* @__PURE__ */ __name((formEntries) => Object.entries(formEntries).map(([key, value]) => (0, import_smithy_client4.extendedEncodeURIComponent)(key) + "=" + (0, import_smithy_client4.extendedEncodeURIComponent)(value)).join("&"), "buildFormUrlencodedString");
    var loadQueryErrorCode = /* @__PURE__ */ __name((output, data) => {
      var _a;
      if (((_a = data.Error) == null ? void 0 : _a.Code) !== void 0) {
        return data.Error.Code;
      }
      if (output.statusCode == 404) {
        return "NotFound";
      }
    }, "loadQueryErrorCode");
    var _ActivateOrganizationsAccessCommand = class _ActivateOrganizationsAccessCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "ActivateOrganizationsAccess", {}).n("CloudFormationClient", "ActivateOrganizationsAccessCommand").f(void 0, void 0).ser(se_ActivateOrganizationsAccessCommand).de(de_ActivateOrganizationsAccessCommand).build() {
    };
    __name(_ActivateOrganizationsAccessCommand, "ActivateOrganizationsAccessCommand");
    var ActivateOrganizationsAccessCommand = _ActivateOrganizationsAccessCommand;
    var _ActivateTypeCommand = class _ActivateTypeCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "ActivateType", {}).n("CloudFormationClient", "ActivateTypeCommand").f(void 0, void 0).ser(se_ActivateTypeCommand).de(de_ActivateTypeCommand).build() {
    };
    __name(_ActivateTypeCommand, "ActivateTypeCommand");
    var ActivateTypeCommand = _ActivateTypeCommand;
    var _BatchDescribeTypeConfigurationsCommand = class _BatchDescribeTypeConfigurationsCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "BatchDescribeTypeConfigurations", {}).n("CloudFormationClient", "BatchDescribeTypeConfigurationsCommand").f(void 0, void 0).ser(se_BatchDescribeTypeConfigurationsCommand).de(de_BatchDescribeTypeConfigurationsCommand).build() {
    };
    __name(_BatchDescribeTypeConfigurationsCommand, "BatchDescribeTypeConfigurationsCommand");
    var BatchDescribeTypeConfigurationsCommand = _BatchDescribeTypeConfigurationsCommand;
    var _CancelUpdateStackCommand = class _CancelUpdateStackCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "CancelUpdateStack", {}).n("CloudFormationClient", "CancelUpdateStackCommand").f(void 0, void 0).ser(se_CancelUpdateStackCommand).de(de_CancelUpdateStackCommand).build() {
    };
    __name(_CancelUpdateStackCommand, "CancelUpdateStackCommand");
    var CancelUpdateStackCommand = _CancelUpdateStackCommand;
    var _ContinueUpdateRollbackCommand = class _ContinueUpdateRollbackCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "ContinueUpdateRollback", {}).n("CloudFormationClient", "ContinueUpdateRollbackCommand").f(void 0, void 0).ser(se_ContinueUpdateRollbackCommand).de(de_ContinueUpdateRollbackCommand).build() {
    };
    __name(_ContinueUpdateRollbackCommand, "ContinueUpdateRollbackCommand");
    var ContinueUpdateRollbackCommand = _ContinueUpdateRollbackCommand;
    var _CreateChangeSetCommand = class _CreateChangeSetCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "CreateChangeSet", {}).n("CloudFormationClient", "CreateChangeSetCommand").f(void 0, void 0).ser(se_CreateChangeSetCommand).de(de_CreateChangeSetCommand).build() {
    };
    __name(_CreateChangeSetCommand, "CreateChangeSetCommand");
    var CreateChangeSetCommand = _CreateChangeSetCommand;
    var _CreateGeneratedTemplateCommand = class _CreateGeneratedTemplateCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "CreateGeneratedTemplate", {}).n("CloudFormationClient", "CreateGeneratedTemplateCommand").f(void 0, void 0).ser(se_CreateGeneratedTemplateCommand).de(de_CreateGeneratedTemplateCommand).build() {
    };
    __name(_CreateGeneratedTemplateCommand, "CreateGeneratedTemplateCommand");
    var CreateGeneratedTemplateCommand = _CreateGeneratedTemplateCommand;
    var _CreateStackCommand = class _CreateStackCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "CreateStack", {}).n("CloudFormationClient", "CreateStackCommand").f(void 0, void 0).ser(se_CreateStackCommand).de(de_CreateStackCommand).build() {
    };
    __name(_CreateStackCommand, "CreateStackCommand");
    var CreateStackCommand = _CreateStackCommand;
    var _CreateStackInstancesCommand = class _CreateStackInstancesCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "CreateStackInstances", {}).n("CloudFormationClient", "CreateStackInstancesCommand").f(void 0, void 0).ser(se_CreateStackInstancesCommand).de(de_CreateStackInstancesCommand).build() {
    };
    __name(_CreateStackInstancesCommand, "CreateStackInstancesCommand");
    var CreateStackInstancesCommand = _CreateStackInstancesCommand;
    var _CreateStackSetCommand = class _CreateStackSetCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "CreateStackSet", {}).n("CloudFormationClient", "CreateStackSetCommand").f(void 0, void 0).ser(se_CreateStackSetCommand).de(de_CreateStackSetCommand).build() {
    };
    __name(_CreateStackSetCommand, "CreateStackSetCommand");
    var CreateStackSetCommand = _CreateStackSetCommand;
    var _DeactivateOrganizationsAccessCommand = class _DeactivateOrganizationsAccessCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "DeactivateOrganizationsAccess", {}).n("CloudFormationClient", "DeactivateOrganizationsAccessCommand").f(void 0, void 0).ser(se_DeactivateOrganizationsAccessCommand).de(de_DeactivateOrganizationsAccessCommand).build() {
    };
    __name(_DeactivateOrganizationsAccessCommand, "DeactivateOrganizationsAccessCommand");
    var DeactivateOrganizationsAccessCommand = _DeactivateOrganizationsAccessCommand;
    var _DeactivateTypeCommand = class _DeactivateTypeCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "DeactivateType", {}).n("CloudFormationClient", "DeactivateTypeCommand").f(void 0, void 0).ser(se_DeactivateTypeCommand).de(de_DeactivateTypeCommand).build() {
    };
    __name(_DeactivateTypeCommand, "DeactivateTypeCommand");
    var DeactivateTypeCommand = _DeactivateTypeCommand;
    var _DeleteChangeSetCommand = class _DeleteChangeSetCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "DeleteChangeSet", {}).n("CloudFormationClient", "DeleteChangeSetCommand").f(void 0, void 0).ser(se_DeleteChangeSetCommand).de(de_DeleteChangeSetCommand).build() {
    };
    __name(_DeleteChangeSetCommand, "DeleteChangeSetCommand");
    var DeleteChangeSetCommand = _DeleteChangeSetCommand;
    var _DeleteGeneratedTemplateCommand = class _DeleteGeneratedTemplateCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "DeleteGeneratedTemplate", {}).n("CloudFormationClient", "DeleteGeneratedTemplateCommand").f(void 0, void 0).ser(se_DeleteGeneratedTemplateCommand).de(de_DeleteGeneratedTemplateCommand).build() {
    };
    __name(_DeleteGeneratedTemplateCommand, "DeleteGeneratedTemplateCommand");
    var DeleteGeneratedTemplateCommand = _DeleteGeneratedTemplateCommand;
    var _DeleteStackCommand = class _DeleteStackCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "DeleteStack", {}).n("CloudFormationClient", "DeleteStackCommand").f(void 0, void 0).ser(se_DeleteStackCommand).de(de_DeleteStackCommand).build() {
    };
    __name(_DeleteStackCommand, "DeleteStackCommand");
    var DeleteStackCommand = _DeleteStackCommand;
    var _DeleteStackInstancesCommand = class _DeleteStackInstancesCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "DeleteStackInstances", {}).n("CloudFormationClient", "DeleteStackInstancesCommand").f(void 0, void 0).ser(se_DeleteStackInstancesCommand).de(de_DeleteStackInstancesCommand).build() {
    };
    __name(_DeleteStackInstancesCommand, "DeleteStackInstancesCommand");
    var DeleteStackInstancesCommand = _DeleteStackInstancesCommand;
    var _DeleteStackSetCommand = class _DeleteStackSetCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "DeleteStackSet", {}).n("CloudFormationClient", "DeleteStackSetCommand").f(void 0, void 0).ser(se_DeleteStackSetCommand).de(de_DeleteStackSetCommand).build() {
    };
    __name(_DeleteStackSetCommand, "DeleteStackSetCommand");
    var DeleteStackSetCommand = _DeleteStackSetCommand;
    var _DeregisterTypeCommand = class _DeregisterTypeCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "DeregisterType", {}).n("CloudFormationClient", "DeregisterTypeCommand").f(void 0, void 0).ser(se_DeregisterTypeCommand).de(de_DeregisterTypeCommand).build() {
    };
    __name(_DeregisterTypeCommand, "DeregisterTypeCommand");
    var DeregisterTypeCommand = _DeregisterTypeCommand;
    var _DescribeAccountLimitsCommand = class _DescribeAccountLimitsCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "DescribeAccountLimits", {}).n("CloudFormationClient", "DescribeAccountLimitsCommand").f(void 0, void 0).ser(se_DescribeAccountLimitsCommand).de(de_DescribeAccountLimitsCommand).build() {
    };
    __name(_DescribeAccountLimitsCommand, "DescribeAccountLimitsCommand");
    var DescribeAccountLimitsCommand = _DescribeAccountLimitsCommand;
    var _DescribeChangeSetCommand = class _DescribeChangeSetCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "DescribeChangeSet", {}).n("CloudFormationClient", "DescribeChangeSetCommand").f(void 0, void 0).ser(se_DescribeChangeSetCommand).de(de_DescribeChangeSetCommand).build() {
    };
    __name(_DescribeChangeSetCommand, "DescribeChangeSetCommand");
    var DescribeChangeSetCommand = _DescribeChangeSetCommand;
    var _DescribeChangeSetHooksCommand = class _DescribeChangeSetHooksCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "DescribeChangeSetHooks", {}).n("CloudFormationClient", "DescribeChangeSetHooksCommand").f(void 0, void 0).ser(se_DescribeChangeSetHooksCommand).de(de_DescribeChangeSetHooksCommand).build() {
    };
    __name(_DescribeChangeSetHooksCommand, "DescribeChangeSetHooksCommand");
    var DescribeChangeSetHooksCommand = _DescribeChangeSetHooksCommand;
    var _DescribeGeneratedTemplateCommand = class _DescribeGeneratedTemplateCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "DescribeGeneratedTemplate", {}).n("CloudFormationClient", "DescribeGeneratedTemplateCommand").f(void 0, void 0).ser(se_DescribeGeneratedTemplateCommand).de(de_DescribeGeneratedTemplateCommand).build() {
    };
    __name(_DescribeGeneratedTemplateCommand, "DescribeGeneratedTemplateCommand");
    var DescribeGeneratedTemplateCommand = _DescribeGeneratedTemplateCommand;
    var _DescribeOrganizationsAccessCommand = class _DescribeOrganizationsAccessCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "DescribeOrganizationsAccess", {}).n("CloudFormationClient", "DescribeOrganizationsAccessCommand").f(void 0, void 0).ser(se_DescribeOrganizationsAccessCommand).de(de_DescribeOrganizationsAccessCommand).build() {
    };
    __name(_DescribeOrganizationsAccessCommand, "DescribeOrganizationsAccessCommand");
    var DescribeOrganizationsAccessCommand = _DescribeOrganizationsAccessCommand;
    var _DescribePublisherCommand = class _DescribePublisherCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "DescribePublisher", {}).n("CloudFormationClient", "DescribePublisherCommand").f(void 0, void 0).ser(se_DescribePublisherCommand).de(de_DescribePublisherCommand).build() {
    };
    __name(_DescribePublisherCommand, "DescribePublisherCommand");
    var DescribePublisherCommand = _DescribePublisherCommand;
    var _DescribeResourceScanCommand = class _DescribeResourceScanCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "DescribeResourceScan", {}).n("CloudFormationClient", "DescribeResourceScanCommand").f(void 0, void 0).ser(se_DescribeResourceScanCommand).de(de_DescribeResourceScanCommand).build() {
    };
    __name(_DescribeResourceScanCommand, "DescribeResourceScanCommand");
    var DescribeResourceScanCommand = _DescribeResourceScanCommand;
    var _DescribeStackDriftDetectionStatusCommand = class _DescribeStackDriftDetectionStatusCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "DescribeStackDriftDetectionStatus", {}).n("CloudFormationClient", "DescribeStackDriftDetectionStatusCommand").f(void 0, void 0).ser(se_DescribeStackDriftDetectionStatusCommand).de(de_DescribeStackDriftDetectionStatusCommand).build() {
    };
    __name(_DescribeStackDriftDetectionStatusCommand, "DescribeStackDriftDetectionStatusCommand");
    var DescribeStackDriftDetectionStatusCommand = _DescribeStackDriftDetectionStatusCommand;
    var _DescribeStackEventsCommand = class _DescribeStackEventsCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "DescribeStackEvents", {}).n("CloudFormationClient", "DescribeStackEventsCommand").f(void 0, void 0).ser(se_DescribeStackEventsCommand).de(de_DescribeStackEventsCommand).build() {
    };
    __name(_DescribeStackEventsCommand, "DescribeStackEventsCommand");
    var DescribeStackEventsCommand = _DescribeStackEventsCommand;
    var _DescribeStackInstanceCommand = class _DescribeStackInstanceCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "DescribeStackInstance", {}).n("CloudFormationClient", "DescribeStackInstanceCommand").f(void 0, void 0).ser(se_DescribeStackInstanceCommand).de(de_DescribeStackInstanceCommand).build() {
    };
    __name(_DescribeStackInstanceCommand, "DescribeStackInstanceCommand");
    var DescribeStackInstanceCommand = _DescribeStackInstanceCommand;
    var _DescribeStackResourceCommand = class _DescribeStackResourceCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "DescribeStackResource", {}).n("CloudFormationClient", "DescribeStackResourceCommand").f(void 0, void 0).ser(se_DescribeStackResourceCommand).de(de_DescribeStackResourceCommand).build() {
    };
    __name(_DescribeStackResourceCommand, "DescribeStackResourceCommand");
    var DescribeStackResourceCommand = _DescribeStackResourceCommand;
    var _DescribeStackResourceDriftsCommand = class _DescribeStackResourceDriftsCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "DescribeStackResourceDrifts", {}).n("CloudFormationClient", "DescribeStackResourceDriftsCommand").f(void 0, void 0).ser(se_DescribeStackResourceDriftsCommand).de(de_DescribeStackResourceDriftsCommand).build() {
    };
    __name(_DescribeStackResourceDriftsCommand, "DescribeStackResourceDriftsCommand");
    var DescribeStackResourceDriftsCommand = _DescribeStackResourceDriftsCommand;
    var _DescribeStackResourcesCommand = class _DescribeStackResourcesCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "DescribeStackResources", {}).n("CloudFormationClient", "DescribeStackResourcesCommand").f(void 0, void 0).ser(se_DescribeStackResourcesCommand).de(de_DescribeStackResourcesCommand).build() {
    };
    __name(_DescribeStackResourcesCommand, "DescribeStackResourcesCommand");
    var DescribeStackResourcesCommand = _DescribeStackResourcesCommand;
    var _DescribeStacksCommand = class _DescribeStacksCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "DescribeStacks", {}).n("CloudFormationClient", "DescribeStacksCommand").f(void 0, void 0).ser(se_DescribeStacksCommand).de(de_DescribeStacksCommand).build() {
    };
    __name(_DescribeStacksCommand, "DescribeStacksCommand");
    var DescribeStacksCommand2 = _DescribeStacksCommand;
    var _DescribeStackSetCommand = class _DescribeStackSetCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "DescribeStackSet", {}).n("CloudFormationClient", "DescribeStackSetCommand").f(void 0, void 0).ser(se_DescribeStackSetCommand).de(de_DescribeStackSetCommand).build() {
    };
    __name(_DescribeStackSetCommand, "DescribeStackSetCommand");
    var DescribeStackSetCommand = _DescribeStackSetCommand;
    var _DescribeStackSetOperationCommand = class _DescribeStackSetOperationCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "DescribeStackSetOperation", {}).n("CloudFormationClient", "DescribeStackSetOperationCommand").f(void 0, void 0).ser(se_DescribeStackSetOperationCommand).de(de_DescribeStackSetOperationCommand).build() {
    };
    __name(_DescribeStackSetOperationCommand, "DescribeStackSetOperationCommand");
    var DescribeStackSetOperationCommand = _DescribeStackSetOperationCommand;
    var _DescribeTypeCommand = class _DescribeTypeCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "DescribeType", {}).n("CloudFormationClient", "DescribeTypeCommand").f(void 0, void 0).ser(se_DescribeTypeCommand).de(de_DescribeTypeCommand).build() {
    };
    __name(_DescribeTypeCommand, "DescribeTypeCommand");
    var DescribeTypeCommand = _DescribeTypeCommand;
    var _DescribeTypeRegistrationCommand = class _DescribeTypeRegistrationCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "DescribeTypeRegistration", {}).n("CloudFormationClient", "DescribeTypeRegistrationCommand").f(void 0, void 0).ser(se_DescribeTypeRegistrationCommand).de(de_DescribeTypeRegistrationCommand).build() {
    };
    __name(_DescribeTypeRegistrationCommand, "DescribeTypeRegistrationCommand");
    var DescribeTypeRegistrationCommand = _DescribeTypeRegistrationCommand;
    var _DetectStackDriftCommand = class _DetectStackDriftCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "DetectStackDrift", {}).n("CloudFormationClient", "DetectStackDriftCommand").f(void 0, void 0).ser(se_DetectStackDriftCommand).de(de_DetectStackDriftCommand).build() {
    };
    __name(_DetectStackDriftCommand, "DetectStackDriftCommand");
    var DetectStackDriftCommand = _DetectStackDriftCommand;
    var _DetectStackResourceDriftCommand = class _DetectStackResourceDriftCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "DetectStackResourceDrift", {}).n("CloudFormationClient", "DetectStackResourceDriftCommand").f(void 0, void 0).ser(se_DetectStackResourceDriftCommand).de(de_DetectStackResourceDriftCommand).build() {
    };
    __name(_DetectStackResourceDriftCommand, "DetectStackResourceDriftCommand");
    var DetectStackResourceDriftCommand = _DetectStackResourceDriftCommand;
    var _DetectStackSetDriftCommand = class _DetectStackSetDriftCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "DetectStackSetDrift", {}).n("CloudFormationClient", "DetectStackSetDriftCommand").f(void 0, void 0).ser(se_DetectStackSetDriftCommand).de(de_DetectStackSetDriftCommand).build() {
    };
    __name(_DetectStackSetDriftCommand, "DetectStackSetDriftCommand");
    var DetectStackSetDriftCommand = _DetectStackSetDriftCommand;
    var _EstimateTemplateCostCommand = class _EstimateTemplateCostCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "EstimateTemplateCost", {}).n("CloudFormationClient", "EstimateTemplateCostCommand").f(void 0, void 0).ser(se_EstimateTemplateCostCommand).de(de_EstimateTemplateCostCommand).build() {
    };
    __name(_EstimateTemplateCostCommand, "EstimateTemplateCostCommand");
    var EstimateTemplateCostCommand = _EstimateTemplateCostCommand;
    var _ExecuteChangeSetCommand = class _ExecuteChangeSetCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "ExecuteChangeSet", {}).n("CloudFormationClient", "ExecuteChangeSetCommand").f(void 0, void 0).ser(se_ExecuteChangeSetCommand).de(de_ExecuteChangeSetCommand).build() {
    };
    __name(_ExecuteChangeSetCommand, "ExecuteChangeSetCommand");
    var ExecuteChangeSetCommand = _ExecuteChangeSetCommand;
    var _GetGeneratedTemplateCommand = class _GetGeneratedTemplateCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "GetGeneratedTemplate", {}).n("CloudFormationClient", "GetGeneratedTemplateCommand").f(void 0, void 0).ser(se_GetGeneratedTemplateCommand).de(de_GetGeneratedTemplateCommand).build() {
    };
    __name(_GetGeneratedTemplateCommand, "GetGeneratedTemplateCommand");
    var GetGeneratedTemplateCommand = _GetGeneratedTemplateCommand;
    var _GetStackPolicyCommand = class _GetStackPolicyCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "GetStackPolicy", {}).n("CloudFormationClient", "GetStackPolicyCommand").f(void 0, void 0).ser(se_GetStackPolicyCommand).de(de_GetStackPolicyCommand).build() {
    };
    __name(_GetStackPolicyCommand, "GetStackPolicyCommand");
    var GetStackPolicyCommand = _GetStackPolicyCommand;
    var _GetTemplateCommand = class _GetTemplateCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "GetTemplate", {}).n("CloudFormationClient", "GetTemplateCommand").f(void 0, void 0).ser(se_GetTemplateCommand).de(de_GetTemplateCommand).build() {
    };
    __name(_GetTemplateCommand, "GetTemplateCommand");
    var GetTemplateCommand = _GetTemplateCommand;
    var _GetTemplateSummaryCommand = class _GetTemplateSummaryCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "GetTemplateSummary", {}).n("CloudFormationClient", "GetTemplateSummaryCommand").f(void 0, void 0).ser(se_GetTemplateSummaryCommand).de(de_GetTemplateSummaryCommand).build() {
    };
    __name(_GetTemplateSummaryCommand, "GetTemplateSummaryCommand");
    var GetTemplateSummaryCommand = _GetTemplateSummaryCommand;
    var _ImportStacksToStackSetCommand = class _ImportStacksToStackSetCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "ImportStacksToStackSet", {}).n("CloudFormationClient", "ImportStacksToStackSetCommand").f(void 0, void 0).ser(se_ImportStacksToStackSetCommand).de(de_ImportStacksToStackSetCommand).build() {
    };
    __name(_ImportStacksToStackSetCommand, "ImportStacksToStackSetCommand");
    var ImportStacksToStackSetCommand = _ImportStacksToStackSetCommand;
    var _ListChangeSetsCommand = class _ListChangeSetsCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "ListChangeSets", {}).n("CloudFormationClient", "ListChangeSetsCommand").f(void 0, void 0).ser(se_ListChangeSetsCommand).de(de_ListChangeSetsCommand).build() {
    };
    __name(_ListChangeSetsCommand, "ListChangeSetsCommand");
    var ListChangeSetsCommand = _ListChangeSetsCommand;
    var _ListExportsCommand = class _ListExportsCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "ListExports", {}).n("CloudFormationClient", "ListExportsCommand").f(void 0, void 0).ser(se_ListExportsCommand).de(de_ListExportsCommand).build() {
    };
    __name(_ListExportsCommand, "ListExportsCommand");
    var ListExportsCommand = _ListExportsCommand;
    var _ListGeneratedTemplatesCommand = class _ListGeneratedTemplatesCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "ListGeneratedTemplates", {}).n("CloudFormationClient", "ListGeneratedTemplatesCommand").f(void 0, void 0).ser(se_ListGeneratedTemplatesCommand).de(de_ListGeneratedTemplatesCommand).build() {
    };
    __name(_ListGeneratedTemplatesCommand, "ListGeneratedTemplatesCommand");
    var ListGeneratedTemplatesCommand = _ListGeneratedTemplatesCommand;
    var _ListHookResultsCommand = class _ListHookResultsCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "ListHookResults", {}).n("CloudFormationClient", "ListHookResultsCommand").f(void 0, void 0).ser(se_ListHookResultsCommand).de(de_ListHookResultsCommand).build() {
    };
    __name(_ListHookResultsCommand, "ListHookResultsCommand");
    var ListHookResultsCommand = _ListHookResultsCommand;
    var _ListImportsCommand = class _ListImportsCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "ListImports", {}).n("CloudFormationClient", "ListImportsCommand").f(void 0, void 0).ser(se_ListImportsCommand).de(de_ListImportsCommand).build() {
    };
    __name(_ListImportsCommand, "ListImportsCommand");
    var ListImportsCommand = _ListImportsCommand;
    var _ListResourceScanRelatedResourcesCommand = class _ListResourceScanRelatedResourcesCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "ListResourceScanRelatedResources", {}).n("CloudFormationClient", "ListResourceScanRelatedResourcesCommand").f(void 0, void 0).ser(se_ListResourceScanRelatedResourcesCommand).de(de_ListResourceScanRelatedResourcesCommand).build() {
    };
    __name(_ListResourceScanRelatedResourcesCommand, "ListResourceScanRelatedResourcesCommand");
    var ListResourceScanRelatedResourcesCommand = _ListResourceScanRelatedResourcesCommand;
    var _ListResourceScanResourcesCommand = class _ListResourceScanResourcesCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "ListResourceScanResources", {}).n("CloudFormationClient", "ListResourceScanResourcesCommand").f(void 0, void 0).ser(se_ListResourceScanResourcesCommand).de(de_ListResourceScanResourcesCommand).build() {
    };
    __name(_ListResourceScanResourcesCommand, "ListResourceScanResourcesCommand");
    var ListResourceScanResourcesCommand = _ListResourceScanResourcesCommand;
    var _ListResourceScansCommand = class _ListResourceScansCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "ListResourceScans", {}).n("CloudFormationClient", "ListResourceScansCommand").f(void 0, void 0).ser(se_ListResourceScansCommand).de(de_ListResourceScansCommand).build() {
    };
    __name(_ListResourceScansCommand, "ListResourceScansCommand");
    var ListResourceScansCommand = _ListResourceScansCommand;
    var _ListStackInstanceResourceDriftsCommand = class _ListStackInstanceResourceDriftsCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "ListStackInstanceResourceDrifts", {}).n("CloudFormationClient", "ListStackInstanceResourceDriftsCommand").f(void 0, void 0).ser(se_ListStackInstanceResourceDriftsCommand).de(de_ListStackInstanceResourceDriftsCommand).build() {
    };
    __name(_ListStackInstanceResourceDriftsCommand, "ListStackInstanceResourceDriftsCommand");
    var ListStackInstanceResourceDriftsCommand = _ListStackInstanceResourceDriftsCommand;
    var _ListStackInstancesCommand = class _ListStackInstancesCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "ListStackInstances", {}).n("CloudFormationClient", "ListStackInstancesCommand").f(void 0, void 0).ser(se_ListStackInstancesCommand).de(de_ListStackInstancesCommand).build() {
    };
    __name(_ListStackInstancesCommand, "ListStackInstancesCommand");
    var ListStackInstancesCommand = _ListStackInstancesCommand;
    var _ListStackResourcesCommand = class _ListStackResourcesCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "ListStackResources", {}).n("CloudFormationClient", "ListStackResourcesCommand").f(void 0, void 0).ser(se_ListStackResourcesCommand).de(de_ListStackResourcesCommand).build() {
    };
    __name(_ListStackResourcesCommand, "ListStackResourcesCommand");
    var ListStackResourcesCommand = _ListStackResourcesCommand;
    var _ListStacksCommand = class _ListStacksCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "ListStacks", {}).n("CloudFormationClient", "ListStacksCommand").f(void 0, void 0).ser(se_ListStacksCommand).de(de_ListStacksCommand).build() {
    };
    __name(_ListStacksCommand, "ListStacksCommand");
    var ListStacksCommand = _ListStacksCommand;
    var _ListStackSetAutoDeploymentTargetsCommand = class _ListStackSetAutoDeploymentTargetsCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "ListStackSetAutoDeploymentTargets", {}).n("CloudFormationClient", "ListStackSetAutoDeploymentTargetsCommand").f(void 0, void 0).ser(se_ListStackSetAutoDeploymentTargetsCommand).de(de_ListStackSetAutoDeploymentTargetsCommand).build() {
    };
    __name(_ListStackSetAutoDeploymentTargetsCommand, "ListStackSetAutoDeploymentTargetsCommand");
    var ListStackSetAutoDeploymentTargetsCommand = _ListStackSetAutoDeploymentTargetsCommand;
    var _ListStackSetOperationResultsCommand = class _ListStackSetOperationResultsCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "ListStackSetOperationResults", {}).n("CloudFormationClient", "ListStackSetOperationResultsCommand").f(void 0, void 0).ser(se_ListStackSetOperationResultsCommand).de(de_ListStackSetOperationResultsCommand).build() {
    };
    __name(_ListStackSetOperationResultsCommand, "ListStackSetOperationResultsCommand");
    var ListStackSetOperationResultsCommand = _ListStackSetOperationResultsCommand;
    var _ListStackSetOperationsCommand = class _ListStackSetOperationsCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "ListStackSetOperations", {}).n("CloudFormationClient", "ListStackSetOperationsCommand").f(void 0, void 0).ser(se_ListStackSetOperationsCommand).de(de_ListStackSetOperationsCommand).build() {
    };
    __name(_ListStackSetOperationsCommand, "ListStackSetOperationsCommand");
    var ListStackSetOperationsCommand = _ListStackSetOperationsCommand;
    var _ListStackSetsCommand = class _ListStackSetsCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "ListStackSets", {}).n("CloudFormationClient", "ListStackSetsCommand").f(void 0, void 0).ser(se_ListStackSetsCommand).de(de_ListStackSetsCommand).build() {
    };
    __name(_ListStackSetsCommand, "ListStackSetsCommand");
    var ListStackSetsCommand = _ListStackSetsCommand;
    var _ListTypeRegistrationsCommand = class _ListTypeRegistrationsCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "ListTypeRegistrations", {}).n("CloudFormationClient", "ListTypeRegistrationsCommand").f(void 0, void 0).ser(se_ListTypeRegistrationsCommand).de(de_ListTypeRegistrationsCommand).build() {
    };
    __name(_ListTypeRegistrationsCommand, "ListTypeRegistrationsCommand");
    var ListTypeRegistrationsCommand = _ListTypeRegistrationsCommand;
    var _ListTypesCommand = class _ListTypesCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "ListTypes", {}).n("CloudFormationClient", "ListTypesCommand").f(void 0, void 0).ser(se_ListTypesCommand).de(de_ListTypesCommand).build() {
    };
    __name(_ListTypesCommand, "ListTypesCommand");
    var ListTypesCommand = _ListTypesCommand;
    var _ListTypeVersionsCommand = class _ListTypeVersionsCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "ListTypeVersions", {}).n("CloudFormationClient", "ListTypeVersionsCommand").f(void 0, void 0).ser(se_ListTypeVersionsCommand).de(de_ListTypeVersionsCommand).build() {
    };
    __name(_ListTypeVersionsCommand, "ListTypeVersionsCommand");
    var ListTypeVersionsCommand = _ListTypeVersionsCommand;
    var _PublishTypeCommand = class _PublishTypeCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "PublishType", {}).n("CloudFormationClient", "PublishTypeCommand").f(void 0, void 0).ser(se_PublishTypeCommand).de(de_PublishTypeCommand).build() {
    };
    __name(_PublishTypeCommand, "PublishTypeCommand");
    var PublishTypeCommand = _PublishTypeCommand;
    var _RecordHandlerProgressCommand = class _RecordHandlerProgressCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "RecordHandlerProgress", {}).n("CloudFormationClient", "RecordHandlerProgressCommand").f(void 0, void 0).ser(se_RecordHandlerProgressCommand).de(de_RecordHandlerProgressCommand).build() {
    };
    __name(_RecordHandlerProgressCommand, "RecordHandlerProgressCommand");
    var RecordHandlerProgressCommand = _RecordHandlerProgressCommand;
    var _RegisterPublisherCommand = class _RegisterPublisherCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "RegisterPublisher", {}).n("CloudFormationClient", "RegisterPublisherCommand").f(void 0, void 0).ser(se_RegisterPublisherCommand).de(de_RegisterPublisherCommand).build() {
    };
    __name(_RegisterPublisherCommand, "RegisterPublisherCommand");
    var RegisterPublisherCommand = _RegisterPublisherCommand;
    var _RegisterTypeCommand = class _RegisterTypeCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "RegisterType", {}).n("CloudFormationClient", "RegisterTypeCommand").f(void 0, void 0).ser(se_RegisterTypeCommand).de(de_RegisterTypeCommand).build() {
    };
    __name(_RegisterTypeCommand, "RegisterTypeCommand");
    var RegisterTypeCommand = _RegisterTypeCommand;
    var _RollbackStackCommand = class _RollbackStackCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "RollbackStack", {}).n("CloudFormationClient", "RollbackStackCommand").f(void 0, void 0).ser(se_RollbackStackCommand).de(de_RollbackStackCommand).build() {
    };
    __name(_RollbackStackCommand, "RollbackStackCommand");
    var RollbackStackCommand = _RollbackStackCommand;
    var _SetStackPolicyCommand = class _SetStackPolicyCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "SetStackPolicy", {}).n("CloudFormationClient", "SetStackPolicyCommand").f(void 0, void 0).ser(se_SetStackPolicyCommand).de(de_SetStackPolicyCommand).build() {
    };
    __name(_SetStackPolicyCommand, "SetStackPolicyCommand");
    var SetStackPolicyCommand = _SetStackPolicyCommand;
    var _SetTypeConfigurationCommand = class _SetTypeConfigurationCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "SetTypeConfiguration", {}).n("CloudFormationClient", "SetTypeConfigurationCommand").f(void 0, void 0).ser(se_SetTypeConfigurationCommand).de(de_SetTypeConfigurationCommand).build() {
    };
    __name(_SetTypeConfigurationCommand, "SetTypeConfigurationCommand");
    var SetTypeConfigurationCommand = _SetTypeConfigurationCommand;
    var _SetTypeDefaultVersionCommand = class _SetTypeDefaultVersionCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "SetTypeDefaultVersion", {}).n("CloudFormationClient", "SetTypeDefaultVersionCommand").f(void 0, void 0).ser(se_SetTypeDefaultVersionCommand).de(de_SetTypeDefaultVersionCommand).build() {
    };
    __name(_SetTypeDefaultVersionCommand, "SetTypeDefaultVersionCommand");
    var SetTypeDefaultVersionCommand = _SetTypeDefaultVersionCommand;
    var _SignalResourceCommand = class _SignalResourceCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "SignalResource", {}).n("CloudFormationClient", "SignalResourceCommand").f(void 0, void 0).ser(se_SignalResourceCommand).de(de_SignalResourceCommand).build() {
    };
    __name(_SignalResourceCommand, "SignalResourceCommand");
    var SignalResourceCommand = _SignalResourceCommand;
    var _StartResourceScanCommand = class _StartResourceScanCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "StartResourceScan", {}).n("CloudFormationClient", "StartResourceScanCommand").f(void 0, void 0).ser(se_StartResourceScanCommand).de(de_StartResourceScanCommand).build() {
    };
    __name(_StartResourceScanCommand, "StartResourceScanCommand");
    var StartResourceScanCommand = _StartResourceScanCommand;
    var _StopStackSetOperationCommand = class _StopStackSetOperationCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "StopStackSetOperation", {}).n("CloudFormationClient", "StopStackSetOperationCommand").f(void 0, void 0).ser(se_StopStackSetOperationCommand).de(de_StopStackSetOperationCommand).build() {
    };
    __name(_StopStackSetOperationCommand, "StopStackSetOperationCommand");
    var StopStackSetOperationCommand = _StopStackSetOperationCommand;
    var _TestTypeCommand = class _TestTypeCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "TestType", {}).n("CloudFormationClient", "TestTypeCommand").f(void 0, void 0).ser(se_TestTypeCommand).de(de_TestTypeCommand).build() {
    };
    __name(_TestTypeCommand, "TestTypeCommand");
    var TestTypeCommand = _TestTypeCommand;
    var _UpdateGeneratedTemplateCommand = class _UpdateGeneratedTemplateCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "UpdateGeneratedTemplate", {}).n("CloudFormationClient", "UpdateGeneratedTemplateCommand").f(void 0, void 0).ser(se_UpdateGeneratedTemplateCommand).de(de_UpdateGeneratedTemplateCommand).build() {
    };
    __name(_UpdateGeneratedTemplateCommand, "UpdateGeneratedTemplateCommand");
    var UpdateGeneratedTemplateCommand = _UpdateGeneratedTemplateCommand;
    var _UpdateStackCommand = class _UpdateStackCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "UpdateStack", {}).n("CloudFormationClient", "UpdateStackCommand").f(void 0, void 0).ser(se_UpdateStackCommand).de(de_UpdateStackCommand).build() {
    };
    __name(_UpdateStackCommand, "UpdateStackCommand");
    var UpdateStackCommand = _UpdateStackCommand;
    var _UpdateStackInstancesCommand = class _UpdateStackInstancesCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "UpdateStackInstances", {}).n("CloudFormationClient", "UpdateStackInstancesCommand").f(void 0, void 0).ser(se_UpdateStackInstancesCommand).de(de_UpdateStackInstancesCommand).build() {
    };
    __name(_UpdateStackInstancesCommand, "UpdateStackInstancesCommand");
    var UpdateStackInstancesCommand = _UpdateStackInstancesCommand;
    var _UpdateStackSetCommand = class _UpdateStackSetCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "UpdateStackSet", {}).n("CloudFormationClient", "UpdateStackSetCommand").f(void 0, void 0).ser(se_UpdateStackSetCommand).de(de_UpdateStackSetCommand).build() {
    };
    __name(_UpdateStackSetCommand, "UpdateStackSetCommand");
    var UpdateStackSetCommand = _UpdateStackSetCommand;
    var _UpdateTerminationProtectionCommand = class _UpdateTerminationProtectionCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "UpdateTerminationProtection", {}).n("CloudFormationClient", "UpdateTerminationProtectionCommand").f(void 0, void 0).ser(se_UpdateTerminationProtectionCommand).de(de_UpdateTerminationProtectionCommand).build() {
    };
    __name(_UpdateTerminationProtectionCommand, "UpdateTerminationProtectionCommand");
    var UpdateTerminationProtectionCommand = _UpdateTerminationProtectionCommand;
    var _ValidateTemplateCommand = class _ValidateTemplateCommand extends import_smithy_client4.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
      return [
        (0, import_middleware_serde2.getSerdePlugin)(config, this.serialize, this.deserialize),
        (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
      ];
    }).s("CloudFormation", "ValidateTemplate", {}).n("CloudFormationClient", "ValidateTemplateCommand").f(void 0, void 0).ser(se_ValidateTemplateCommand).de(de_ValidateTemplateCommand).build() {
    };
    __name(_ValidateTemplateCommand, "ValidateTemplateCommand");
    var ValidateTemplateCommand = _ValidateTemplateCommand;
    var commands = {
      ActivateOrganizationsAccessCommand,
      ActivateTypeCommand,
      BatchDescribeTypeConfigurationsCommand,
      CancelUpdateStackCommand,
      ContinueUpdateRollbackCommand,
      CreateChangeSetCommand,
      CreateGeneratedTemplateCommand,
      CreateStackCommand,
      CreateStackInstancesCommand,
      CreateStackSetCommand,
      DeactivateOrganizationsAccessCommand,
      DeactivateTypeCommand,
      DeleteChangeSetCommand,
      DeleteGeneratedTemplateCommand,
      DeleteStackCommand,
      DeleteStackInstancesCommand,
      DeleteStackSetCommand,
      DeregisterTypeCommand,
      DescribeAccountLimitsCommand,
      DescribeChangeSetCommand,
      DescribeChangeSetHooksCommand,
      DescribeGeneratedTemplateCommand,
      DescribeOrganizationsAccessCommand,
      DescribePublisherCommand,
      DescribeResourceScanCommand,
      DescribeStackDriftDetectionStatusCommand,
      DescribeStackEventsCommand,
      DescribeStackInstanceCommand,
      DescribeStackResourceCommand,
      DescribeStackResourceDriftsCommand,
      DescribeStackResourcesCommand,
      DescribeStacksCommand: DescribeStacksCommand2,
      DescribeStackSetCommand,
      DescribeStackSetOperationCommand,
      DescribeTypeCommand,
      DescribeTypeRegistrationCommand,
      DetectStackDriftCommand,
      DetectStackResourceDriftCommand,
      DetectStackSetDriftCommand,
      EstimateTemplateCostCommand,
      ExecuteChangeSetCommand,
      GetGeneratedTemplateCommand,
      GetStackPolicyCommand,
      GetTemplateCommand,
      GetTemplateSummaryCommand,
      ImportStacksToStackSetCommand,
      ListChangeSetsCommand,
      ListExportsCommand,
      ListGeneratedTemplatesCommand,
      ListHookResultsCommand,
      ListImportsCommand,
      ListResourceScanRelatedResourcesCommand,
      ListResourceScanResourcesCommand,
      ListResourceScansCommand,
      ListStackInstanceResourceDriftsCommand,
      ListStackInstancesCommand,
      ListStackResourcesCommand,
      ListStacksCommand,
      ListStackSetAutoDeploymentTargetsCommand,
      ListStackSetOperationResultsCommand,
      ListStackSetOperationsCommand,
      ListStackSetsCommand,
      ListTypeRegistrationsCommand,
      ListTypesCommand,
      ListTypeVersionsCommand,
      PublishTypeCommand,
      RecordHandlerProgressCommand,
      RegisterPublisherCommand,
      RegisterTypeCommand,
      RollbackStackCommand,
      SetStackPolicyCommand,
      SetTypeConfigurationCommand,
      SetTypeDefaultVersionCommand,
      SignalResourceCommand,
      StartResourceScanCommand,
      StopStackSetOperationCommand,
      TestTypeCommand,
      UpdateGeneratedTemplateCommand,
      UpdateStackCommand,
      UpdateStackInstancesCommand,
      UpdateStackSetCommand,
      UpdateTerminationProtectionCommand,
      ValidateTemplateCommand
    };
    var _CloudFormation = class _CloudFormation extends CloudFormationClient2 {
    };
    __name(_CloudFormation, "CloudFormation");
    var CloudFormation = _CloudFormation;
    (0, import_smithy_client4.createAggregatedClient)(commands, CloudFormation);
    var paginateDescribeAccountLimits = (0, import_core3.createPaginator)(CloudFormationClient2, DescribeAccountLimitsCommand, "NextToken", "NextToken", "");
    var paginateDescribeStackEvents = (0, import_core3.createPaginator)(CloudFormationClient2, DescribeStackEventsCommand, "NextToken", "NextToken", "");
    var paginateDescribeStackResourceDrifts = (0, import_core3.createPaginator)(CloudFormationClient2, DescribeStackResourceDriftsCommand, "NextToken", "NextToken", "MaxResults");
    var paginateDescribeStacks = (0, import_core3.createPaginator)(CloudFormationClient2, DescribeStacksCommand2, "NextToken", "NextToken", "");
    var paginateListChangeSets = (0, import_core3.createPaginator)(CloudFormationClient2, ListChangeSetsCommand, "NextToken", "NextToken", "");
    var paginateListExports = (0, import_core3.createPaginator)(CloudFormationClient2, ListExportsCommand, "NextToken", "NextToken", "");
    var paginateListGeneratedTemplates = (0, import_core3.createPaginator)(CloudFormationClient2, ListGeneratedTemplatesCommand, "NextToken", "NextToken", "MaxResults");
    var paginateListImports = (0, import_core3.createPaginator)(CloudFormationClient2, ListImportsCommand, "NextToken", "NextToken", "");
    var paginateListResourceScanRelatedResources = (0, import_core3.createPaginator)(CloudFormationClient2, ListResourceScanRelatedResourcesCommand, "NextToken", "NextToken", "MaxResults");
    var paginateListResourceScanResources = (0, import_core3.createPaginator)(CloudFormationClient2, ListResourceScanResourcesCommand, "NextToken", "NextToken", "MaxResults");
    var paginateListResourceScans = (0, import_core3.createPaginator)(CloudFormationClient2, ListResourceScansCommand, "NextToken", "NextToken", "MaxResults");
    var paginateListStackInstances = (0, import_core3.createPaginator)(CloudFormationClient2, ListStackInstancesCommand, "NextToken", "NextToken", "MaxResults");
    var paginateListStackResources = (0, import_core3.createPaginator)(CloudFormationClient2, ListStackResourcesCommand, "NextToken", "NextToken", "");
    var paginateListStackSetOperationResults = (0, import_core3.createPaginator)(CloudFormationClient2, ListStackSetOperationResultsCommand, "NextToken", "NextToken", "MaxResults");
    var paginateListStackSetOperations = (0, import_core3.createPaginator)(CloudFormationClient2, ListStackSetOperationsCommand, "NextToken", "NextToken", "MaxResults");
    var paginateListStackSets = (0, import_core3.createPaginator)(CloudFormationClient2, ListStackSetsCommand, "NextToken", "NextToken", "MaxResults");
    var paginateListStacks = (0, import_core3.createPaginator)(CloudFormationClient2, ListStacksCommand, "NextToken", "NextToken", "");
    var paginateListTypeRegistrations = (0, import_core3.createPaginator)(CloudFormationClient2, ListTypeRegistrationsCommand, "NextToken", "NextToken", "MaxResults");
    var paginateListTypeVersions = (0, import_core3.createPaginator)(CloudFormationClient2, ListTypeVersionsCommand, "NextToken", "NextToken", "MaxResults");
    var paginateListTypes = (0, import_core3.createPaginator)(CloudFormationClient2, ListTypesCommand, "NextToken", "NextToken", "MaxResults");
    var import_util_waiter = require_dist_cjs70();
    var checkState = /* @__PURE__ */ __name(async (client, input) => {
      let reason;
      try {
        const result = await client.send(new DescribeChangeSetCommand(input));
        reason = result;
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            return result.Status;
          }, "returnComparator");
          if (returnComparator() === "CREATE_COMPLETE") {
            return { state: import_util_waiter.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            return result.Status;
          }, "returnComparator");
          if (returnComparator() === "FAILED") {
            return { state: import_util_waiter.WaiterState.FAILURE, reason };
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ValidationError") {
          return { state: import_util_waiter.WaiterState.FAILURE, reason };
        }
      }
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }, "checkState");
    var waitForChangeSetCreateComplete = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    }, "waitForChangeSetCreateComplete");
    var waitUntilChangeSetCreateComplete = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, import_util_waiter.checkExceptions)(result);
    }, "waitUntilChangeSetCreateComplete");
    var checkState2 = /* @__PURE__ */ __name(async (client, input) => {
      let reason;
      try {
        const result = await client.send(new DescribeStacksCommand2(input));
        reason = result;
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          }, "returnComparator");
          let allStringEq_5 = returnComparator().length > 0;
          for (const element_4 of returnComparator()) {
            allStringEq_5 = allStringEq_5 && element_4 == "CREATE_COMPLETE";
          }
          if (allStringEq_5) {
            return { state: import_util_waiter.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          }, "returnComparator");
          let allStringEq_5 = returnComparator().length > 0;
          for (const element_4 of returnComparator()) {
            allStringEq_5 = allStringEq_5 && element_4 == "UPDATE_COMPLETE";
          }
          if (allStringEq_5) {
            return { state: import_util_waiter.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          }, "returnComparator");
          let allStringEq_5 = returnComparator().length > 0;
          for (const element_4 of returnComparator()) {
            allStringEq_5 = allStringEq_5 && element_4 == "UPDATE_IN_PROGRESS";
          }
          if (allStringEq_5) {
            return { state: import_util_waiter.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          }, "returnComparator");
          let allStringEq_5 = returnComparator().length > 0;
          for (const element_4 of returnComparator()) {
            allStringEq_5 = allStringEq_5 && element_4 == "UPDATE_COMPLETE_CLEANUP_IN_PROGRESS";
          }
          if (allStringEq_5) {
            return { state: import_util_waiter.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          }, "returnComparator");
          let allStringEq_5 = returnComparator().length > 0;
          for (const element_4 of returnComparator()) {
            allStringEq_5 = allStringEq_5 && element_4 == "UPDATE_FAILED";
          }
          if (allStringEq_5) {
            return { state: import_util_waiter.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          }, "returnComparator");
          let allStringEq_5 = returnComparator().length > 0;
          for (const element_4 of returnComparator()) {
            allStringEq_5 = allStringEq_5 && element_4 == "UPDATE_ROLLBACK_IN_PROGRESS";
          }
          if (allStringEq_5) {
            return { state: import_util_waiter.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          }, "returnComparator");
          let allStringEq_5 = returnComparator().length > 0;
          for (const element_4 of returnComparator()) {
            allStringEq_5 = allStringEq_5 && element_4 == "UPDATE_ROLLBACK_FAILED";
          }
          if (allStringEq_5) {
            return { state: import_util_waiter.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          }, "returnComparator");
          let allStringEq_5 = returnComparator().length > 0;
          for (const element_4 of returnComparator()) {
            allStringEq_5 = allStringEq_5 && element_4 == "UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS";
          }
          if (allStringEq_5) {
            return { state: import_util_waiter.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          }, "returnComparator");
          let allStringEq_5 = returnComparator().length > 0;
          for (const element_4 of returnComparator()) {
            allStringEq_5 = allStringEq_5 && element_4 == "UPDATE_ROLLBACK_COMPLETE";
          }
          if (allStringEq_5) {
            return { state: import_util_waiter.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          }, "returnComparator");
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "CREATE_FAILED") {
              return { state: import_util_waiter.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          }, "returnComparator");
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "DELETE_COMPLETE") {
              return { state: import_util_waiter.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          }, "returnComparator");
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "DELETE_FAILED") {
              return { state: import_util_waiter.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          }, "returnComparator");
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "ROLLBACK_FAILED") {
              return { state: import_util_waiter.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          }, "returnComparator");
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "ROLLBACK_COMPLETE") {
              return { state: import_util_waiter.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ValidationError") {
          return { state: import_util_waiter.WaiterState.FAILURE, reason };
        }
      }
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }, "checkState");
    var waitForStackCreateComplete = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState2);
    }, "waitForStackCreateComplete");
    var waitUntilStackCreateComplete = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState2);
      return (0, import_util_waiter.checkExceptions)(result);
    }, "waitUntilStackCreateComplete");
    var checkState3 = /* @__PURE__ */ __name(async (client, input) => {
      let reason;
      try {
        const result = await client.send(new DescribeStacksCommand2(input));
        reason = result;
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          }, "returnComparator");
          let allStringEq_5 = returnComparator().length > 0;
          for (const element_4 of returnComparator()) {
            allStringEq_5 = allStringEq_5 && element_4 == "DELETE_COMPLETE";
          }
          if (allStringEq_5) {
            return { state: import_util_waiter.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          }, "returnComparator");
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "DELETE_FAILED") {
              return { state: import_util_waiter.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          }, "returnComparator");
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "CREATE_FAILED") {
              return { state: import_util_waiter.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          }, "returnComparator");
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "ROLLBACK_FAILED") {
              return { state: import_util_waiter.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          }, "returnComparator");
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "UPDATE_ROLLBACK_IN_PROGRESS") {
              return { state: import_util_waiter.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          }, "returnComparator");
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "UPDATE_ROLLBACK_FAILED") {
              return { state: import_util_waiter.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          }, "returnComparator");
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "UPDATE_ROLLBACK_COMPLETE") {
              return { state: import_util_waiter.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          }, "returnComparator");
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "UPDATE_COMPLETE") {
              return { state: import_util_waiter.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ValidationError") {
          return { state: import_util_waiter.WaiterState.SUCCESS, reason };
        }
      }
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }, "checkState");
    var waitForStackDeleteComplete = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState3);
    }, "waitForStackDeleteComplete");
    var waitUntilStackDeleteComplete = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState3);
      return (0, import_util_waiter.checkExceptions)(result);
    }, "waitUntilStackDeleteComplete");
    var checkState4 = /* @__PURE__ */ __name(async (client, input) => {
      let reason;
      try {
        const result = await client.send(new DescribeStacksCommand2(input));
        reason = result;
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ValidationError") {
          return { state: import_util_waiter.WaiterState.RETRY, reason };
        }
      }
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }, "checkState");
    var waitForStackExists = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState4);
    }, "waitForStackExists");
    var waitUntilStackExists = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState4);
      return (0, import_util_waiter.checkExceptions)(result);
    }, "waitUntilStackExists");
    var checkState5 = /* @__PURE__ */ __name(async (client, input) => {
      let reason;
      try {
        const result = await client.send(new DescribeStacksCommand2(input));
        reason = result;
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          }, "returnComparator");
          let allStringEq_5 = returnComparator().length > 0;
          for (const element_4 of returnComparator()) {
            allStringEq_5 = allStringEq_5 && element_4 == "IMPORT_COMPLETE";
          }
          if (allStringEq_5) {
            return { state: import_util_waiter.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          }, "returnComparator");
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "ROLLBACK_COMPLETE") {
              return { state: import_util_waiter.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          }, "returnComparator");
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "ROLLBACK_FAILED") {
              return { state: import_util_waiter.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          }, "returnComparator");
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "IMPORT_ROLLBACK_IN_PROGRESS") {
              return { state: import_util_waiter.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          }, "returnComparator");
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "IMPORT_ROLLBACK_FAILED") {
              return { state: import_util_waiter.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          }, "returnComparator");
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "IMPORT_ROLLBACK_COMPLETE") {
              return { state: import_util_waiter.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ValidationError") {
          return { state: import_util_waiter.WaiterState.FAILURE, reason };
        }
      }
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }, "checkState");
    var waitForStackImportComplete = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState5);
    }, "waitForStackImportComplete");
    var waitUntilStackImportComplete = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState5);
      return (0, import_util_waiter.checkExceptions)(result);
    }, "waitUntilStackImportComplete");
    var checkState6 = /* @__PURE__ */ __name(async (client, input) => {
      let reason;
      try {
        const result = await client.send(new DescribeStacksCommand2(input));
        reason = result;
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          }, "returnComparator");
          let allStringEq_5 = returnComparator().length > 0;
          for (const element_4 of returnComparator()) {
            allStringEq_5 = allStringEq_5 && element_4 == "UPDATE_ROLLBACK_COMPLETE";
          }
          if (allStringEq_5) {
            return { state: import_util_waiter.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          }, "returnComparator");
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "UPDATE_FAILED") {
              return { state: import_util_waiter.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          }, "returnComparator");
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "UPDATE_ROLLBACK_FAILED") {
              return { state: import_util_waiter.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          }, "returnComparator");
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "DELETE_FAILED") {
              return { state: import_util_waiter.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ValidationError") {
          return { state: import_util_waiter.WaiterState.FAILURE, reason };
        }
      }
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }, "checkState");
    var waitForStackRollbackComplete = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState6);
    }, "waitForStackRollbackComplete");
    var waitUntilStackRollbackComplete = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState6);
      return (0, import_util_waiter.checkExceptions)(result);
    }, "waitUntilStackRollbackComplete");
    var checkState7 = /* @__PURE__ */ __name(async (client, input) => {
      let reason;
      try {
        const result = await client.send(new DescribeStacksCommand2(input));
        reason = result;
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          }, "returnComparator");
          let allStringEq_5 = returnComparator().length > 0;
          for (const element_4 of returnComparator()) {
            allStringEq_5 = allStringEq_5 && element_4 == "UPDATE_COMPLETE";
          }
          if (allStringEq_5) {
            return { state: import_util_waiter.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          }, "returnComparator");
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "UPDATE_FAILED") {
              return { state: import_util_waiter.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          }, "returnComparator");
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "UPDATE_ROLLBACK_FAILED") {
              return { state: import_util_waiter.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          }, "returnComparator");
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "UPDATE_ROLLBACK_COMPLETE") {
              return { state: import_util_waiter.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ValidationError") {
          return { state: import_util_waiter.WaiterState.FAILURE, reason };
        }
      }
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }, "checkState");
    var waitForStackUpdateComplete = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState7);
    }, "waitForStackUpdateComplete");
    var waitUntilStackUpdateComplete = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState7);
      return (0, import_util_waiter.checkExceptions)(result);
    }, "waitUntilStackUpdateComplete");
    var checkState8 = /* @__PURE__ */ __name(async (client, input) => {
      let reason;
      try {
        const result = await client.send(new DescribeTypeRegistrationCommand(input));
        reason = result;
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            return result.ProgressStatus;
          }, "returnComparator");
          if (returnComparator() === "COMPLETE") {
            return { state: import_util_waiter.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = /* @__PURE__ */ __name(() => {
            return result.ProgressStatus;
          }, "returnComparator");
          if (returnComparator() === "FAILED") {
            return { state: import_util_waiter.WaiterState.FAILURE, reason };
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
      }
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }, "checkState");
    var waitForTypeRegistrationComplete = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState8);
    }, "waitForTypeRegistrationComplete");
    var waitUntilTypeRegistrationComplete = /* @__PURE__ */ __name(async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState8);
      return (0, import_util_waiter.checkExceptions)(result);
    }, "waitUntilTypeRegistrationComplete");
  }
});

// support/bootstrap-metadata-function/index.ts
var import_client_s3 = __toESM(require_dist_cjs71(), 1);
var import_client_iot_data_plane = __toESM(require_dist_cjs72(), 1);
var import_client_cloudformation = __toESM(require_dist_cjs73(), 1);
var logger = { ...console, trace: () => {
}, debug: () => {
} };
var s3 = new import_client_s3.S3Client({ logger });
var iot = new import_client_iot_data_plane.IoTDataPlaneClient({ logger });
var cf = new import_client_cloudformation.CloudFormationClient({ logger });
var BUCKET_NAME = process.env.BUCKET_NAME;
async function handler(event) {
  console.log("EventBridge event details:", {
    source: event.source,
    detailType: event["detail-type"]
  });
  if (event.source !== "aws.cloudformation" || event["detail-type"] !== "CloudFormation Stack Status Change") {
    return;
  }
  const stackStatus = event.detail["status-details"]?.status;
  if (!stackStatus.endsWith("_COMPLETE")) {
    return;
  }
  const stack = event.detail["stack-id"];
  console.log("Stack id:", stack);
  const res = await getMetadata(stack);
  if (!res) {
    console.log("Stack metadata resource not found");
    return;
  }
  const { app, stage, metadata } = res;
  const stackName = stack.split("/")[1];
  if (stackStatus === "DELETE_COMPLETE") {
    await deleteMetadata(stackName, app, stage);
    await sendIotEvent(app, stage, `stacks.metadata.deleted`);
  } else {
    await saveMetadata(stackName, app, stage, metadata);
    await sendIotEvent(app, stage, `stacks.metadata.updated`);
  }
}
async function sendIotEvent(app, stage, type) {
  await callAWS(
    () => iot.send(
      new import_client_iot_data_plane.PublishCommand({
        topic: `/sst/${app}/${stage}/events`,
        payload: Buffer.from(JSON.stringify({ type }))
      })
    )
  );
}
async function saveMetadata(stack, app, stage, metadata) {
  await callAWS(
    () => s3.send(
      new import_client_s3.PutObjectCommand({
        Bucket: BUCKET_NAME,
        Key: `stackMetadata/app.${app}/stage.${stage}/stack.${stack}.json`,
        Body: JSON.stringify(metadata)
      })
    )
  );
}
async function deleteMetadata(stackName, app, stage) {
  try {
    await callAWS(
      () => s3.send(
        new import_client_s3.DeleteObjectCommand({
          Bucket: BUCKET_NAME,
          Key: `stackMetadata/app.${app}/stage.${stage}/stack.${stackName}.json`
        })
      )
    );
  } catch (e) {
    if (e.code === "NoSuchBucket") {
      console.log(e);
      return;
    }
    throw e;
  }
}
async function getMetadata(stackName) {
  const ret = await callAWS(
    () => cf.send(
      new import_client_cloudformation.DescribeStacksCommand({
        StackName: stackName
      })
    )
  );
  const metadataOutput = ret.Stacks?.at(0)?.Outputs?.find(
    (o) => o.OutputKey === "SSTMetadata"
  )?.OutputValue;
  if (!metadataOutput) {
    return null;
  }
  return JSON.parse(metadataOutput);
}
function callAWS(cb) {
  try {
    return cb();
  } catch (e) {
    if (e.code === "ThrottlingException" && e.message === "Rate exceeded" || e.code === "Throttling" && e.message === "Rate exceeded" || e.code === "TooManyRequestsException" && e.message === "Too Many Requests" || e.code === "TooManyUpdates" || e.code === "OperationAbortedException" || e.code === "TimeoutError" || e.code === "NetworkingError" || e.code === "ResourceConflictException") {
      return callAWS(cb);
    }
    throw e;
  }
}
export {
  handler
};
